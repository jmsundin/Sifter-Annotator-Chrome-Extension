/*! For license information please see noodl.deploy.js.LICENSE.txt */
(() => {
  var t = {
      5855: (t, e, n) => {
        "use strict";
        var i = n(274),
          o = n(9840),
          r = n(8620),
          s = n(8932),
          a = n(5303),
          l = n(8391),
          u = n(9954),
          p = n(2858),
          c = n(3011),
          d = n(4348),
          h = n(2325);
        const f = n(7187).EventEmitter,
          g = n(112);
        function m(t) {
          if (
            (((t = t || {}).platform = t.platform || {}),
            (m.instance = this),
            (this.noodlModules = []),
            (this.eventEmitter = new f()),
            (this.updateScheduled = !1),
            (this.rootComponent = null),
            (this._currentLoadedData = null),
            (this.isWaitingForExport = !0),
            (this.graphModel = new a()),
            (this.errorHandlers = []),
            (this.frameNumber = 0),
            (this.dontCreateRootComponent = !!t.dontCreateRootComponent),
            (this.runningInEditor = !t.runDeployed),
            (this.platform = {
              requestUpdate: t.platform.requestUpdate,
              getCurrentTime: t.platform.getCurrentTime,
              webSocketOptions: t.platform.webSocketOptions,
              objectToString: t.platform.objectToString,
            }),
            !t.platform.requestUpdate)
          )
            throw new Error("platform.requestUpdate must be set");
          if (!t.platform.getCurrentTime)
            throw new Error("platform.getCurrentTime must be set");
          var e;
          (this.editorConnection = new o({ platform: t.platform })),
            (this.context = new i({
              runningInEditor: !t.runDeployed,
              editorConnection: this.editorConnection,
              platform: this.platform,
              graphModel: this.graphModel,
            })),
            this.context.eventEmitter.on(
              "scheduleUpdate",
              this.scheduleUpdate.bind(this)
            ),
            t.runDeployed || this._setupEditorCommunication(t),
            this.registerGraphModelListeners(),
            (e = this),
            [n(285), n(8626)].forEach((t) => e.registerNode(t));
        }
        (m.prototype.prefetchBundles = async function (t, e) {
          await g(e, t, async (t) => {
            await this.context.fetchComponentBundle(t);
          });
        }),
          (m.prototype._setupEditorCommunication = function (t) {
            function e(t, n) {
              if (null == t || null == n) return t === n;
              if (t === n) return !0;
              if (Array.isArray(t) && t.length !== n.length) return !1;
              if (!(t instanceof Object)) return !1;
              if (!(n instanceof Object)) return !1;
              var i = Object.keys(t);
              return (
                Object.keys(n).every(function (t) {
                  return -1 !== i.indexOf(t);
                }) &&
                i.every(function (i) {
                  return e(t[i], n[i]);
                })
              );
            }
            this.editorConnection.on("exportDataFull", async (t) => {
              if (!1 !== this.graphModel.isEmpty()) {
                if (
                  ((this.isWaitingForExport = !1),
                  !1 === e(this._currentLoadedData, t))
                ) {
                  if (this.projectPatchGenerators) {
                    const e = h.collectPatches(t, this.projectPatchGenerators);
                    for (const t in e) this.editorConnection.sendPatches(e[t]);
                  }
                  if ((await this.setData(t), t.componentIndex)) {
                    const e = Object.keys(t.componentIndex);
                    await this.prefetchBundles(e, 2);
                  }
                  this.graphModel.emit("editorImportComplete");
                }
              } else this.reload();
            }),
              this.editorConnection.on("reload", this.reload.bind(this)),
              this.editorConnection.on("inspectStart", () => {}),
              this.editorConnection.on("inspectEnd", () => {}),
              this.editorConnection.on(
                "modelUpdate",
                this.onModelUpdateReceived.bind(this)
              ),
              this.editorConnection.on(
                "metadataUpdate",
                this.onMetaDataUpdateReceived.bind(this)
              ),
              this.editorConnection.on("connected", () => {
                this.sendNodeLibrary();
              });
          }),
          (m.prototype.setDebugInspectorsEnabled = function (t) {
            this.context.setDebugInspectorsEnabled(t);
          }),
          (m.prototype.setProjectPatchGenerators = function (t) {
            this.projectPatchGenerators = t;
          }),
          (m.prototype.registerModule = function (t) {
            if (t.nodes)
              for (let e of t.nodes)
                e.node || (e = { node: e }),
                  (e.node.module = t.name || "Unknown Module"),
                  this.registerNode(e);
            this.noodlModules.push(t);
          }),
          (m.prototype.registerGraphModelListeners = function () {
            var t = this;
            this.graphModel.on(
              "componentAdded",
              function (e) {
                t.context.registerComponentModel(e);
              },
              this
            ),
              this.graphModel.on(
                "componentRemoved",
                function (e) {
                  t.context.deregisterComponentModel(e);
                },
                this
              );
          }),
          (m.prototype.reload = function () {
            location.reload();
          }),
          (m.prototype.registerNode = function (t) {
            if (t.node) {
              const e = l.defineNode(t.node);
              this.context.nodeRegister.register(e),
                e.setupNumberedInputDynamicPorts &&
                  e.setupNumberedInputDynamicPorts(
                    this.context,
                    this.graphModel
                  );
            } else this.context.nodeRegister.register(t);
            t.setup && t.setup(this.context, this.graphModel);
          }),
          (m.prototype._setRootComponent = async function (t) {
            (this.rootComponent && this.rootComponent.name === t) ||
              (this.rootComponent &&
                (this.rootComponent.model &&
                  this.rootComponent.model.removeListenersWithRef(this),
                (this.rootComponent = void 0)),
              t &&
                ((this.rootComponent =
                  await this.context.createComponentInstanceNode(
                    t,
                    "rootComponent"
                  )),
                this.rootComponent.componentModel.on(
                  "rootAdded",
                  () => this.eventEmitter.emit("rootComponentUpdated"),
                  this
                ),
                this.rootComponent.componentModel.on(
                  "rootRemoved",
                  () => this.eventEmitter.emit("rootComponentUpdated"),
                  this
                ),
                this.context.setRootComponent(this.rootComponent)),
              this.eventEmitter.emit("rootComponentUpdated"));
          }),
          (m.prototype.setData = async function (t) {
            (this._currentLoadedData = t),
              await this.graphModel.importEditorData(t);
            for (const t of this.noodlModules)
              "function" == typeof t.setup && t.setup.apply(t);
            !0 !== this.dontCreateRootComponent &&
              (await this._setRootComponent(this.graphModel.rootComponent),
              this.graphModel.on("rootComponentNameUpdated", (t) => {
                this._setRootComponent(t);
              }),
              this.graphModel.on("componentRemoved", (t) => {
                this.rootComponent &&
                  this.rootComponent.name === t.name &&
                  this._setRootComponent(null);
              }),
              this.graphModel.on("componentAdded", (t) => {
                this.rootComponent ||
                  this.graphModel.rootComponent !== t.name ||
                  this._setRootComponent(t.name);
              })),
              this.scheduleUpdate();
          }),
          (m.prototype.scheduleUpdate = function () {
            this.updateScheduled ||
              ((this.updateScheduled = !0),
              this.platform.requestUpdate(m.prototype._doUpdate.bind(this)));
          }),
          (m.prototype._doUpdate = function () {
            (this.updateScheduled = !1),
              (this.context.currentFrameTime = this.platform.getCurrentTime()),
              this.context.eventEmitter.emit("frameStart"),
              this.context.update(),
              this.context.eventEmitter.emit("frameEnd"),
              this.frameNumber++;
          }),
          (m.prototype.setProjectSettings = function (t) {
            this.projectSettings = t;
          }),
          (m.prototype.getNodeLibrary = function () {
            var t = s.generateProjectSettings(
              this.graphModel.getSettings(),
              this.noodlModules
            );
            this.projectSettings &&
              (this.projectSettings.ports &&
                (t.ports = t.ports.concat(this.projectSettings.ports)),
              this.projectSettings.dynamicports &&
                (t.dynamicports = t.ports.concat(
                  this.projectSettings.dynamicports
                )));
            var e = r(this.context.nodeRegister);
            return (e.projectsettings = t), JSON.stringify(e, null, 3);
          }),
          (m.prototype.sendNodeLibrary = function () {
            var t = this.getNodeLibrary();
            this.lastSentNodeLibrary !== t &&
              ((this.lastSentNodeLibrary = t),
              this.editorConnection.sendNodeLibrary(this.getNodeLibrary()));
          }),
          (m.prototype.connectToEditor = function (t) {
            this.editorConnection.connect(t);
          }),
          (m.prototype.onMetaDataUpdateReceived = function (t) {
            this.graphModel.isEmpty() ||
              EditorMetaDataEventsHandler.handleEvent(
                this.context,
                this.graphModel,
                t
              );
          }),
          (m.prototype.onModelUpdateReceived = async function (t) {
            this.isWaitingForExport ||
              ("projectInstanceChanged" === t.type
                ? this.reload()
                : !1 === this.graphModel.isEmpty() &&
                  (await p.handleEvent(this.context, this.graphModel, t)));
          }),
          (m.prototype.addErrorHandler = function (t) {
            this.errorHandlers.push(t);
          }),
          (m.prototype.reportError = function (t) {
            this.errorHandlers.forEach(function (e) {
              e(t);
            });
          }),
          (m.prototype.getProjectSettings = function () {
            return this.graphModel.getSettings();
          }),
          (m.prototype.getMetaData = function (t) {
            return this.graphModel.getMetaData(t);
          }),
          (m.Services = c),
          (m.Node = u),
          (m.NodeDefinition = l),
          (m.EdgeTriggeredInput = d),
          (t.exports = m);
      },
      112: (t) => {
        t.exports = async function (t, e, n) {
          const i = [],
            o = [];
          for (const r of e) {
            const s = Promise.resolve().then(() => n(r, e));
            if ((i.push(s), t <= e.length)) {
              const e = s.then(() => o.splice(o.indexOf(e), 1));
              o.push(e), o.length >= t && (await Promise.race(o));
            }
          }
          return Promise.all(i);
        };
      },
      4348: (t) => {
        "use strict";
        t.exports = {
          createSetter: function (t) {
            var e = !1;
            return function (n) {
              (n = !!n) && !1 === e && t.valueChangedToTrue.call(this), (e = n);
            };
          },
        };
      },
      9840: (t, e, n) => {
        "use strict";
        var i = n(2451),
          o = n(3011),
          r = n(7320);
        function s(t) {
          var e = t || {};
          i.call(this),
            (this.platform = e.platform),
            (this.ws = (e.platform && e.platform.webSocketClass) || WebSocket),
            (this.wsOptions =
              (e.platform && e.platform.webSocketOptions) || void 0),
            (this.reconnectOnClose = !0),
            (this.enableDebugger = !1),
            (this.lastSendTimestamp = 0),
            (this.sendQueue = []),
            (this.sendTimer = void 0);
        }
        (s.prototype = Object.create(i.prototype)),
          (s.prototype.constructor = s),
          (s.prototype.isRunningLocally = function () {
            return (
              "undefined" != typeof document &&
              ("localhost" === document.location.hostname ||
                "127.0.0.1" === document.location.hostname)
            );
          }),
          (s.prototype.connect = function (t) {
            this.socket = this.wsOptions
              ? new this.ws(t, this.wsOptions)
              : new this.ws(t);
            var e = this;
            this.socket.addEventListener("open", function () {
              (e.clientId = r()),
                e.socket.send(
                  JSON.stringify({
                    cmd: "register",
                    type: "viewer",
                    clientId: e.clientId,
                  })
                ),
                e.emit("connected");
            }),
              this.socket.addEventListener("close", function (n) {
                e.reconnectOnClose && e.reconnect(t),
                  console.log("Editor connection closed", n.code, n.reason),
                  e.emit("connectionClosed");
              }),
              this.socket.addEventListener("error", function (t) {
                console.log("Editor connection error, trying to reconnect");
              }),
              this.socket.addEventListener("message", async (t) => {
                const n =
                    "string" == typeof t.data ? t.data : await t.data.text(),
                  i = JSON.parse(n);
                let r;
                "registered" === i.cmd ||
                  ("export" === i.cmd
                    ? ((r = JSON.parse(i.content)),
                      "full" === i.type && e.emit("exportDataFull", r))
                    : "hoverStart" === i.cmd
                    ? e.emit("hoverStart", i.content.id)
                    : "hoverEnd" === i.cmd
                    ? e.emit("hoverEnd", i.content.id)
                    : "refresh" === i.cmd
                    ? e.emit("reload")
                    : "inspectStart" === i.cmd
                    ? e.emit("inspectStart")
                    : "inspectEnd" === i.cmd
                    ? e.emit("inspectEnd")
                    : "debugInspectors" === i.cmd
                    ? e.isRunningLocally() &&
                      ((r = JSON.parse(i.content)),
                      e.emit("debugInspectorsUpdated", r.inspectors))
                    : "debuggingEnabled" === i.cmd
                    ? e.isRunningLocally() &&
                      ((r = JSON.parse(i.content)),
                      e.emit("debuggingEnabledChanged", r.enabled))
                    : "modelUpdate" === i.cmd
                    ? await e.emit("modelUpdate", i.content)
                    : "publish" === i.cmd
                    ? o.pubsub.routeMessage(i)
                    : "noodlModules" === i.cmd
                    ? e.emit("noodlModules", JSON.parse(i.content))
                    : "mqttUpdate" === i.cmd
                    ? e.emit("mqttUpdate", i.content)
                    : "activeComponentChanged" === i.cmd
                    ? e.emit("activeComponentChanged", i.component)
                    : "activeSheetChanged" === i.cmd
                    ? e.emit("activeSheetChanged", i.sheet)
                    : "editorState" === i.cmd
                    ? e.emit("editorState", i.content)
                    : console.log("Command not implemented", i));
              });
          }),
          (s.prototype.reconnect = function (t) {
            var e = this;
            setTimeout(function () {
              e.connect(t);
            }, 2e3);
          }),
          (s.prototype.isConnected = function () {
            return (
              void 0 !== this.socket && this.socket.readyState === this.ws.OPEN
            );
          }),
          (s.prototype.send = function (t) {
            const e = this.platform.getCurrentTime(),
              n = e - this.lastSendTimestamp,
              i = (t) => {
                try {
                  this.socket.send(JSON.stringify(t));
                } catch (e) {
                  if (e.message && e.message.startsWith("Converting circular"))
                    try {
                      this.socket.send(
                        JSON.stringify(
                          t,
                          (() => {
                            const t = new WeakSet();
                            return (e, n) => {
                              if ("object" == typeof n && null !== n) {
                                if (t.has(n)) return "[Circular]";
                                t.add(n);
                              }
                              return n;
                            };
                          })()
                        )
                      );
                    } catch (e) {
                      console.log("failed to send message to editor", t, e);
                    }
                  else console.log("failed to send message to editor", t, e);
                }
              };
            n < 200 || this.sendTimer || !this.isConnected()
              ? (this.sendQueue.push(t),
                this.sendTimer ||
                  (this.sendTimer = setTimeout(() => {
                    if (!1 !== this.isConnected()) {
                      for (const t of this.sendQueue) i(t);
                      (this.sendQueue = []),
                        (this.sendTimer = void 0),
                        (this.lastSendTimestamp =
                          this.platform.getCurrentTime());
                    }
                  }, 100)))
              : ((this.lastSendTimestamp = e), i(t));
          }),
          (s.prototype.sendInspectId = function (t) {
            this.send({
              cmd: "select",
              type: "viewer",
              content: JSON.stringify({ id: t }),
            });
          }),
          (s.prototype.sendSelectComponent = function (t) {
            this.send({
              cmd: "select",
              type: "viewer",
              content: JSON.stringify({ componentName: t }),
            });
          }),
          (s.prototype.sendPulsingConnections = function (t) {
            var e = [];
            Object.keys(t).forEach(function (n) {
              var i = t[n];
              e = e.concat(i.connections);
            }),
              this.send({
                cmd: "connectiondebugpulse",
                type: "viewer",
                content: JSON.stringify({ connectionsToPulse: e }),
              });
          }),
          (s.prototype.sendDebugInspectorValues = function (t) {
            this.send({
              cmd: "debuginspectorvalues",
              type: "viewer",
              content: { inspectors: t },
            });
          });
        const a = {};
        (s.prototype.sendDynamicPorts = function (t, e, n) {
          var i = JSON.stringify(e);
          if (a[t] !== i) {
            if (a[t] && e && n && n.detectRenamed) {
              var o = Array.isArray(n.detectRenamed)
                  ? n.detectRenamed
                  : [n.detectRenamed],
                r = [];
              o.forEach((n) => {
                var i = JSON.parse(a[t]),
                  o = [].concat(e);
                n.prefix &&
                  ((i = i.filter((t) => t.name.startsWith(n.prefix))),
                  (o = o.filter((t) => t.name.startsWith(n.prefix)))),
                  n.plug &&
                    ((i = i.filter((t) => t.plug === n.plug)),
                    (o = o.filter((t) => t.plug === n.plug))),
                  (o = o.map((t) => t.name.substring((n.prefix || "").length)));
                var s = (function (t, e) {
                  if (t && e && t.length === e.length) {
                    for (var n = {}, i = 0; i < t.length; i++) {
                      if (-1 === e.indexOf(t[i])) {
                        if (n.before) return;
                        n.before = t[i];
                      }
                      if (-1 === t.indexOf(e[i])) {
                        if (n.after) return;
                        n.after = e[i];
                      }
                    }
                    return n.before && n.after ? n : void 0;
                  }
                })(
                  (i = i.map((t) => t.name.substring((n.prefix || "").length))),
                  o
                );
                s &&
                  r.push({
                    plug: n.plug,
                    patterns: [(n.prefix || "") + "{{*}}"],
                    before: s.before,
                    after: s.after,
                  });
              }),
                r.length > 0 && (n.renamed = r),
                delete n.detectRenamed;
            }
            (a[t] = i),
              this.send({
                cmd: "instanceports",
                type: "viewer",
                content: JSON.stringify({ nodeid: t, ports: e, options: n }),
              });
          }
        }),
          (s.prototype.sendWarning = function (t, e, n, i) {
            this.send({
              cmd: "showwarning",
              type: "viewer",
              content: JSON.stringify({
                componentName: t,
                nodeId: e,
                key: n,
                warning: i,
              }),
            });
          }),
          (s.prototype.clearWarning = function (t, e, n) {
            this.send({
              cmd: "showwarning",
              type: "viewer",
              content: JSON.stringify({
                componentName: t,
                nodeId: e,
                key: n,
                warning: void 0,
              }),
            });
          }),
          (s.prototype.clearWarnings = function (t, e) {
            this.send({
              cmd: "clearwarnings",
              type: "viewer",
              content: JSON.stringify({ componentName: t, nodeId: e }),
            });
          }),
          (s.prototype.sendPatches = function (t) {
            this.send({
              cmd: "patchproject",
              type: "viewer",
              content: JSON.stringify(t),
            });
          }),
          (s.prototype.requestFullExport = function () {
            this.send({ cmd: "register", type: "viewer" });
          }),
          (s.prototype.requestNoodlModules = function () {
            this.send({ cmd: "getNoodlModules", type: "viewer" });
          });
        var l = {};
        (s.prototype.sendServiceRequest = function (t, e) {
          (t.token = r()),
            (t.clientId = this.clientId),
            (l[t.token] = e),
            this.send(t);
        }),
          (s.prototype.close = function () {
            (this.reconnectOnClose = !1),
              !1 !== this.isConnected() && this.socket.close();
          }),
          (s.prototype.sendNodeLibrary = function (t) {
            this.send({
              cmd: "nodelibrary",
              type: "viewer",
              content: t,
              clientId: this.clientId,
            });
          }),
          (s.prototype.sendComponentMetadata = function (t, e, n) {
            this.send({
              cmd: "componentMetadata",
              type: "viewer",
              content: JSON.stringify({ componentName: t, key: e, data: n }),
            });
          }),
          (s.prototype.sendProjectMetadata = function (t, e) {
            this.send({
              cmd: "projectMetadata",
              type: "viewer",
              content: JSON.stringify({ key: t, data: e }),
            });
          }),
          (t.exports = s);
      },
      2858: (t) => {
        "use strict";
        function e(t, e) {
          const n = new Set(e);
          return t.filter((t) => !n.has(t));
        }
        t.exports = {
          handleEvent: async function (t, n, i) {
            function o(n, i) {
              var o = {},
                s = {};
              i.forEach(function (t) {
                t && "outputs" === t.plug && (t.plug = "output"),
                  ("input" !== t.plug && "input/output" !== t.plug) ||
                    (o[t.name] = t),
                  ("output" !== t.plug && "input/output" !== t.plug) ||
                    (s[t.name] = t);
              });
              var a = Object.keys(n.getInputPorts()),
                l = e(a, Object.keys(o)),
                u = e(Object.keys(o), a);
              n.updateInputPortTypes(o),
                l.forEach(n.removeInputPortWithName.bind(n)),
                u.forEach(function (e) {
                  n.addInputPort(o[e]),
                    n.parameters &&
                      n.parameters.hasOwnProperty(e) &&
                      r(t.rootComponent.nodeScope, n, e, n.parameters[e]);
                }),
                n.updateOutputPortTypes(s);
              var p = Object.keys(n.getOutputPorts()),
                c = e(p, Object.keys(s)),
                d = e(Object.keys(s), p);
              c.forEach(n.removeOutputPortWithName.bind(n)),
                d.forEach(function (t) {
                  n.addOutputPort(s[t]);
                });
            }
            function r(t, e, n, i) {
              t.getNodesWithIdRecursive(e.id).forEach(function (t) {
                t.queueInput(n, i);
              });
            }
            var s;
            if (
              !i.componentName ||
              (s = n.getComponentWithName(i.componentName))
            ) {
              i.port && "outputs" === i.port.plug && (i.port.plug = "output");
              var a = {
                nodeAdded: function (t) {
                  s.importEditorNodeData(t.model, t.parentId, t.childIndex);
                },
                nodeRemoved: async function (t) {
                  s.hasNodeWithId(t.model.id) &&
                    (await s.removeNodeWithId(t.model.id));
                },
                connectionAdded: function (t) {
                  s.addConnection(t.model);
                },
                connectionRemoved: function (e) {
                  s.removeConnection(e.model);
                  var n = s.getNodeWithId(e.model.targetId);
                  if (
                    0 === s.getConnectionsToPort(n.id, e.model.targetId).length
                  ) {
                    var i = n.parameters[e.model.targetPort];
                    void 0 === i &&
                      (i = t.getDefaultValueForInput(
                        n.type,
                        e.model.targetPort
                      )),
                      r(t.rootComponent.nodeScope, n, e.model.targetPort, i);
                  }
                },
                parameterChanged: function (t) {
                  const e = s.getNodeWithId(t.nodeId);
                  if (void 0 !== e) {
                    if (t.parameters) {
                      const n = new Set(
                        Object.keys(t.parameters).concat(
                          Object.keys(t.oldParameters)
                        )
                      );
                      for (const i of n) e.setParameter(i, t.parameters[i]);
                    }
                    t.parameterName &&
                      e.setParameter(
                        t.parameterName,
                        t.parameterValue,
                        t.state
                      );
                  } else console.log("parameterChanged: Unknown node id", t);
                },
                nodeAttached: function (t) {
                  s.setNodeParent(
                    s.getNodeWithId(t.nodeId),
                    s.getNodeWithId(t.parentId),
                    t.childIndex
                  );
                },
                nodeDetached: function (t) {
                  s.setNodeParent(s.getNodeWithId(t.nodeId), null),
                    s.addRootId(t.nodeId);
                },
                componentAdded: function (t) {
                  n.importComponentFromEditorData(t.model);
                },
                componentRemoved: async function (t) {
                  await n.removeComponentWithName(t.componentName);
                },
                rootAdded: function (t) {
                  s.addRootId(t.nodeId);
                },
                portAdded: function (e) {
                  var n = s.getNodeWithId(e.nodeId);
                  ("input" !== e.port.plug && "input/output" !== e.port.plug) ||
                    (n.addInputPort(e.port),
                    n.parameters.hasOwnProperty(e.port) &&
                      r(
                        t.rootComponent.nodeScope,
                        n,
                        e.port,
                        n.parameters[e.port]
                      )),
                    ("output" !== e.port.plug &&
                      "input/output" !== e.port.plug) ||
                      n.addOutputPort(e.port);
                },
                portRemoved: function (t) {
                  var e = s.getNodeWithId(t.nodeId);
                  ("input" !== t.port.plug && "input/output" !== t.port.plug) ||
                    e.removeInputPortWithName(t.port.name),
                    ("output" !== t.port.plug &&
                      "input/output" !== t.port.plug) ||
                      e.removeOutputPortWithName(t.port.name);
                },
                nodePortRenamed: function (t) {
                  ("input" !== t.port.plug && "input/output" !== t.port.plug) ||
                    s.renameInputPortOnNodeWithId(
                      t.nodeId,
                      t.oldName,
                      t.port.name
                    ),
                    ("output" !== t.port.plug &&
                      "input/output" !== t.port.plug) ||
                      s.renameOutputPortOnNodeWithId(
                        t.nodeId,
                        t.oldName,
                        t.port.name
                      );
                  var e = s.getNodeWithId(t.nodeId);
                  "Component Inputs" === e.type
                    ? (s.addInputPort(t.port),
                      n.getNodesWithType(s.name).forEach(function (e) {
                        e.component.renameInputPortOnNodeWithId(
                          e.id,
                          t.oldName,
                          t.port.name
                        );
                      }),
                      s.removeInputPortWithName(t.oldName))
                    : "Component Outputs" === e.type &&
                      (s.addOutputPort(t.port),
                      n.getNodesWithType(s.name).forEach(function (e) {
                        e.component.renameOutputPortOnNodeWithId(
                          e.id,
                          t.oldName,
                          t.port.name
                        );
                      }),
                      s.removeOutputPortWithName(t.oldName));
                },
                componentPortsUpdated: function (t) {
                  o(s, t.ports);
                },
                instancePortsChanged: function (t) {
                  s.hasNodeWithId(t.nodeId) &&
                    o(s.getNodeWithId(t.nodeId), t.ports);
                },
                componentRenamed: function (t) {
                  n.renameComponent(t.oldName, t.newName);
                },
                settingsChanged: function (t) {
                  n.setSettings(t.settings);
                },
                metadataChanged: function (t) {
                  n.setMetaData(t.key, t.data);
                },
                componentMetadataChanged: function (t) {
                  const e = n.getComponentWithName(t.componentName);
                  e && e.setMetadata(t.key, t.data);
                },
                variantParametersChanged: function (e) {
                  if (e.variant) n.updateVariant(e.variant);
                  else if (
                    (n.updateVariantParameter(
                      e.variantName,
                      e.variantTypeName,
                      e.parameterName,
                      e.parameterValue,
                      e.state
                    ),
                    void 0 === e.parameterValue)
                  ) {
                    const i = n.getVariant(e.variantTypeName, e.variantName);
                    t.rootComponent.nodeScope
                      .getAllNodesWithVariantRecursive(i)
                      .forEach((t) => {
                        t.queueInput(
                          e.parameterName,
                          t.getParameter(e.parameterName)
                        );
                      });
                  }
                },
                variantDeleted: function (t) {
                  n.deleteVariant(t.variantTypeName, t.variantName);
                },
                variantChanged: function (t) {
                  const e = s.getNodeWithId(t.nodeId),
                    i = n.getVariant(e.type, t.variantName);
                  e.setVariant(i);
                },
                variantRenamed: function (t) {
                  const e = n.getVariant(t.variantTypeName, t.oldVariantName);
                  e && (e.name = e.variantName);
                },
                defaultStateTransitionChanged: function (t) {
                  s.getNodeWithId(t.nodeId).setDefaultStateTransition(
                    t.curve,
                    t.state
                  );
                },
                stateTransitionsChanged: function (t) {
                  const e = s.getNodeWithId(t.nodeId);
                  t.parameterName &&
                    e.setStateTransitionParamter(
                      t.parameterName,
                      t.curve,
                      t.state
                    );
                },
                variantDefaultStateTransitionChanged: function (t) {
                  n.updateVariantDefaultStateTransition(
                    t.variantName,
                    t.variantTypeName,
                    t.curve,
                    t.state
                  );
                },
                variantStateTransitionsChanged: function (t) {
                  n.updateVariantStateTransition(t);
                },
                routerIndexChanged: function (t) {
                  n.routerIndex = t.data;
                },
              };
              a.hasOwnProperty(i.type)
                ? (await a[i.type](i), t.scheduleUpdate())
                : console.log("Unknown event", i);
            }
          },
        };
      },
      2451: (t) => {
        "use strict";
        function e() {
          (this.listeners = {}), (this.listenersWithRefs = {});
        }
        (e.prototype.on = function (t, e, n) {
          n
            ? (this.listenersWithRefs.hasOwnProperty(t) ||
                (this.listenersWithRefs[t] = new Map()),
              this.listenersWithRefs[t].get(n) ||
                this.listenersWithRefs[t].set(n, []),
              this.listenersWithRefs[t].get(n).push(e))
            : (this.listeners.hasOwnProperty(t) || (this.listeners[t] = []),
              this.listeners[t].push(e));
        }),
          (e.prototype.removeListenersWithRef = function (t) {
            Object.keys(this.listenersWithRefs).forEach((e) => {
              const n = this.listenersWithRefs[e];
              n.has(t) && n.set(t, []);
            });
          }),
          (e.prototype.removeAllListeners = function (t) {
            t
              ? (delete this.listeners[t], delete this.listenersWithRefs[t])
              : ((this.listeners = {}), (this.listenersWithRefs = {}));
          }),
          (e.prototype.emit = async function (t, e) {
            const n = this.listeners[t];
            if (n)
              for (let t = 0; t < n.length; t++) {
                const i = n[t];
                await Promise.resolve(i.call(null, e));
              }
            const i = this.listenersWithRefs[t];
            if (i)
              for (const [t, n] of i)
                for (const i of n) await Promise.resolve(i.call(t, e));
          }),
          (t.exports = e);
      },
      7320: (t) => {
        t.exports = function () {
          function t() {
            return Math.floor(65536 * (1 + Math.random()))
              .toString(16)
              .substring(1);
          }
          return (
            t() +
            t() +
            "-" +
            t() +
            "-" +
            t() +
            "-" +
            t() +
            "-" +
            t() +
            t() +
            t()
          );
        };
      },
      1966: (t, e, n) => {
        "use strict";
        function i(t, e) {
          var n = Object.keys(t);
          if (Object.getOwnPropertySymbols) {
            var i = Object.getOwnPropertySymbols(t);
            e &&
              (i = i.filter(function (e) {
                return Object.getOwnPropertyDescriptor(t, e).enumerable;
              })),
              n.push.apply(n, i);
          }
          return n;
        }
        function o(t) {
          for (var e = 1; e < arguments.length; e++) {
            var n = null != arguments[e] ? arguments[e] : {};
            e % 2
              ? i(Object(n), !0).forEach(function (e) {
                  r(t, e, n[e]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
              : i(Object(n)).forEach(function (e) {
                  Object.defineProperty(
                    t,
                    e,
                    Object.getOwnPropertyDescriptor(n, e)
                  );
                });
          }
          return t;
        }
        function r(t, e, n) {
          return (
            e in t
              ? Object.defineProperty(t, e, {
                  value: n,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (t[e] = n),
            t
          );
        }
        var s = n(778),
          a = n(2451);
        function l(t) {
          a.call(this),
            (this.name = t),
            (this.nodes = {}),
            (this.connections = []),
            (this.roots = []),
            (this.inputPorts = {}),
            (this.outputPorts = {}),
            (this.metadata = {});
        }
        (l.prototype = Object.create(a.prototype)),
          (l.prototype.addNode = async function (t) {
            (t.component = this),
              (this.nodes[t.id] = t),
              await this.emit("nodeAdded", t);
          }),
          (l.prototype.hasNodeWithId = function (t) {
            return void 0 !== this.getNodeWithId(t);
          }),
          (l.prototype.getNodeWithId = function (t) {
            return this.nodes[t];
          }),
          (l.prototype.getAllNodes = function () {
            return Object.values(this.nodes);
          }),
          (l.prototype.getNodesWithType = function (t) {
            var e = [],
              n = this;
            return (
              Object.keys(this.nodes).forEach(function (i) {
                var o = n.nodes[i];
                o.type === t && e.push(o);
              }),
              e
            );
          }),
          (l.prototype.addConnection = function (t) {
            if (
              (this.connections.push(t),
              this.emit("connectionAdded", t),
              t.targetId)
            ) {
              const e = this.getNodeWithId(t.targetId);
              e && e.emit("inputConnectionAdded", t);
            }
          }),
          (l.prototype.removeConnection = function (t) {
            const e = this.connections.findIndex(
              (e) =>
                e.sourceId === t.sourceId &&
                e.sourcePort === t.sourcePort &&
                e.targetId === t.targetId &&
                e.targetPort === t.targetPort
            );
            if (-1 !== e) {
              if (
                (this.connections.splice(e, 1),
                this.emit("connectionRemoved", t),
                t.targetId)
              ) {
                const e = this.getNodeWithId(t.targetId);
                e && e.emit("inputConnectionRemoved", t);
              }
            } else console.log("Connection doesn't exist", t);
          }),
          (l.prototype.getConnectionsFromPort = function (t, e) {
            return this.connections.filter(function (n) {
              return n.sourceId === t && n.sourcePort === e;
            });
          }),
          (l.prototype.getConnectionsToPort = function (t, e) {
            return this.connections.filter(function (n) {
              return n.targetId === t && n.targetPort === e;
            });
          }),
          (l.prototype.getConnectionsFrom = function (t) {
            return this.connections.filter(function (e) {
              return e.sourceId === t;
            });
          }),
          (l.prototype.getConnectionsTo = function (t) {
            return this.connections.filter(function (e) {
              return e.targetId === t;
            });
          }),
          (l.prototype.addRootId = function (t) {
            -1 === this.roots.indexOf(t) &&
              (this.roots.push(t), this.emit("rootAdded", t));
          }),
          (l.prototype.removeRootId = function (t) {
            const e = this.roots.indexOf(t);
            -1 !== e && (this.roots.splice(e, 1), this.emit("rootRemoved", t));
          }),
          (l.prototype.getRoots = function () {
            return this.roots;
          }),
          (l.prototype.removeNodeWithId = async function (t) {
            const e = this.getNodeWithId(t);
            if (!e)
              return (
                console.warn(
                  "ERROR: Attempted to remove non-existing node with ID:",
                  t
                ),
                !1
              );
            for (; e.children.length > 0; ) {
              const t = e.children[0];
              (await this.removeNodeWithId(t.id)) || e.children.shift();
            }
            const n = this.getConnectionsTo(t).concat(
              this.getConnectionsFrom(t)
            );
            for (let t = 0; t < n.length; t++) this.removeConnection(n[t]);
            return (
              this.setNodeParent(e, null),
              -1 !== this.roots.indexOf(e.id) && this.removeRootId(e.id),
              await this.emit("nodeRemoved", e),
              e.removeAllListeners(),
              delete this.nodes[t],
              await this.emit("nodeWasRemoved", e),
              !0
            );
          }),
          (l.prototype.getAllConnections = function () {
            return this.connections;
          }),
          (l.prototype.getInputPorts = function () {
            return this.inputPorts;
          }),
          (l.prototype.getOutputPorts = function () {
            return this.outputPorts;
          }),
          (l.prototype.addInputPort = function (t) {
            (this.inputPorts[t.name] = t), this.emit("inputPortAdded", t);
          }),
          (l.prototype.addOutputPort = function (t) {
            (this.outputPorts[t.name] = t), this.emit("outputPortAdded", t);
          }),
          (l.prototype.removeOutputPortWithName = function (t) {
            if (this.outputPorts.hasOwnProperty(t)) {
              var e = this.outputPorts[t];
              delete this.outputPorts[t], this.emit("outputPortRemoved", e);
            }
          }),
          (l.prototype.removeInputPortWithName = function (t) {
            if (this.inputPorts.hasOwnProperty(t)) {
              var e = this.inputPorts[t];
              delete this.inputPorts[t], this.emit("inputPortRemoved", e);
            }
          }),
          (l.prototype.updateInputPortTypes = function (t) {
            var e = !1;
            for (var n in t)
              void 0 !== this.inputPorts[n] &&
                ((this.inputPorts[n].type = t[n].type), (e = !0));
            e && this.emit("inputPortTypesUpdated");
          }),
          (l.prototype.updateOutputPortTypes = function (t) {
            var e = !1;
            for (var n in t)
              void 0 !== this.outputPorts[n] &&
                ((this.outputPorts[n].type = t[n].type), (e = !0));
            e && this.emit("outputPortTypesUpdated");
          }),
          (l.prototype.renameInputPortOnNodeWithId = function (t, e, n) {
            var i = this.getConnectionsToPort(t, e);
            i.forEach(this.removeConnection.bind(this));
            var r = this.getNodeWithId(t),
              s = o({}, r.getInputPort(e));
            s &&
              (r.removeInputPortWithName(e), (s.name = n), r.addInputPort(s)),
              i.forEach(function (t) {
                t.targetPort = n;
              }),
              i.forEach(this.addConnection.bind(this));
          }),
          (l.prototype.renameOutputPortOnNodeWithId = function (t, e, n) {
            var i = this.getConnectionsFromPort(t, e);
            i.forEach(this.removeConnection.bind(this));
            var r = this.getNodeWithId(t),
              s = o({}, r.getOutputPort(e));
            r.removeOutputPortWithName(e),
              (s.name = n),
              r.addOutputPort(s),
              i.forEach(function (t) {
                t.sourcePort = n;
              }),
              i.forEach(this.addConnection.bind(this));
          }),
          (l.prototype.setNodeParent = function (t, e, n) {
            -1 !== this.roots.indexOf(t.id) && this.removeRootId(t.id),
              t.parent &&
                (this.emit("nodeParentWillBeRemoved", t),
                t.parent.removeChild(t)),
              t.emit("parentUpdated", e),
              e && (e.addChild(t, n), this.emit("nodeParentUpdated", t));
          }),
          (l.prototype.importEditorNodeData = async function (t, e, n) {
            var i = s.createFromExportData(t);
            if (
              (await this.addNode(i),
              e && this.setNodeParent(i, this.getNodeWithId(e), n),
              t.children)
            )
              for (let e = 0; e < t.children.length; e++) {
                const n = t.children[e];
                await this.importEditorNodeData(n, i.id, e);
              }
          }),
          (l.prototype.reset = async function () {
            for (; this.roots.length; )
              await this.removeNodeWithId(this.roots[0]);
            for (const t of this.nodes)
              this.hasNodeWithId(t) && (await this.removeNodeWithId(t));
            if (this.nodes.length > 0)
              throw new Error("Not all nodes were removed during a reset");
            if (this.connections.length > 0)
              throw new Error(
                "Not all connections were removed during a reset"
              );
          }),
          (l.prototype.rename = function (t) {
            var e = this.name;
            (this.name = t), this.emit("renamed", { oldName: e, newName: t });
          }),
          (l.prototype.setMetadata = function (t, e) {
            this.metadata[t] = e;
          }),
          (l.prototype.getMetadata = function (t) {
            return t ? this.metadata[t] : this.metadata;
          }),
          (l.createFromExportData = async function (t) {
            var e = new l(t.name);
            if (t.metadata)
              for (const n in t.metadata) e.setMetadata(n, t.metadata[n]);
            if (
              (t.ports &&
                t.ports.forEach(function (t) {
                  ("input" !== t.plug && "input/output" !== t.plug) ||
                    e.addInputPort(t),
                    ("output" !== t.plug && "input/output" !== t.plug) ||
                      e.addOutputPort(t);
                }),
              t.nodes)
            )
              for (const n of t.nodes) await e.importEditorNodeData(n);
            return (
              t.connections && t.connections.forEach((t) => e.addConnection(t)),
              t.roots && t.roots.forEach((t) => e.addRootId(t)),
              e
            );
          }),
          (t.exports = l);
      },
      5303: (t, e, n) => {
        "use strict";
        var i = n(1966),
          o = n(2451);
        function r() {
          o.call(this),
            (this.components = {}),
            (this.settings = {}),
            (this.metadata = {});
        }
        (r.prototype = Object.create(o.prototype)),
          (r.prototype.importComponentFromEditorData = async function (t) {
            var e = await i.createFromExportData(t);
            this.addComponent(e);
          }),
          (r.prototype.getBundleContainingComponent = function (t) {
            return this.componentToBundleMap.get(t);
          }),
          (r.prototype.getBundlesContainingSheet = function (t) {
            const e = new Set();
            for (const n of this.componentToBundleMap.keys()) {
              const i = 0 !== n.indexOf("/#");
              ((i && "Default" === t) || (!i && 0 === n.indexOf("/#" + t))) &&
                e.add(this.componentToBundleMap.get(n));
            }
            return Array.from(e);
          }),
          (r.prototype.getBundleDependencies = function (t) {
            const e = new Set(),
              n = (t) => {
                const i = this.componentIndex[t];
                for (const t of i.dependencies) e.has(t) || (e.add(t), n(t));
              };
            return n(t), Array.from(e);
          }),
          (r.prototype.importEditorData = async function (t) {
            (this.componentIndex = t.componentIndex),
              (this.routerIndex = t.routerIndex),
              (this.componentToBundleMap = new Map());
            for (const e in t.componentIndex) {
              const n = t.componentIndex[e];
              for (const t of n.components) this.componentToBundleMap.set(t, e);
            }
            (this.variants = t.variants || []),
              t.settings && this.setSettings(t.settings),
              t.metadata && this.setAllMetaData(t.metadata);
            for (const e of t.components)
              await this.importComponentFromEditorData(e);
            this.setRootComponentName(t.rootComponent);
          }),
          (r.prototype.setRootComponentName = function (t) {
            (this.rootComponent = t), this.emit("rootComponentNameUpdated", t);
          }),
          (r.prototype.getNodesWithType = function (t) {
            for (
              var e = [], n = Object.keys(this.components), i = 0;
              i < n.length;
              i++
            ) {
              var o = this.components[n[i]];
              e = e.concat(o.getNodesWithType(t));
            }
            return e;
          }),
          (r.prototype.getComponentWithName = function (t) {
            return this.components[t];
          }),
          (r.prototype.hasComponentWithName = function (t) {
            return !!this.components[t];
          }),
          (r.prototype.getAllComponents = function () {
            return Object.keys(this.components).map((t) => this.components[t]);
          }),
          (r.prototype.getAllNodes = function () {
            for (
              var t = [], e = Object.keys(this.components), n = 0;
              n < e.length;
              n++
            ) {
              var i = this.components[e[n]];
              t = t.concat(i.getAllNodes());
            }
            return t;
          }),
          (r.prototype.addComponent = function (t) {
            (this.components[t.name] = t),
              this.getNodesWithType(t.name).forEach(
                this._addComponentPorts.bind(this)
              ),
              t.getAllNodes().forEach(this._onNodeAdded.bind(this)),
              t.on("nodeAdded", this._onNodeAdded.bind(this), this),
              t.on("nodeRemoved", this._onNodeRemoved.bind(this), this),
              t.on("nodeWasRemoved", this._onNodeWasRemoved.bind(this), this),
              this.emit("componentAdded", t);
          }),
          (r.prototype.removeComponentWithName = async function (t) {
            if (!1 !== this.components.hasOwnProperty(t)) {
              var e = this.components[t];
              await e.reset(),
                e.removeAllListeners(),
                delete this.components[e.name],
                this.emit("componentRemoved", e);
            } else
              console.error(
                "GraphModel: Component with name " + t + " not in graph"
              );
          }),
          (r.prototype.renameComponent = function (t, e) {
            if (!1 !== this.components.hasOwnProperty(t)) {
              this.getNodesWithType(t).forEach(function (t) {
                t.type = e;
              });
              var n = this.components[t];
              n.rename(e), delete this.components[t], (this.components[e] = n);
            } else
              console.error(
                "GraphModel: Component with name " +
                  componentNamee +
                  " not in graph"
              );
          }),
          (r.prototype._addComponentPorts = function (t) {
            if (this.components.hasOwnProperty(t.type)) {
              var e = this.components[t.type];
              const n = e.getInputPorts(),
                i = e.getOutputPorts();
              Object.keys(n).forEach((e) => {
                t.addInputPort(n[e]);
              }),
                Object.keys(i).forEach((e) => {
                  t.addOutputPort(i[e]);
                });
            }
          }),
          (r.prototype._onNodeAdded = function (t) {
            this._addComponentPorts(t),
              this.emit("nodeAdded", t),
              this.emit("nodeAdded." + t.type, t);
          }),
          (r.prototype._onNodeRemoved = function (t) {
            this.emit("nodeRemoved", t), this.emit("nodeRemoved." + t.type, t);
          }),
          (r.prototype._onNodeWasRemoved = function (t) {
            this.emit("nodeWasRemoved", t),
              this.emit("nodeWasRemoved." + t.type, t);
          }),
          (r.prototype.reset = async function () {
            for (const t of Object.keys(this.components))
              await this.removeComponentWithName(t);
            this.setSettings({});
          }),
          (r.prototype.isEmpty = function () {
            return 0 === Object.keys(this.components).length;
          }),
          (r.prototype.setSettings = function (t) {
            (this.settings = t), this.emit("projectSettingsChanged", t);
          }),
          (r.prototype.getSettings = function () {
            return this.settings;
          }),
          (r.prototype.setAllMetaData = function (t) {
            for (const e in t) this.setMetaData(e, t[e]);
          }),
          (r.prototype.setMetaData = function (t, e) {
            (this.metadata[t] &&
              JSON.stringify(this.metadata[t]) === JSON.stringify(e)) ||
              ((this.metadata[t] = e),
              this.emit("metadataChanged", { key: t, data: e }),
              this.emit("metadataChanged." + t, e));
          }),
          (r.prototype.getMetaData = function (t) {
            return t ? this.metadata[t] : this.metadata;
          }),
          (r.prototype.getVariants = function () {
            return this.variants || [];
          }),
          (r.prototype.getVariant = function (t, e) {
            return this.variants.find((n) => n.name === e && n.typename === t);
          }),
          (r.prototype.updateVariant = function (t) {
            const e = this.variants.findIndex(
              (e) => e.name === t.name && e.typename === t.typename
            );
            -1 !== e && this.variants.splice(e, 1),
              this.variants.push(t),
              this.emit("variantUpdated", t);
          }),
          (r.prototype.updateVariantParameter = function (t, e, n, i, o) {
            const r = this.getVariant(e, t);
            r
              ? (o
                  ? (r.stateParameters.hasOwnProperty(o) ||
                      (r.stateParameters[o] = {}),
                    void 0 === i
                      ? delete r.stateParameters[o][n]
                      : (r.stateParameters[o][n] = i))
                  : void 0 === i
                  ? delete r.parameters[n]
                  : (r.parameters[n] = i),
                this.emit("variantUpdated", r))
              : console.log("updateVariantParameter: can't find variant", t, e);
          }),
          (r.prototype.updateVariantDefaultStateTransition = function (
            t,
            e,
            n,
            i
          ) {
            const o = this.getVariant(e, t);
            o &&
              ((o.defaultStateTransitions[i] = n),
              this.emit("variantUpdated", o));
          }),
          (r.prototype.updateVariantStateTransition = function (t) {
            const {
                variantTypeName: e,
                variantName: n,
                state: i,
                parameterName: o,
                curve: r,
              } = t,
              s = this.getVariant(e, n);
            s &&
              (s.stateTransitions[i] || (s.stateTransitions[i] = {}),
              (s.stateTransitions[i][o] = r));
          }),
          (r.prototype.deleteVariant = function (t, e) {
            const n = this.variants.findIndex(
              (n) => n.name === e && n.typename === t
            );
            -1 !== n && this.variants.splice(n, 1);
          }),
          (t.exports = r);
      },
      778: (t, e, n) => {
        "use strict";
        var i = n(2451);
        function o(t, e) {
          i.call(this),
            (this.id = t),
            (this.type = e),
            (this.inputs = []),
            (this.outputs = []),
            (this.children = []),
            (this.parameters = {}),
            (this.inputPorts = {}),
            (this.outputPorts = {});
        }
        (o.prototype = Object.create(i.prototype)),
          (o.prototype.setParameter = function (t, e, n) {
            n
              ? (this.stateParameters || (this.stateParameters = {}),
                this.stateParameters[n] || (this.stateParameters[n] = {}),
                void 0 === e
                  ? delete this.stateParameters[n][t]
                  : (this.stateParameters[n][t] = e))
              : void 0 === e
              ? delete this.parameters[t]
              : (this.parameters[t] = e),
              this.emit("parameterUpdated", { name: t, value: e, state: n });
          }),
          (o.prototype.setParameters = function (t) {
            Object.keys(t).forEach((e) => {
              this.setParameter(e, t[e]);
            });
          }),
          (o.prototype.setStateParameters = function (t) {
            this.stateParameters = t;
          }),
          (o.prototype.setStateTransitions = function (t) {
            this.stateTransitions = t;
          }),
          (o.prototype.setStateTransitionParamter = function (t, e, n) {
            this.stateTransitions || (this.stateTransitions = {}),
              e
                ? (this.stateTransitions[n][t] = e)
                : delete this.stateTransitions[n][t];
          }),
          (o.prototype.setDefaultStateTransition = function (t, e) {
            this.defaultStateTransitions || (this.defaultStateTransitions = {}),
              (this.defaultStateTransitions[e] = t);
          }),
          (o.prototype.addInputPort = function (t) {
            (this.inputPorts[t.name] = t), this.emit("inputPortAdded", t);
          }),
          (o.prototype.getInputPort = function (t) {
            return this.inputPorts[t];
          }),
          (o.prototype.getInputPorts = function () {
            return this.inputPorts;
          }),
          (o.prototype.removeInputPortWithName = function (t) {
            if (this.inputPorts.hasOwnProperty(t)) {
              var e = this.inputPorts[t];
              delete this.inputPorts[t], this.emit("inputPortRemoved", e);
            }
          }),
          (o.prototype.updateInputPortTypes = function (t) {
            var e = !1;
            for (var n in t)
              void 0 !== this.inputPorts[n] &&
                ((this.inputPorts[n].type = t[n].type), (e = !0));
            e && this.emit("inputPortTypesUpdated");
          }),
          (o.prototype.addOutputPort = function (t) {
            (this.outputPorts[t.name] = t), this.emit("outputPortAdded", t);
          }),
          (o.prototype.getOutputPort = function (t) {
            return this.outputPorts[t];
          }),
          (o.prototype.getOutputPorts = function () {
            return this.outputPorts;
          }),
          (o.prototype.removeOutputPortWithName = function (t) {
            if (this.outputPorts.hasOwnProperty(t)) {
              var e = this.outputPorts[t];
              delete this.outputPorts[t], this.emit("outputPortRemoved", e);
            }
          }),
          (o.prototype.updateOutputPortTypes = function (t) {
            var e = !1;
            for (var n in t)
              void 0 !== this.outputPorts[n] &&
                ((this.outputPorts[n].type = t[n].type), (e = !0));
            e && this.emit("outputPortTypesUpdated");
          }),
          (o.prototype.addChild = function (t, e) {
            (t.parent = this),
              void 0 === e
                ? this.children.push(t)
                : this.children.splice(e, 0, t),
              this.emit("childAdded", t);
          }),
          (o.prototype.removeChild = function (t) {
            t.parent = void 0;
            var e = this.children.indexOf(t);
            this.children.splice(e, 1), this.emit("childRemoved", t);
          }),
          (o.prototype.reset = function () {
            this.removeAllListeners();
          }),
          (o.prototype.setVariant = function (t) {
            (this.variant = t), this.emit("variantUpdated", t);
          }),
          (o.createFromExportData = function (t) {
            var e = new o(t.id, t.type);
            if (
              (t.parameters && e.setParameters(t.parameters),
              t.stateParameters && e.setStateParameters(t.stateParameters),
              t.stateTransitions && e.setStateTransitions(t.stateTransitions),
              t.defaultStateTransitions)
            )
              for (const n in t.defaultStateTransitions)
                e.setDefaultStateTransition(t.defaultStateTransitions[n], n);
            return (
              t.ports &&
                t.ports.forEach(function (t) {
                  "outputs" === t.plug && (t.plug = "output"),
                    ("input" !== t.plug && "input/output" !== t.plug) ||
                      e.addInputPort(t),
                    ("output" !== t.plug && "input/output" !== t.plug) ||
                      e.addOutputPort(t);
                }),
              t.variant && e.setVariant(t.variant),
              e
            );
          }),
          (t.exports = o);
      },
      9954: (t, e, n) => {
        const i = n(7431);
        function o(t, e) {
          (this.id = e),
            (this.context = t),
            (this._dirty = !1),
            (this._inputs = {}),
            (this._inputValues = {}),
            (this._outputs = {}),
            (this._inputConnections = {}),
            (this._outputList = []),
            (this._isUpdating = !1),
            (this._inputValuesQueue = {}),
            (this._afterInputsHaveUpdatedCallbacks = []),
            (this._internal = {}),
            (this._signalsSentThisUpdate = {}),
            (this._deleted = !1),
            (this._deleteListeners = []),
            (this._isFirstUpdate = !0),
            (this._valuesFromConnections = {});
        }
        (o.prototype.getInputValue = function (t) {
          return this._inputValues[t];
        }),
          (o.prototype.registerInput = function (t, e) {
            if (this.hasInput(t))
              throw new Error("Input property " + t + " already registered");
            if (((this._inputs[t] = e), e.type && e.type.units)) {
              const n = e.type.defaultUnit || e.type.units[0];
              this._inputValues[t] = { value: e.default, type: n };
            } else
              e.hasOwnProperty("default") && (this._inputValues[t] = e.default);
          }),
          (o.prototype.deregisterInput = function (t) {
            if (!1 === this.hasInput(t))
              throw new Error("Input property " + t + " doesn't exist");
            delete this._inputs[t], delete this._inputValues[t];
          }),
          (o.prototype.registerInputs = function (t) {
            for (const e in t) this.registerInput(e, t[e]);
          }),
          (o.prototype.getInput = function (t) {
            if (!1 !== this.hasInput(t)) return this._inputs[t];
            console.log("Node " + this.name + ": Invalid input property " + t);
          }),
          (o.prototype.hasInput = function (t) {
            return t in this._inputs;
          }),
          (o.prototype.registerInputIfNeeded = function () {}),
          (o.prototype.setInputValue = function (t, e) {
            const n = this.getInput(t);
            if (!n) return void console.log("node doesn't have input", t);
            const i = this._inputValues[t];
            if (!1 === isNaN(e) && i && i.unit) {
              const t = Object.assign({}, i);
              (t.value = e), (e = t);
            }
            "color" === n.type &&
              this.context &&
              this.context.styles &&
              (e = this.context.styles.resolveColor(e)),
              (this._inputValues[t] = e),
              n.set.call(this, e);
          }),
          (o.prototype.hasOutput = function (t) {
            return t in this._outputs;
          }),
          (o.prototype.registerOutput = function (t, e) {
            if (this.hasOutput(t))
              throw new Error("Output property " + t + " already registered");
            const n = new i({
              owner: this,
              getter: e.get || e.getter,
              name: t,
              onFirstConnectionAdded: e.onFirstConnectionAdded,
              onLastConnectionRemoved: e.onLastConnectionRemoved,
            });
            (this._outputs[t] = n), this._outputList.push(n);
          }),
          (o.prototype.deregisterOutput = function (t) {
            if (!1 === this.hasOutput(t))
              throw new Error("Output property " + t + " isn't registered");
            const e = this._outputs[t];
            if (e.hasConnections())
              throw new Error(
                "Output property " + t + " has connections and can't be removed"
              );
            delete this._outputs[t];
            var n = this._outputList.indexOf(e);
            this._outputList.splice(n, 1);
          }),
          (o.prototype.registerOutputs = function (t) {
            for (var e in t) this.registerOutput(e, t[e]);
          }),
          (o.prototype.registerOutputIfNeeded = function () {}),
          (o.prototype.getOutput = function (t) {
            if (!1 === this.hasOutput(t))
              throw new Error(
                "Node " + this.name + " doesn't have a port named " + t
              );
            return this._outputs[t];
          }),
          (o.prototype.connectInput = function (t, e, n) {
            if (!1 === this.hasInput(t))
              throw new Error(
                "Invalid connection, input doesn't exist. Trying to connect from " +
                  e.name +
                  " output " +
                  n +
                  " to " +
                  this.name +
                  " input " +
                  t
              );
            var i = e.getOutput(n);
            if (
              (i.registerConnection(this, t),
              this._inputConnections[t] || (this._inputConnections[t] = []),
              this._inputConnections[t].push(i),
              e._signalsSentThisUpdate[n])
            )
              this._setValueFromConnection(t, !0),
                this._setValueFromConnection(t, !1);
            else {
              var o = i.value;
              void 0 !== o &&
                (this._setValueFromConnection(t, o),
                this.context && this.context.connectionSentValue(i, i.value));
            }
            this.flagDirty();
          }),
          (o.prototype.removeInputConnection = function (t, e, n) {
            if (!this._inputConnections[t])
              throw new Error(
                "Node removeInputConnection: Input doesn't exist"
              );
            const i = this._inputConnections[t];
            for (let o = 0; o < i.length; o++) {
              const r = i[o];
              if (r.owner.id === e && r.name === n) {
                i.splice(o, 1),
                  r.owner.getOutput(n).deregisterConnection(this, t);
                break;
              }
            }
            0 === i.length && delete this._valuesFromConnections[t];
          }),
          (o.prototype.isInputConnected = function (t) {
            return (
              !!this._inputConnections.hasOwnProperty(t) &&
              this._inputConnections[t].some(
                (t) =>
                  "Component Inputs" !== t.owner.name ||
                  t.owner.nodeScope.componentOwner.isInputConnected(t.name)
              )
            );
          }),
          (o.prototype.update = function () {
            if (!this._isUpdating && !1 !== this._dirty) {
              this._updatedAtIteration !== this.context.updateIteration &&
                ((this._updatedAtIteration = this.context.updateIteration),
                (this._updateIteration = 0),
                this._cyclicLoop && (this._cyclicLoop = !1)),
                (this._isUpdating = !0);
              try {
                for (; this._dirty && !this._cyclicLoop; ) {
                  this._updateDependencies(), (this._dirty = !1);
                  const t = Object.keys(this._inputValuesQueue);
                  let e = !0;
                  for (; e && !this._cyclicLoop; ) {
                    e = !1;
                    for (let n = 0; n < t.length; n++) {
                      const i = t[n],
                        o = this._inputValuesQueue[i];
                      o.length > 0 &&
                        (this.setInputValue(i, o.shift()),
                        o.length > 0 && (e = !0));
                    }
                    const n = this._afterInputsHaveUpdatedCallbacks;
                    this._afterInputsHaveUpdatedCallbacks = [];
                    for (let t = 0; t < n.length; t++) n[t].call(this);
                  }
                  this._updateIteration++,
                    this._updateIteration >= 100 && (this._cyclicLoop = !0);
                }
              } catch (t) {
                throw ((this._isUpdating = !1), t);
              }
              this._cyclicLoop &&
                (this.context.scheduleNextFrame(() => {
                  this.context.nodeIsDirty(this);
                }),
                this.context.editorConnection &&
                  !this._cyclicWarningSent &&
                  this.context.isWarningTypeEnabled("cyclicLoops") &&
                  (this.context.editorConnection.sendWarning(
                    this.nodeScope.componentOwner.name,
                    this.id,
                    "cyclic-loop",
                    { showGlobally: !0, message: "Cyclic loop detected" }
                  ),
                  (this._cyclicWarningSent = !0),
                  console.log("cycle detected", {
                    id: this.id,
                    name: this.name,
                    component: this.nodeScope.componentOwner.name,
                  }))),
                (this._isFirstUpdate = !1),
                (this._isUpdating = !1);
            }
          }),
          (o.prototype._updateDependencies = function () {
            for (var t in this._inputConnections)
              for (var e = this._inputConnections[t], n = 0; n < e.length; ++n)
                e[n].owner.update();
          }),
          (o.prototype.flagDirty = function () {
            if (!this._dirty) {
              (this._dirty = !0),
                this.context && this.context.nodeIsDirty(this);
              for (var t = 0; t < this._outputList.length; ++t)
                this._outputList[t].flagDependeesDirty();
            }
          }),
          (o.prototype.sendValue = function (t, e) {
            if (!1 === this.hasOutput(t))
              return void console.log(
                "Error: Node",
                this.name,
                "doesn't have a output named",
                t
              );
            if (void 0 === e) return;
            const n = this.getOutput(t);
            n.sendValue(e),
              this.context && this.context.connectionSentValue(n, e);
          }),
          (o.prototype.flagOutputDirty = function (t) {
            const e = this.getOutput(t);
            this.sendValue(t, e.value);
          }),
          (o.prototype.flagAllOutputsDirty = function () {
            for (const t of this._outputList) this.sendValue(t.name, t.value);
          }),
          (o.prototype.sendSignalOnOutput = function (t) {
            if (!1 === this.hasOutput(t))
              return void console.log(
                "Error: Node",
                this.name,
                "doesn't have a output named",
                t
              );
            const e = this.getOutput(t);
            e.sendValue(!0),
              e.sendValue(!1),
              (this._signalsSentThisUpdate[t] = !0),
              this.scheduleAfterInputsHaveUpdated(function () {
                this._signalsSentThisUpdate[t] = !1;
              }),
              this.context && this.context.connectionSentSignal(e);
          }),
          (o.prototype._setValueFromConnection = function (t, e) {
            (this._valuesFromConnections[t] = e), this.queueInput(t, e);
          }),
          (o.prototype._hasInputBeenSetFromAConnection = function (t) {
            return this._valuesFromConnections.hasOwnProperty(t);
          }),
          (o.prototype.queueInput = function (t, e) {
            if (
              (this._inputValuesQueue[t] || (this._inputValuesQueue[t] = []),
              this._isFirstUpdate)
            ) {
              const n = this._inputValuesQueue[t][0];
              !0 === n ||
                (n instanceof Object &&
                  n.unit &&
                  e instanceof Object == 0 &&
                  (e = { value: e, unit: n.unit }),
                (this._inputValuesQueue[t].length = 0));
            }
            this._inputValuesQueue[t].push(e), this.flagDirty();
          }),
          (o.prototype.scheduleAfterInputsHaveUpdated = function (t) {
            this._afterInputsHaveUpdatedCallbacks.push(t), this.flagDirty();
          }),
          (o.prototype.setNodeModel = function (t) {
            (this.model = t),
              t.on("parameterUpdated", this._onNodeModelParameterUpdated, this),
              t.on("variantUpdated", this._onNodeModelVariantUpdated, this),
              t.on(
                "inputPortRemoved",
                (t) => {
                  this.hasInput(t.name) && this.deregisterInput(t.name);
                },
                this
              ),
              t.on(
                "outputPortRemoved",
                (t) => {
                  this.hasOutput(t.name) && this.deregisterOutput(t.name);
                },
                this
              );
          }),
          (o.prototype.addDeleteListener = function (t) {
            this._deleteListeners.push(t);
          }),
          (o.prototype._onNodeDeleted = function () {
            this.model &&
              (this.model.removeListenersWithRef(this), (this.model = void 0)),
              (this._deleted = !0);
            for (const t of this._deleteListeners) t.call(this);
          }),
          (o.prototype._onNodeModelParameterUpdated = function (t) {
            if ((this.registerInputIfNeeded(t.name), void 0 !== t.value))
              if (t.state) {
                if (!this._getVisualStates)
                  return void console.log(
                    "Node has nos visual states, but got a parameter for state",
                    t.state
                  );
                -1 !== this._getVisualStates().indexOf(t.state) &&
                  this.queueInput(t.name, t.value);
              } else this.queueInput(t.name, t.value);
            else {
              let e;
              const n = this.variant;
              t.state
                ? n &&
                  n.stateParameters.hasOwnProperty(t.state) &&
                  n.stateParameters[t.state].hasOwnProperty(t.name)
                  ? (e = n.stateParameters[t.state][t.name])
                  : this.model.parameters.hasOwnProperty(t.name)
                  ? (e = this.model.parameters[t.name])
                  : n &&
                    n.parameters.hasOwnProperty(t.name) &&
                    (e = n.parameters[t.name])
                : n &&
                  n.parameters.hasOwnProperty(t.name) &&
                  (e = n.parameters[t.name]),
                void 0 === e &&
                  ((e = this.context.getDefaultValueForInput(
                    this.model.type,
                    t.name
                  )),
                  this._resetReactVirtualDOM && this._resetReactVirtualDOM()),
                this.queueInput(t.name, e);
            }
          }),
          (o.prototype._onNodeModelVariantUpdated = function (t) {
            this.setVariant(t);
          }),
          (t.exports = o);
      },
      274: (t, e, n) => {
        "use strict";
        var i = n(7187).EventEmitter,
          o = n(492),
          r = n(3542);
        const s = n(6243);
        function a(t) {
          ((t = t || {}).runningInEditor =
            !!t.hasOwnProperty("runningInEditor") && t.runningInEditor),
            (this._dirtyNodes = []),
            (this.callbacksAfterUpdate = []),
            (this.graphModel = t.graphModel),
            (this.platform = t.platform),
            (this.eventEmitter = new i()),
            this.eventEmitter.setMaxListeners(1e6),
            (this.eventSenderEmitter = new i()),
            this.eventSenderEmitter.setMaxListeners(1e6),
            (this.globalValues = {}),
            (this.globalsEventEmitter = new i()),
            this.globalsEventEmitter.setMaxListeners(1e6),
            (this.runningInEditor = t.runningInEditor),
            (this.currentFrameTime = 0),
            (this.frameNumber = 0),
            (this.updateIteration = 0),
            (this.nodeRegister = new o(this)),
            (this.timerScheduler = new r(this.scheduleUpdate.bind(this))),
            (this.componentModels = {}),
            (this.debugInspectorsEnabled = !1),
            (this.connectionsToPulse = {}),
            (this.connectionsToPulseChanged = !1),
            (this.debugInspectors = {}),
            (this.connectionPulsingCallbackScheduled = !1),
            (this.editorConnection = t.editorConnection),
            (this.rootComponent = void 0),
            (this._outputHistory = {}),
            (this._signalHistory = {}),
            (this.warningTypes = {}),
            (this.bundleFetchesInFlight = new Map()),
            (this.variants = new s({
              graphModel: this.graphModel,
              getNodeScope: () =>
                this.rootComponent ? this.rootComponent.nodeScope : null,
            })),
            this.editorConnection &&
              this.editorConnection.on("debugInspectorsUpdated", (t) => {
                this.onDebugInspectorsUpdated(t);
              });
        }
        (a.prototype.setRootComponent = function (t) {
          this.rootComponent = t;
        }),
          (a.prototype.getCurrentTime = function () {
            return this.platform.getCurrentTime();
          }),
          (a.prototype.onDebugInspectorsUpdated = function (t) {
            this.debugInspectorsEnabled &&
              ((t = t.map((t) => {
                if ("connection" === t.type) {
                  const e = t.connection;
                  t.id = e.fromId + e.fromProperty;
                } else "node" === t.type && (t.id = t.nodeId);
                return t;
              })),
              (this.debugInspectors = {}),
              t.forEach((t) => (this.debugInspectors[t.id] = t)),
              this.sendDebugInspectorValues());
          }),
          (a.prototype.updateDirtyNodes = function () {
            var t,
              e,
              n = !0,
              i = 0;
            for (this.updateIteration++, this.isUpdating = !0; n && i < 10; ) {
              var o = this._dirtyNodes;
              for (this._dirtyNodes = [], t = 0, e = o.length; t < e; ++t)
                try {
                  o[t]._deleted || o[t].update();
                } catch (t) {
                  console.error(t);
                }
              var r = this.callbacksAfterUpdate;
              for (
                this.callbacksAfterUpdate = [], t = 0, e = r.length;
                t < e;
                t++
              )
                try {
                  r[t]();
                } catch (t) {
                  console.error(t);
                }
              (n =
                this.callbacksAfterUpdate.length > 0 ||
                this._dirtyNodes.length > 0),
                i++;
            }
            this.isUpdating = !1;
          }),
          (a.prototype.update = function () {
            this.frameNumber++,
              this.updateDirtyNodes(),
              this.timerScheduler.hasPendingTimers() &&
                (this.scheduleUpdate(),
                this.timerScheduler.runTimers(this.currentFrameTime)),
              this.debugInspectorsEnabled && this.sendDebugInspectorValues();
          }),
          (a.prototype.reset = function () {
            this.eventEmitter.emit("applicationDataReloaded");
            var t = this.eventEmitter;
            ["frameStart", "frameEnd"].forEach(function (e) {
              t.removeAllListeners(e);
            }),
              (this.globalValues = {}),
              (this._dirtyNodes.length = 0),
              (this.callbacksAfterUpdate.length = 0),
              (this.timerScheduler.runningTimers = []),
              (this.timerScheduler.newTimers = []),
              (this.rootComponent = void 0),
              this.clearDebugInspectors();
          }),
          (a.prototype.nodeIsDirty = function (t) {
            this._dirtyNodes.push(t), this.scheduleUpdate();
          }),
          (a.prototype.scheduleUpdate = function () {
            this.eventEmitter.emit("scheduleUpdate");
          }),
          (a.prototype.scheduleAfterUpdate = function (t) {
            this.callbacksAfterUpdate.push(t), this.scheduleUpdate();
          }),
          (a.prototype.scheduleNextFrame = function (t) {
            this.eventEmitter.once("frameStart", t), this.scheduleUpdate();
          }),
          (a.prototype.setGlobalValue = function (t, e) {
            (this.globalValues[t] = e), this.globalsEventEmitter.emit(t);
          }),
          (a.prototype.getGlobalValue = function (t) {
            return this.globalValues[t];
          }),
          (a.prototype.registerComponentModel = function (t) {
            if (this.componentModels.hasOwnProperty(t.name))
              throw new Error("Duplicate component name " + t.name);
            this.componentModels[t.name] = t;
            var e = this;
            t.on(
              "renamed",
              function (n) {
                delete e.componentModels[n.oldName],
                  (e.componentModels[n.newName] = t);
              },
              this
            );
          }),
          (a.prototype.deregisterComponentModel = function (t) {
            this.componentModels.hasOwnProperty(t.name) &&
              (this.componentModels[t.name].removeListenersWithRef(this),
              delete this.componentModels[t.name]);
          }),
          (a.prototype.fetchComponentBundle = async function (t) {
            const e = async (t) => {
              const e = `/noodl_bundles/${t}.json`,
                n = await fetch(e);
              if (404 === n.status) throw new Error("Component not found " + t);
              const i = await n.json();
              for (const t of i)
                !1 === this.graphModel.hasComponentWithName(t.name) &&
                  (await this.graphModel.importComponentFromEditorData(t));
            };
            if (this.bundleFetchesInFlight.has(t))
              await this.bundleFetchesInFlight.get(t);
            else {
              const n = e(t);
              this.bundleFetchesInFlight.set(t, n), await n;
            }
          }),
          (a.prototype.getComponentModel = async function (t) {
            if (!t) throw new Error("Component instance must have a name");
            if (!1 === this.componentModels.hasOwnProperty(t)) {
              const e = this.graphModel.getBundleContainingComponent(t);
              if (!e) throw new Error("Can't find component model for " + t);
              for (const t of this.graphModel.getBundleDependencies(e))
                this.fetchComponentBundle(t);
              await this.fetchComponentBundle(e);
            }
            return this.componentModels[t];
          }),
          (a.prototype.hasComponentModelWithName = function (t) {
            return this.componentModels.hasOwnProperty(t);
          }),
          (a.prototype.createComponentInstanceNode = async function (
            t,
            e,
            i,
            o
          ) {
            var r = new (n(3456))(this, e, i);
            r.name = t;
            for (const t in o) r[t] = o[t];
            const s = await this.getComponentModel(t);
            return await r.setComponentModel(s), r;
          }),
          (a.prototype._formatConnectionValue = function (t) {
            if (
              "object" == typeof t &&
              t &&
              t.constructor &&
              "Node" === t.constructor.name
            )
              t = "<Node> " + t.name;
            else if (
              "object" == typeof t &&
              "undefined" != typeof window &&
              t instanceof HTMLElement
            )
              t = `DOM Node <${t.tagName}>`;
            else {
              if ("string" == typeof t && !t.startsWith("[Signal]"))
                return '"' + t + '"';
              if (Number.isNaN(t)) return "NaN";
            }
            return t;
          }),
          (a.prototype.connectionSentValue = function (t, e) {
            if (
              !this.editorConnection ||
              !this.editorConnection.isConnected() ||
              !this.debugInspectorsEnabled
            )
              return;
            const n = this.getCurrentTime();
            if (
              ((this._outputHistory[t.id] = { value: e, timestamp: n }),
              this.connectionsToPulse.hasOwnProperty(t.id))
            )
              return void (this.connectionsToPulse[t.id].timestamp = n);
            const i = [];
            t.connections.forEach((e) => {
              i.push(t.owner.id + t.name + e.node.id + e.inputPortName);
            }),
              (this.connectionsToPulse[t.id] = {
                timestamp: n,
                connections: i,
              }),
              (this.connectionsToPulseChanged = !0),
              !1 === this.connectionPulsingCallbackScheduled &&
                ((this.connectionPulsingCallbackScheduled = !0),
                setTimeout(this.clearOldConnectionPulsing.bind(this), 100));
          }),
          (a.prototype.connectionSentSignal = function (t) {
            const e = t.id;
            this._signalHistory.hasOwnProperty(e) ||
              (this._signalHistory[e] = { count: 0 }),
              this._signalHistory[e].count++,
              this.connectionSentValue(
                t,
                "[Signal] Trigger count " + this._signalHistory[e].count
              );
          }),
          (a.prototype.clearDebugInspectors = function () {
            (this.debugInspectors = {}),
              (this.connectionsToPulse = {}),
              this.editorConnection.sendPulsingConnections(
                this.connectionsToPulse
              );
          }),
          (a.prototype.clearOldConnectionPulsing = function () {
            this.connectionPulsingCallbackScheduled = !1;
            var t = this.getCurrentTime(),
              e = this;
            Object.keys(this.connectionsToPulse).forEach(function (n) {
              var i = e.connectionsToPulse[n];
              t - i.timestamp > 100 &&
                ((e.connectionsToPulseChanged = !0),
                delete e.connectionsToPulse[n]);
            }),
              this.connectionsToPulseChanged &&
                ((this.connectionsToPulseChanged = !1),
                this.editorConnection.sendPulsingConnections(
                  this.connectionsToPulse
                )),
              Object.keys(this.connectionsToPulse).length > 0 &&
                ((this.connectionPulsingCallbackScheduled = !0),
                setTimeout(this.clearOldConnectionPulsing.bind(this), 500));
          }),
          (a.prototype._getDebugInspectorValueForNode = function (t) {
            if (!this.rootComponent) return;
            const e = this.rootComponent.nodeScope.getNodesWithIdRecursive(t),
              n = e[e.length - 1];
            if (n && n.getInspectInfo) {
              const e = n.getInspectInfo();
              if (void 0 !== e) return { type: "node", id: t, value: e };
            }
          }),
          (a.prototype.sendDebugInspectorValues = function () {
            const t = [];
            for (const e in this.debugInspectors) {
              const n = this.debugInspectors[e];
              if (
                "connection" === n.type &&
                this._outputHistory.hasOwnProperty(e)
              ) {
                const n = this._outputHistory[e].value;
                t.push({
                  type: "connection",
                  id: e,
                  value: this._formatConnectionValue(n),
                });
              } else if ("node" === n.type) {
                const n = this._getDebugInspectorValueForNode(e);
                n && t.push(n);
              }
            }
            t.length > 0 && this.editorConnection.sendDebugInspectorValues(t),
              this.connectionsToPulseChanged &&
                ((this.connectionsToPulseChanged = !1),
                this.editorConnection.sendPulsingConnections(
                  this.connectionsToPulse
                ));
          }),
          (a.prototype.setDebugInspectorsEnabled = function (t) {
            (this.debugInspectorsEnabled = t),
              t && this.sendDebugInspectorValues();
          }),
          (a.prototype.sendGlobalEventFromEventSender = function (t, e) {
            this.eventSenderEmitter.emit(t, e);
          }),
          (a.prototype.setPopupCallbacks = function ({
            onShow: t,
            onClose: e,
          }) {
            (this.onShowPopup = t), (this.onClosePopup = e);
          }),
          (a.prototype.showPopup = async function (t, e, n) {
            if (!this.onShowPopup) return;
            const i = this.rootComponent.nodeScope,
              o = await i.createNode(t);
            for (const t in e) o.setInputValue(t, e[t]);
            const r = i.createPrimitiveNode("Group");
            r.setInputValue("flexDirection", "node"),
              r.setInputValue("cssClassName", "noodl-popup");
            const s = this.graphModel.getSettings().bodyScroll;
            r.setInputValue("position", s ? "fixed" : "absolute");
            var a = o.nodeScope.getNodesWithType("NavigationClosePopup");
            if (a && a.length > 0)
              for (var l = 0; l < a.length; l++)
                a[l]._setCloseCallback((t, e) => {
                  this.scheduleNextFrame(() => {
                    i.hasNodeWithId(r.id) &&
                      (this.onClosePopup(r),
                      i.deleteNode(r),
                      n && n.onClosePopup && n.onClosePopup(t, e));
                  });
                });
            this.onShowPopup(r),
              requestAnimationFrame(() => {
                r.addChild(o);
              });
          }),
          (a.prototype.setWarningTypes = function (t) {
            Object.assign(this.warningTypes, t);
          }),
          (a.prototype.isWarningTypeEnabled = function (t) {
            return (
              !this.warningTypes.hasOwnProperty(t) || !!this.warningTypes[t]
            );
          }),
          (a.prototype.getDefaultValueForInput = function (t, e) {
            if (!1 === this.nodeRegister.hasNode(t)) return;
            const n = this.nodeRegister.getNodeMetadata(t).inputs[e];
            return n
              ? n.type.defaultUnit
                ? { value: n.default, unit: n.type.defaultUnit }
                : n.default
              : void 0;
          }),
          (t.exports = a);
      },
      8391: (t, e, n) => {
        const i = n(9954),
          o = n(4348);
        function r(t, e, n) {
          const i = t.registerInputIfNeeded;
          t.registerInputIfNeeded = function (o) {
            if ((i && i.call(t, o), t.hasInput(o) || !o.startsWith(e))) return;
            const r = Number(o.slice(e.length + 1));
            t.registerInput(o, {
              type: n.type,
              set: n.createSetter.call(t, r),
            });
          };
        }
        t.exports = {
          defineNode: function (t) {
            if (!t.category) throw new Error("Node must have a category");
            if (!t.name) throw new Error("Node must have a name");
            const e = {
              inputs: {},
              outputs: {},
              category: t.category,
              dynamicports: t.dynamicports,
              exportDynamicPorts: t.exportDynamicPorts,
              useVariants: t.useVariants,
              allowChildren: t.allowChildren,
              allowChildrenWithCategory: t.allowChildrenWithCategory,
              singleton: t.singleton,
              connectionPanel: t.connectionPanel,
              allowAsChild: t.allowAsChild,
              visualStates: t.visualStates,
              panels: t.panels,
              color: t.color,
              usePortAsLabel: t.usePortAsLabel,
              portLabelTruncationMode: t.portLabelTruncationMode,
              name: t.name,
              displayNodeName: t.displayNodeName || t.displayName,
              deprecated: t.deprecated,
              haveComponentPorts: t.haveComponentPorts,
              version: t.version,
              module: t.module,
              docs: t.docs,
              allowAsExportRoot: t.allowAsExportRoot,
            };
            (t._internal = t._internal || {}),
              (t.prototypeExtensions =
                t.methods || t.prototypeExtensions || {}),
              (t.inputs = t.inputs || {}),
              (t.outputs = t.outputs || {}),
              (t.initialize = t.initialize || function () {});
            let n = {};
            function s(t, e) {
              i.call(this, t, e);
            }
            (function (t, e, n) {
              Object.keys(n).forEach(function (i) {
                !(function (t, e, n, i) {
                  if (t.hasOwnProperty(n))
                    throw new Error(
                      "Input property " + n + " already registered"
                    );
                  i.set || i.valueChangedToTrue || (i.set = () => {}),
                    i.set &&
                      ((t[n] = { set: i.set }),
                      ["color", "textStyle"].forEach((e) => {
                        !i.type ||
                          (i.type !== e && i.type.name !== e) ||
                          (t[n].type = e);
                      })),
                    i.setUnitType && (t[n].setUnitType = i.setUnitType),
                    (e.inputs[n] = {
                      displayName: i.displayName,
                      editorName: i.editorName,
                      group: i.group,
                      type: i.type,
                      default: i.default,
                      index: i.index,
                      exportToEditor:
                        !i.hasOwnProperty("exportToEditor") || i.exportToEditor,
                      inputPriority: i.inputPriority || 0,
                      tooltip: i.tooltip,
                      tab: i.tab,
                      popout: i.popout,
                      allowVisualStates: i.allowVisualStates,
                    }),
                    i.valueChangedToTrue &&
                      (e.inputs[n].type = {
                        name: "signal",
                        allowConnectionsOnly: !0,
                      });
                })(t, e, i, n[i]);
              });
            })(n, e, t.inputs),
              (function (t, e) {
                Object.keys(e).forEach(function (n) {
                  var i = e[n];
                  t.outputs[n] = {
                    displayName: i.displayName,
                    editorName: i.editorName,
                    group: i.group,
                    type: i.type,
                    index: i.index,
                    exportToEditor:
                      !i.hasOwnProperty("exportToEditor") || i.exportToEditor,
                  };
                });
              })(e, t.outputs),
              Object.keys(t.prototypeExtensions).forEach(function (e) {
                t.prototypeExtensions[e].value ||
                  (t.prototypeExtensions[e] = {
                    value: t.prototypeExtensions[e],
                  });
              }),
              (s.prototype = Object.create(i.prototype, t.prototypeExtensions)),
              Object.defineProperty(s.prototype, "name", { value: t.name }),
              t.getInspectInfo &&
                (s.prototype.getInspectInfo = t.getInspectInfo),
              t.nodeScopeDidInitialize &&
                (s.prototype.nodeScopeDidInitialize = t.nodeScopeDidInitialize);
            const a = function (i, a, l) {
              const u = new s(i, a);
              var p, c;
              return (
                (u._inputs = Object.create(n)),
                Object.keys(t.inputs).forEach(function (e) {
                  var n = t.inputs[e];
                  n.valueChangedToTrue &&
                    (u._inputs[e] = {
                      set: o.createSetter({
                        valueChangedToTrue: n.valueChangedToTrue,
                      }),
                    });
                }),
                Object.keys(t.outputs).forEach(function (e) {
                  var n = t.outputs[e];
                  "signal" === n.type
                    ? u.registerOutput(e, { getter: function () {} })
                    : u.registerOutput(e, n);
                }),
                t.numberedInputs &&
                  (function (t, e) {
                    for (const n of Object.keys(e)) r(t, n, e[n]);
                  })(u, t.numberedInputs),
                (u.nodeScope = l),
                (p = u._inputValues),
                (c = e.inputs),
                Object.keys(c).forEach((t) => {
                  const e = c[t].default;
                  void 0 !== e &&
                    (c[t].type.defaultUnit
                      ? (p[t] = { unit: c[t].type.defaultUnit, value: e })
                      : (p[t] = e));
                }),
                t.initialize.call(u),
                u
              );
            };
            return (
              (a.metadata = e),
              t.numberedInputs &&
                (function (t, e, n) {
                  const i = Object.keys(n);
                  i.length &&
                    (t.setupNumberedInputDynamicPorts = function (t, o) {
                      const r = t.editorConnection;
                      function s(t) {
                        const e = i
                          .map((e) =>
                            (function (t, e, n) {
                              const i = t.component
                                  .getConnectionsTo(t.id)
                                  .map((t) => t.targetPort),
                                o = Object.keys(t.parameters)
                                  .concat(i)
                                  .filter((t) => t.startsWith(e + " ")),
                                r =
                                  (o.length
                                    ? 1 +
                                      Math.max(
                                        ...o.map((t) =>
                                          Number(t.slice(e.length + 1))
                                        )
                                      )
                                    : 0) + 1,
                                s = [];
                              for (let t = 0; t < r; t++) {
                                const i = {
                                  name: e + " " + t,
                                  displayName: (n.displayPrefix || e) + " " + t,
                                  type: n.type,
                                  plug: "input",
                                  group: n.group,
                                };
                                n.hasOwnProperty("index") &&
                                  (i.index = n.index + t),
                                  s.push(i);
                              }
                              return s;
                            })(t, e, n[e])
                          )
                          .flat();
                        r.sendDynamicPorts(t.id, e);
                      }
                      r &&
                        r.isRunningLocally() &&
                        o.on("nodeAdded." + e, (t) => {
                          s(t),
                            t.on("parameterUpdated", () => {
                              s(t);
                            }),
                            t.on("inputConnectionAdded", () => {
                              s(t);
                            }),
                            t.on("inputConnectionRemoved", () => {
                              s(t);
                            });
                        });
                    });
                })(a, t.name, t.numberedInputs),
              a
            );
          },
          extend: function t(e, n) {
            for (var i in n)
              if ("initialize" === i && e.initialize) {
                var o = e.initialize;
                e.initialize = function () {
                  o.call(this), n.initialize.call(this);
                };
              } else
                n[i] && n[i].constructor === Object
                  ? (e[i] = t(e[i] || {}, n[i]))
                  : n[i] &&
                    n[i].constructor === Array &&
                    e[i] &&
                    e[i].constructor == Array
                  ? (e[i] = e[i].concat(n[i]))
                  : (e[i] = n[i]);
            return e;
          },
        };
      },
      8620: (t) => {
        "use strict";
        function e(t, e, n) {
          var i = { name: t, type: e.type, plug: n };
          return (
            e.group && (i.group = e.group),
            e.displayName && (i.displayName = e.displayName),
            e.description && (i.description = e.description),
            e.editorName && (i.editorName = e.editorName),
            void 0 !== e.default && (i.default = e.default),
            e.hasOwnProperty("index") && (i.index = e.index),
            e.tooltip && (i.tooltip = e.tooltip),
            e.tab && (i.tab = e.tab),
            e.popout && (i.popout = e.popout),
            e.allowVisualStates && (i.allowVisualStates = e.allowVisualStates),
            i
          );
        }
        t.exports = function (t) {
          var n = {
              typecasts: [
                {
                  from: "string",
                  to: [
                    "number",
                    "boolean",
                    "image",
                    "color",
                    "enum",
                    "textStyle",
                    "dimension",
                    "array",
                    "object",
                  ],
                },
                { from: "boolean", to: ["number", "string", "signal"] },
                { from: "number", to: ["boolean", "string", "dimension"] },
                { from: "date", to: ["string"] },
                { from: "signal", to: ["boolean", "number"] },
                { from: "image", to: [] },
                { from: "cloudfile", to: ["string", "image"] },
                { from: "color", to: [] },
                { from: "enum", to: [] },
                { from: "object", to: [] },
                { from: "domelement", to: [] },
                { from: "reference", to: [] },
                { from: "font", to: [] },
                { from: "textStyle", to: ["string"] },
                { from: "collection", to: ["array"] },
                { from: "array", to: ["collection"] },
              ],
              dynamicports: [
                { type: "conditionalports", name: "basic" },
                { type: "expand", name: "basic" },
              ],
              colors: {
                nodes: {
                  component: {
                    base: "#6e3599",
                    baseHighlighted: "#8440b8",
                    header: "#6e3599",
                    headerHighlighted: "#8440b8",
                    outline: "#6e3599",
                    outlineHighlighted: "#b58900",
                    text: "#ffffff",
                  },
                  visual: {
                    base: "#2a4e6e",
                    baseHighlighted: "#376690",
                    header: "#2a4e6e",
                    headerHighlighted: "#376690",
                    outline: "#2a4e6e",
                    outlineHighlighted: "#b58900",
                    text: "#ffffff",
                  },
                  data: {
                    base: "#6d8241",
                    baseHighlighted: "#97A76E",
                    header: "#6d8241",
                    headerHighlighted: "#2f8d22",
                    outline: "#6d8241",
                    outlineHighlighted: "#b58900",
                    text: "#ffffff",
                  },
                  javascript: {
                    base: "#a24176",
                    baseHighlighted: "#ab5484",
                    header: "#a24176",
                    headerHighlighted: "#ab5484",
                    outline: "#ab5484",
                    outlineHighlighted: "#d57bab",
                    text: "#ffffff",
                  },
                  default: {
                    base: "#3e434e",
                    baseHighlighted: "#505768",
                    header: "#3e434e",
                    headerHighlighted: "#505768",
                    outline: "#3e434e",
                    outlineHighlighted: "#b58900",
                    text: "#ffffff",
                  },
                },
                connections: {
                  signal: {
                    normal: "#468c8c",
                    highlighted: "#73babb",
                    pulsing: "#92d9d8",
                  },
                  default: {
                    normal: "#916311",
                    highlighted: "#ffa300",
                    pulsing: "#ffe85d",
                  },
                },
              },
              nodetypes: [
                {
                  name: "Component Children",
                  shortDesc:
                    "This node is a placeholder for where children of this component will be inserted.",
                  docs: "https://docs.noodl.net/nodes/component-utilities/component-children",
                  color: "component",
                  panels: "none",
                  allowAsChild: !0,
                  category: "Visual",
                  haveComponentChildren: ["Visual"],
                },
              ],
            },
            i = Object.keys(t._constructors);
          i.forEach(function (i) {
            var o = t._constructors[i].metadata,
              r = { name: i };
            n.nodetypes.push(r),
              o.version && (r.version = o.version),
              o.displayNodeName && (r.displayNodeName = o.displayNodeName),
              o.shortDesc && (r.shortDesc = o.shortDesc),
              o.module && (r.module = o.module),
              o.deprecated && (r.deprecated = !0),
              o.haveComponentPorts && (r.haveComponentPorts = !0),
              "Visual" === o.category &&
                ((r.allowAsChild = !0),
                (r.allowAsExportRoot = !0),
                (r.color = "visual")),
              void 0 !== o.allowAsExportRoot &&
                (r.allowAsExportRoot = o.allowAsExportRoot),
              o.allowChildren &&
                ((r.allowChildrenWithCategory = ["Visual"]),
                (r.color = "visual")),
              o.allowChildrenWithCategory &&
                (r.allowChildrenWithCategory = o.allowChildrenWithCategory),
              o.singleton && (r.singleton = !0),
              o.allowAsChild && (r.allowAsChild = !0),
              o.docs && (r.docs = o.docs),
              o.shortDocs
                ? (r.shortDocs = o.shortDocs)
                : o.docs &&
                  0 === o.docs.indexOf("https://docs.noodl.net") &&
                  (r.shortDocs = o.docs.replace("/#", "") + "-short.md"),
              (r.category = o.category),
              o.panels && (r.panels = o.panels),
              o.usePortAsLabel &&
                ((r.usePortAsLabel = o.usePortAsLabel),
                (r.portLabelTruncationMode = o.portLabelTruncationMode)),
              o.color && (r.color = o.color),
              o.dynamicports &&
                (r.dynamicports = (function (t) {
                  const n = [];
                  for (const i of t.dynamicports)
                    if (i.ports || i.template || i.port || i.channelPort)
                      n.push(i);
                    else if (i.inputs || i.outputs) {
                      const o = [];
                      if (i.inputs)
                        for (const n of i.inputs)
                          o.push(e(n, t.inputs[n], "input"));
                      if (i.outputs)
                        for (const n of i.outputs)
                          o.push(e(n, t.outputs[n], "output"));
                      const r = {
                        name: i.name || "conditionalports/basic",
                        condition: i.condition,
                        ports: o,
                      };
                      n.push(r);
                    }
                  return n;
                })(o)),
              o.exportDynamicPorts &&
                (r.exportDynamicPorts = o.exportDynamicPorts),
              o.visualStates && (r.visualStates = o.visualStates),
              o.useVariants && (r.useVariants = o.useVariants),
              o.connectionPanel && (r.connectionPanel = o.connectionPanel),
              (r.ports = []);
            var s = r.dynamicports || [],
              a = {},
              l = {};
            s
              .filter((t) => void 0 !== t.channelPort)
              .forEach((t) => {
                l[t.channelPort.plug + "/" + t.channelPort.name] = !0;
              }),
              s.length && (r.dynamicports = s),
              Object.keys(o.inputs).forEach(function (t) {
                if (
                  !a.hasOwnProperty("input/" + t) &&
                  !l.hasOwnProperty("input/" + t)
                ) {
                  var n = o.inputs[t];
                  !1 !== n.exportToEditor && r.ports.push(e(t, n, "input"));
                }
              }),
              Object.keys(o.outputs).forEach(function (t) {
                var e, n, i;
                a.hasOwnProperty("output/" + t) ||
                  l.hasOwnProperty("output/" + t) ||
                  ((e = t),
                  (n = o.outputs[t]),
                  (i = { name: e, type: n.type, plug: "output" }),
                  n.group && (i.group = n.group),
                  n.displayName && (i.displayName = n.displayName),
                  n.editorName && (i.editorName = n.editorName),
                  n.hasOwnProperty("index") && (i.index = n.index),
                  r.ports.push(i));
              });
          }),
            (n.nodeIndex = {
              coreNodes: [
                {
                  name: "UI Elements",
                  description: "Buttons, inputs, containers, media",
                  type: "visual",
                  subCategories: [
                    {
                      name: "Basic Elements",
                      items: [
                        "Group",
                        "Text",
                        "Image",
                        "Video",
                        "Circle",
                        "net.noodl.visual.icon",
                      ],
                    },
                    {
                      name: "UI Controls",
                      items: [
                        "net.noodl.controls.button",
                        "net.noodl.controls.checkbox",
                        "net.noodl.controls.options",
                        "net.noodl.controls.radiobutton",
                        "Radio Button Group",
                        "net.noodl.controls.range",
                        "net.noodl.controls.textinput",
                      ],
                    },
                  ],
                },
                {
                  name: "Navigation & Popups",
                  description: "Page routing, navigation, popups",
                  type: "logic",
                  subCategories: [
                    {
                      name: "Navigation",
                      items: [
                        "Router",
                        "RouterNavigate",
                        "PageInputs",
                        "net.noodl.externallink",
                        "PageStackNavigateToPath",
                      ],
                    },
                    {
                      name: "Component Stack",
                      items: [
                        "Page Stack",
                        "PageStackNavigate",
                        "PageStackNavigateBack",
                      ],
                    },
                    {
                      name: "Popups",
                      items: ["NavigationShowPopup", "NavigationClosePopup"],
                    },
                  ],
                },
                {
                  name: "Logic & Utilities",
                  description: "Logic, events, string manipulation",
                  type: "logic",
                  subCategories: [
                    {
                      name: "General Utils",
                      items: [
                        "States",
                        "Value Changed",
                        "Timer",
                        "Color Blend",
                        "Number Remapper",
                        "Counter",
                        "Drag",
                      ],
                    },
                    {
                      name: "Logic",
                      items: [
                        "Boolean To String",
                        "Switch",
                        "And",
                        "Or",
                        "Condition",
                        "Inverter",
                      ],
                    },
                    {
                      name: "Events",
                      items: ["Event Sender", "Event Receiver"],
                    },
                    {
                      name: "String Manipulation",
                      items: [
                        "Substring",
                        "String Mapper",
                        "String Format",
                        "Date To String",
                        "Unique Id",
                      ],
                    },
                    {
                      name: "System",
                      items: ["Screen Resolution", "Open File Picker"],
                    },
                    {
                      name: "Variables",
                      items: ["String", "Boolean", "Color", "Number"],
                    },
                  ],
                },
                {
                  name: "Component Utilities",
                  description: "Component inputs, outputs & object",
                  type: "component",
                  subCategories: [
                    {
                      name: "",
                      items: [
                        "Component Inputs",
                        "Component Outputs",
                        "Component Children",
                        "net.noodl.ComponentObject",
                        "net.noodl.ParentComponentObject",
                        "net.noodl.SetComponentObjectProperties",
                        "net.noodl.SetParentComponentObjectProperties",
                      ],
                    },
                  ],
                },
                {
                  name: "Read & Write Data",
                  description: "Arrays, objects, cloud data",
                  type: "data",
                  subCategories: [
                    {
                      name: "",
                      items: [
                        "For Each",
                        "For Each Actions",
                        "Model2",
                        "SetModelProperties",
                        "NewModel",
                        "Set Variable",
                        "Variable2",
                      ],
                    },
                    {
                      name: "Array",
                      items: [
                        "Collection2",
                        "CollectionNew",
                        "CollectionRemove",
                        "CollectionClear",
                        "CollectionInsert",
                        "Filter Collection",
                        "Map Collection",
                        "Static Data",
                      ],
                    },
                    {
                      name: "Cloud Data",
                      items: [
                        "DbModel2",
                        "NewDbModelProperties",
                        "FilterDBModels",
                        "SetDbModelProperties",
                        "DbCollection2",
                        "DeleteDbModelProperties",
                        "AddDbModelRelation",
                        "RemoveDbModelRelation",
                        "Cloud File",
                        "Upload File",
                        "Cloud Function",
                      ],
                    },
                    {
                      name: "User",
                      items: [
                        "net.noodl.user.LogIn",
                        "net.noodl.user.LogOut",
                        "net.noodl.user.SignUp",
                        "net.noodl.user.User",
                        "net.noodl.user.SetUserProperties",
                        "net.noodl.user.VerifyEmail",
                        "net.noodl.user.SendEmailVerification",
                        "net.noodl.user.ResetPassword",
                        "net.noodl.user.RequestPasswordReset",
                      ],
                    },
                    { name: "External Data", items: ["REST2"] },
                  ],
                },
                {
                  name: "Custom Code",
                  description: "Custom JavaScript and CSS",
                  type: "javascript",
                  subCategories: [
                    {
                      name: "",
                      items: [
                        "Expression",
                        "JavaScriptFunction",
                        "Javascript2",
                        "CSS Definition",
                      ],
                    },
                  ],
                },
              ],
            });
          const o = [];
          return (
            i.forEach((e) => {
              t._constructors[e].metadata.module && o.push(e);
            }),
            o.length && (n.nodeIndex.moduleNodes = [{ name: "", items: o }]),
            n
          );
        };
      },
      492: (t) => {
        "use strict";
        function e(t) {
          (this._constructors = {}), (this.context = t);
        }
        (e.prototype.register = function (t) {
          var e = t.metadata.name;
          this._constructors[e] = t;
        }),
          (e.prototype.createNode = function (t, e, n) {
            if (!1 === this._constructors.hasOwnProperty(t))
              throw new Error("Unknown node type with name " + t);
            return this._constructors[t](this.context, e, n);
          }),
          (e.prototype.getNodeMetadata = function (t) {
            if (!1 === this._constructors.hasOwnProperty(t))
              throw new Error("Unknown node type with name " + t);
            return this._constructors[t].metadata;
          }),
          (e.prototype.hasNode = function (t) {
            return this._constructors.hasOwnProperty(t);
          }),
          (e.prototype.getInputType = function (t, e) {
            const n = this.getNodeMetadata(t);
            return n.inputs[e] && n.inputs[e].type;
          }),
          (t.exports = e);
      },
      285: (t) => {
        "use strict";
        t.exports = {
          node: {
            name: "Component Inputs",
            shortDesc: "This node is used to define the inputs of a component.",
            docs: "https://docs.noodl.net/nodes/component-utilities/component-inputs",
            panels: [
              {
                name: "PortEditor",
                context: ["select", "connectFrom"],
                title: "Inputs",
                plug: "output",
                type: { name: "*" },
                canArrangeInGroups: !0,
              },
              { name: "PropertyEditor", hidden: !0 },
            ],
            getInspectInfo() {
              return {
                type: "value",
                value: this.nodeScope.componentOwner._internal.inputValues,
              };
            },
            color: "component",
            haveComponentPorts: !0,
            category: "Component Utilities",
            methods: {
              registerOutputIfNeeded: function (t) {
                this.hasOutput(t) ||
                  this.registerOutput(t, {
                    getter: function () {
                      return this.nodeScope.componentOwner._internal
                        .inputValues[t];
                    },
                  });
              },
              _updateDependencies: function () {
                this.nodeScope.componentOwner.update();
              },
            },
          },
        };
      },
      3456: (t, e, n) => {
        "use strict";
        var i = n(9954),
          o = n(7083);
        let r = 0;
        function s(t, e, n) {
          i.call(this, t, e),
            (this.nodeScope = new o(t, this)),
            (this.parentNodeScope = n),
            (this._internal.childRoot = null),
            (this._internal.componentOutputValues = {}),
            (this._internal.componentOutputs = []),
            (this._internal.componentInputs = []),
            (this._internal.inputValues = {}),
            (this._internal.roots = []),
            (this._internal.instanceId = "__$ndl_componentInstaceId" + r),
            r++;
        }
        (s.prototype = Object.create(i.prototype, {
          setComponentModel: {
            value: async function (t) {
              this.componentModel = t;
              var e = this;
              await this.nodeScope.setComponentModel(t),
                (this._internal.componentInputs =
                  this.nodeScope.getNodesWithType("Component Inputs")),
                (this._internal.componentOutputs =
                  this.nodeScope.getNodesWithType("Component Outputs")),
                Object.values(t.getInputPorts()).forEach(
                  this.registerComponentInputPort.bind(this)
                ),
                Object.values(t.getOutputPorts()).forEach(
                  this.registerComponentOutputPort.bind(this)
                );
              const n = t.roots || [];
              (this._internal.roots = n.map((t) =>
                this.nodeScope.getNodeWithId(t)
              )),
                t.on(
                  "rootAdded",
                  (t) => {
                    this._internal.roots.push(this.nodeScope.getNodeWithId(t)),
                      this.forceUpdate();
                  },
                  this
                ),
                t.on(
                  "rootRemoved",
                  function (t) {
                    const e = this._internal.roots.findIndex((e) => e.id === t);
                    -1 !== e && this._internal.roots.splice(e, 1),
                      this.forceUpdate();
                  },
                  this
                ),
                t.on(
                  "inputPortAdded",
                  this.registerComponentInputPort.bind(this),
                  this
                ),
                t.on(
                  "outputPortAdded",
                  this.registerComponentOutputPort.bind(this),
                  this
                ),
                t.on(
                  "inputPortRemoved",
                  function (t) {
                    e.hasInput(t.name) && e.deregisterInput(t.name);
                  },
                  this
                ),
                t.on(
                  "outputPortRemoved",
                  function (t) {
                    this.hasOutput(t.name) && e.deregisterOutput(t.name);
                  },
                  this
                ),
                t.on(
                  "nodeAdded",
                  function (t) {
                    "Component Inputs" === t.type
                      ? e._internal.componentInputs.push(
                          e.nodeScope.getNodeWithId(t.id)
                        )
                      : "Component Outputs" === t.type &&
                        e._internal.componentOutputs.push(
                          e.nodeScope.getNodeWithId(t.id)
                        );
                  },
                  this
                ),
                t.on(
                  "nodeRemoved",
                  function (t) {
                    function n(t, e) {
                      return t.filter((t) => t.id !== e);
                    }
                    "Component Inputs" === t.type
                      ? (e._internal.componentInputs = n(
                          e._internal.componentInputs,
                          t.id
                        ))
                      : "Component Outputs" === t.type &&
                        (e._internal.componentOutputs = n(
                          e._internal.componentOutputs,
                          t.id
                        ));
                  },
                  this
                ),
                t.on(
                  "renamed",
                  function (t) {
                    e.name = t.newName;
                  },
                  this
                );
            },
          },
          _onNodeDeleted: {
            value: function () {
              this.componentModel &&
                (this.componentModel.removeListenersWithRef(this),
                (this.componentModel = void 0)),
                this.nodeScope.reset(),
                i.prototype._onNodeDeleted.call(this);
            },
          },
          registerComponentInputPort: {
            value: function (t) {
              this.registerInput(t.name, {
                set: function (e) {
                  (this._internal.inputValues[t.name] = e),
                    this._internal.componentInputs.forEach(function (e) {
                      e.registerOutputIfNeeded(t.name),
                        e.flagOutputDirty(t.name);
                    });
                },
              });
            },
          },
          registerComponentOutputPort: {
            value: function (t) {
              this.registerOutput(t.name, {
                getter: function () {
                  return this._internal.componentOutputValues[t.name];
                },
              });
            },
          },
          setOutputFromComponentOutput: {
            value: function (t, e) {
              !1 !== this.hasOutput(t) &&
                (this._internal.creatorCallbacks &&
                  this._internal.creatorCallbacks.onOutputChanged &&
                  this._internal.creatorCallbacks.onOutputChanged(
                    t,
                    e,
                    this._internal.componentOutputValues[t]
                  ),
                (this._internal.componentOutputValues[t] = e),
                this.flagOutputDirty(t));
            },
          },
          setChildRoot: {
            value: function (t) {
              const e = this._internal.childRoot,
                n = t;
              if (
                ((this._internal.childRoot = n),
                this.model && this.model.children)
              ) {
                const t = this.parentNodeScope,
                  i = this.model.children
                    .filter((t) => "Component Children" !== t.type)
                    .map((e) => t.getNodeWithId(e.id));
                if (e)
                  for (let t = 0; t < i.length; t++)
                    e.isChild(i[t]) && e.removeChild(i[t]);
                if (n)
                  for (let t = 0; t < i.length; t++) {
                    const e = i[t],
                      n = e.model.parent.children.indexOf(e.model);
                    this.addChild(e, n);
                  }
              }
            },
          },
          getChildRootIndex: {
            value: function () {
              if (
                !this._internal.childRoot ||
                !this._internal.childRoot.model ||
                !this._internal.childRoot.model.children
              )
                return 0;
              for (
                var t = this._internal.childRoot.model.children, e = 0;
                e < t.length;
                e++
              )
                if ("Component Children" === t[e].type) return e;
              return 0;
            },
          },
          getChildRoot: {
            value: function () {
              return this._internal.childRoot ? this._internal.childRoot : null;
            },
          },
          getRoots: {
            value: function () {
              return this._internal.roots;
            },
          },
          render: {
            value: function () {
              return 0 === this._internal.roots.length
                ? null
                : this._internal.roots[0].render();
            },
          },
          setChildIndex: {
            value: function (t) {
              this.getRoots().forEach((e) => e.setChildIndex(t));
            },
          },
          addChild: {
            value: function (t, e) {
              this.getChildRoot().addChild(t, e + this.getChildRootIndex());
            },
          },
          removeChild: {
            value: function (t) {
              this.getChildRoot().removeChild(t);
            },
          },
          getChildren: {
            value: function (t) {
              const e = this.getChildRoot();
              return e ? e.getChildren() : [];
            },
          },
          isChild: {
            value: function (t) {
              return !!this.getChildRoot() && this.getChildRoot().isChild(t);
            },
          },
          contains: {
            value: function (t) {
              return this.getRoots().some((e) => e.contains && e.contains(t));
            },
          },
          flagDirty: {
            value: function () {
              if (!this._dirty) {
                i.prototype.flagDirty.call(this);
                for (
                  var t = this._internal.componentInputs, e = 0, n = t.length;
                  e < n;
                  e++
                )
                  t[e].flagDirty();
                this._internal.componentOutputs.forEach(function (t) {
                  t.flagDirty();
                });
              }
            },
          },
          getRef: {
            value: function () {
              const t = this._internal.roots[0];
              return t ? t.getRef() : void 0;
            },
          },
          update: {
            value: function () {
              i.prototype.update.call(this),
                this._internal.componentOutputs.forEach(function (t) {
                  t.update();
                });
            },
          },
          forceUpdate: {
            value: function () {
              this.parent &&
                ((this.parent.cachedChildren = void 0),
                this.parent.forceUpdate());
            },
          },
          getInstanceId: {
            value() {
              return this._internal.instanceId;
            },
          },
        })),
          (s.prototype.constructor = s),
          (t.exports = s);
      },
      8626: (t) => {
        "use strict";
        t.exports = {
          node: {
            category: "Component Utilities",
            name: "Component Outputs",
            shortDesc:
              "This node is used to define the outputs of a component.",
            docs: "https://docs.noodl.net/nodes/component-utilities/component-outputs",
            panels: [
              {
                name: "PortEditor",
                context: ["select", "connectTo"],
                title: "Outputs",
                plug: "input",
                type: { name: "*" },
                canArrangeInGroups: !0,
              },
              { name: "PropertyEditor", hidden: !0 },
            ],
            color: "component",
            haveComponentPorts: !0,
            prototypeExtensions: {
              registerInputIfNeeded: function (t) {
                this.hasInput(t) ||
                  this.registerInput(t, {
                    set: function (e) {
                      this.nodeScope.componentOwner.setOutputFromComponentOutput(
                        t,
                        e
                      );
                    },
                  });
              },
            },
          },
        };
      },
      7083: (t, e, n) => {
        "use strict";
        const i = n(7320);
        function o(t, e) {
          (this.context = t),
            (this.nodes = {}),
            (this.componentOwner = e),
            (this.componentInstanceChildren = {});
        }
        (o.prototype.addConnection = function (t) {
          try {
            (e = t),
              ["sourceId", "sourcePort", "targetId", "targetPort"].forEach(
                function (t) {
                  if (!e[t]) throw new Error("Missing " + t);
                }
              );
          } catch (t) {
            throw new Error("Error in connection: " + t.message);
          }
          var e;
          try {
            var n = this.getNodeWithId(t.sourceId),
              i = this.getNodeWithId(t.targetId);
            i.registerInputIfNeeded(t.targetPort),
              n.registerOutputIfNeeded(t.sourcePort),
              i.connectInput(t.targetPort, n, t.sourcePort);
          } catch (t) {
            console.error(t.message);
          }
        }),
          (o.prototype.setNodeParameters = function (t, e) {
            const n = this.context.variants.getVariant(e.type, e.variant);
            if (n) t.setVariant(n);
            else {
              const n = e.parameters;
              var i = Object.keys(n);
              if (this.context.nodeRegister.hasNode(t.name)) {
                var o = this.context.nodeRegister.getNodeMetadata(t.name);
                i.sort(function (t, e) {
                  var n = o.inputs[t],
                    i = o.inputs[e];
                  return (i ? i.inputPriority : 0) - (n ? n.inputPriority : 0);
                });
              }
              i.forEach((e) => {
                t.registerInputIfNeeded(e),
                  !1 !== t.hasInput(e) && t.queueInput(e, n[e]);
              });
            }
          }),
          (o.prototype.createNodeFromModel = async function (t) {
            if ("Component Children" !== t.type) {
              var e;
              try {
                (e = await this.createNode(t.type, t.id)).setNodeModel(t);
              } catch (e) {
                return (
                  console.error(e.message),
                  void (
                    this.context.editorConnection &&
                    this.context.isWarningTypeEnabled("nodescope") &&
                    this.context.editorConnection.sendWarning(
                      this.componentOwner.name,
                      t.id,
                      "nodelibrary-unknown-node",
                      { message: e.message, showGlobally: !0 }
                    )
                  )
                );
              }
              t.variant && e.setVariant && e.setVariant(t.variant),
                this.setNodeParameters(e, t),
                t.parent && this.insertNodeInTree(e, t);
            } else if (t.parent) {
              var n = this.getNodeWithId(t.parent.id);
              this.componentOwner.setChildRoot(n);
            }
          }),
          (o.prototype.insertNodeInTree = function (t, e) {
            var n = this.getNodeWithId(e.parent.id),
              i = e.parent.children.indexOf(e);
            if (!n.addChild)
              throw new Error(
                "Node " +
                  n.id +
                  " of type " +
                  n.constructor.name +
                  " can't have children"
              );
            n.addChild(t, i);
          }),
          (o.prototype.getNodeWithId = function (t) {
            if (!1 === this.nodes.hasOwnProperty(t))
              throw new Error("Unknown node id " + t);
            return this.nodes[t];
          }),
          (o.prototype.hasNodeWithId = function (t) {
            return this.nodes.hasOwnProperty(t);
          }),
          (o.prototype.createPrimitiveNode = function (t, e, n) {
            if ((e || (e = i()), this.nodes.hasOwnProperty(e)))
              throw Error("duplicate id " + e);
            const o = this.context.nodeRegister.createNode(t, e, this);
            if (n) for (const t in n) o[t] = n[t];
            return (this.nodes[e] = o), o;
          }),
          (o.prototype.createNode = async function (t, e, n) {
            if ((e || (e = i()), this.nodes.hasOwnProperty(e)))
              throw Error("duplicate id " + e);
            let o;
            if (this.context.nodeRegister.hasNode(t)) {
              if (((o = this.context.nodeRegister.createNode(t, e, this)), n))
                for (const t in n) o[t] = n[t];
            } else
              (o = await this.context.createComponentInstanceNode(
                t,
                e,
                this,
                n
              )),
                (this.componentInstanceChildren[e] = o);
            return (this.nodes[e] = o), o;
          }),
          (o.prototype.getNodesWithIdRecursive = function (t) {
            var e = n(3456),
              i = [];
            return (
              (function t(n, i, o) {
                n.nodes.hasOwnProperty(i) && o.push(n.nodes[i]),
                  Object.keys(n.nodes)
                    .filter(function (t) {
                      return n.nodes[t] instanceof e;
                    })
                    .forEach(function (e) {
                      t(n.nodes[e].nodeScope, i, o);
                    });
              })(this, t, i),
              i
            );
          }),
          (o.prototype.getNodesWithType = function (t) {
            var e = this;
            return Object.keys(this.nodes)
              .filter(function (n) {
                return e.nodes[n].name === t;
              })
              .map(function (t) {
                return e.nodes[t];
              });
          }),
          (o.prototype.getNodesWithTypeRecursive = function (t) {
            var e = n(3456),
              i = this,
              o = [];
            return (
              (o = o.concat(i.getNodesWithType(t))),
              Object.keys(i.nodes)
                .filter(function (t) {
                  return i.nodes[t] instanceof e;
                })
                .forEach(function (e) {
                  var n = i.nodes[e].nodeScope.getNodesWithTypeRecursive(t);
                  o = o.concat(n);
                }),
              o
            );
          }),
          (o.prototype.getAllNodesRecursive = function () {
            var t = n(3456);
            let e = [];
            return (
              (() => {
                (e = e.concat(Object.values(this.nodes))),
                  Object.keys(this.nodes)
                    .filter((e) => this.nodes[e] instanceof t)
                    .forEach((t) => {
                      var n = this.nodes[t].nodeScope.getAllNodesRecursive();
                      e = e.concat(n);
                    });
              })(),
              e
            );
          }),
          (o.prototype.getAllNodesWithVariantRecursive = function (t) {
            return this.getAllNodesRecursive().filter((e) => e.variant === t);
          }),
          (o.prototype.onNodeModelRemoved = function (t) {
            var e = this.getNodeWithId(t.id);
            t.parent && this.getNodeWithId(t.parent.id).removeChild(e),
              e._onNodeDeleted(),
              delete this.nodes[e.id],
              delete this.componentInstanceChildren[e.id];
          }),
          (o.prototype.removeConnection = function (t) {
            this.getNodeWithId(t.targetId).removeInputConnection(
              t.targetPort,
              t.sourceId,
              t.sourcePort
            );
          }),
          (o.prototype.setComponentModel = async function (t) {
            this.componentModel = t;
            for (const e of t.getAllNodes()) await this.createNodeFromModel(e);
            t.getAllConnections().forEach((t) => this.addConnection(t)),
              t.on("connectionAdded", (t) => this.addConnection(t), this),
              t.on("connectionRemoved", this.removeConnection, this),
              t.on("nodeAdded", this.createNodeFromModel, this);
            var e = this;
            t.on(
              "nodeParentWillBeRemoved",
              function (t) {
                if ("Component Children" === t.type)
                  return void (
                    t.parent && this.componentOwner.setChildRoot(null)
                  );
                const n = e.getNodeWithId(t.id);
                n.parent && n.parent.removeChild(n);
              },
              this
            ),
              t.on(
                "nodeParentUpdated",
                function (t) {
                  if ("Component Children" === t.type) {
                    var n = this.getNodeWithId(t.parent.id);
                    this.componentOwner.setChildRoot(n);
                  } else {
                    var i = e.getNodeWithId(t.id);
                    e.insertNodeInTree(i, t);
                  }
                },
                this
              ),
              t.on(
                "nodeRemoved",
                function (t) {
                  "Component Children" !== t.type && e.onNodeModelRemoved(t);
                },
                this
              );
            for (const t in this.nodes) {
              const e = this.nodes[t];
              e.nodeScopeDidInitialize && e.nodeScopeDidInitialize();
            }
          }),
          (o.prototype.reset = function () {
            this.componentModel &&
              (this.componentModel.removeListenersWithRef(this),
              (this.componentModel = void 0)),
              Object.keys(this.nodes).forEach((t) => {
                this.nodes.hasOwnProperty(t) && this.deleteNode(this.nodes[t]);
              });
          }),
          (o.prototype.deleteNode = function (t) {
            if (!1 !== this.nodes.hasOwnProperty(t.id)) {
              if (
                (t.parent && t.parent.removeChild(t),
                t.getChildren &&
                  t.getChildren().forEach((e) => {
                    t.removeChild(e),
                      (e.parentNodeScope || e.nodeScope).deleteNode(e);
                  }),
                this.componentModel)
              ) {
                const e = this.componentModel.getConnectionsFrom(t.id),
                  n = this.componentModel.getConnectionsTo(t.id);
                e.concat(n).forEach((t) => {
                  this.nodes.hasOwnProperty(t.targetId) &&
                    this.nodes.hasOwnProperty(t.sourceId) &&
                    this.removeConnection(t);
                });
              }
              t._onNodeDeleted(),
                delete this.nodes[t.id],
                delete this.componentInstanceChildren[t.id];
            } else
              console.error("Node doesn't belong to this scope", t.id, t.name);
          }),
          (o.prototype.sendEventFromThisScope = function (t, e, n, i, o) {
            if (i)
              for (
                var r = this.getNodesWithType("Event Receiver").filter(
                    function (e) {
                      return e.getChannelName() === t;
                    }
                  ),
                  s = 0;
                s < r.length;
                s++
              )
                if (r[s].handleEvent(e)) return !0;
            if ("parent" === n && this.componentOwner.parentNodeScope) {
              const i = this.componentOwner.parent
                ? this.componentOwner.parent.nodeScope
                : this.componentOwner.parentNodeScope;
              if (!i) return;
              i.sendEventFromThisScope(t, e, n, !0);
            } else if ("children" === n) {
              var a = this.nodes;
              for (var l in a)
                (u = a[l].children) &&
                  u.forEach((i) => {
                    if (
                      i.name &&
                      this.context.hasComponentModelWithName(i.name) &&
                      i.nodeScope.sendEventFromThisScope(t, e, n, !0)
                    )
                      return !0;
                  });
            } else if ("siblings" === n) {
              let n;
              if (
                ((n = this.componentOwner.parent
                  ? this.componentOwner.parent.nodeScope
                  : this.componentOwner.parentNodeScope),
                !n)
              )
                return;
              for (var l in (a = n.nodes)) {
                var u;
                (u = a[l].children) &&
                  u
                    .filter(
                      (t) =>
                        t.name &&
                        this.context.hasComponentModelWithName(t.name) &&
                        t.nodeScope !== this
                    )
                    .forEach((n) => {
                      if (n.nodeScope.sendEventFromThisScope(t, e, null, !0))
                        return !0;
                    });
              }
            }
            return !1;
          }),
          (t.exports = o);
      },
      7431: (t) => {
        "use strict";
        function e(t) {
          if (!t.owner) throw new Error("Owner must be set");
          (this.getter = t.getter),
            (this.connections = []),
            (this.owner = t.owner),
            (this.name = t.name),
            (this.onFirstConnectionAdded = t.onFirstConnectionAdded),
            (this.onLastConnectionRemoved = t.onLastConnectionRemoved),
            (this._id = void 0);
        }
        Object.defineProperties(e.prototype, {
          value: {
            get: function () {
              return this.getter.call(this.owner);
            },
          },
          id: {
            get: function () {
              return (
                this._id || (this._id = this.owner.id + this.name), this._id
              );
            },
          },
          registerConnection: {
            value: function (t, e) {
              this.connections.push({ node: t, inputPortName: e }),
                1 === this.connections.length &&
                  this.onFirstConnectionAdded &&
                  this.onFirstConnectionAdded.call(this.owner);
            },
          },
          deregisterConnection: {
            value: function (t, e) {
              for (var n = 0; n < this.connections.length; n++) {
                var i = this.connections[n];
                if (i.node === t && i.inputPortName === e) {
                  this.connections.splice(n, 1);
                  break;
                }
              }
              0 === this.connections.length &&
                this.onLastConnectionRemoved &&
                this.onLastConnectionRemoved.call(this.owner);
            },
          },
          flagDependeesDirty: {
            value: function (t) {
              for (var e = 0, n = this.connections.length; e < n; e++)
                this.connections[e].node.flagDirty();
            },
          },
          sendValue: {
            value: function (t) {
              this._lastUpdateIteration !== this.owner._updatedAtIteration
                ? ((this._lastUpdateIteration = this.owner._updatedAtIteration),
                  (this.valuesSendThisIteration = 0))
                : this.valuesSendThisIteration++,
                this.valuesSendThisIteration > 500 &&
                  (this.owner._cyclicLoop = !0);
              for (var e = 0, n = this.connections.length; e < n; e++) {
                var i = this.connections[e];
                i.node._setValueFromConnection(i.inputPortName, t);
              }
            },
          },
          hasConnections: {
            value: function () {
              return this.connections.length > 0;
            },
          },
        }),
          (t.exports = e);
      },
      2325: (t) => {
        "use strict";
        function e(t, e, n) {
          const i = t.key;
          n[i] ||
            (n[i] = {
              nodePatches: [],
              dismissPatches: [],
              key: t.key,
              message: t.message,
              notifyUser: t.notifyUser,
              askPermission: t.askPermission,
            }),
            (e.key = i),
            n[i].nodePatches.push(e);
        }
        function n(t, i, o) {
          !(function (t, n, i) {
            for (const o of i)
              for (const i of o.patches)
                i.condition(t) && e(o, i.generatePatch(t), n);
          })(t, i, o),
            t.children &&
              t.children.forEach((t) => {
                n(t, i, o);
              });
        }
        t.exports = {
          collectPatches: function (t, e) {
            let i = {};
            return (
              t.components.forEach((t) => {
                t.nodes.forEach((t) => {
                  n(t, i, e);
                });
              }),
              i
            );
          },
        };
      },
      8932: (t) => {
        "use strict";
        t.exports = {
          generateProjectSettings: function (t, e) {
            const n = { dynamicports: [], ports: [] };
            return (
              (function (t, e) {
                for (var n = 0; n < e.length; n++) {
                  var i = e[n];
                  i.settings &&
                    i.settings.forEach(function (e) {
                      t.ports.push(e);
                    });
                }
              })(n, e),
              n
            );
          },
        };
      },
      3011: (t, e, n) => {
        var i = n(7187).EventEmitter;
        function o() {}
        (o.events = new i()), (t.exports = o);
      },
      3542: (t) => {
        "use strict";
        function e(t, e) {
          for (var n in ((this.duration = e.duration || 0),
          (this._isRunning = !1),
          (this._hasCalledOnStart = !1),
          (this.scheduler = t),
          (this.repeatCount = 1),
          (this.delay = 0),
          e))
            this[n] = e[n];
        }
        function n(t) {
          (this.requestFrame = t),
            (this.runningTimers = []),
            (this.newTimers = []);
        }
        (e.prototype.start = function () {
          return (
            this._isRunning && this.stop(),
            this.scheduler.scheduleTimer(this),
            this
          );
        }),
          (e.prototype.stop = function () {
            this.scheduler.stopTimer(this),
              (this._hasCalledOnStart = !1),
              (this._isRunning = !1),
              (this._wasStopped = !0);
          }),
          (e.prototype.isRunning = function () {
            return this._isRunning;
          }),
          (e.prototype.durationLeft = function () {
            return this._durationLeft;
          }),
          (n.prototype.createTimer = function (t) {
            return new e(this, t);
          }),
          (n.prototype.scheduleTimer = function (t) {
            -1 === this.newTimers.indexOf(t) &&
              (0 === t.repeatCount && (t.repeatCount = 1e5),
              this.newTimers.push(t),
              this.requestFrame());
          }),
          (n.prototype.stopTimer = function (t) {
            var e;
            t._isRunning
              ? (-1 !== (e = this.runningTimers.indexOf(t)) &&
                  this.runningTimers.splice(e, 1),
                t.onStop && !t._wasStopped && t.onStop())
              : -1 !== (e = this.newTimers.indexOf(t)) &&
                this.newTimers.splice(e, 1);
          }),
          (n.prototype.runTimers = function (t) {
            var e,
              n,
              i = [],
              o = [],
              r = [],
              s = this.runningTimers.length;
            for (e = 0; e < s; ++e) r[e] = this.runningTimers[e];
            for (e = 0; e < s; ++e)
              if ((n = r[e]) && t >= n._start) {
                var a;
                !1 === n._hasCalledOnStart &&
                  n.onStart &&
                  (n.onStart(), (n._hasCalledOnStart = !0)),
                  (a =
                    n.duration > 0
                      ? (t - n._start) / (n.duration * n.repeatCount)
                      : 1),
                  (n._durationLeft = n.duration * (1 - a));
                var l = a * n.repeatCount - Math.floor(a * n.repeatCount);
                a >= 1 && (l = 1),
                  n.onRunning && n.onRunning(l),
                  a < 1 && n._isRunning
                    ? i.push(n)
                    : n._wasStopped || o.push(n);
              } else i.push(n);
            for (this.runningTimers = i, e = 0; e < o.length; ++e)
              (o[e]._isRunning = !1),
                (o[e]._hasCalledOnStart = !1),
                o[e].onFinish && o[e].onFinish();
            if (this.newTimers.length > 0) {
              for (e = 0; e < this.newTimers.length; ++e)
                ((n = this.newTimers[e])._start = t + n.delay),
                  (n._isRunning = !0),
                  (n._wasStopped = !1),
                  this.runningTimers.push(n),
                  0 === n.delay &&
                    (n.onStart && (n.onStart(), (n._hasCalledOnStart = !0)),
                    n.onRunning && n.onRunning(0));
              this.newTimers.length = 0;
            }
          }),
          (n.prototype.hasPendingTimers = function () {
            return this.runningTimers.length > 0 || this.newTimers.length > 0;
          }),
          (t.exports = n);
      },
      6243: (t) => {
        t.exports = class {
          constructor({ graphModel: t, getNodeScope: e }) {
            (this.getNodeScope = e),
              t &&
                ((this.graphModel = t),
                t.on("variantUpdated", (t) => this.onVariantUpdated(t)));
          }
          getVariant(t, e) {
            if (this.graphModel) return this.graphModel.getVariant(t, e);
          }
          onVariantUpdated(t) {
            const e = this.getNodeScope();
            if (!e) return;
            const n = e
              .getNodesWithTypeRecursive(t.typename)
              .filter((e) =>
                e.variant
                  ? e.variant.name === t.name
                  : e.model && e.model.variant === t.name
              );
            for (const e of n) e.setVariant(t);
          }
        };
      },
      5936: (t) => {
        "use strict";
        var e = {
          easeOutQuartic: function (t, e, n) {
            return -(e - t) * (--n * n * n * n - 1) + t;
          },
          easeInQuartic: function (t, e, n) {
            return n * n * n * n * (e - t) + t;
          },
          easeInOutQuartic: function (t, e, n) {
            return (n *= 2) < 1
              ? ((e - t) / 2) * n * n * n * n + t
              : (-(e - t) / 2) * ((n -= 2) * n * n * n - 2) + t;
          },
          easeOutCubic: function (t, e, n) {
            return (e - t) * (--n * n * n + 1) + t;
          },
          easeInCubic: function (t, e, n) {
            return n * n * n * (e - t) + t;
          },
          easeInOutCubic: function (t, e, n) {
            return (n *= 2) < 1
              ? ((e - t) / 2) * n * n * n + t
              : ((e - t) / 2) * ((n -= 2) * n * n + 2) + t;
          },
          easeOutQuadratic: function (t, e, n) {
            return -(e - t) * n * (n - 2) + t;
          },
          easeInQuadratic: function (t, e, n) {
            return n * n * (e - t) + t;
          },
          easeInOutQuadratic: function (t, e, n) {
            return (n *= 2) < 1
              ? ((e - t) / 2) * n * n + t
              : (-(e - t) / 2) * ((n -= 1) * (n - 2) - 1) + t;
          },
          linear: function (t, e, n) {
            return t + (e - t) * n;
          },
        };
        (e.easeIn = e.easeInCubic),
          (e.easeOut = e.easeOutCubic),
          (e.easeInOut = e.easeInOutCubic),
          (t.exports = e);
      },
      114: (t, e, n) => {
        "use strict";
        var i = n(5933);
        const { getAbsoluteUrl: o } = n(4648);
        function r() {
          (this.loadedFontFamilies = {}),
            (this.fontCssFamiliesAdded = {}),
            (this.fontCallbacks = {});
          var t = this;
          [
            "Arial",
            "Arial Black",
            "Courier New",
            "Helvetica",
            "Impact",
            "Lucida Console",
            "Tahoma",
            "Times New Roman",
          ].forEach(function (e) {
            t.loadedFontFamilies[e] = !0;
          });
        }
        (r.prototype.loadFont = function (t) {
          var e,
            n = ((e = t = o(t)), e.replace(/\.[^/.]+$/, "")).split("/").pop();
          if (this.loadedFontFamilies[n])
            this.fontCallbacks[n] &&
              this.fontCallbacks[n].forEach(function (t) {
                t();
              });
          else if (!this.fontCssFamiliesAdded[n]) {
            this.fontCssFamiliesAdded[n] = !0;
            var r = document.createElement("style");
            (r.type = "text/css"),
              r.appendChild(
                document.createTextNode(
                  "                    @font-face {                        font-family: '" +
                    n +
                    "';                        src: url('" +
                    t +
                    "');                    }                "
                )
              ),
              document.head.appendChild(r);
            var s = this;
            i.load({
              timeout: 6e5,
              custom: { families: [n] },
              fontactive: function (t) {
                (s.loadedFontFamilies[t] = !0),
                  s.fontCallbacks[t] &&
                    s.fontCallbacks[t].forEach(function (t) {
                      t();
                    });
              },
            });
          }
        }),
          (r.prototype.callWhenFontIsActive = function (t, e) {
            this.loadedFontFamilies[t]
              ? e()
              : (this.fontCallbacks[t] || (this.fontCallbacks[t] = []),
                this.fontCallbacks[t].push(e));
          }),
          (r.instance = new r()),
          (t.exports = r);
      },
      5821: (t) => {
        t.exports = function () {
          function t() {
            return Math.floor(65536 * (1 + Math.random()))
              .toString(16)
              .substring(1);
          }
          return (
            t() +
            t() +
            "-" +
            t() +
            "-" +
            t() +
            "-" +
            t() +
            "-" +
            t() +
            t() +
            t()
          );
        };
      },
      9406: (t, e, n) => {
        "use strict";
        const i = n(8750),
          { getAbsoluteUrl: o } = n(4648);
        var r = {};
        function s(t, e) {
          (this.inputs = {}),
            (this.outputs = {}),
            (this.error = void 0),
            (this.code = t);
          const n = e ? e.node : void 0;
          this._initializeAPIs();
          var i = r[t];
          if (!i)
            try {
              (i = new Function(
                ["define", "script", "Node", "Component"],
                s.getCodePrefix() + t
              )),
                (r[t] = i);
            } catch (t) {
              this.error = t.message;
            }
          if (i)
            try {
              i(
                this.define.bind(this),
                this.script.bind(this),
                this.apis.Node,
                n ? s.getComponentScopeForNode(n) : {}
              ),
                this._afterSourced();
            } catch (t) {
              this.error = t.message;
            }
        }
        (s.prototype.define = function (t) {
          (this.inputs = t.inputs || {}),
            (this.outputs = t.outputs || {}),
            (this.setup = t.setup),
            (this.change = t.run || t.change),
            (this.destroy = t.destroy),
            (this.definedObject = t);
        }),
          (s.prototype.script = function (t) {
            var e = (function (t) {
              var e = {
                inputs: t.inputs || {},
                outputs: t.outputs || {},
                setup: function (e, n) {
                  if (
                    ((this.inputs = e),
                    (this.outputs = n),
                    (this.setOutputs = function (t) {
                      for (var e in t)
                        (this.outputs[e] = t[e]), this.flagOutputDirty(e);
                    }),
                    t.methods)
                  )
                    for (var i in t.methods) this[i] = t.methods[i];
                  t.setup && t.setup.apply(this);
                },
                destroy: function (e, n) {
                  (this.inputs = e),
                    (this.outputs = n),
                    t.destroy && t.destroy.apply(this);
                },
                change: function (e, n) {
                  (this.inputs = e), (this.outputs = n);
                  var i = this._oldInputs || {};
                  if (t.changed)
                    for (var o in e)
                      if (e[o] !== i[o]) {
                        var r = t.changed[o];
                        "function" == typeof r && r.apply(this, [e[o], i[o]]);
                      }
                  this._oldInputs = Object.assign({}, e);
                },
              };
              if (t.signals)
                for (var n in t.signals)
                  (e[n] = t.signals[n]), (e.inputs[n] = "signal");
              return e;
            })(t);
            (this.inputs = e.inputs || {}),
              (this.outputs = e.outputs || {}),
              (this.setup = e.setup),
              (this.change = e.run || e.change),
              (this.destroy = e.destroy),
              (this.definedObject = e);
          }),
          (s.prototype._initializeAPIs = function () {
            (this.apis = {}),
              (this.apis.Node = {
                Inputs: {},
                Outputs: {},
                Signals: {},
                Setters: {},
              });
          }),
          (s.prototype._afterSourced = function () {
            if (void 0 === this.definedObject) {
              var t = this.apis.Node;
              if (
                ((this.inputs = Object.assign({}, t.Inputs || {})),
                (this.outputs = Object.assign({}, t.Outputs || {})),
                (this.setup = function (e, n) {
                  const i = this;
                  (t.setOutputs = function (t) {
                    for (var e in t) (n[e] = t[e]), i.flagOutputDirty(e);
                  }),
                    t.OnInit && t.OnInit.apply(this);
                }),
                (this.destroy = t.OnDestroy || this.destory),
                (this.change = (e, n, i) => {
                  for (var o in i)
                    "function" == typeof t.Setters[o] && t.Setters[o](e[o]);
                  "function" == typeof t.OnInputsChanged && t.OnInputsChanged();
                }),
                (this.definedObject = {
                  inputs: this.inputs,
                  outputs: this.outputs,
                  setup: this.setup,
                  destroy: this.destroy,
                  change: this.change,
                }),
                void 0 !== t.Signals)
              )
                for (var e in t.Signals)
                  "function" == typeof t.Signals[e] &&
                    ((this.inputs[e] = "signal"),
                    (this.definedObject[e] = t.Signals[e]));
            }
          }),
          (s.createFromCode = function (t, e) {
            return new s(t, e);
          }),
          (s.createFromURL = function (t, e, n) {
            t = o(t);
            var i = new window.XMLHttpRequest();
            i.open("GET", t, !0),
              (i.onreadystatechange = function () {
                (4 !== this.readyState &&
                  this.readyState !== XMLHttpRequest.DONE) ||
                  e(new s(this.response));
              }),
              (i.onerror = function () {
                console.log("Failed to request", t);
              }),
              i.send();
          }),
          (s.parseAndAddPortsFromScript = function (t, e, n) {
            function i(t, n) {
              if (null == t) return;
              const i = {};
              for (const e of t) {
                let t = e[1];
                void 0 !== t && (i[t] = !0);
              }
              Object.keys(i).forEach((t) => {
                var i;
                ("string" == typeof (i = { name: n.prefix + t, plug: n.plug })
                  ? void 0 === e.find((t) => t.name === i)
                  : void 0 ===
                    e.find((t) => t.name === i.name && t.plug === i.plug)) &&
                  e.push({
                    name: n.prefix + t,
                    displayName: t,
                    plug: n.plug,
                    type: n.type,
                    group: n.group,
                  });
              });
            }
            n.skipInputs ||
              (i(t.matchAll(/Inputs\.([A-Za-z0-9]+)/g), {
                type: n.inputType || "*",
                plug: "input",
                group: n.inputGroup || "Inputs",
                prefix: n.inputPrefix || "",
              }),
              i(t.matchAll(/Inputs\s*\[\s*(?:'|")(.*)(?:'|")\s*\]/g), {
                type: n.inputType || "*",
                plug: "inputs",
                group: n.inputGroup || "Inputs",
                prefix: n.inputPrefix || "",
              })),
              n.skipOutputs ||
                (n.skipOutputSignals ||
                  (i(t.matchAll(/Outputs\.([A-Za-z0-9]+)\s*\(\s*\)/g), {
                    type: "signal",
                    plug: "output",
                    group: "Outputs",
                    prefix: n.outputPrefix || "",
                  }),
                  i(
                    t.matchAll(
                      /Outputs\s*\[\s*(?:'|")(.*)(?:'|")\s*\]\(\s*\)/g
                    ),
                    {
                      type: "signal",
                      plug: "output",
                      group: "Outputs",
                      prefix: n.outputPrefix || "",
                    }
                  )),
                n.skipRegularOutputs ||
                  (i(t.matchAll(/Outputs\.([A-Za-z0-9]+)/g), {
                    type: "*",
                    plug: "output",
                    group: "Outputs",
                    prefix: n.outputPrefix || "",
                  }),
                  i(t.matchAll(/Outputs\s*\[\s*\"([^\"]*)\"\s*\]/g), {
                    type: "*",
                    plug: "output",
                    group: "Outputs",
                    prefix: n.outputPrefix || "",
                  })));
          }),
          (s.prototype.getPorts = function () {
            var t = [],
              e = this;
            return (
              Object.keys(this.inputs).forEach(function (n) {
                var i = e.inputs[n],
                  o = { name: n, plug: "input" };
                if ("string" == typeof i)
                  (o.type = { name: i }), (o.group = "Inputs");
                else for (var r in i) o[r] = i[r];
                t.push(o);
              }),
              Object.keys(this.outputs).forEach(function (n) {
                t.push({
                  name: n,
                  type: { name: e.outputs[n] },
                  plug: "output",
                  group: "Outputs",
                });
              }),
              s.parseAndAddPortsFromScript(this.code, t, {}),
              t
            );
          });
        const a = {};
        (s.getComponentScopeForNode = function (t) {
          const e = t.nodeScope.componentOwner.getInstanceId();
          if (void 0 === a[e]) {
            a[e] = {};
            const t = i.get("componentState" + e);
            a[e].Object = t;
          }
          const n = (function (t) {
              const e = (function t(e) {
                let n;
                if (e.getRoots().length > 0) {
                  const t = e.getRoots()[0];
                  t.getVisualParentNode
                    ? t.getVisualParentNode() &&
                      (n = t.getVisualParentNode().nodeScope.componentOwner)
                    : t.parentNodeScope &&
                      (n = e.parentNodeScope.componentOwner);
                } else
                  e.parentNodeScope && (n = e.parentNodeScope.componentOwner);
                if (n && n.nodeScope && n.nodeScope.componentOwner !== e)
                  return n.nodeScope.getNodesWithType("Component State")
                    .length > 0
                    ? n
                    : t(n);
              })(t.nodeScope.componentOwner);
              if (e) return "componentState" + e.getInstanceId();
            })(t),
            o = void 0 !== n ? i.get(n) : void 0;
          return (a[e].ParentObject = o), a[e];
        }),
          (s.getCodePrefix = function () {
            return "const Script = Node;\n";
          }),
          (t.exports = s);
      },
      2715: (t, e, n) => {
        "use strict";
        const i = n(5936),
          o = n(9932);
        function r(t) {
          (this.name = t.name),
            (this.startValue = 0),
            (this.endValue = 0),
            (this.currentValue = void 0),
            (this.startMode = "implicit"),
            (this.ease = t.ease),
            (this.node = t.node),
            (this.hasSampledStartValue = !1);
          var e = this;
          (this.animation = t.node.context.timerScheduler.createTimer({
            startValue: 0,
            endValue: 0,
            onRunning: function (t) {
              var n = e.ease(this.startValue, this.endValue, t);
              e.setCurrentValue(n);
            },
          })),
            (this.animation.startValue = 0),
            (this.animation.endValue = 0);
        }
        Object.defineProperties(r.prototype, {
          setCurrentValue: {
            value: function (t) {
              (this.currentValue = t), this.node.flagOutputDirty(this.name);
            },
          },
          play: {
            value: function (t, e) {
              if (
                (void 0 === t &&
                  (console.log("Animation warning, start value is undefined"),
                  (t = 0)),
                void 0 !== e)
              ) {
                var n = this.animation;
                (n.startValue = t),
                  this.setCurrentValue(t),
                  (n.endValue = e),
                  (n.duration = this.node._internal.duration),
                  n.start();
              } else console.error("Animation error, start:", t, "end:", e);
            },
          },
          playToEnd: {
            value: function () {
              !1 !== this.hasConnections() &&
                (this.updateStartValue(),
                this.play(this.getTargetsCurrentValue(), this.endValue));
            },
          },
          playToStart: {
            value: function () {
              !1 !== this.hasConnections() &&
                (this.updateStartValue(),
                this.play(this.getTargetsCurrentValue(), this.startValue));
            },
          },
          replayToEnd: {
            value: function () {
              !1 !== this.hasConnections() &&
                (this.updateStartValue(),
                this.play(this.startValue, this.endValue));
            },
          },
          replayToStart: {
            value: function () {
              !1 !== this.hasConnections() &&
                this.play(this.endValue, this.startValue);
            },
          },
          hasConnections: {
            value: function () {
              return this.node.getOutput(this.name).hasConnections();
            },
          },
          getTargetsCurrentValue: {
            value: function () {
              var t = this.node.getOutput(this.name).connections;
              const e = t[0].node.getInputValue(t[0].inputPortName);
              return e instanceof Object && e.hasOwnProperty("value")
                ? e.value
                : e;
            },
          },
          updateStartValue: {
            value: function () {
              "implicit" !== this.startMode ||
                this.hasSampledStartValue ||
                ((this.hasSampledStartValue = !0),
                (this.startValue = this.getTargetsCurrentValue()));
            },
          },
          stop: {
            value: function () {
              this.animation.stop(), this.setCurrentValue(void 0);
            },
          },
          jumpToStart: {
            value: function () {
              this.animation.stop(), this.setCurrentValue(this.startValue);
            },
          },
          jumpToEnd: {
            value: function () {
              this.animation.stop(), this.setCurrentValue(this.endValue);
            },
          },
        });
        var s = {
          name: "Animation",
          docs: "https://docs.noodl.net/#/nodes/animation/animation",
          shortDesc:
            "Node that can animate any number of values, with different types of easing curves.",
          category: "Animation",
          deprecated: !0,
          initialize: function () {
            var t = this._internal;
            (t.duration = 300),
              (t.ease = i.easeOut),
              (t._isPlayingToEnd = !1),
              (t.animations = []),
              (t.cubicBezierPoints = [0, 0, 0, 0]),
              (t.cubicBezierFunction = void 0);
            var e = this;
            t.animation = this.context.timerScheduler.createTimer({
              onFinish: function () {
                !1 === t._isPlayingToEnd
                  ? e.sendSignalOnOutput("hasReachedStart")
                  : e.sendSignalOnOutput("hasReachedEnd");
              },
            });
          },
          inputs: {
            duration: {
              index: 0,
              type: "number",
              displayName: "Duration (ms)",
              group: "Animation Properties",
              default: 300,
              set: function (t) {
                this._internal.duration = t;
              },
            },
            easingCurve: {
              index: 10,
              type: {
                name: "enum",
                enums: [
                  { value: "easeOut", label: "Ease Out" },
                  { value: "easeIn", label: "Ease In" },
                  { value: "linear", label: "Linear" },
                  { value: "easeInOut", label: "Ease In Out" },
                  { value: "cubicBezier", label: "Cubic Bezier" },
                ],
              },
              group: "Animation Properties",
              displayName: "Easing Curve",
              default: "easeOut",
              set: function (t) {
                var e;
                "cubicBezier" === t
                  ? (this.updateCubicBezierFunction(),
                    (e = this._internal.cubicBezierFunction))
                  : (e = i[t]),
                  (this._internal.ease = e);
              },
            },
            playToEnd: {
              index: 20,
              group: "Play",
              displayName: "To End",
              editorName: "Play To End",
              valueChangedToTrue: function () {
                this._internal._isPlayingToEnd = !0;
                var t = this._internal.animation,
                  e = this._internal.animations,
                  n = this;
                this.scheduleAfterInputsHaveUpdated(function () {
                  (t.duration = n._internal.duration), t.start();
                  for (var i = 0; i < e.length; i++)
                    (e[i].ease = n._internal.ease), e[i].playToEnd();
                });
              },
            },
            playToStart: {
              index: 21,
              group: "Play",
              displayName: "To Start",
              editorName: "Play To Start",
              valueChangedToTrue: function () {
                this._internal._isPlayingToEnd = !1;
                var t = this._internal.animation,
                  e = this._internal.animations,
                  n = this;
                this.scheduleAfterInputsHaveUpdated(function () {
                  (t.duration = n._internal.duration), t.start();
                  for (var i = 0; i < e.length; i++)
                    (e[i].ease = n._internal.ease), e[i].playToStart();
                });
              },
            },
            replayToEnd: {
              index: 22,
              group: "Play",
              displayName: "From Start To End",
              editorName: "Play From Start To End",
              valueChangedToTrue: function () {
                var t = this._internal.animation,
                  e = this._internal.animations,
                  n = this;
                (this._internal._isPlayingToEnd = !0),
                  this.scheduleAfterInputsHaveUpdated(function () {
                    (t.duration = n._internal.duration), t.start();
                    for (var i = 0; i < e.length; i++)
                      (e[i].ease = n._internal.ease), e[i].replayToEnd();
                  });
              },
            },
            replayToStart: {
              index: 23,
              group: "Play",
              displayName: "From End To Start",
              editorName: "Play From End To Start",
              valueChangedToTrue: function () {
                this._internal._isPlayingToEnd = !1;
                var t = this._internal.animation,
                  e = this._internal.animations,
                  n = this;
                this.scheduleAfterInputsHaveUpdated(function () {
                  (t.duration = n._internal.duration), t.start();
                  for (var i = 0; i < e.length; i++)
                    (e[i].ease = n._internal.ease), e[i].replayToStart();
                });
              },
            },
            stop: {
              index: 60,
              group: "Instant Actions",
              displayName: "Stop",
              valueChangedToTrue: function () {
                var t = this._internal.animation,
                  e = this._internal.animations;
                t.stop();
                for (var n = 0; n < e.length; n++) e[n].stop();
              },
            },
            jumpToStart: {
              index: 61,
              group: "Instant Actions",
              displayName: "Jump To Start",
              valueChangedToTrue: function () {
                for (
                  var t = this._internal.animations, e = 0;
                  e < t.length;
                  e++
                )
                  t[e].jumpToStart();
                this.sendSignalOnOutput("hasReachedStart");
              },
            },
            jumpToEnd: {
              index: 62,
              group: "Instant Actions",
              displayName: "Jump To End",
              valueChangedToTrue: function () {
                for (
                  var t = this._internal.animations, e = 0;
                  e < t.length;
                  e++
                )
                  t[e].jumpToEnd();
                this.sendSignalOnOutput("hasReachedEnd");
              },
            },
            cubicBezierP1X: {
              displayName: "P1 X",
              group: "Cubic Bezier",
              type: { name: "number" },
              index: 11,
              set: function (t) {
                (this._internal.cubicBezierPoints[0] = Math.min(
                  1,
                  Math.max(0, t)
                )),
                  this.updateCubicBezierFunction();
              },
            },
            cubicBezierP1Y: {
              displayName: "P1 Y",
              group: "Cubic Bezier",
              type: { name: "number" },
              index: 12,
              set: function (t) {
                (this._internal.cubicBezierPoints[1] = t),
                  this.updateCubicBezierFunction();
              },
            },
            cubicBezierP2X: {
              displayName: "P2 X",
              group: "Cubic Bezier",
              type: { name: "number" },
              index: 13,
              set: function (t) {
                (this._internal.cubicBezierPoints[2] = Math.min(
                  1,
                  Math.max(0, t)
                )),
                  this.updateCubicBezierFunction();
              },
            },
            cubicBezierP2Y: {
              displayName: "P2 Y",
              group: "Cubic Bezier",
              type: { name: "number" },
              index: 14,
              set: function (t) {
                (this._internal.cubicBezierPoints[3] = t),
                  this.updateCubicBezierFunction();
              },
            },
          },
          outputs: {
            hasReachedStart: {
              type: "signal",
              group: "Signals",
              displayName: "Has Reached Start",
            },
            hasReachedEnd: {
              type: "signal",
              group: "Signals",
              displayName: "Has Reached End",
            },
          },
          dynamicports: [
            {
              condition: "easingCurve = cubicBezier",
              inputs: [
                "cubicBezierP1X",
                "cubicBezierP1Y",
                "cubicBezierP2X",
                "cubicBezierP2Y",
              ],
            },
            {
              name: "expand/basic",
              indexStep: 100,
              template: [
                {
                  name: "{{portname}}.startMode",
                  type: {
                    name: "enum",
                    enums: [
                      { value: "explicit", label: "Explicit" },
                      { value: "implicit", label: "Implicit" },
                    ],
                    allowEditOnly: !0,
                  },
                  plug: "input",
                  group: "{{portname}} Animation",
                  displayName: "Start Mode",
                  default: "implicit",
                  index: 1e3,
                },
                {
                  name: "{{portname}}.endValue",
                  type: "number",
                  plug: "input",
                  group: "{{portname}} Animation",
                  displayName: "End Value",
                  editorName: "End Value | {{portname}} ",
                  default: 0,
                  index: 1002,
                },
              ],
            },
            {
              name: "expand/basic",
              condition: "'{{portname}}.startMode' = explicit",
              indexStep: 100,
              template: [
                {
                  name: "{{portname}}.startValue",
                  plug: "input",
                  type: "number",
                  displayName: "Start Value",
                  editorName: "Start Value | {{portname}}",
                  group: "{{portname}} Animation",
                  default: 0,
                  index: 1001,
                },
              ],
            },
          ],
          panels: [
            {
              name: "PortEditor",
              title: "Animations",
              plug: "output",
              type: { name: "number" },
              group: "Animation Values",
            },
          ],
          prototypeExtensions: {
            updateCubicBezierFunction: {
              value: function () {
                var t = this._internal.cubicBezierPoints,
                  e = o(t);
                (this._internal.cubicBezierFunction = function (t, n, o) {
                  return i.linear(t, n, e.get(o));
                }),
                  (this._internal.ease = this._internal.cubicBezierFunction);
              },
            },
            _registerAnimationGroup: {
              value: function (t) {
                var e = new r({
                  node: this,
                  ease: this._internal.ease,
                  name: t,
                });
                this._internal.animations.push(e);
                var n = {};
                (n[t + ".startMode"] = {
                  set: function (t) {
                    e.startMode = t;
                  },
                }),
                  (n[t + ".startValue"] = {
                    default: 0,
                    set: function (t) {
                      e.startValue = t;
                    },
                  }),
                  (n[t + ".endValue"] = {
                    default: 0,
                    set: function (t) {
                      e.endValue = t;
                    },
                  }),
                  this.registerInputs(n),
                  this.registerOutput(t, {
                    getter: function () {
                      return e.currentValue;
                    },
                  });
              },
            },
            registerInputIfNeeded: {
              value: function (t) {
                if (!this.hasInput(t)) {
                  var e = t.indexOf("."),
                    n = t.substr(0, e);
                  this.hasOutput(n) || this._registerAnimationGroup(n);
                }
              },
            },
            registerOutputIfNeeded: {
              value: function (t) {
                this.hasOutput(t) || this._registerAnimationGroup(t);
              },
            },
          },
        };
        t.exports = { node: s };
      },
      1787: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855),
          o = n(8750),
          r = {
            name: "Component State",
            displayNodeName: "Component Object",
            category: "Component Utilities",
            color: "component",
            docs: "https://docs.noodl.net/#/nodes/component-utilities/component-object",
            deprecated: !0,
            initialize: function () {
              (this._internal.inputValues = {}),
                (this._internal.onModelChangedCallback = (t) => {
                  !1 === this.isInputConnected("fetch") &&
                    (this.hasOutput("value-" + t.name) &&
                      this.flagOutputDirty("value-" + t.name),
                    this.hasOutput("changed-" + t.name) &&
                      this.sendSignalOnOutput("changed-" + t.name),
                    this.sendSignalOnOutput("changed"));
                });
              const t = o.get(
                "componentState" + this.nodeScope.componentOwner.getInstanceId()
              );
              (this._internal.model = t),
                t.on("change", this._internal.onModelChangedCallback);
            },
            getInspectInfo() {
              const t = this._internal.model.data;
              return Object.keys(t).map((e) => ({
                type: "text",
                value: e + ": " + t[e],
              }));
            },
            inputs: {
              properties: {
                type: { name: "stringlist", allowEditOnly: !0 },
                displayName: "Properties",
                group: "Properties",
                set(t) {},
              },
              store: {
                displayName: "Set",
                group: "Actions",
                valueChangedToTrue() {
                  this.scheduleStore();
                },
              },
              fetch: {
                displayName: "Fetch",
                group: "Actions",
                valueChangedToTrue() {
                  this.scheduleFetch();
                },
              },
            },
            outputs: {
              changed: {
                type: "signal",
                displayName: "Changed",
                group: "Events",
              },
              fetched: {
                type: "signal",
                displayName: "Fetched",
                group: "Events",
              },
              stored: {
                type: "signal",
                displayName: "Stored",
                group: "Events",
              },
            },
            methods: {
              scheduleStore() {
                if (!this.hasScheduledStore) {
                  this.hasScheduledStore = !0;
                  var t = this._internal;
                  this.scheduleAfterInputsHaveUpdated(() => {
                    for (var e in ((this.hasScheduledStore = !1),
                    t.inputValues))
                      t.model.set(e, t.inputValues[e], { resolve: !0 });
                    this.sendSignalOnOutput("stored");
                  });
                }
              },
              scheduleFetch() {
                this.hasScheduledFetch ||
                  ((this.hasScheduledFetch = !0),
                  this.scheduleAfterInputsHaveUpdated(() => {
                    (this.hasScheduledFetch = !1), this.fetch();
                  }));
              },
              fetch() {
                for (var t in this._internal.model.data)
                  this.hasOutput("value-" + t) &&
                    (this.flagOutputDirty("value-" + t),
                    this.hasOutput("changed-" + t) &&
                      this.sendSignalOnOutput("changed-" + t));
                this.sendSignalOnOutput("fetched");
              },
              _onNodeDeleted() {
                i.prototype._onNodeDeleted.call(this),
                  this._internal.model.off(
                    "change",
                    this._internal.onModelChangedCallback
                  );
              },
              registerOutputIfNeeded(t) {
                if (this.hasOutput(t)) return;
                const e = t.split("-"),
                  n = e[e.length - 1];
                this.registerOutput(t, {
                  get() {
                    return this._internal.model.get(n, { resolve: !0 });
                  },
                });
              },
              registerInputIfNeeded: function (t) {
                if (this.hasInput(t)) return;
                const e = t.split("-"),
                  n = e[e.length - 1];
                t.startsWith("value-") &&
                  this.registerInput(t, {
                    set(t) {
                      (this._internal.inputValues[n] = t),
                        !1 === this.isInputConnected("store") &&
                          this.scheduleStore();
                    },
                  });
              },
            },
          };
        function s(t, e, n) {
          const i = [];
          if (e.properties) {
            var o = e.properties.split(",");
            for (var r in o) {
              var s = o[r];
              i.push({
                type: { name: "*", allowConnectionsOnly: !0 },
                plug: "input/output",
                group: "Properties",
                name: "value-" + s,
                displayName: s,
              }),
                i.push({
                  type: "signal",
                  plug: "output",
                  group: "Changed Events",
                  displayName: s + " Changed",
                  name: "changed-" + s,
                });
            }
          }
          n.sendDynamicPorts(t, i, { detectRenamed: { plug: "input/output" } });
        }
        t.exports = {
          node: r,
          setup: function (t, e) {
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("nodeAdded.Component State", (e) => {
                s(e.id, e.parameters, t.editorConnection),
                  e.on("parameterUpdated", (n) => {
                    ("properties" === n.name || n.name.startsWith("type-")) &&
                      s(e.id, e.parameters, t.editorConnection);
                  });
              });
          },
        };
      },
      3728: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        var o = n(8750),
          r = n(266),
          s = {
            name: "Collection",
            docs: "https://docs.noodl.net/#/nodes/data/array",
            displayNodeName: "Array",
            shortDesc:
              "A collection of models, mainly used together with a For Each Node.",
            category: "Data",
            usePortAsLabel: "collectionId",
            color: "data",
            deprecated: !0,
            initialize: function () {
              var t = this,
                e = !1;
              (this._internal.collectionChangedCallback = function () {
                !0 !== t.isInputConnected("fetch") &&
                  (e ||
                    ((e = !0),
                    t.scheduleAfterInputsHaveUpdated(function () {
                      t.sendSignalOnOutput("changed"),
                        t.flagOutputDirty("count"),
                        (e = !1);
                    })));
              }),
                (this._internal.sourceCollectionChangedCallback = function () {
                  !0 !== t.isInputConnected("store") && t.scheduleCopyItems();
                });
            },
            getInspectInfo() {
              if (this._internal.collection)
                return "Count: " + this._internal.collection.size();
            },
            inputs: {
              collectionId: {
                type: {
                  name: "string",
                  identifierOf: "CollectionName",
                  identifierDisplayName: "Array Ids",
                },
                displayName: "Id",
                group: "General",
                set: function (t) {
                  t instanceof r && (t = t.getId()),
                    (this._internal.collectionId = t),
                    !1 === this.isInputConnected("fetch")
                      ? this.setCollectionID(t)
                      : this.flagOutputDirty("id");
                },
              },
              items: {
                type: "array",
                group: "General",
                displayName: "Items",
                set: function (t) {
                  var e = this;
                  void 0 !== t &&
                    t !== this._internal.collection &&
                    ((this._internal.pendingSourceCollection = t),
                    !1 === this.isInputConnected("store") &&
                      this.scheduleAfterInputsHaveUpdated(function () {
                        e.setSourceCollection(t);
                      }));
                },
              },
              modifyId: {
                type: { name: "string", allowConnectionsOnly: !0 },
                displayName: "Item Id",
                group: "Modify",
                set: function (t) {
                  this._internal.modifyId = t;
                },
              },
              store: {
                displayName: "Set",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleStore();
                },
              },
              add: {
                displayName: "Add",
                group: "Modify",
                valueChangedToTrue: function () {
                  var t = this,
                    e = this._internal;
                  this.scheduleAfterInputsHaveUpdated(function () {
                    if (
                      void 0 !== e.modifyId &&
                      (void 0 === e.collection &&
                        !1 === this.isInputConnected("fetch") &&
                        t.setCollection(r.get()),
                      void 0 !== e.collection)
                    ) {
                      var n = o.get(e.modifyId);
                      e.collection.add(n), t.sendSignalOnOutput("modified");
                    }
                  });
                },
              },
              remove: {
                displayName: "Remove",
                group: "Modify",
                valueChangedToTrue: function () {
                  var t = this,
                    e = this._internal;
                  this.scheduleAfterInputsHaveUpdated(function () {
                    if (
                      void 0 !== e.modifyId &&
                      (void 0 === e.collection &&
                        !1 === this.isInputConnected("fetch") &&
                        t.setCollection(r.get()),
                      void 0 !== e.collection)
                    ) {
                      var n = o.get(e.modifyId);
                      e.collection.remove(n), t.sendSignalOnOutput("modified");
                    }
                  });
                },
              },
              clear: {
                displayName: "Clear",
                group: "Modify",
                valueChangedToTrue: function () {
                  var t = this,
                    e = this._internal;
                  this.scheduleAfterInputsHaveUpdated(function () {
                    void 0 === e.collection &&
                      !1 === this.isInputConnected("fetch") &&
                      t.setCollection(r.get()),
                      void 0 !== e.collection &&
                        (e.collection.set([]),
                        t.sendSignalOnOutput("modified"),
                        t.sendSignalOnOutput("count"));
                  });
                },
              },
              fetch: {
                displayName: "Fetch",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleSetCollection();
                },
              },
              new: {
                displayName: "New",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleNew();
                },
              },
            },
            outputs: {
              id: {
                type: "string",
                displayName: "Id",
                group: "General",
                getter: function () {
                  return this._internal.collection
                    ? this._internal.collection.getId()
                    : this._internal.collectionId;
                },
              },
              items: {
                type: "array",
                displayName: "Items",
                group: "General",
                getter: function () {
                  return this._internal.collection;
                },
              },
              count: {
                type: "number",
                displayName: "Count",
                group: "General",
                getter: function () {
                  return this._internal.collection
                    ? this._internal.collection.size()
                    : 0;
                },
              },
              modified: {
                group: "Events",
                type: "signal",
                displayName: "Modified",
              },
              changed: {
                group: "Events",
                type: "signal",
                displayName: "Changed",
              },
              stored: {
                group: "Events",
                type: "signal",
                displayName: "Stored",
              },
              fetched: {
                group: "Events",
                type: "signal",
                displayName: "Fetched",
              },
              created: {
                group: "Events",
                type: "signal",
                displayName: "Created",
              },
            },
            prototypeExtensions: {
              setCollectionID: function (t) {
                this.setCollection(r.get(t));
              },
              setCollection: function (t) {
                this._internal.collection &&
                  this._internal.collection.off(
                    "change",
                    this._internal.collectionChangedCallback
                  ),
                  (this._internal.collection = t),
                  this.flagOutputDirty("id"),
                  t.on("change", this._internal.collectionChangedCallback),
                  this.flagOutputDirty("items"),
                  this.flagOutputDirty("count");
              },
              setSourceCollection: function (t) {
                var e = this._internal;
                e.sourceCollection &&
                  e.sourceCollection instanceof r &&
                  e.sourceCollection.off(
                    "change",
                    e.sourceCollectionChangedCallback
                  ),
                  (e.sourceCollection = t),
                  e.sourceCollection instanceof r &&
                    e.sourceCollection.on(
                      "change",
                      e.sourceCollectionChangedCallback
                    ),
                  this._copySourceItems();
              },
              scheduleSetCollection: function () {
                var t = this;
                this.hasScheduledSetCollection ||
                  ((this.hasScheduledSetCollection = !0),
                  this.scheduleAfterInputsHaveUpdated(function () {
                    (t.hasScheduledSetCollection = !1),
                      t.setCollectionID(t._internal.collectionId),
                      t.sendSignalOnOutput("fetched");
                  }));
              },
              scheduleStore: function () {
                var t = this;
                if (!this.hasScheduledStore) {
                  this.hasScheduledStore = !0;
                  var e = this._internal;
                  this.scheduleAfterInputsHaveUpdated(function () {
                    (t.hasScheduledStore = !1),
                      t.setSourceCollection(e.pendingSourceCollection),
                      t.sendSignalOnOutput("stored");
                  });
                }
              },
              _copySourceItems: function () {
                var t = this._internal;
                void 0 === t.collection &&
                  !1 === this.isInputConnected("fetch") &&
                  this.setCollection(r.get()),
                  t.collection && t.collection.set(t.sourceCollection);
              },
              scheduleCopyItems: function () {
                var t = this;
                this._internal,
                  this.hasScheduledCopyItems ||
                    ((this.hasScheduledCopyItems = !0),
                    this.scheduleAfterInputsHaveUpdated(function () {
                      (t.hasScheduledCopyItems = !1), t._copySourceItems();
                    }));
              },
              scheduleNew: function () {
                var t = this;
                if (!this.hasScheduledNew) {
                  this.hasScheduledNew = !0;
                  var e = this._internal;
                  this.scheduleAfterInputsHaveUpdated(function () {
                    (t.hasScheduledNew = !1),
                      t.setCollection(r.get()),
                      e.sourceCollection &&
                        e.collection.set(e.sourceCollection),
                      t.sendSignalOnOutput("created");
                  });
                }
              },
              _onNodeDeleted: function () {
                i.prototype._onNodeDeleted.call(this),
                  this._internal.collection &&
                    this._internal.collection.off(
                      "change",
                      this._internal.collectionChangedCallback
                    );
              },
            },
          };
        t.exports = { node: s };
      },
      7569: (t, e, n) => {
        "use strict";
        const { Node: i, EdgeTriggeredInput: o } = n(5855),
          r = n(8750),
          s = n(266),
          a = n(1268),
          l = n(9406);
        function u(t, e) {
          const n = Object.keys(t);
          if (0 === n.length) return {};
          if (1 !== n.length)
            return e.error(
              "Filter must only have one key found " + n.join(",")
            );
          const i = {},
            o = n[0];
          if (void 0 !== t.and && Array.isArray(t.and))
            i.$and = t.and.map((t) => u(t, e));
          else if (void 0 !== t.or && Array.isArray(t.or))
            i.$or = t.or.map((t) => u(t, e));
          else if (void 0 !== t.idEqualTo) i.objectId = { $eq: t.idEqualTo };
          else if (void 0 !== t.idContainedIn)
            i.objectId = { $in: t.idContainedIn };
          else if (void 0 !== t.relatedTo) {
            var s = t.relatedTo.id;
            if (void 0 === s)
              return e.error("Must provide id in relatedTo filter");
            var l = t.relatedTo.key;
            if (void 0 === l)
              return e.error("Must provide key in relatedTo filter");
            var p = r.get(s);
            i.$relatedTo = {
              object: { __type: "Pointer", objectId: s, className: p._class },
              key: l,
            };
          } else if ("object" == typeof t[o]) {
            const n = t[o];
            if (void 0 !== n.equalTo) i[o] = { $eq: n.equalTo };
            else if (void 0 !== n.notEqualTo) i[o] = { $ne: n.notEqualTo };
            else if (void 0 !== n.lessThan) i[o] = { $lt: n.lessThan };
            else if (void 0 !== n.greaterThan) i[o] = { $gt: n.greaterThan };
            else if (void 0 !== n.lessThanOrEqualTo)
              i[o] = { $lte: n.lessThanOrEqualTo };
            else if (void 0 !== n.greaterThanOrEqualTo)
              i[o] = { $gte: n.greaterThanOrEqualTo };
            else if (void 0 !== n.exists) i[o] = { $exists: n.exists };
            else if (void 0 !== n.containedIn) i[o] = { $in: n.containedIn };
            else if (void 0 !== n.notContainedIn)
              i[o] = { $nin: n.notContainedIn };
            else if (void 0 !== n.pointsTo) {
              if (((p = r.get(n.pointsTo)), a._collections[e.collectionName]))
                var c = a._collections[e.collectionName].schema;
              var d =
                c && c.properties && c.properties[o]
                  ? c.properties[o].targetClass
                  : void 0;
              "Relation" ===
              (c && c.properties && c.properties[o]
                ? c.properties[o].type
                : void 0)
                ? (i[o] = {
                    __type: "Pointer",
                    objectId: n.pointsTo,
                    className: d,
                  })
                : Array.isArray(n.pointsTo)
                ? (i[o] = {
                    $in: n.pointsTo.map((t) => ({
                      __type: "Pointer",
                      objectId: t,
                      className: d,
                    })),
                  })
                : (i[o] = {
                    $eq: {
                      __type: "Pointer",
                      objectId: n.pointsTo,
                      className: d,
                    },
                  });
            } else if (void 0 !== n.matchesRegex)
              i[o] = { $regex: n.matchesRegex, $options: n.options };
            else if (void 0 !== n.text && void 0 !== n.text.search) {
              var h = n.text.search;
              i[o] =
                "string" == typeof h
                  ? { $text: { $search: { $term: h, $caseSensitive: !1 } } }
                  : {
                      $text: {
                        $search: {
                          $term: h.term,
                          $language: h.language,
                          $caseSensitive: h.caseSensitive,
                          $diacriticSensitive: h.diacriticSensitive,
                        },
                      },
                    };
            }
          } else e.error("Unrecognized filter keys " + n.join(","));
          return i;
        }
        var p = {
          name: "DbCollection",
          docs: "https://docs.noodl.net/#/nodes/cloud-services/collection",
          displayNodeName: "Query Collection",
          shortDesc: "A database collection.",
          category: "Cloud Services",
          usePortAsLabel: "collectionName",
          color: "data",
          deprecated: !0,
          initialize: function () {
            var t = this,
              e = !1;
            (this._internal.collectionChangedCallback = function () {
              e ||
                ((e = !0),
                t.scheduleAfterInputsHaveUpdated(function () {
                  t.sendSignalOnOutput("modified"),
                    t.flagOutputDirty("count"),
                    t.flagOutputDirty("firstItemId"),
                    (e = !1);
                }));
            }),
              (this._internal.storageSettings = {});
          },
          inputs: {},
          outputs: {
            id: {
              type: "string",
              displayName: "Name",
              group: "General",
              getter: function () {
                return this._internal.name;
              },
            },
            items: {
              type: "array",
              displayName: "Result",
              group: "General",
              getter: function () {
                return this._internal.collection;
              },
            },
            firstItemId: {
              type: "string",
              displayName: "First Item Id",
              group: "General",
              getter: function () {
                if (this._internal.collection) {
                  var t = this._internal.collection.get(0);
                  if (void 0 !== t) return t.getId();
                }
              },
            },
            count: {
              type: "number",
              displayName: "Count",
              group: "General",
              getter: function () {
                return this._internal.collection
                  ? this._internal.collection.size()
                  : 0;
              },
            },
            modified: {
              group: "Events",
              type: "signal",
              displayName: "Modified",
            },
            fetched: {
              group: "Events",
              type: "signal",
              displayName: "Fetched",
            },
            failure: {
              group: "Events",
              type: "signal",
              displayName: "Failure",
            },
            error: {
              type: "string",
              displayName: "Error",
              group: "Events",
              getter: function () {
                return this._internal.error;
              },
            },
          },
          prototypeExtensions: {
            setCollectionName: function (t) {
              (this._internal.name = t), this.flagOutputDirty("id");
            },
            setCollection: function (t) {
              this.bindCollection(t),
                this.flagOutputDirty("firstItemId"),
                this.flagOutputDirty("items"),
                this.flagOutputDirty("count");
            },
            unbindCurrentCollection: function () {
              var t = this._internal.collection;
              t &&
                (t.off("change", this._internal.collectionChangedCallback),
                (this._internal.collection = void 0));
            },
            bindCollection: function (t) {
              this.unbindCurrentCollection(),
                (this._internal.collection = t),
                t && t.on("change", this._internal.collectionChangedCallback);
            },
            _onNodeDeleted: function () {
              i.prototype._onNodeDeleted.call(this),
                this.unbindCurrentCollection();
            },
            setError: function (t) {
              (this._internal.err = t),
                this.flagOutputDirty("error"),
                this.sendSignalOnOutput("failure");
            },
            fetch: function () {
              var t = this._internal;
              this.context.editorConnection &&
                (void 0 === this._internal.name
                  ? this.context.editorConnection.sendWarning(
                      this.nodeScope.componentOwner.name,
                      this.id,
                      "query-collection",
                      { message: "No collection specified for query" }
                    )
                  : this.context.editorConnection.clearWarning(
                      this.nodeScope.componentOwner.name,
                      this.id,
                      "query-collection"
                    )),
                t.fetchScheduled ||
                  ((t.fetchScheduled = !0),
                  this.scheduleAfterInputsHaveUpdated(() => {
                    t.fetchScheduled = !1;
                    const e = s.get(),
                      n = this.getStorageFilter();
                    a.instance.query({
                      collection: this._internal.name,
                      where: n.where,
                      sort: n.sort,
                      limit: this.getStorageLimit(),
                      skip: this.getStorageSkip(),
                      success: (t) => {
                        void 0 !== t &&
                          e.set(
                            t.map((t) => {
                              var n = a._fromJSON(t, this._internal.name);
                              return n.on("delete", () => e.remove(n)), n;
                            })
                          ),
                          this.setCollection(e),
                          this.sendSignalOnOutput("fetched");
                      },
                      error: (t) => {
                        this.setCollection(e),
                          this.setError(t || "Failed to fetch.");
                      },
                    });
                  }));
            },
            getStorageFilter: function () {
              const t = this._internal.storageSettings;
              if (
                void 0 === t.storageFilterType ||
                "simple" === t.storageFilterType
              ) {
                if (t.storageFilter) {
                  const i = t.storageFilter.split(",");
                  var e = [];
                  i.forEach(function (n) {
                    const i = {};
                    var o = "$" + (t["storageFilterOp-" + n] || "eq");
                    (i[n] = {}),
                      (i[n][o] = t["storageFilterValue-" + n]),
                      e.push(i);
                  });
                  var n = e.length > 1 ? { $and: e } : e[0];
                }
                if (t.storageSort) {
                  const e = t.storageSort.split(",");
                  var i = [];
                  e.forEach(function (e) {
                    i.push(
                      ("descending" === t["storageSort-" + e] ? "-" : "") + e
                    );
                  });
                }
                return { where: n, sort: i };
              }
              if ("json" === t.storageFilterType) {
                if (!this._internal.filterFunc)
                  try {
                    var o = t.storageJSONFilter;
                    (o = o.replace(/\/\*[\s\S]*?\*\/|\/\/.*/g, "")),
                      (this._internal.filterVariables =
                        o.match(/\$[A-Za-z0-9]+/g) || []);
                    var r = ["filter", "where", "sort", "Inputs"]
                      .concat(this._internal.filterVariables)
                      .concat([o]);
                    this._internal.filterFunc = Function.apply(null, r);
                  } catch (t) {
                    (this._internal.filterFunc = void 0),
                      console.log("Error while parsing filter script: " + t);
                  }
                if (!this._internal.filterFunc) return;
                var s = {},
                  a = ((i = []), this),
                  l = function (t) {
                    s = u(t, {
                      collectionName: a._internal.name,
                      error: function (t) {
                        a.context.editorConnection.sendWarning(
                          a.nodeScope.componentOwner.name,
                          a.id,
                          "query-collection-filter",
                          { message: t }
                        );
                      },
                    });
                  };
                const e = {};
                for (let n in t)
                  n.startsWith("storageFilterValue-") &&
                    (e[n.substring("storageFilterValue-".length)] = t[n]);
                var p = [
                  l,
                  l,
                  function (t) {
                    i = t;
                  },
                  e,
                ];
                this._internal.filterVariables.forEach((e) => {
                  p.push(t["storageFilterValue-" + e.substring(1)]);
                });
                try {
                  this._internal.filterFunc.apply(this, p);
                } catch (t) {
                  console.log("Error while running filter script: " + t);
                }
                return { where: s, sort: i };
              }
            },
            getStorageLimit: function () {
              const t = this._internal.storageSettings;
              return t.storageEnableLimit ? t.storageLimit || 10 : void 0;
            },
            getStorageSkip: function () {
              const t = this._internal.storageSettings;
              return t.storageEnableLimit ? t.storageSkip || 0 : void 0;
            },
            registerOutputIfNeeded: function (t) {
              this.hasOutput(t) ||
                this.registerOutput(t, { getter: c.bind(this, t) });
            },
            registerInputIfNeeded: function (t) {
              if (this.hasInput(t)) return;
              const e = { storageFetch: this.fetch.bind(this) };
              if (e[t])
                return this.registerInput(t, {
                  set: o.createSetter({ valueChangedToTrue: e[t] }),
                });
              const n = { collectionName: this.setCollectionName.bind(this) };
              if (n[t]) return this.registerInput(t, { set: n[t] });
              this.registerInput(t, { set: d.bind(this, t) });
            },
          },
        };
        function c(t) {
          return this._internal.storageSettings[t];
        }
        function d(t, e) {
          this._internal.storageSettings[t] = e;
        }
        function h(t, e, n, i) {
          var o = [];
          if (
            (o.push({
              name: "collectionName",
              type: {
                name: "enum",
                enums:
                  void 0 !== i
                    ? i.map((t) => ({ value: t.name, label: t.name }))
                    : [],
                allowEditOnly: !0,
              },
              displayName: "Collecton Name",
              plug: "input",
              group: "General",
            }),
            o.push({
              name: "storageFilterType",
              type: {
                name: "enum",
                allowEditOnly: !0,
                enums: [
                  { value: "simple", label: "Simple" },
                  { value: "json", label: "Advanced" },
                ],
              },
              displayName: "Filter",
              default: "simple",
              plug: "input",
              group: "General",
            }),
            o.push({
              type: "boolean",
              plug: "input",
              group: "Limit",
              name: "storageEnableLimit",
              displayName: "Use limit",
            }),
            e.storageEnableLimit &&
              (o.push({
                type: "number",
                default: 10,
                plug: "input",
                group: "Limit",
                name: "storageLimit",
                displayName: "Limit",
              }),
              o.push({
                type: "number",
                default: 0,
                plug: "input",
                group: "Limit",
                name: "storageSkip",
                displayName: "Skip",
              })),
            o.push({
              type: "signal",
              plug: "input",
              group: "Storage",
              name: "storageFetch",
              displayName: "Fetch",
            }),
            void 0 === e.storageFilterType || "simple" === e.storageFilterType)
          ) {
            o.push({
              type: { name: "stringlist", allowEditOnly: !0 },
              plug: "input",
              group: "Filter",
              name: "storageFilter",
              displayName: "Filter",
            });
            const t = {
              string: [
                { value: "eq", label: "Equals" },
                { value: "ne", label: "Not Equals" },
              ],
              boolean: [
                { value: "eq", label: "Equals" },
                { value: "ne", label: "Not Equals" },
              ],
              number: [
                { value: "eq", label: "Equals" },
                { value: "ne", label: "Not Equals" },
                { value: "lt", label: "Less than" },
                { value: "gt", label: "Greater than" },
                { value: "gte", label: "Greater than or equal" },
                { value: "lte", label: "Less than or equal" },
              ],
            };
            e.storageFilter &&
              e.storageFilter.split(",").forEach((n) => {
                o.push({
                  type: {
                    name: "enum",
                    enums: [
                      { value: "string", label: "String" },
                      { value: "number", label: "Number" },
                      { value: "boolean", label: "Boolean" },
                    ],
                  },
                  default: "string",
                  plug: "input",
                  group: n + " filter",
                  displayName: "Type",
                  editorName: n + " filter | Type",
                  name: "storageFilterType-" + n,
                });
                var i = e["storageFilterType-" + n];
                o.push({
                  type: { name: "enum", enums: t[i || "string"] },
                  default: "eq",
                  plug: "input",
                  group: n + " filter",
                  displayName: "Op",
                  editorName: n + " filter| Op",
                  name: "storageFilterOp-" + n,
                }),
                  o.push({
                    type: i || "string",
                    plug: "input",
                    group: n + " filter",
                    displayName: "Value",
                    editorName: n + " Filter Value",
                    name: "storageFilterValue-" + n,
                  });
              }),
              o.push({
                type: { name: "stringlist", allowEditOnly: !0 },
                plug: "input",
                group: "Sort",
                name: "storageSort",
                displayName: "Sort",
              }),
              e.storageSort &&
                e.storageSort.split(",").forEach((t) => {
                  o.push({
                    type: {
                      name: "enum",
                      enums: [
                        { value: "ascending", label: "Ascending" },
                        { value: "descending", label: "Descending" },
                      ],
                    },
                    default: "ascending",
                    plug: "input",
                    group: t + " sort",
                    displayName: "Sort",
                    editorName: t + " sorting",
                    name: "storageSort-" + t,
                  });
                });
          } else if ("json" === e.storageFilterType) {
            o.push({
              type: {
                name: "string",
                allowEditOnly: !0,
                codeeditor: "javascript",
              },
              plug: "input",
              group: "Filter",
              name: "storageJSONFilter",
              default:
                "// Write your query script here, check out the reference documentation for examples\nwhere({ })\n",
              displayName: "Filter",
            });
            var r = e.storageJSONFilter;
            if (r) {
              var s = (r = r.replace(/\/\*[\s\S]*?\*\/|\/\/.*/g, "")).match(
                /\$[A-Za-z0-9]+/g
              );
              if (s) {
                const t = {};
                s.forEach((e) => {
                  t[e] = !0;
                }),
                  Object.keys(t).forEach((t) => {
                    o.push({
                      name: "storageFilterValue-" + t.substring(1),
                      displayName: t.substring(1),
                      group: "Filter Values",
                      plug: "input",
                      type: { name: "*", allowConnectionsOnly: !0 },
                    });
                  });
              }
              l.parseAndAddPortsFromScript(r, o, {
                inputPrefix: "storageFilterValue-",
                inputGroup: "Filter Values",
                inputType: { name: "*", allowConnectionsOnly: !0 },
                skipOutputs: !0,
              });
            }
          }
          n.sendDynamicPorts(t, o);
        }
        t.exports = {
          node: p,
          setup: function (t, e) {
            function n(n) {
              h(
                n.id,
                n.parameters,
                t.editorConnection,
                e.getMetaData("dbCollections")
              ),
                n.on("parameterUpdated", function (i) {
                  i.name.startsWith("storage") &&
                    h(
                      n.id,
                      n.parameters,
                      t.editorConnection,
                      e.getMetaData("dbCollections")
                    );
                }),
                e.on("metadataChanged.dbCollections", function (e) {
                  h(n.id, n.parameters, t.editorConnection, e);
                }),
                e.on("metadataChanged.cloudservices", function (t) {
                  a.instance._initCloudServices();
                });
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.DbCollection", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("DbCollection")) n(t);
              });
          },
        };
      },
      4082: (t, e, n) => {
        "use strict";
        const { Node: i, EdgeTriggeredInput: o } = n(5855),
          r = n(2307);
        var s = n(8750);
        const a = n(1268);
        var l = {},
          u = {},
          p = {
            name: "DbModel",
            docs: "https://docs.noodl.net/#/nodes/cloud-services/model",
            displayNodeName: "Model",
            shortDesc: "Database model",
            category: "Cloud Services",
            usePortAsLabel: "$ndlCollectionName",
            color: "data",
            deprecated: !0,
            initialize: function () {
              var t = this._internal;
              (t.inputValues = {}), (t.relationModelIds = {});
              var e = this;
              this._internal.onModelChangedCallback = function (t) {
                e.isInputConnected("fetch") ||
                  (e.hasOutput(t.name) && e.flagOutputDirty(t.name),
                  e.hasOutput("changed-" + t.name) &&
                    e.sendSignalOnOutput("changed-" + t.name),
                  e.sendSignalOnOutput("changed"));
              };
            },
            getInspectInfo() {
              const t = this._internal.model;
              return t
                ? [
                    { type: "text", value: "Id: " + t.getId() },
                    { type: "value", value: t.data },
                  ]
                : "[No Model]";
            },
            outputs: {
              id: {
                type: "string",
                displayName: "Id",
                group: "General",
                getter: function () {
                  return this._internal.model
                    ? this._internal.model.getId()
                    : this._internal.modelId;
                },
              },
              saved: { type: "signal", displayName: "Saved", group: "Events" },
              stored: {
                type: "signal",
                displayName: "Stored",
                group: "Events",
              },
              created: {
                type: "signal",
                displayName: "Created",
                group: "Events",
              },
              fetched: {
                type: "signal",
                displayName: "Fetched",
                group: "Events",
              },
              changed: {
                type: "signal",
                displayName: "Changed",
                group: "Events",
              },
              deleted: {
                type: "signal",
                displayName: "Deleted",
                group: "Events",
              },
              failure: {
                type: "signal",
                displayName: "Failure",
                group: "Events",
              },
              error: {
                type: "string",
                displayName: "Error",
                group: "Events",
                getter: function () {
                  return this._internal.error;
                },
              },
            },
            inputs: {
              modelId: {
                type: { name: "string", allowConnectionsOnly: !0 },
                displayName: "Id",
                group: "General",
                set: function (t) {
                  t instanceof s && (t = t.getId()),
                    (this._internal.modelId = t),
                    !1 === this.isInputConnected("fetch")
                      ? this.setModelID(t)
                      : this.flagOutputDirty("id");
                },
              },
              properties: {
                type: { name: "stringlist", allowEditOnly: !0 },
                displayName: "Properties",
                group: "Properties",
                set: function (t) {},
              },
              fetch: {
                displayName: "Fetch",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleFetch();
                },
              },
              store: {
                displayName: "Set",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleStore();
                },
              },
              save: {
                displayName: "Save",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.storageSave();
                },
              },
              delete: {
                displayName: "Delete",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.storageDelete();
                },
              },
              new: {
                displayName: "New",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.storageNew();
                },
              },
              insert: {
                displayName: "Insert",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.storageInsert();
                },
              },
            },
            methods: {
              setCollectionID: function (t) {
                (this._internal.collectionId = t), this.clearWarnings();
              },
              setModelID: function (t) {
                var e = s.get(t);
                this.setModel(e);
              },
              setModel: function (t) {
                for (var e in (this._internal.model &&
                  this._internal.model.off(
                    "change",
                    this._internal.onModelChangedCallback
                  ),
                (this._internal.model = t),
                this.flagOutputDirty("id"),
                t.on("change", this._internal.onModelChangedCallback),
                t.data))
                  this.hasOutput(e) && this.flagOutputDirty(e);
                this.sendSignalOnOutput("fetched");
              },
              _onNodeDeleted: function () {
                i.prototype._onNodeDeleted.call(this),
                  this._internal.model &&
                    this._internal.model.off(
                      "change",
                      this._internal.onModelChangedCallback
                    );
              },
              scheduleOnce: function (t, e) {
                const n = this,
                  i = "hasScheduled" + t;
                this._internal[i] ||
                  ((this._internal[i] = !0),
                  this.scheduleAfterInputsHaveUpdated(function () {
                    (n._internal[i] = !1), e();
                  }));
              },
              _hasChangesPending: function () {
                const t = this._internal;
                var e = t.model;
                for (var n in t.inputValues)
                  if (r(e.data[n], t.inputValues[n])) return !0;
                return !1;
              },
              scheduleFetch: function () {
                var t = this;
                const e = this._internal;
                this.checkWarningsBeforeCloudOp() &&
                  this.scheduleOnce("Fetch", function () {
                    void 0 !== e.modelId &&
                      "" !== e.modelId &&
                      a.instance.fetch({
                        collection: e.collectionId,
                        objectId: e.modelId,
                        success: function (n) {
                          var i = a._fromJSON(n, e.collectionId);
                          for (var o in (e.model !== i &&
                            (e.model &&
                              e.model.off("change", e.onModelChangedCallback),
                            (e.model = i),
                            i.on("change", e.onModelChangedCallback)),
                          t.flagOutputDirty("id"),
                          delete n.objectId,
                          n))
                            t.hasOutput(o) && t.flagOutputDirty(o);
                          t.sendSignalOnOutput("fetched");
                        },
                        error: function (e) {
                          t.setError(e || "Failed to fetch.");
                        },
                      });
                  });
              },
              scheduleStore: function () {
                var t = this,
                  e = this._internal;
                e.model &&
                  this.checkWarningsBeforeCloudOp() &&
                  this.scheduleOnce("Store", function () {
                    for (var n in e.inputValues)
                      e.model.set(n, e.inputValues[n], { resolve: !0 });
                    t.sendSignalOnOutput("stored");
                  });
              },
              storageSave: function () {
                const t = this,
                  e = this._internal;
                this.checkWarningsBeforeCloudOp() &&
                  this.scheduleOnce("StorageSave", function () {
                    if (e.model) {
                      var n = e.model;
                      for (var i in e.inputValues)
                        n.set(i, e.inputValues[i], { resolve: !0 });
                      a.instance.save({
                        collection: e.collectionId,
                        objectId: n.getId(),
                        data: n.data,
                        success: function (e) {
                          for (var i in e) n.set(i, e[i]);
                          t.sendSignalOnOutput("saved");
                        },
                        error: function (e) {
                          t.setError(e || "Failed to save.");
                        },
                      });
                    }
                  });
              },
              storageDelete: function () {
                const t = this;
                if (!this._internal.model) return;
                const e = this._internal;
                this.checkWarningsBeforeCloudOp() &&
                  this.scheduleOnce("StorageDelete", function () {
                    a.instance.delete({
                      collection: e.collectionId,
                      objectId: e.model.getId(),
                      success: function () {
                        e.model.notify("delete"),
                          t.sendSignalOnOutput("deleted");
                      },
                      error: function (e) {
                        t.setError(e || "Failed to delete.");
                      },
                    });
                  });
              },
              storageInsert: function () {
                const t = this,
                  e = this._internal;
                this.checkWarningsBeforeCloudOp() &&
                  this.scheduleOnce("StorageInsert", function () {
                    var n = t._getModelInitData();
                    a.instance.create({
                      collection: e.collectionId,
                      data: n,
                      success: function (n) {
                        const i = a._fromJSON(n, e.collectionId);
                        t.setModel(i),
                          t.sendSignalOnOutput("created"),
                          t.sendSignalOnOutput("saved");
                      },
                      error: function (e) {
                        t.setError(e || "Failed to insert.");
                      },
                    });
                  });
              },
              checkWarningsBeforeCloudOp() {
                return (
                  this.clearWarnings(),
                  !!this._internal.collectionId ||
                    (this.setError("No collection name specified"), !1)
                );
              },
              setError: function (t) {
                (this._internal.error = t),
                  this.flagOutputDirty("error"),
                  this.sendSignalOnOutput("failure"),
                  this.context.editorConnection &&
                    this.context.editorConnection.sendWarning(
                      this.nodeScope.componentOwner.name,
                      this.id,
                      "storage-op-warning",
                      { message: t, showGlobally: !0 }
                    );
              },
              clearWarnings() {
                this.context.editorConnection &&
                  this.context.editorConnection.clearWarning(
                    this.nodeScope.componentOwner.name,
                    this.id,
                    "storage-op-warning"
                  );
              },
              onRelationAdd: function (t) {
                const e = this,
                  n = this._internal;
                this.scheduleOnce("StorageAddRelation", function () {
                  if (n.model) {
                    var i = n.model,
                      o = n.relationModelIds[t];
                    void 0 !== o &&
                      a.instance.addRelation({
                        collection: n.collectionId,
                        objectId: i.getId(),
                        key: t,
                        targetObjectId: o,
                        targetClass: s.get(o)._class,
                        success: function (n) {
                          for (var o in n) i.set(o, n[o]);
                          e.sendSignalOnOutput("$relation-added-" + t);
                        },
                        error: function (t) {
                          e.setError(t || "Failed to add relation.");
                        },
                      });
                  }
                });
              },
              onRelationRemove: function (t) {
                const e = this,
                  n = this._internal;
                this.scheduleOnce("StorageRemoveRelation", function () {
                  if (n.model) {
                    var i = n.model,
                      o = n.relationModelIds[t];
                    void 0 !== o &&
                      a.instance.removeRelation({
                        collection: n.collectionId,
                        objectId: i.getId(),
                        key: t,
                        targetObjectId: o,
                        targetClass: s.get(o)._class,
                        success: function (n) {
                          for (var o in n) i.set(o, n[o]);
                          e.sendSignalOnOutput("$relation-removed-" + t);
                        },
                        error: function (t) {
                          e.setError(t || "Failed to remove relation.");
                        },
                      });
                  }
                });
              },
              setRelationModelId: function (t, e) {
                this._internal.relationModelIds[t] = e;
              },
              registerOutputIfNeeded: function (t) {
                if (!this.hasOutput(t))
                  return t.startsWith("$relation-added-") ||
                    t.startsWith("$relation-removed-")
                    ? this.registerOutput(t, { getter: function () {} })
                    : void this.registerOutput(t, { getter: c.bind(this, t) });
              },
              _getModelInitData: function () {
                var t = this._internal,
                  e = {};
                for (var n in t.inputValues) e[n] = t.inputValues[n];
                if (this._internal.modelInitCode)
                  try {
                    new Function("initialize", this._internal.modelInitCode)(
                      function (t) {
                        for (var n in t)
                          "function" == typeof t[n]
                            ? (e[n] = t[n]())
                            : (e[n] = t[n]);
                      }
                    );
                  } catch (t) {
                    console.log("Error while initializing model: " + t);
                  }
                return e;
              },
              setModelInitCode: function (t) {
                this._internal.modelInitCode = t;
              },
              registerInputIfNeeded: function (t) {
                if (this.hasInput(t)) return;
                if (t.startsWith("$relation-add-"))
                  return this.registerInput(t, {
                    set: o.createSetter({
                      valueChangedToTrue: this.onRelationAdd.bind(
                        this,
                        t.substring("$relation-add-".length)
                      ),
                    }),
                  });
                if (t.startsWith("$relation-remove-"))
                  return this.registerInput(t, {
                    set: o.createSetter({
                      valueChangedToTrue: this.onRelationRemove.bind(
                        this,
                        t.substring("$relation-remove-".length)
                      ),
                    }),
                  });
                if (t.startsWith("$relation-modelid-"))
                  return this.registerInput(t, {
                    set: this.setRelationModelId.bind(
                      this,
                      t.substring("$relation-modelid-".length)
                    ),
                  });
                const e = {};
                if (e[t])
                  return this.registerInput(t, {
                    set: o.createSetter({ valueChangedToTrue: e[t] }),
                  });
                const n = {
                  $ndlCollectionName: this.setCollectionID.bind(this),
                  $ndlModelInitCode: this.setModelInitCode.bind(this),
                };
                if (n[t]) return this.registerInput(t, { set: n[t] });
                this.registerInput(t, { set: d.bind(this, t) });
              },
            },
          };
        function c(t) {
          return this._internal.model
            ? this._internal.model.get(t, { resolve: !0 })
            : void 0;
        }
        function d(t, e) {
          this._internal.inputValues[t] = e;
        }
        function h(t, e, n, i) {
          var o = [],
            r = e.properties;
          if (r) {
            for (var s in (r = r ? r.split(",") : void 0)) {
              var a = r[s];
              o.push({
                type: { name: "*", allowConnectionsOnly: !0 },
                plug: "input/output",
                group: "Properties",
                name: a,
              }),
                o.push({
                  type: "signal",
                  plug: "output",
                  group: "Events",
                  displayName: "Changed " + a,
                  name: "changed-" + a,
                });
            }
            var p = (function (t, e) {
              if (t && e && t.length === e.length) {
                for (var n = {}, i = 0; i < t.length; i++) {
                  if (-1 === e.indexOf(t[i])) {
                    if (n.before) return;
                    n.before = t[i];
                  }
                  if (-1 === t.indexOf(e[i])) {
                    if (n.after) return;
                    n.after = e[i];
                  }
                }
                return n.before && n.after ? n : void 0;
              }
            })(u[t], r);
            if (((u[t] = r), p))
              var c = {
                plug: "input/output",
                patterns: ["{{*}}"],
                before: p.before,
                after: p.after,
              };
          }
          if (
            (o.push({
              name: "$ndlCollectionName",
              displayName: "Class",
              group: "General",
              type: {
                name: "enum",
                enums:
                  void 0 !== i
                    ? i.map((t) => ({ value: t.name, label: t.name }))
                    : [],
                allowEditOnly: !0,
              },
              plug: "input",
            }),
            e.$ndlCollectionName && i)
          ) {
            var d = i.find((t) => t.name === e.$ndlCollectionName);
            if (d && d.schema && d.schema.properties) {
              var h = d.schema.properties;
              for (var f in h)
                (a = h[f]),
                  o.find((t) => t.name === f) ||
                    ("Relation" === a.type
                      ? (o.push({
                          type: "signal",
                          plug: "input",
                          group: f + " Relation",
                          name: "$relation-add-" + f,
                          displayName: "Add",
                          editorName: f + " | Add",
                        }),
                        o.push({
                          type: "signal",
                          plug: "input",
                          group: f + " Relation",
                          name: "$relation-remove-" + f,
                          displayName: "Remove",
                          editorName: f + " | Remove",
                        }),
                        o.push({
                          type: { name: "string", allowConnectionsOnly: !0 },
                          plug: "input",
                          group: f + " Relation",
                          name: "$relation-modelid-" + f,
                          displayName: "Model Id",
                          editorName: f + " | Model Id",
                        }),
                        o.push({
                          type: "signal",
                          plug: "output",
                          group: f + " Relation",
                          name: "$relation-removed-" + f,
                          displayName: "Removed",
                          editorName: f + " | Removed",
                        }),
                        o.push({
                          type: "signal",
                          plug: "output",
                          group: f + " Relation",
                          name: "$relation-added-" + f,
                          displayName: "Added",
                          editorName: f + " | Added",
                        }))
                      : (o.push({
                          type: { name: "*", allowConnectionsOnly: !0 },
                          plug: "input/output",
                          group: "Properties",
                          name: f,
                        }),
                        o.push({
                          type: "signal",
                          plug: "output",
                          group: "Events",
                          displayName: "Changed " + f,
                          name: "changed-" + f,
                        })));
            }
          }
          o.push({
            name: "$ndlModelInitCode",
            displayName: "Initialize",
            group: "Scripts",
            type: {
              name: "string",
              allowEditOnly: !0,
              codeeditor: "javascript",
            },
            default:
              "initialize({\n\t// Here you can initialize new models\n\t//myProperty:'Some init value',\n\t//anotherProperty:function() { return 'Some other value' }\n})\n",
            plug: "input",
          });
          var g = JSON.stringify(o);
          l[t] !== g && ((l[t] = g), n.sendDynamicPorts(t, o, { renamed: c }));
        }
        t.exports = {
          node: p,
          setup: function (t, e) {
            function n(n) {
              h(
                n.id,
                n.parameters,
                t.editorConnection,
                e.getMetaData("dbCollections")
              ),
                n.on("parameterUpdated", function (i) {
                  h(
                    n.id,
                    n.parameters,
                    t.editorConnection,
                    e.getMetaData("dbCollections")
                  );
                }),
                e.on("metadataChanged.dbCollections", function (e) {
                  h(n.id, n.parameters, t.editorConnection, e);
                });
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.DbModel", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("DbModel")) n(t);
              });
          },
        };
      },
      3026: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        var o = n(8750),
          r = {
            name: "Model",
            docs: "https://docs.noodl.net/#/nodes/data/object",
            displayNodeName: "Object",
            shortDesc:
              "Stores any amount of properties and can be used standalone or together with Collections and For Each nodes.",
            category: "Data",
            usePortAsLabel: "modelId",
            color: "data",
            deprecated: !0,
            initialize: function () {
              this._internal.inputValues = {};
              var t = this;
              this._internal.onModelChangedCallback = function (e) {
                !0 !== t.isInputConnected("fetch") &&
                  (t.hasOutput(e.name) && t.flagOutputDirty(e.name),
                  t.hasOutput("changed-" + e.name) &&
                    t.sendSignalOnOutput("changed-" + e.name),
                  t.sendSignalOnOutput("changed"));
              };
            },
            getInspectInfo() {
              const t = this._internal.model;
              if (!t) return "[No Object]";
              const e = [{ type: "text", value: "Id: " + t.getId() }],
                n = this._internal.model.data;
              return e.concat(
                Object.keys(n).map((t) => ({
                  type: "text",
                  value: t + ": " + n[t],
                }))
              );
            },
            outputs: {
              id: {
                type: "string",
                displayName: "Id",
                group: "General",
                getter: function () {
                  return this._internal.model
                    ? this._internal.model.getId()
                    : this._internal.modelId;
                },
              },
              stored: {
                type: "signal",
                displayName: "Stored",
                group: "Events",
              },
              changed: {
                type: "signal",
                displayName: "Changed",
                group: "Events",
              },
              fetched: {
                type: "signal",
                displayName: "Fetched",
                group: "Events",
              },
              created: {
                type: "signal",
                displayName: "Created",
                group: "Events",
              },
            },
            inputs: {
              modelId: {
                type: {
                  name: "string",
                  identifierOf: "ModelName",
                  identifierDisplayName: "Object Ids",
                },
                displayName: "Id",
                group: "General",
                set: function (t) {
                  t instanceof o && (t = t.getId()),
                    (this._internal.modelId = t),
                    !1 === this.isInputConnected("fetch")
                      ? this.setModelID(t)
                      : this.flagOutputDirty("id");
                },
              },
              properties: {
                type: { name: "stringlist", allowEditOnly: !0 },
                displayName: "Properties",
                group: "Properties",
                set: function (t) {},
              },
              new: {
                displayName: "New",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleNew();
                },
              },
              store: {
                displayName: "Set",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleStore();
                },
              },
              fetch: {
                displayName: "Fetch",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleSetModel();
                },
              },
              clear: {
                displayName: "Clear",
                group: "Actions",
                valueChangedToTrue: function () {
                  var t = this._internal;
                  if (t.model)
                    for (var e in t.inputValues)
                      t.model.set(e, void 0, { resolve: !0 });
                },
              },
            },
            prototypeExtensions: {
              scheduleStore: function () {
                if (!this.hasScheduledStore) {
                  this.hasScheduledStore = !0;
                  var t = this._internal;
                  this.scheduleAfterInputsHaveUpdated(() => {
                    if (((this.hasScheduledStore = !1), t.model)) {
                      for (var e in t.inputValues)
                        t.model.set(e, t.inputValues[e], { resolve: !0 });
                      this.sendSignalOnOutput("stored");
                    }
                  });
                }
              },
              scheduleNew: function () {
                if (!this.hasScheduledNew) {
                  this.hasScheduledNew = !0;
                  var t = this._internal;
                  this.scheduleAfterInputsHaveUpdated(() => {
                    this.hasScheduledNew = !1;
                    const e = o.get();
                    for (var n in t.inputValues)
                      e.set(n, t.inputValues[n], { resolve: !0 });
                    this.setModel(e),
                      this.sendSignalOnOutput("created"),
                      this.sendSignalOnOutput("stored");
                  });
                }
              },
              scheduleSetModel: function () {
                this.hasScheduledSetModel ||
                  ((this.hasScheduledSetModel = !0),
                  this._internal,
                  this.scheduleAfterInputsHaveUpdated(() => {
                    (this.hasScheduledSetModel = !1),
                      this.setModelID(this._internal.modelId);
                  }));
              },
              setModelID: function (t) {
                var e = o.get(t);
                this.setModel(e), this.sendSignalOnOutput("fetched");
              },
              setModel: function (t) {
                for (var e in (this._internal.model &&
                  this._internal.model.off(
                    "change",
                    this._internal.onModelChangedCallback
                  ),
                (this._internal.model = t),
                this.flagOutputDirty("id"),
                t.on("change", this._internal.onModelChangedCallback),
                t.data))
                  this.hasOutput(e) && this.flagOutputDirty(e);
              },
              _onNodeDeleted: function () {
                i.prototype._onNodeDeleted.call(this),
                  this._internal.model &&
                    this._internal.model.off(
                      "change",
                      this._internal.onModelChangedCallback
                    );
              },
              registerOutputIfNeeded: function (t) {
                this.hasOutput(t) ||
                  this.registerOutput(t, { getter: s.bind(this, t) });
              },
              registerInputIfNeeded: function (t) {
                this.hasInput(t) ||
                  this.registerInput(t, { set: a.bind(this, t) });
              },
            },
          };
        function s(t) {
          return this._internal.model
            ? this._internal.model.get(t, { resolve: !0 })
            : void 0;
        }
        function a(t, e) {
          if (
            ((this._internal.inputValues[t] = e),
            !1 === this.isInputConnected("store") &&
              !1 === this.isInputConnected("new"))
          ) {
            const n = this._internal.model;
            (!n || n.get(t) !== e) && this.scheduleStore();
          }
        }
        function l(t, e, n) {
          var i = [],
            o = e.properties;
          if (o)
            for (var r in (o = o ? o.split(",") : void 0)) {
              var s = o[r];
              i.push({
                type: { name: "*", allowConnectionsOnly: !0 },
                plug: "input/output",
                group: "Properties",
                name: s,
              }),
                i.push({
                  type: "signal",
                  plug: "output",
                  group: "Changed Events",
                  displayName: s + " Changed",
                  name: "changed-" + s,
                });
            }
          n.sendDynamicPorts(t, i, { detectRenamed: { plug: "input/output" } });
        }
        t.exports = {
          node: r,
          setup: function (t, e) {
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("nodeAdded.Model", function (e) {
                l(e.id, e.parameters, t.editorConnection),
                  e.on("parameterUpdated", function (n) {
                    l(e.id, e.parameters, t.editorConnection);
                  });
              });
          },
        };
      },
      6645: (t, e, n) => {
        var i = n(9406),
          o = n(5055),
          r = {
            name: "REST",
            shortDesc:
              "The REST node is used to connect to REST endpoints to make request and expose data from these endpoints.",
            category: "Data",
            color: "data",
            deprecated: !0,
            initialize: function () {
              (this._internal.requestInputs = {}),
                (this._internal.responseOutputs = {}),
                (this._internal.backendProperties = {}),
                (this._internal.hasPendingFetch = !1),
                (this._internal.useExternalFile = !1);
            },
            dynamicports: [
              {
                name: "conditionalports/basic",
                condition: "backendType = external OR backendType NOT SET",
                ports: [
                  {
                    name: "backendEndpoint",
                    plug: "input",
                    type: { name: "string" },
                    displayName: "Endpoint",
                    group: "Backend",
                  },
                ],
              },
              {
                name: "conditionalports/basic",
                condition: "backendType = prototype",
                ports: [
                  {
                    name: "backendScript",
                    plug: "input",
                    type: {
                      name: "string",
                      codeeditor: "javascript",
                      allowEditOnly: !0,
                    },
                    displayName: "Script",
                    default:
                      "//Add prototype backend code to response to the request\n//\n//*context.request                      contains the request object as passed from the\n//                                      request script.\n//*context.sendResponse(status,content) should be called to send a response back\n//                                      to the request script with status code\n//                                      and a javascript object with the content\n//                                      of the response.\ncontext.sendResponse(200,{result:'success'});\n",
                    group: "Backend",
                  },
                ],
              },
              {
                name: "conditionalports/basic",
                condition: "useExternalFile = no OR useExternalFile NOT SET",
                ports: [
                  {
                    name: "code",
                    displayName: "Script",
                    group: "Request",
                    plug: "input",
                    type: {
                      name: "string",
                      allowEditOnly: !0,
                      codeeditor: "javascript",
                    },
                    default:
                      "define({\n\t// The input ports of the REST node, name of input and type\n\tinputs:{\n\t    //ExampleInput:'number',\n\t},\n\t\n\t// The output ports of the REST node, name of output and type\n\toutputs:{\n\t    //ExampleOutput:'string',\n\t},\n\t\n\t//Add custom code to setup the request object before the request\n\t//is made.\n\t//\n\t//*request.resource     contains the resource path of the request.\n\t//*request.method       contains the method, GET, POST, PUT or DELETE.\n\t//*request.headers      is a map where you can add additional headers.\n\t//*request.parameters   is a map the parameters that will be appended\n\t//                      to the url.\n\t//*request.content      contains the content of the request as a javascript\n\t//                      object.\n\t//\n\t// The inputs and outputs maps can also be accessed via *this.inputs and\n\t// *this.outputs.\n\trequest:function(inputs,request) {\n\t},\n\t\n\t// Add custom code to convert the response content to outputs\n\t//\n\t//*response.status    The status code of the response\n\t//*response.content   The content of the response as a javascript\n\t//                    object.\n\t//*response.request   The request object that resulted in the response.\n\t//\n\t// The inputs and outputs maps can also be accessed via *this.inputs and\n\t// *this.outputs.\n\tresponse:function(outputs,response) {\n\t}\n})\n",
                  },
                ],
              },
              {
                name: "conditionalports/basic",
                condition: "useExternalFile = yes",
                ports: [
                  {
                    name: "externalFile",
                    displayName: "File Path",
                    group: "Request",
                    plug: "input",
                    type: { name: "source", allowEditOnly: !0 },
                  },
                ],
              },
            ],
            inputs: {
              resource: {
                type: "string",
                displayName: "Resource",
                group: "Request",
                default: "/",
                set: function (t) {
                  this._internal.resource = t;
                },
              },
              method: {
                type: {
                  name: "enum",
                  enums: [
                    { label: "GET", value: "GET" },
                    { label: "POST", value: "POST" },
                    { label: "DELETE", value: "DELETE" },
                    { label: "PUT", value: "PUT" },
                    { label: "PATCH", value: "PATCH" },
                    { label: "DELETE", value: "DELETE" },
                  ],
                },
                displayName: "Method",
                group: "Request",
                default: "GET",
                set: function (t) {
                  this._internal.method = t;
                },
              },
              useExternalFile: {
                type: {
                  name: "enum",
                  enums: [
                    { value: "yes", label: "Yes" },
                    { value: "no", label: "No" },
                  ],
                  allowEditOnly: !0,
                },
                default: "no",
                displayName: "Use External File",
                group: "Request",
                set: function (t) {
                  (this._internal.isWaitingForExternalFileToLoad = "yes" === t),
                    (this._internal.useExternalFile = "yes" === t);
                },
              },
              code: {
                set: function (t) {
                  t &&
                    this.scheduleAfterInputsHaveUpdated(function () {
                      if (!1 === this._internal.useExternalFile) {
                        var e = i.createFromCode(
                          t,
                          this.nodeScope.noodlJavascriptAPI
                        );
                        this._onCodeParsed(e);
                      }
                    });
                },
              },
              externalFile: {
                set: function (t) {
                  if (!1 !== this._internal.useExternalFile) {
                    var e = this;
                    i.createFromURL(
                      t,
                      this.nodeScope.noodlJavascriptAPI,
                      function (t) {
                        (e._internal.isWaitingForExternalFileToLoad = !1),
                          e._onCodeParsed(t),
                          !0 === e._internal.hasPendingFetch &&
                            ((e._internal.hasPendingFetch = !1), e.doFetch());
                      }
                    );
                  }
                },
              },
              fetch: {
                type: "signal",
                displayName: "Fetch",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleFetch();
                },
              },
              cancel: {
                type: "signal",
                displayName: "Cancel",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.cancelFetch();
                },
              },
              backendType: {
                type: {
                  name: "enum",
                  enums: [
                    { label: "External", value: "external" },
                    { label: "Prototype", value: "prototype" },
                  ],
                  allowEditOnly: !0,
                },
                displayName: "Backend type",
                group: "Backend",
                default: "external",
                set: function (t) {
                  this._internal.backendType = t;
                },
              },
            },
            outputs: {
              fetching: {
                type: "boolean",
                displayName: "Fetching",
                group: "Status",
                getter: function () {
                  return !!this._internal.fetching;
                },
              },
              started: {
                type: "signal",
                displayName: "Started",
                group: "Signals",
              },
              completed: {
                type: "signal",
                displayName: "Completed",
                group: "Signals",
              },
              statusOK: {
                type: "signal",
                displayName: "Status OK",
                group: "Signals",
              },
              statusFail: {
                type: "signal",
                displayName: "Status Fail",
                group: "Signals",
              },
            },
            prototypeExtensions: {
              _onCodeParsed: function (t) {
                if (
                  (this.context.editorConnection &&
                    (t.error
                      ? this.context.editorConnection.sendWarning(
                          this.nodeScope.componentOwner.name,
                          this.id,
                          "js-parse-waring",
                          { message: t.error }
                        )
                      : this.context.editorConnection.clearWarning(
                          this.nodeScope.componentOwner.name,
                          this.id,
                          "js-parse-waring"
                        )),
                  !t.error)
                ) {
                  var e = this;
                  Object.keys(t.outputs).forEach(function (t) {
                    e.registerOutputIfNeeded(t);
                  }),
                    (this._internal.requestFunction = t.definedObject.request),
                    (this._internal.responseFunction =
                      t.definedObject.response);
                }
              },
              registerOutputIfNeeded: function (t) {
                this.hasOutput(t) ||
                  this.registerOutput(t, { getter: s.bind(this, t) });
              },
              registerInputIfNeeded: function (t) {
                var e = this;
                this.hasInput(t) ||
                  (0 === t.indexOf("backend")
                    ? this.registerInput(t, {
                        set: function (n) {
                          e._internal.backendProperties[t] = n;
                        },
                      })
                    : this.registerInput(t, { set: a.bind(this, t) }));
              },
              scheduleFetch: function () {
                var t = this._internal;
                t.hasScheduledFetch ||
                  ((t.hasScheduledFetch = !0),
                  this.scheduleAfterInputsHaveUpdated(this.doFetch.bind(this)));
              },
              doResponse: function (t, e, n) {
                if (this._internal.responseFunction) {
                  var i = {
                    inputs: this._internal.requestInputs,
                    outputs: this._internal.responseOutputs,
                  };
                  this._internal.responseFunction.apply(i, [
                    this._internal.responseOutputs,
                    { status: t, content: e, request: n },
                  ]);
                }
                for (var o in this._internal.responseOutputs)
                  this.hasOutput(o) && this.flagOutputDirty(o);
                200 === t
                  ? this.sendSignalOnOutput("statusOK")
                  : this.sendSignalOnOutput("statusFail"),
                  (this._internal.fetching = !1),
                  this.flagOutputDirty("fetching"),
                  this.sendSignalOnOutput("completed");
              },
              doExternalFetch: function (t) {
                var e = this,
                  n = new window.XMLHttpRequest(),
                  i =
                    this._internal.backendProperties.backendEndpoint +
                    t.resource;
                if (Object.keys(t.parameters).length > 0) {
                  var r = Object.keys(t.parameters).map(function (e) {
                    return e + "=" + encodeURIComponent(t.parameters[e]);
                  });
                  i += "?" + r.join("&");
                }
                for (var s in (n.open(t.method, i, !0), t.headers))
                  n.setRequestHeader(s, t.headers[s]);
                (n.onreadystatechange = function () {
                  this.response;
                  var n = !1;
                  if (
                    4 === this.readyState ||
                    this.readyState === XMLHttpRequest.DONE
                  ) {
                    var i = this.status,
                      r = this.getResponseHeader("content-type"),
                      s = this.response;
                    r &&
                      (-1 !== (r = r.toLowerCase()).indexOf("/json")
                        ? (e.doResponse(i, JSON.parse(s), t), (n = !0))
                        : -1 !== r.indexOf("/xml") &&
                          (o.parseString(s, function (n, o) {
                            e.doResponse(i, n ? s : o, t);
                          }),
                          (n = !0))),
                      !1 === n && e.doResponse(i, s, t);
                  }
                }),
                  (n.onerror = function () {
                    console.log("REST: Failed to request", i);
                  }),
                  t.content
                    ? (n.setRequestHeader("Content-Type", "application/json"),
                      n.send(JSON.stringify(t.content)))
                    : n.send();
              },
              doPrototypeFetch: function (t) {
                var e = this,
                  n = this._internal.backendProperties.backendScript;
                new Function("context", n)({
                  request: t,
                  sendResponse: function (n, i) {
                    e.doResponse(n, i, t);
                  },
                });
              },
              doFetch: function () {
                if (
                  ((this._internal.hasScheduledFetch = !1),
                  !0 !== this._internal.useExternalFile ||
                    !0 !== this._internal.isWaitingForExternalFileToLoad)
                ) {
                  this.sendSignalOnOutput("started"),
                    (this._internal.fetching = !0),
                    this.flagOutputDirty("fetching");
                  var t = this._internal.resource;
                  for (var e in this._internal.requestInputs)
                    t = t.replace(
                      "{" + e + "}",
                      this._internal.requestInputs[e]
                    );
                  var n = {
                    resource: t,
                    headers: {},
                    method:
                      void 0 !== this._internal.method
                        ? this._internal.method
                        : "GET",
                    parameters: {},
                  };
                  if (this._internal.requestFunction) {
                    var i = {
                      inputs: this._internal.requestInputs,
                      outputs: this._internal.responseOutputs,
                    };
                    this._internal.requestFunction.apply(i, [
                      this._internal.requestInputs,
                      n,
                    ]);
                  }
                  void 0 === this._internal.backendType ||
                  "external" === this._internal.backendType
                    ? this.doExternalFetch(n)
                    : this.doPrototypeFetch(n);
                } else this._internal.hasPendingFetch = !0;
              },
            },
          };
        function s(t) {
          return this._internal.responseOutputs[t];
        }
        function a(t, e) {
          this._internal.requestInputs[t] = e;
        }
        function l(t, e) {
          if (t.parameters) {
            var n = [];
            if (t.parameters.resource) {
              var o = t.parameters.resource.match(/\{[A-Za-z0-9_]*\}/g);
              for (var r in o) {
                var s = o[r].replace("{", "").replace("}", "");
                n.push({
                  name: s,
                  type: "string",
                  plug: "input",
                  group: "Inputs",
                });
              }
            }
            if (
              t.parameters.externalFile &&
              "yes" === t.parameters.useExternalFile
            ) {
              var a = t.parameters.externalFile;
              i.createFromURL(a, null, function (i) {
                i.getPorts().forEach(function (t) {
                  l(t.name) || n.push(t);
                }),
                  e.sendDynamicPorts(t.id, n);
              });
            } else
              t.parameters.code &&
                (i
                  .createFromCode(t.parameters.code, null)
                  .getPorts()
                  .forEach(function (t) {
                    l(t.name) || n.push(t);
                  }),
                e.sendDynamicPorts(t.id, n));
          }
          function l(t) {
            for (var e = 0; e < n.length; e++) if (n[e].name === t) return !0;
            return !1;
          }
        }
        t.exports = {
          node: r,
          setup: function (t, e) {
            t.editorConnection &&
              e.on("nodeAdded.REST", function (e) {
                l(e, t.editorConnection),
                  e.on("parameterUpdated", function (n) {
                    l(e, t.editorConnection);
                  });
              });
          },
        };
      },
      1626: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        var o = n(8750),
          r = {
            name: "Variable",
            docs: "https://docs.noodl.net/#/nodes/data/variable",
            category: "Data",
            usePortAsLabel: "name",
            color: "data",
            deprecated: !0,
            initialize: function () {
              var t = this,
                e = this._internal;
              (this._internal.onModelChangedCallback = function (n) {
                t.isInputConnected("fetch") ||
                  n.name !== e.name ||
                  (t.sendSignalOnOutput("changed"), t.flagOutputDirty("value"));
              }),
                (e.variablesModel = o.get("--ndl--global-variables")),
                e.variablesModel.on(
                  "change",
                  this._internal.onModelChangedCallback
                );
            },
            getInspectInfo() {
              return this._internal.name
                ? this._internal.variablesModel.get(this._internal.name)
                : "[No value set]";
            },
            outputs: {
              name: {
                type: "string",
                displayName: "Name",
                group: "General",
                getter: function () {
                  return this._internal.name;
                },
              },
              stored: {
                type: "signal",
                displayName: "Stored",
                group: "Events",
              },
              changed: {
                type: "signal",
                displayName: "Changed",
                group: "Events",
              },
              fetched: {
                type: "signal",
                displayName: "Fetched",
                group: "Events",
              },
              value: {
                type: "*",
                displayName: "Value",
                group: "General",
                getter: function () {
                  var t = this._internal;
                  if (t.name) return t.variablesModel.get(t.name);
                },
              },
            },
            inputs: {
              name: {
                type: {
                  name: "string",
                  identifierOf: "VariableName",
                  identifierDisplayName: "Variable names",
                },
                displayName: "Name",
                group: "General",
                set: function (t) {
                  !1 === this.isInputConnected("fetch")
                    ? this.setVariableName(t)
                    : ((this._internal.name = t), this.flagOutputDirty("name"));
                },
              },
              store: {
                displayName: "Set",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleStore();
                },
              },
              fetch: {
                displayName: "Fetch",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.setVariableName(this._internal.name);
                },
              },
              value: {
                type: "*",
                displayName: "Value",
                group: "General",
                set: function (t) {
                  (this._internal.value = t),
                    !1 === this.isInputConnected("store") &&
                      this.scheduleStore();
                },
              },
            },
            prototypeExtensions: {
              scheduleStore: function () {
                if (!this.hasScheduledStore) {
                  this.hasScheduledStore = !0;
                  var t = this._internal;
                  this.scheduleAfterInputsHaveUpdated(function () {
                    (this.hasScheduledStore = !1),
                      t.variablesModel.set(t.name, t.value),
                      this.sendSignalOnOutput("stored");
                  });
                }
              },
              setVariableName: function (t) {
                (this._internal.name = t),
                  this.flagOutputDirty("name"),
                  this.flagOutputDirty("value"),
                  this.sendSignalOnOutput("fetched");
              },
              _onNodeDeleted: function () {
                i.prototype._onNodeDeleted.call(this),
                  this._internal.variablesModel.off(
                    "change",
                    this._internal.onModelChangedCallback
                  );
              },
            },
          };
        t.exports = { node: r };
      },
      6136: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855),
          o = {
            name: "Globals",
            shortDesc: "A node used to communicate values across the project.",
            category: "Utilities",
            color: "component",
            deprecated: !0,
            initialize: function () {
              this._internal.listeners = [];
            },
            panels: [
              {
                name: "PortEditor",
                context: ["select", "connectTo", "connectFrom"],
                title: "Globals",
                plug: "input/output",
                type: { name: "*" },
              },
            ],
            prototypeExtensions: {
              _onNodeDeleted: function () {
                i.prototype._onNodeDeleted.call(this);
                for (
                  var t = this.context.globalsEventEmitter, e = 0;
                  e < this._internal.listeners.length;
                  e++
                ) {
                  var n = this._internal.listeners[e];
                  t.removeListener(n.name, n.listener);
                }
                this._internal.listeners = [];
              },
              _newOutputValueReceived: {
                value: function (t) {
                  (this._cachedInputValues[t] = this.context.globalValues[t]),
                    this.flagOutputDirty(t);
                },
              },
              registerInputIfNeeded: {
                value: function (t) {
                  this.hasInput(t) ||
                    this.registerInput(t, {
                      set: this.context.setGlobalValue.bind(this.context, t),
                    });
                },
              },
              registerOutputIfNeeded: {
                value: function (t) {
                  if (!this.hasOutput(t)) {
                    var e = this._newOutputValueReceived.bind(this, t),
                      n = this.context.globalsEventEmitter;
                    this._internal.listeners.push({ name: t, listener: e }),
                      n.on(t, e),
                      this.registerOutput(t, {
                        getter: function () {
                          return this.context.globalValues[t];
                        },
                      });
                  }
                },
              },
            },
          };
        t.exports = { node: o };
      },
      7457: (t) => {
        "use strict";
        const e = {
          name: "Gyroscope",
          docs: "https://docs.noodl.net/#/nodes/sensors/device-orientation",
          shortDesc:
            "The orientation of a device. Works on phones, tablets and other devices with the required sensors.",
          displayNodeName: "Device Orientation",
          category: "Sensors",
          deprecated: !0,
          initialize: function () {
            (this._internal.alpha = 0),
              (this._internal.beta = 0),
              (this._internal.gamma = 0);
            var t = n.bind(this);
            window.addEventListener("deviceorientation", t),
              this.context.eventEmitter.once(
                "applicationDataReloaded",
                function () {
                  window.removeEventListener("deviceorientation", t);
                }
              );
          },
          outputs: {
            rotationX: {
              type: "number",
              displayName: "Rotation X",
              getter: function () {
                return -this._internal.beta;
              },
            },
            rotationY: {
              type: "number",
              displayName: "Rotation Y",
              getter: function () {
                return this._internal.gamma;
              },
            },
            rotationZ: {
              type: "number",
              displayName: "Rotation Z",
              getter: function () {
                return -this._internal.alpha;
              },
            },
          },
        };
        function n(t) {
          t.alpha !== this._internal.alpha &&
            ((this._internal.alpha = t.alpha),
            this.flagOutputDirty("rotationZ")),
            t.beta !== this._internal.beta &&
              ((this._internal.beta = t.beta),
              this.flagOutputDirty("rotationX")),
            t.gamma !== this._internal.gamma &&
              ((this._internal.gamma = t.gamma),
              this.flagOutputDirty("rotationY"));
        }
        t.exports = { node: e };
      },
      2722: (t, e, n) => {
        "use strict";
        const i = n(5936),
          o = {
            name: "Number Blend",
            docs: "https://docs.noodl.net/#/nodes/interpolation/number-blend",
            shortDesc:
              "Computes a result output based on blending (linearly interpolating) between the inputs.",
            category: "Interpolation",
            deprecated: !0,
            initialize: function () {
              var t = this._internal;
              (t.inputs = []),
                (t.blendValue = 0),
                (t.result = 0),
                (t.clamp = !1);
            },
            getInspectInfo() {
              return this._internal.result;
            },
            prototypeExtensions: {
              updateResult: function () {
                var t = this._internal.inputs;
                if (0 === t.length) return 0;
                var e = Math.floor(this._internal.blendValue),
                  n = this._internal.blendValue - e;
                e >= t.length - 1
                  ? this._internal.clamp
                    ? ((e = t.length - 1), (n = 0))
                    : ((n += e - (t.length - 1)), (e = t.length - 1))
                  : e <= 0 &&
                    (this._internal.clamp
                      ? ((e = 0), (n = 0))
                      : ((n += e), (e = 0))),
                  0 === n || 1 === t.length
                    ? (this._internal.result = t[e])
                    : e === t.length - 1 && n > 0
                    ? (this._internal.result = i.linear(t[e - 1], t[e], n + 1))
                    : (this._internal.result = i.linear(t[e], t[e + 1], n)),
                  this.flagOutputDirty("result");
              },
            },
            numberedInputs: {
              input: {
                type: "number",
                displayPrefix: "Number",
                createSetter: (t) =>
                  function (e) {
                    const n = this._internal.inputs;
                    n[t] !== e && ((n[t] = e || 0), this.updateResult());
                  },
              },
            },
            inputs: {
              blendValue: {
                type: "number",
                displayName: "Blend Value",
                default: 0,
                set: function (t) {
                  (this._internal.blendValue = t), this.updateResult();
                },
              },
              clamp: {
                type: "boolean",
                displayName: "Clamp",
                default: !1,
                set: function (t) {
                  (this._internal.clamp = !!t), this.updateResult();
                },
              },
            },
            outputs: {
              result: {
                type: "number",
                displayName: "Result",
                getter: function () {
                  return this._internal.result;
                },
              },
            },
          };
        t.exports = { node: o };
      },
      6436: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855),
          o = n(8750),
          r = new (0, n(7187).EventEmitter)();
        r.setMaxListeners(1e6);
        const s = {
          name: "Parent Component State",
          displayNodeName: "Parent Component Object",
          category: "Component Utilities",
          color: "component",
          docs: "https://docs.noodl.net/#/nodes/component-utilities/parent-component-object",
          deprecated: !0,
          initialize() {
            (this._internal.inputValues = {}),
              (this._internal.onModelChangedCallback = (t) => {
                !0 !== this.isInputConnected("fetch") &&
                  (this.hasOutput(t.name) && this.flagOutputDirty(t.name),
                  this.hasOutput("changed-" + t.name) &&
                    this.sendSignalOnOutput("changed-" + t.name),
                  this.sendSignalOnOutput("changed"));
              }),
              (this.onComponentStateNodesChanged = () => {
                const t = this.findParentComponentStateModelId();
                this._internal.modelId !== t &&
                  ((this._internal.modelId = t),
                  !1 === this.isInputConnected("fetch") &&
                    this.setModelId(this._internal.modelId));
              }),
              r.on(
                "componentStateNodesChanged",
                this.onComponentStateNodesChanged
              ),
              this.updateComponentState();
          },
          nodeScopeDidInitialize() {
            this._internal.modelId ||
              this.context.scheduleAfterUpdate(() => {
                this.updateComponentState();
              });
          },
          getInspectInfo() {
            if (!this._internal.model) return "No parent component state found";
            const t = [
                { type: "text", value: this._internal.parentComponentName },
              ],
              e = this._internal.model.data;
            return t.concat(
              Object.keys(e).map((t) => ({
                type: "text",
                value: t + ": " + e[t],
              }))
            );
          },
          inputs: {
            properties: {
              type: { name: "stringlist", allowEditOnly: !0 },
              displayName: "Properties",
              group: "Properties",
              set(t) {},
            },
            store: {
              displayName: "Set",
              group: "Actions",
              valueChangedToTrue() {
                this.scheduleStore();
              },
            },
            fetch: {
              displayName: "Fetch",
              group: "Actions",
              valueChangedToTrue: function () {
                this.setModelId(this._internal.modelId);
              },
            },
          },
          outputs: {
            changed: {
              type: "signal",
              displayName: "Changed",
              group: "Events",
            },
            fetched: {
              type: "signal",
              displayName: "Fetched",
              group: "Events",
            },
            stored: { type: "signal", displayName: "Stored", group: "Events" },
          },
          methods: {
            updateComponentState() {
              (this._internal.modelId = this.findParentComponentStateModelId()),
                !1 === this.isInputConnected("fetch") &&
                  this.setModelId(this._internal.modelId);
            },
            findParentComponentStateModelId() {
              const t = (function t(e) {
                let n;
                if (e.getRoots().length > 0) {
                  const t = e.getRoots()[0];
                  t.getVisualParentNode
                    ? t.getVisualParentNode() &&
                      (n = t.getVisualParentNode().nodeScope.componentOwner)
                    : t.parentNodeScope &&
                      (n = e.parentNodeScope.componentOwner);
                } else
                  e.parentNodeScope && (n = e.parentNodeScope.componentOwner);
                if (n && n.nodeScope && n.nodeScope.componentOwner !== e)
                  return n.nodeScope.getNodesWithType("Component State")
                    .length > 0
                    ? n
                    : t(n);
              })(this.nodeScope.componentOwner);
              if (t)
                return (
                  (this._internal.parentComponentName = t.name),
                  "componentState" + t.getInstanceId()
                );
            },
            setModelId(t) {
              if (
                (this._internal.model &&
                  this._internal.model.off(
                    "change",
                    this._internal.onModelChangedCallback
                  ),
                (this._internal.model = void 0),
                !t)
              )
                return;
              const e = o.get(t);
              for (var n in ((this._internal.model = e),
              e.on("change", this._internal.onModelChangedCallback),
              e.data))
                this.hasOutput(n) && this.flagOutputDirty(n),
                  this.hasOutput("changed-" + n) &&
                    this.sendSignalOnOutput("changed-" + n);
              this.sendSignalOnOutput("changed"),
                this.sendSignalOnOutput("fetched");
            },
            scheduleStore() {
              if (!this.hasScheduledStore) {
                this.hasScheduledStore = !0;
                var t = this._internal;
                this.scheduleAfterInputsHaveUpdated(() => {
                  if (((this.hasScheduledStore = !1), t.model)) {
                    for (var e in t.inputValues)
                      t.model.set(e, t.inputValues[e], { resolve: !0 });
                    this.sendSignalOnOutput("stored");
                  }
                });
              }
            },
            _onNodeDeleted() {
              i.prototype._onNodeDeleted.call(this),
                r.off(
                  "componentStateNodesChanged",
                  this.onComponentStateNodesChanged
                ),
                this._internal.model &&
                  this._internal.model.off(
                    "change",
                    this._internal.onModelChangedCallback
                  );
            },
            registerOutputIfNeeded(t) {
              this.hasOutput(t) ||
                this.registerOutput(t, {
                  get() {
                    if (this._internal.model)
                      return this._internal.model.get(t, { resolve: !0 });
                  },
                });
            },
            registerInputIfNeeded: function (t) {
              this.hasInput(t) ||
                this.registerInput(t, {
                  set(e) {
                    (this._internal.inputValues[t] = e),
                      !1 === this.isInputConnected("store") &&
                        this.scheduleStore();
                  },
                });
            },
          },
        };
        function a(t, e, n) {
          const i = [];
          var o = e.properties && e.properties.split(",");
          for (var r in o) {
            var s = o[r];
            i.push({
              type: { name: "*", allowConnectionsOnly: !0 },
              plug: "input/output",
              group: "Properties",
              name: s,
              displayName: s,
            }),
              i.push({
                type: "signal",
                plug: "output",
                group: "Changed Events",
                displayName: s + " Changed",
                name: "changed-" + s,
              });
          }
          n.sendDynamicPorts(t, i, { detectRenamed: { plug: "input/output" } });
        }
        t.exports = {
          node: s,
          setup: function (t, e) {
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              (e.on("nodeAdded.Parent Component State", (e) => {
                a(e.id, e.parameters, t.editorConnection),
                  e.on("parameterUpdated", (n) => {
                    a(e.id, e.parameters, t.editorConnection);
                  });
              }),
              e.on("nodeAdded.Component State", (t) => {
                setTimeout(() => {
                  r.emit("componentStateNodesChanged");
                }, 0);
              }),
              e.on("nodeRemoved.Component State", (t) => {
                setTimeout(() => {
                  r.emit("componentStateNodesChanged");
                });
              }));
          },
        };
      },
      259: (t) => {
        "use strict";
        const e = {
          name: "Script Downloader",
          docs: "https://docs.noodl.net/#/nodes/javascript/script-downloader",
          shortDesc:
            "Script Downloader allows you load external Javascript libraries. ",
          category: "Javascript",
          color: "javascript",
          deprecated: !0,
          initialize: function () {
            var t = this._internal;
            (t.loaded = !1),
              (t.scripts = []),
              (t.loadedScripts = {}),
              (t.startLoad = !0);
          },
          inputs: {
            startLoad: {
              type: "boolean",
              default: !0,
              displayName: "Load on start",
              group: "General",
              set: function (t) {
                this._internal.startLoad = t;
              },
            },
            load: {
              displayName: "Load",
              group: "Actions",
              valueChangedToTrue: function () {
                this.scheduleUpdateScripts();
              },
            },
          },
          outputs: { loaded: { type: "signal", displayName: "Loaded" } },
          numberedInputs: {
            input: {
              displayPrefix: "Script",
              group: "External scripts",
              type: "string",
              index: 3008,
              createSetter: function (t) {
                return function (e) {
                  (e = e.toString()),
                    (this._internal.scripts[t] = e),
                    this._internal.loadStarted ||
                      ((this._internal.loadStarted = !0),
                      this.scheduleAfterInputsHaveUpdated(function () {
                        (this._internal.loadStarted = !1),
                          this._internal.startLoad && this.updateScripts();
                      }));
                };
              },
            },
          },
          methods: {
            removeLoadTerminator: function () {
              var t = "sentinel_" + this.id,
                e = document.getElementById(t);
              e && e.parentNode && e.parentNode.removeChild(e);
            },
            scheduleUpdateScripts: function () {
              const t = this;
              this._internal.updateScriptsScheduled ||
                ((this._internal.updateScriptsScheduled = !0),
                this.scheduleAfterInputsHaveUpdated(function () {
                  (t._internal.updateScriptsScheduled = !1), t.updateScripts();
                }));
            },
            updateScripts: function () {
              var t = "sentinel_" + this.id;
              this.removeLoadTerminator();
              var e = this._internal.scripts;
              e = e.filter(function (t) {
                return "" !== t;
              });
              for (
                var n = document.head.getElementsByTagName("script"),
                  i = {},
                  o = 0;
                o < n.length;
                o++
              )
                void 0 !== (r = n[o]).src && "" !== r.src && (i[r.src] = r);
              for (o = 0; o < e.length; o++) {
                var r = e[o].trim();
                if (!this._internal.loadedScripts.hasOwnProperty(r)) {
                  if (i.hasOwnProperty(r)) continue;
                  var s = document.createElement("script");
                  (s.src = r), (s.async = !1), document.head.appendChild(s);
                }
              }
              var a = this,
                l = document.createElement("script");
              (l.onload = l.onreadystatechange =
                function (t) {
                  (this.readyState &&
                    "loaded" !== this.readyState &&
                    "complete" !== this.readyState) ||
                    ((a._internal.loaded = !0),
                    a.sendSignalOnOutput("loaded"),
                    a.removeLoadTerminator());
                }),
                (l.id = t),
                (l.src = "load_terminator.js"),
                (l.async = !1),
                document.head.appendChild(l);
            },
          },
        };
        t.exports = {
          node: e,
          setup: function (t, e) {
            t.editorConnection && t.editorConnection.isRunningLocally();
          },
        };
      },
      9504: (t, e, n) => {
        "use strict";
        const { EdgeTriggeredInput: i } = n(5855),
          o = {
            name: "Signal To Index",
            docs: "https://docs.noodl.net/#/nodes/logic/signal-to-index",
            shortDesc: "Maps signal inputs to their index value.",
            category: "Logic",
            deprecated: !0,
            initialize: function () {
              this._internal.currentIndex = 0;
            },
            getInspectInfo() {
              return "Index: " + this._internal.currentIndex;
            },
            numberedInputs: {
              input: {
                type: "boolean",
                displayPrefix: "Signal",
                createSetter: function (t) {
                  return i.createSetter({
                    valueChangedToTrue: this.onValueChangedToTrue.bind(this, t),
                  });
                },
                selectors: {
                  startIndex: {
                    displayName: "Start Index",
                    set: function (t) {
                      (this._internal.currentIndex = t),
                        this.flagOutputDirty("index");
                    },
                  },
                },
              },
            },
            outputs: {
              index: {
                displayName: "Index",
                type: "number",
                getter: function () {
                  return this._internal.currentIndex;
                },
              },
              signalTriggered: {
                displayName: "Signal Triggered",
                type: "signal",
              },
            },
            prototypeExtensions: {
              onValueChangedToTrue: function (t) {
                this.sendSignalOnOutput("signalTriggered"),
                  this._internal.currentIndex !== t &&
                    ((this._internal.currentIndex = t),
                    this.flagOutputDirty("index"));
              },
            },
          };
        t.exports = { node: o };
      },
      3678: (t) => {
        "use strict";
        const e = {
          name: "String Selector",
          displayNodeName: "Index To String",
          shortDesc: "Choose between multiple strings.",
          category: "Utilities",
          deprecated: !0,
          initialize: function () {
            (this._internal.inputs = []),
              (this._internal.currentSelectedIndex = 0),
              (this._internal.indexChanged = !1);
          },
          getInspectInfo() {
            return this._internal.inputs[this._internal.currentSelectedIndex];
          },
          numberedInputs: {
            input: {
              type: "string",
              displayPrefix: "String for ",
              group: "Inputs",
              createSetter: function (t) {
                return function (e) {
                  (e = e ? e.toString() : ""),
                    (this._internal.inputs[t] = e),
                    this._internal.currentSelectedIndex === t &&
                      this.flagOutputDirty("currentValue");
                };
              },
            },
          },
          inputs: {
            index: {
              type: { name: "number" },
              displayName: "Index",
              default: 0,
              set: function (t) {
                (t |= 0),
                  (this._internal.currentSelectedIndex = t),
                  this.flagOutputDirty("currentValue"),
                  this.sendSignalOnOutput("indexChanged");
              },
            },
          },
          outputs: {
            currentValue: {
              type: "string",
              displayName: "Current Value",
              group: "Value",
              getter: function () {
                return this._internal.inputs[
                  this._internal.currentSelectedIndex
                ];
              },
            },
            indexChanged: {
              type: "signal",
              displayName: "Index Changed",
              group: "Signals",
            },
          },
        };
        t.exports = { node: e };
      },
      4506: (t, e, n) => {
        "use strict";
        var i = n(5936),
          o = {
            name: "Transition",
            docs: "https://docs.noodl.net/#/nodes/animation/transition",
            shortDesc:
              "This node can interpolate smooothely for the current value to a target value.",
            category: "Animation",
            deprecated: !0,
            initialize: function () {
              var t = this,
                e = this._internal;
              (e.currentNumber = 0),
                (e.numberInitialized = !1),
                (e.animationStarted = !1),
                (e.setCurrentNumberEnabled = !1),
                (e.overrideValue = 0),
                (e._animation = this.context.timerScheduler.createTimer({
                  duration: 300,
                  startValue: 0,
                  endValue: 0,
                  ease: i.easeOut,
                  onStart: function () {
                    e.animationStarted = !0;
                  },
                  onRunning: function (n) {
                    (e.currentNumber = this.ease(
                      this.startValue,
                      this.endValue,
                      n
                    )),
                      t.flagOutputDirty("currentValue");
                  },
                  onFinish: function () {
                    t.sendSignalOnOutput("atTargetValue");
                  },
                }));
            },
            inputs: {
              targetValue: {
                type: { name: "number" },
                displayName: "Target Value",
                group: "Target Value",
                default: void 0,
                set: function (t) {
                  if (
                    (!0 === t ? (t = 1) : !1 === t && (t = 0),
                    (t = Number(t)),
                    !isNaN(t))
                  ) {
                    var e = this._internal;
                    if (!1 === e.numberInitialized)
                      return (
                        (e.currentNumber = t),
                        (e.numberInitialized = !0),
                        (e._animation.endValue = t),
                        void this.flagOutputDirty("currentValue")
                      );
                    t !== e._animation.endValue &&
                      ((e._animation.startValue = e.currentNumber),
                      (e._animation.endValue = t),
                      e._animation.start());
                  }
                },
              },
              "overrideCurrentValue.value": {
                type: { name: "number" },
                group: "Override Value",
                displayName: "Override Value",
                editorName: "Value|Override Value",
                set: function (t) {
                  this._internal.overrideValue = t;
                },
              },
              "overrideCurrentValue.do": {
                group: "Override Value",
                displayName: "Do",
                editorName: "Do|Override Value",
                valueChangedToTrue: function () {
                  r.call(this, this._internal.overrideValue);
                },
              },
              duration: {
                type: "number",
                group: "Parameters",
                displayName: "Duration",
                default: 300,
                set: function (t) {
                  this._internal._animation.duration = t;
                },
              },
              delay: {
                type: "number",
                group: "Parameters",
                displayName: "Delay",
                default: 0,
                set: function (t) {
                  this._internal._animation.delay = t;
                },
              },
              easingCurve: {
                type: {
                  name: "enum",
                  enums: [
                    { value: "easeOut", label: "Ease Out" },
                    { value: "easeIn", label: "Ease In" },
                    { value: "linear", label: "Linear" },
                    { value: "easeInOut", label: "Ease In Out" },
                  ],
                },
                default: "easeOut",
                displayName: "Easing Curve",
                group: "Parameters",
                set: function (t) {
                  this._internal._animation.ease = i[t];
                },
              },
            },
            outputs: {
              currentValue: {
                type: "number",
                displayName: "Current Value",
                group: "Current State",
                getter: function () {
                  return this._internal.currentNumber;
                },
              },
              atTargetValue: {
                type: "signal",
                displayName: "At Target Value",
                group: "Signals",
              },
            },
          };
        function r(t) {
          var e = this._internal._animation;
          e.stop(),
            (e.startValue = t),
            this.scheduleAfterInputsHaveUpdated(function () {
              e.endValue !== t && e.start();
            }),
            (this._internal.currentNumber = t),
            this.flagOutputDirty("currentValue");
        }
        t.exports = { node: o };
      },
      394: (t, e, n) => {
        const { EdgeTriggeredInput: i } = n(5855),
          o = {
            name: "NavigationClosePopup",
            displayNodeName: "Close Popup",
            category: "Navigation",
            docs: "https://docs.noodl.net/nodes/popups/close-popup",
            initialize: function () {
              this._internal.resultValues = {};
            },
            inputs: {
              results: {
                type: { name: "stringlist", allowEditOnly: !0 },
                group: "Results",
                set: function (t) {
                  this._internal.results = t;
                },
              },
              closeActions: {
                type: { name: "stringlist", allowEditOnly: !0 },
                group: "Close Actions",
                set: function (t) {
                  this._internal.closeActions = t;
                },
              },
              close: {
                type: "Signal",
                displayName: "Close",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleClose();
                },
              },
            },
            methods: {
              setResultValue: function (t, e) {
                this._internal.resultValues[t] = e;
              },
              _setCloseCallback: function (t) {
                this._internal.closeCallback = t;
              },
              scheduleClose: function () {
                var t = this,
                  e = this._internal;
                e.hasScheduledClose ||
                  ((e.hasScheduledClose = !0),
                  this.scheduleAfterInputsHaveUpdated(function () {
                    (e.hasScheduledClose = !1), t.close();
                  }));
              },
              close: function () {
                this._internal.closeCallback &&
                  this._internal.closeCallback(
                    this._internal.closeAction,
                    this._internal.resultValues
                  );
              },
              closeActionTriggered: function (t) {
                (this._internal.closeAction = t), this.scheduleClose();
              },
              registerInputIfNeeded: function (t) {
                if (!this.hasInput(t))
                  return t.startsWith("result-")
                    ? this.registerInput(t, {
                        set: this.setResultValue.bind(
                          this,
                          t.substring("result-".length)
                        ),
                      })
                    : t.startsWith("closeAction-")
                    ? this.registerInput(t, {
                        set: i.createSetter({
                          valueChangedToTrue: this.closeActionTriggered.bind(
                            this,
                            t
                          ),
                        }),
                      })
                    : void 0;
              },
            },
          };
        t.exports = {
          node: o,
          setup: function (t, e) {
            function n(e) {
              function n() {
                var n = [],
                  i = e.parameters.results;
                if (i)
                  for (var o in (i = i ? i.split(",") : void 0)) {
                    var r = i[o];
                    n.push({
                      type: { name: "*" },
                      plug: "input",
                      group: "Results",
                      name: "result-" + r,
                      displayName: r,
                    });
                  }
                var s = e.parameters.closeActions;
                if (s)
                  for (var o in (s = s ? s.split(",") : void 0))
                    (r = s[o]),
                      n.push({
                        type: "signal",
                        plug: "input",
                        group: "Close Actions",
                        name: "closeAction-" + r,
                        displayName: r,
                      });
                t.editorConnection.sendDynamicPorts(e.id, n);
              }
              n(),
                e.on("parameterUpdated", function (t) {
                  ("results" !== t.name && "closeActions" !== t.name) || n();
                });
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.NavigationClosePopup", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("NavigationClosePopup"))
                  n(t);
              });
          },
        };
      },
      7270: (t) => {
        const e = {
          name: "PageStackNavigateBack",
          displayNodeName: "Pop Component Stack",
          category: "Navigation",
          docs: "https://docs.noodl.net/nodes/component-stack/pop-component",
          inputs: {
            navigate: {
              displayName: "Navigate",
              group: "Actions",
              valueChangedToTrue: function () {
                this.scheduleNavigate();
              },
            },
            results: {
              type: { name: "stringlist", allowEditOnly: !0 },
              group: "Results",
              set: function (t) {
                this._internal.results = t;
              },
            },
            backActions: {
              type: { name: "stringlist", allowEditOnly: !0 },
              group: "Back Actions",
              set: function (t) {
                this._internal.backActions = t;
              },
            },
          },
          initialize: function () {
            this._internal.resultValues = {};
          },
          methods: {
            scheduleNavigate: function () {
              var t = this,
                e = this._internal;
              e.hasScheduledNavigate ||
                ((e.hasScheduledNavigate = !0),
                this.scheduleAfterInputsHaveUpdated(function () {
                  (e.hasScheduledNavigate = !1), t.navigate();
                }));
            },
            _setBackCallback(t) {
              this._internal.backCallback = t;
            },
            navigate() {
              void 0 !== this._internal.backCallback &&
                this._internal.backCallback({
                  backAction: this._internal.backAction,
                  results: this._internal.resultValues,
                });
            },
            setResultValue: function (t, e) {
              this._internal.resultValues[t] = e;
            },
            backActionTriggered: function (t) {
              (this._internal.backAction = t), this.scheduleNavigate();
            },
            registerInputIfNeeded: function (t) {
              if (!this.hasInput(t))
                return t.startsWith("result-")
                  ? this.registerInput(t, {
                      set: this.setResultValue.bind(
                        this,
                        t.substring("result-".length)
                      ),
                    })
                  : t.startsWith("backAction-")
                  ? this.registerInput(t, {
                      set: _createSignal({
                        valueChangedToTrue: this.backActionTriggered.bind(
                          this,
                          t
                        ),
                      }),
                    })
                  : void 0;
            },
          },
        };
        t.exports = {
          node: e,
          setup: function (t, e) {
            function n(e) {
              function n() {
                var n = [],
                  i = e.parameters.results;
                if (i)
                  for (var o in (i = i ? i.split(",") : void 0)) {
                    var r = i[o];
                    n.push({
                      type: { name: "*" },
                      plug: "input",
                      group: "Results",
                      name: "result-" + r,
                      displayName: r,
                    });
                  }
                var s = e.parameters.backActions;
                if (s)
                  for (var o in (s = s ? s.split(",") : void 0))
                    (r = s[o]),
                      n.push({
                        type: "signal",
                        plug: "input",
                        group: "Back Actions",
                        name: "backAction-" + r,
                        displayName: r,
                      });
                t.editorConnection.sendDynamicPorts(e.id, n);
              }
              n(),
                e.on("parameterUpdated", function (t) {
                  ("results" !== t.name && "backActions" !== t.name) || n();
                });
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.PageStackNavigateBack", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("PageStackNavigateBack"))
                  n(t);
              });
          },
        };
      },
      7947: (t, e, n) => {
        "use strict";
        const i = n(5855),
          o = {
            name: "PageStackNavigateToPath",
            displayNodeName: "Navigate To Path",
            category: "Navigation",
            docs: "https://docs.noodl.net/nodes/navigation/navigate-to-path",
            initialize: function () {
              var t = this._internal;
              (t.params = {}), (t.query = {});
            },
            inputs: {
              path: {
                type: { name: "string" },
                displayName: "Path",
                group: "General",
                set: function (t) {
                  this._internal.path = t;
                },
              },
              queryNames: {
                type: { name: "stringlist", allowEditOnly: !0 },
                displayName: "Query",
                group: "Query",
                set: function (t) {
                  this._internal.queryNames = t;
                },
              },
              navigate: {
                displayName: "Navigate",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleNavigate();
                },
              },
            },
            outputs: {},
            methods: {
              scheduleNavigate: function () {
                var t = this,
                  e = this._internal;
                e.hasScheduledNavigate ||
                  ((e.hasScheduledNavigate = !0),
                  this.scheduleAfterInputsHaveUpdated(function () {
                    (e.hasScheduledNavigate = !1), t.navigate();
                  }));
              },
              navigate() {
                var t = this._internal,
                  e = t.path;
                if (void 0 !== e) {
                  var n,
                    o,
                    r = t.path.match(/\{[A-Za-z0-9_]*\}/g),
                    s = [];
                  r &&
                    (s = r.map(function (t) {
                      return t.replace("{", "").replace("}", "");
                    })),
                    s.forEach(function (n) {
                      var i = t.params[n];
                      e = e.replace("{" + n + "}", void 0 !== i ? i : "");
                    });
                  var a = i.instance.getProjectSettings().navigationPathType;
                  void 0 === a || "hash" === a ? (o = e) : (n = e);
                  var l = [];
                  void 0 !== t.queryNames &&
                    t.queryNames.split(",").forEach((e) => {
                      void 0 !== t.query[e] && l.push(e + "=" + t.query[e]);
                    });
                  var u =
                    (void 0 !== n ? n : "") +
                    (l.length >= 1 ? "?" + l.join("&") : "") +
                    (void 0 !== o ? "#" + o : "");
                  console.log(u),
                    window.history.pushState({}, "", u),
                    dispatchEvent(new PopStateEvent("popstate", {}));
                }
              },
              setParam(t, e) {
                this._internal.params[t] = e;
              },
              setQuery(t, e) {
                this._internal.query[t] = e;
              },
              registerInputIfNeeded: function (t) {
                if (!this.hasInput(t))
                  return t.startsWith("p-")
                    ? this.registerInput(t, {
                        set: this.setParam.bind(this, t.substring("p-".length)),
                      })
                    : t.startsWith("q-")
                    ? this.registerInput(t, {
                        set: this.setQuery.bind(this, t.substring("q-".length)),
                      })
                    : void 0;
              },
            },
          };
        t.exports = {
          node: o,
          setup: function (t, e) {
            function n(e) {
              function n() {
                var n = [];
                void 0 !== e.parameters.path &&
                  (n = (e.parameters.path.match(/\{[A-Za-z0-9_]*\}/g) || [])
                    .map(function (t) {
                      return t.replace("{", "").replace("}", "");
                    })
                    .filter(function (t, e, n) {
                      return n.indexOf(t) === e;
                    })
                    .map(function (t) {
                      return {
                        name: "p-" + t,
                        displayName: t,
                        group: "Parameter",
                        type: "*",
                        plug: "input",
                      };
                    })),
                  void 0 !== e.parameters.queryNames &&
                    e.parameters.queryNames.split(",").forEach((t) => {
                      n.push({
                        name: "q-" + t,
                        displayName: t,
                        group: "Query",
                        plug: "input",
                        type: "*",
                      });
                    }),
                  t.editorConnection.sendDynamicPorts(e.id, n);
              }
              n(),
                e.on("parameterUpdated", function (t) {
                  n();
                });
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.PageStackNavigateToPath", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("PageStackNavigateToPath"))
                  n(t);
              });
          },
        };
      },
      8592: (t, e, n) => {
        function i(t, e) {
          var n = Object.keys(t);
          if (Object.getOwnPropertySymbols) {
            var i = Object.getOwnPropertySymbols(t);
            e &&
              (i = i.filter(function (e) {
                return Object.getOwnPropertyDescriptor(t, e).enumerable;
              })),
              n.push.apply(n, i);
          }
          return n;
        }
        function o(t) {
          for (var e = 1; e < arguments.length; e++) {
            var n = null != arguments[e] ? arguments[e] : {};
            e % 2
              ? i(Object(n), !0).forEach(function (e) {
                  r(t, e, n[e]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
              : i(Object(n)).forEach(function (e) {
                  Object.defineProperty(
                    t,
                    e,
                    Object.getOwnPropertyDescriptor(n, e)
                  );
                });
          }
          return t;
        }
        function r(t, e, n) {
          return (
            e in t
              ? Object.defineProperty(t, e, {
                  value: n,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (t[e] = n),
            t
          );
        }
        const s = n(9039),
          a = n(2338),
          l = {
            name: "PageStackNavigate",
            displayNodeName: "Push Component To Stack",
            category: "Navigation",
            docs: "https://docs.noodl.net/nodes/component-stack/push-component",
            initialize: function () {
              (this._internal.transitionParams = {}),
                (this._internal.pageParams = {}),
                (this._internal.backResults = {});
            },
            inputs: {
              stack: {
                type: { name: "string", identifierOf: "PackStack" },
                displayName: "Stack",
                group: "General",
                default: "Main",
                set: function (t) {
                  this._internal.stack = t;
                },
              },
              mode: {
                type: {
                  name: "enum",
                  enums: [
                    { label: "Push", value: "push" },
                    { label: "Replace", value: "replace" },
                  ],
                },
                displayName: "Mode",
                default: "push",
                group: "General",
                set: function (t) {
                  this._internal.navigationMode = t;
                },
              },
              navigate: {
                displayName: "Navigate",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleNavigate();
                },
              },
            },
            outputs: {
              navigated: {
                type: "signal",
                displayName: "Navigated",
                group: "Events",
              },
            },
            methods: {
              scheduleNavigate: function () {
                var t = this,
                  e = this._internal;
                e.hasScheduledNavigate ||
                  ((e.hasScheduledNavigate = !0),
                  this.scheduleAfterInputsHaveUpdated(function () {
                    (e.hasScheduledNavigate = !1), t.navigate();
                  }));
              },
              navigate() {
                "push" === this._internal.navigationMode ||
                void 0 === this._internal.navigationMode
                  ? a.instance.navigate(this._internal.stack, {
                      target: this._internal.target,
                      transition: o(
                        o({}, { type: this._internal.transition }),
                        this._internal.transitionParams
                      ),
                      params: this._internal.pageParams,
                      backCallback: (t, e) => {
                        for (var n in ((this._internal.backResults = e), e))
                          this.hasOutput("backResult-" + n) &&
                            this.flagOutputDirty("backResult-" + n);
                        void 0 !== t && this.sendSignalOnOutput(t);
                      },
                      hasNavigated: () => {
                        this.sendSignalOnOutput("navigated");
                      },
                    })
                  : "replace" === this._internal.navigationMode &&
                    a.instance.replace(this._internal.stack, {
                      target: this._internal.target,
                      params: this._internal.pageParams,
                      hasNavigated: () => {
                        this.scheduleAfterInputsHaveUpdated(() => {
                          this.sendSignalOnOutput("navigated");
                        });
                      },
                    });
              },
              setTransitionParam: function (t, e) {
                this._internal.transitionParams[t] = e;
              },
              setPageParam: function (t, e) {
                this._internal.pageParams[t] = e;
              },
              getBackResult: function (t, e) {
                return this._internal.backResults[t];
              },
              setTargetPageId: function (t) {
                this._internal.target = t;
              },
              setTransition: function (t) {
                this._internal.transition = t;
              },
              registerInputIfNeeded: function (t) {
                if (!this.hasInput(t))
                  return "target" === t
                    ? this.registerInput(t, {
                        set: this.setTargetPageId.bind(this),
                      })
                    : "transition" === t
                    ? this.registerInput(t, {
                        set: this.setTransition.bind(this),
                      })
                    : t.startsWith("tr-")
                    ? this.registerInput(t, {
                        set: this.setTransitionParam.bind(
                          this,
                          t.substring("tr-".length)
                        ),
                      })
                    : t.startsWith("pm-")
                    ? this.registerInput(t, {
                        set: this.setPageParam.bind(
                          this,
                          t.substring("pm-".length)
                        ),
                      })
                    : void 0;
              },
              registerOutputIfNeeded: function (t) {
                if (!this.hasOutput(t))
                  return t.startsWith("backResult-")
                    ? this.registerOutput(t, {
                        getter: this.getBackResult.bind(
                          this,
                          t.substring("backResult-".length)
                        ),
                      })
                    : t.startsWith("backAction-")
                    ? this.registerOutput(t, { getter: function () {} })
                    : void 0;
              },
            },
          };
        t.exports = {
          node: l,
          setup: function (t, e) {
            function n(n) {
              function i() {
                var i = [];
                if (
                  "push" === n.parameters.mode ||
                  void 0 === n.parameters.mode
                ) {
                  i.push({
                    name: "transition",
                    plug: "input",
                    type: { name: "enum", enums: Object.keys(s) },
                    default: "Push",
                    displayName: "Transition",
                    group: "Transition",
                  });
                  var o = n.parameters.transition || "Push";
                  s[o] && (i = i.concat(s[o].ports(n.parameters)));
                }
                var r = e
                  .getNodesWithType("Page Stack")
                  .find(
                    (t) =>
                      (t.parameters.name || "Main") ===
                      (n.parameters.stack || "Main")
                  );
                if (void 0 !== r) {
                  var a = r.parameters.pages;
                  if (void 0 !== a && a.length > 0) {
                    i.push({
                      plug: "input",
                      type: {
                        name: "enum",
                        enums: a.map((t) => ({ label: t.label, value: t.id })),
                        allowEditOnly: !0,
                      },
                      group: "General",
                      displayName: "Target Page",
                      name: "target",
                      default: a[0].id,
                    });
                    var l = n.parameters.target || a[0].id,
                      u = r.parameters["pageComp-" + l];
                    if (void 0 !== u) {
                      const t = e.components[u];
                      if (void 0 !== t) {
                        for (var p in t.inputPorts)
                          i.push({
                            name: "pm-" + p,
                            displayName: p,
                            type: "*",
                            plug: "input",
                            group: "Parameters",
                          });
                        for (const e of t.getNodesWithType(
                          "PageStackNavigateBack"
                        ))
                          void 0 !== e.parameters.backActions &&
                            e.parameters.backActions.split(",").forEach((t) => {
                              i.find((e) => e.name === "backAction-" + t) ||
                                i.push({
                                  name: "backAction-" + t,
                                  displayName: t,
                                  type: "signal",
                                  plug: "output",
                                  group: "Back Actions",
                                });
                            }),
                            e.parameters.results &&
                              e.parameters.results.split(",").forEach((t) => {
                                i.find((e) => e.name === "backResult-" + t) ||
                                  i.push({
                                    name: "backResult-" + t,
                                    displayName: t,
                                    type: "*",
                                    plug: "output",
                                    group: "Back Results",
                                  });
                              });
                      }
                    }
                  }
                }
                t.editorConnection.sendDynamicPorts(n.id, i);
              }
              function o() {
                var t = e
                  .getNodesWithType("Page Stack")
                  .find((t) => t.parameters.name === n.parameters.stack);
                if (void 0 !== t) {
                  var o = t.parameters.pages;
                  if (void 0 !== o && 0 !== o.length) {
                    var r =
                      t.parameters[
                        "pageComp-" + (n.parameters.target || o[0].id)
                      ];
                    if (void 0 !== r) {
                      var s = e.components[r];
                      if (void 0 !== s) {
                        s.on("inputPortAdded", i), s.on("inputPortRemoved", i);
                        for (const t of s.getNodesWithType(
                          "PageStackNavigateBack"
                        ))
                          t.on("parameterUpdated", i);
                        s.on("nodeAdded", (t) => {
                          "PageStackNavigateBack" === t.type &&
                            (t.on("parameterUpdated", i), i());
                        }),
                          s.on("nodeWasRemoved", (t) => {
                            "PageStackNavigateBack" === t.type && i();
                          });
                      }
                    }
                  }
                }
              }
              function r(t) {
                t.on("parameterUpdated", function (t) {
                  ("pages" !== t.name && "name" !== t.name) || i();
                });
              }
              i(),
                o(),
                n.on("parameterUpdated", function (t) {
                  "target" === t.name
                    ? (o(), i())
                    : ("stack" === t.name ||
                        "mode" === t.name ||
                        "transition" === t.name ||
                        t.name.startsWith("tr-")) &&
                      i();
                }),
                e.on("nodeAdded.Page Stack", r),
                e.on("nodeWasRemoved.Page Stack", i);
              for (const t of e.getNodesWithType("Page Stack")) r(t);
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.PageStackNavigate", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("PageStackNavigate")) n(t);
              });
          },
        };
      },
      2338: (t) => {
        class e {
          constructor() {
            (this._pageStacks = {}), (this._navigationQueue = []);
          }
          _performNavigation(t, e, n) {
            if (((t = t || "Main"), this._pageStacks[t]))
              for (const i of this._pageStacks[t])
                "navigate" === n ? i.navigate(e) : i.replace(e);
            else this._navigationQueue.push({ name: t, args: e, type: n });
          }
          navigate(t, e) {
            (t = t || "Main"), this._performNavigation(t, e, "navigate");
          }
          replace(t, e) {
            (t = t || "Main"), this._performNavigation(t, e, "replace");
          }
          registerPageStack(t, e) {
            (t = t || "Main"),
              this._pageStacks[t] || (this._pageStacks[t] = []),
              this._pageStacks[t].push(e);
            let n = !1,
              i = !1,
              o = 0;
            for (; o < this._navigationQueue.length; ) {
              const r = this._navigationQueue[o];
              r.name === t
                ? ("navigate" === r.type
                    ? (n || (e.reset(), (n = !0)), e.navigate(r.args))
                    : e.replace(r.args),
                  (i = !0),
                  this._navigationQueue.splice(o, 1))
                : o++;
            }
            i || e.reset();
          }
          deregisterPageStack(t, e) {
            if (((t = t || "Main"), !this._pageStacks[t])) return;
            const n = this._pageStacks[t].indexOf(e);
            -1 !== n &&
              (this._pageStacks[t].splice(n, 1),
              0 === this._pageStacks[t].length && delete this._pageStacks[t]);
          }
        }
        (e.instance = new e()), (t.exports = e);
      },
      461: (t, e, n) => {
        "use strict";
        n(5855),
          (t.exports = {
            node: {
              name: "PageInputs",
              displayNodeName: "Page Inputs",
              category: "Navigation",
              docs: "https://docs.noodl.net/nodes/navigation/page-inputs",
              color: "component",
              initialize: function () {
                this._internal.params = {};
              },
              inputs: {
                pathParams: {
                  type: { name: "stringlist", allowEditOnly: !0 },
                  group: "Path Parameters",
                },
                queryParams: {
                  type: { name: "stringlist", allowEditOnly: !0 },
                  group: "Query Parameters",
                },
              },
              outputs: {},
              methods: {
                _setPageParams: function (t) {
                  for (var e in t)
                    (this._internal.params[e] = t[e]),
                      this.hasOutput("pm-" + e) &&
                        this.flagOutputDirty("pm-" + e);
                },
                getPageParam: function (t) {
                  return this._internal.params[t];
                },
                registerOutputIfNeeded: function (t) {
                  if (!this.hasOutput(t))
                    return t.startsWith("pm-")
                      ? this.registerOutput(t, {
                          getter: this.getPageParam.bind(
                            this,
                            t.substring("pm-".length)
                          ),
                        })
                      : void 0;
                },
              },
            },
          });
      },
      8777: (t, e, n) => {
        const i = n(5855);
        class o {
          constructor() {
            (this._routers = {}), (this._navigationQueue = []);
          }
          navigate(t, e) {
            const n = Object.keys(this._routers);
            if ((1 === n.length && (t = n[0]), this._routers[t]))
              for (const n of this._routers[t]) n.navigate(e);
            else this._navigationQueue.push({ name: t, args: e });
          }
          registerRouter(t, e) {
            (t = t || "Main"),
              this._routers[t] || (this._routers[t] = []),
              this._routers[t].push(e);
            let n = !1,
              i = 0;
            for (; i < this._navigationQueue.length; ) {
              const o = this._navigationQueue[i];
              o.name === t
                ? (e.navigate(o.args),
                  (n = !0),
                  this._navigationQueue.splice(i, 1))
                : i++;
            }
            n || e.reset();
          }
          deregisterRouter(t, e) {
            if (((t = t || "Main"), !this._routers[t])) return;
            const n = this._routers[t].indexOf(e);
            -1 !== n &&
              (this._routers[t].splice(n, 1),
              0 === this._routers[t].length && delete this._routers[t]);
          }
          getPagesForRouter(t) {
            const e = i.instance.graphModel.routerIndex.routers;
            if (void 0 === e || 0 === e.length) return [];
            const n = void 0 === t ? [e[0]] : e.filter((e) => e.name === t),
              o = new Set();
            return (
              n.forEach((t) => {
                const e = t.pages;
                void 0 !== e &&
                  void 0 !== e.routes &&
                  e.routes.forEach((t) => {
                    o.add(t);
                  });
              }),
              Array.from(o).map((t) => this.getPageInfoForComponent(t))
            );
          }
          getPageInfoForComponent(t) {
            return i.instance.graphModel.routerIndex.pages.find(
              (e) => e.component === t
            );
          }
        }
        (o.instance = new o()), (t.exports = o);
      },
      6181: (t, e, n) => {
        const i = n(8777),
          o = {
            name: "RouterNavigate",
            displayNodeName: "Navigate",
            category: "Navigation",
            docs: "https://docs.noodl.net/nodes/navigation/navigate",
            initialize: function () {
              this._internal.pageParams = {};
            },
            inputs: {
              navigate: {
                displayName: "Navigate",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleNavigate();
                },
              },
            },
            outputs: {
              navigated: {
                type: "signal",
                displayName: "Navigated",
                group: "Events",
              },
            },
            methods: {
              scheduleNavigate: function () {
                var t = this,
                  e = this._internal;
                e.hasScheduledNavigate ||
                  ((e.hasScheduledNavigate = !0),
                  this.scheduleAfterInputsHaveUpdated(function () {
                    (e.hasScheduledNavigate = !1), t.navigate();
                  }));
              },
              navigate() {
                i.instance.navigate(this._internal.router, {
                  target: this._internal.target,
                  params: this._internal.pageParams,
                  hasNavigated: () => {
                    this.scheduleAfterInputsHaveUpdated(() => {
                      this.sendSignalOnOutput("navigated");
                    });
                  },
                });
              },
              setPageParam: function (t, e) {
                this._internal.pageParams[t] = e;
              },
              setTargetPage: function (t) {
                this._internal.target = t;
              },
              setRouter: function (t) {
                this._internal.router = t;
              },
              registerInputIfNeeded: function (t) {
                if (!this.hasInput(t))
                  return "target" === t
                    ? this.registerInput(t, {
                        set: this.setTargetPage.bind(this),
                      })
                    : "router" === t
                    ? this.registerInput(t, { set: this.setRouter.bind(this) })
                    : t.startsWith("pm-")
                    ? this.registerInput(t, {
                        set: this.setPageParam.bind(
                          this,
                          t.substring("pm-".length)
                        ),
                      })
                    : void 0;
              },
            },
          };
        t.exports = {
          node: o,
          setup: function (t, e) {
            t.editorConnection && t.editorConnection.isRunningLocally();
          },
        };
      },
      9809: (t) => {
        t.exports = {
          node: {
            name: "NavigationShowPopup",
            displayNodeName: "Show Popup",
            category: "Navigation",
            docs: "https://docs.noodl.net/nodes/popups/show-popup",
            initialize: function () {
              (this._internal.popupParams = {}),
                (this._internal.closeResults = {});
            },
            inputs: {
              target: {
                type: "component",
                displayName: "Target",
                group: "General",
                set: function (t) {
                  this._internal.target = t;
                },
              },
              show: {
                type: "signal",
                displayName: "Show",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleShow();
                },
              },
            },
            outputs: { Closed: { type: "signal" } },
            methods: {
              setPopupParam: function (t, e) {
                this._internal.popupParams[t] = e;
              },
              getCloseResult: function (t) {
                return this._internal.closeResults[t];
              },
              scheduleShow: function () {
                var t = this,
                  e = this._internal;
                e.hasScheduledShow ||
                  ((e.hasScheduledShow = !0),
                  this.scheduleAfterInputsHaveUpdated(function () {
                    (e.hasScheduledShow = !1), t.show();
                  }));
              },
              show: function () {
                null != this._internal.target &&
                  this.context.showPopup(
                    this._internal.target,
                    this._internal.popupParams,
                    {
                      onClosePopup: (t, e) => {
                        for (var n in ((this._internal.closeResults = e), e))
                          this.hasOutput("closeResult-" + n) &&
                            this.flagOutputDirty("closeResult-" + n);
                        t
                          ? this.sendSignalOnOutput(t)
                          : this.sendSignalOnOutput("Closed");
                      },
                    }
                  );
              },
              registerInputIfNeeded: function (t) {
                if (!this.hasInput(t))
                  return t.startsWith("popupParam-")
                    ? this.registerInput(t, {
                        set: this.setPopupParam.bind(
                          this,
                          t.substring("popupParam-".length)
                        ),
                      })
                    : void 0;
              },
              registerOutputIfNeeded: function (t) {
                if (!this.hasOutput(t))
                  return t.startsWith("closeResult-")
                    ? this.registerOutput(t, {
                        getter: this.getCloseResult.bind(
                          this,
                          t.substring("closeResult-".length)
                        ),
                      })
                    : t.startsWith("closeAction-")
                    ? this.registerOutput(t, { getter: function () {} })
                    : void 0;
              },
            },
          },
          setup: function (t, e) {
            function n(n) {
              function i() {
                var i = [],
                  o = n.parameters.target;
                if (void 0 !== o) {
                  var r = e.components[o];
                  if (r) {
                    for (var s in r.inputPorts)
                      i.push({
                        name: "popupParam-" + s,
                        displayName: s,
                        type: "*",
                        plug: "input",
                        group: "Params",
                      });
                    for (const t of r.getNodesWithType("NavigationClosePopup"))
                      void 0 !== t.parameters.closeActions &&
                        t.parameters.closeActions.split(",").forEach((t) => {
                          i.find((e) => e.name === t) ||
                            i.push({
                              name: "closeAction-" + t,
                              displayName: t,
                              type: "signal",
                              plug: "output",
                              group: "Close Actions",
                            });
                        }),
                        void 0 !== t.parameters.results &&
                          t.parameters.results.split(",").forEach((t) => {
                            i.push({
                              name: "closeResult-" + t,
                              displayName: t,
                              type: "*",
                              plug: "output",
                              group: "Close Results",
                            });
                          });
                  }
                }
                t.editorConnection.sendDynamicPorts(n.id, i);
              }
              function o(t) {
                if (void 0 !== t) {
                  var n = e.components[t];
                  if (void 0 !== n) {
                    n.on("inputPortAdded", i), n.on("inputPortRemoved", i);
                    for (const t of n.getNodesWithType("NavigationClosePopup"))
                      t.on("parameterUpdated", i);
                    n.on("nodeAdded", (t) => {
                      "NavigationClosePopup" === t.type &&
                        (t.on("parameterUpdated", i), i());
                    }),
                      n.on("nodeWasRemoved", (t) => {
                        "NavigationClosePopup" === t.type && i();
                      });
                  }
                }
              }
              i(),
                o(n.parameters.target),
                n.on("parameterUpdated", function (t) {
                  "target" === t.name && (i(), o(n.parameters.target));
                });
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.NavigationShowPopup", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("NavigationShowPopup")) n(t);
              });
          },
        };
      },
      9039: (t, e, n) => {
        t.exports = { None: n(8474), Push: n(7117), Popup: n(448) };
      },
      8474: (t, e, n) => {
        const i = n(2821);
        t.exports = class extends i {
          constructor(t, e, n) {
            super(),
              (this.from = t),
              (this.to = e),
              (this.timing = { dur: 0, delay: 0 });
          }
          update(t) {}
          forward(t) {}
          back(t) {}
          static ports() {
            return [];
          }
        };
      },
      448: (t, e, n) => {
        const i = n(2821),
          o = n(9932);
        t.exports = class extends i {
          constructor(t, e, n) {
            super(),
              (this.from = t),
              (this.to = e),
              (this.timing = n.timing || {
                curve: [0, 0, 0.58, 1],
                dur: 300,
                delay: 0,
              }),
              (this.distance = n.shift || { value: 25, unit: "%" }),
              "number" == typeof this.distance &&
                (this.distance = { value: this.distance, unit: "%" }),
              (this.direction = n.direction || "Right"),
              (this.timing.curve[0] = Math.min(
                1,
                Math.max(0, this.timing.curve[0])
              )),
              (this.timing.curve[2] = Math.min(
                1,
                Math.max(0, this.timing.curve[2])
              )),
              (this.ease = o.apply(null, this.timing.curve).get),
              (this.fadein = void 0 !== n.fadein && n.fadein),
              (this.zoom = n.zoom || { value: 25, unit: "%" }),
              "number" == typeof this.zoom &&
                (this.zoom = { value: this.zoom, unit: "%" });
          }
          update(t) {
            if ("In" === this.direction || "Out" === this.direction) {
              var e = this.zoom.value / 100;
              (e = "Out" === this.direction ? -e : e),
                this.to.setStyle({
                  transform: "scale(" + (1 - e * (1 - t)) + ")",
                  opacity: this.crossfade ? t : 1,
                });
            } else {
              var n = this.distance.value,
                i = this.distance.unit;
              const e = {
                  Up: { x: 0, y: -1 },
                  Down: { x: 0, y: 1 },
                  Left: { x: -1, y: 0 },
                  Right: { x: 1, y: 0 },
                },
                o = { x: e[this.direction].x * n, y: e[this.direction].y * n };
              this.to.setStyle({
                transform:
                  "translate(" +
                  o.x * (t - 1) +
                  i +
                  "," +
                  o.y * (t - 1) +
                  i +
                  ")",
                opacity: this.fadein ? t : 1,
              });
            }
          }
          forward(t) {
            var e = this.ease(t);
            this.update(e);
          }
          back(t) {
            var e = this.ease(t);
            this.update(1 - e);
          }
          static ports(t) {
            var e = [];
            return (
              e.push({
                name: "tr-direction",
                displayName: "Direction",
                group: "Transition",
                type: {
                  name: "enum",
                  enums: ["Right", "Left", "Up", "Down", "In", "Out"],
                },
                default: "Right",
                plug: "input",
              }),
              "In" === t["tr-direction"] || "Out" === t["tr-direction"]
                ? e.push({
                    name: "tr-zoom",
                    displayName: "Zoom",
                    group: "Transition",
                    type: { name: "number", units: ["%"] },
                    default: { value: 25, unit: "%" },
                    plug: "input",
                  })
                : e.push({
                    name: "tr-shift",
                    displayName: "Shift Distance",
                    group: "Transition",
                    type: { name: "number", units: ["%", "px"] },
                    default: { value: 25, unit: "%" },
                    plug: "input",
                  }),
              e.push({
                name: "tr-fadein",
                displayName: "Fade In",
                group: "Transition",
                type: "boolean",
                default: !1,
                plug: "input",
              }),
              e.push({
                name: "tr-timing",
                displayName: "Timing",
                group: "Transition",
                type: "curve",
                plug: "input",
              }),
              e
            );
          }
        };
      },
      7117: (t, e, n) => {
        const i = n(2821),
          o = n(9932);
        t.exports = class extends i {
          constructor(t, e, n) {
            super(),
              (this.from = t),
              (this.to = e),
              (this.timing = n.timing || {
                curve: [0, 0, 0.58, 1],
                dur: 300,
                delay: 0,
              }),
              (this.distance = n.shift || { value: 25, unit: "%" }),
              "number" == typeof this.distance &&
                (this.distance = { value: this.distance, unit: "%" }),
              (this.direction = n.direction || "Left"),
              (this.timing.curve[0] = Math.min(
                1,
                Math.max(0, this.timing.curve[0])
              )),
              (this.timing.curve[2] = Math.min(
                1,
                Math.max(0, this.timing.curve[2])
              )),
              (this.ease = o.apply(null, this.timing.curve).get),
              (this.crossfade = void 0 !== n.crossfade && n.crossfade),
              (this.darkOverlay = void 0 === n.darkoverlay || n.darkoverlay),
              (this.darkOverlayAmount =
                void 0 === n.darkoverlayamount ? 0.5 : n.darkoverlayamount),
              (this.zoom = n.zoom || { value: 25, unit: "%" }),
              "number" == typeof this.zoom &&
                (this.zoom = { value: this.zoom, unit: "%" }),
              this.darkOverlay &&
                ((this.darkOverlay = t.nodeScope.createPrimitiveNode("Group")),
                this.darkOverlay.setInputValue("position", "absolute"),
                this.darkOverlay.setInputValue("sizeMode", "explicit"),
                this.darkOverlay.setInputValue("width", {
                  value: 100,
                  unit: "%",
                }),
                this.darkOverlay.setInputValue("height", {
                  value: 100,
                  unit: "%",
                }),
                this.darkOverlay.setInputValue("backgroundColor", "#000000"),
                this.darkOverlay.setInputValue("opacity", 0));
          }
          update(t) {
            if ("In" === this.direction || "Out" === this.direction) {
              var e = this.zoom.value / 100;
              (e = "Out" === this.direction ? -e : e),
                this.from.setStyle({
                  transform: "scale(" + (1 + e * t) + ")",
                  opacity: this.crossfade ? 1 - t : 1,
                }),
                this.to.setStyle({
                  transform: "scale(" + (1 - e * (1 - t)) + ")",
                  opacity: this.crossfade ? t : 1,
                });
            } else {
              var n = this.distance.value,
                i = this.distance.unit;
              const e = {
                  Up: { x: 0, y: -1 },
                  Down: { x: 0, y: 1 },
                  Left: { x: -1, y: 0 },
                  Right: { x: 1, y: 0 },
                },
                o = { x: e[this.direction].x * n, y: e[this.direction].y * n },
                r = {
                  x: 100 * e[this.direction].x,
                  y: 100 * e[this.direction].y,
                };
              this.from.setStyle({
                transform: "translate(" + o.x * t + i + "," + o.y * t + i + ")",
                opacity: this.crossfade ? 1 - t : 1,
              }),
                this.to.setStyle({
                  transform:
                    "translate(" +
                    r.x * (t - 1) +
                    i +
                    "," +
                    r.y * (t - 1) +
                    "%)",
                  opacity: this.crossfade ? t : 1,
                });
            }
            this.darkOverlay &&
              this.darkOverlay.setStyle({
                opacity: t * this.darkOverlayAmount,
              });
          }
          forward(t) {
            var e = this.ease(t);
            this.update(e);
          }
          back(t) {
            var e = this.ease(t);
            this.update(1 - e);
          }
          start(t) {
            super.start(t),
              this.darkOverlay && this.from.addChild(this.darkOverlay);
          }
          end(t) {
            this.darkOverlay && this.from.removeChild(this.darkOverlay),
              super.end(t);
          }
          static ports(t) {
            const e = [];
            return (
              e.push({
                name: "tr-direction",
                displayName: "Direction",
                group: "Transition",
                type: {
                  name: "enum",
                  enums: ["Right", "Left", "Up", "Down", "In", "Out"],
                },
                default: "Left",
                plug: "input",
              }),
              "In" === t["tr-direction"] || "Out" === t["tr-direction"]
                ? e.push({
                    name: "tr-zoom",
                    displayName: "Zoom",
                    group: "Transition",
                    type: { name: "number", units: ["%"] },
                    default: { value: 25, unit: "%" },
                    plug: "input",
                  })
                : e.push({
                    name: "tr-shift",
                    displayName: "Shift Distance",
                    group: "Transition",
                    type: { name: "number", units: ["%", "px"] },
                    default: { value: 25, unit: "%" },
                    plug: "input",
                  }),
              e.push({
                name: "tr-crossfade",
                displayName: "Crossfade",
                group: "Transition",
                type: "boolean",
                default: !1,
                plug: "input",
              }),
              e.push({
                name: "tr-darkoverlay",
                displayName: "Dark Overlay",
                group: "Transition",
                type: "boolean",
                default: !0,
                plug: "input",
              }),
              e.push({
                name: "tr-darkoverlayamount",
                displayName: "Dark Overlay Amount",
                group: "Transition",
                type: "number",
                default: 0.5,
                plug: "input",
              }),
              e.push({
                name: "tr-timing",
                displayName: "Timing",
                group: "Transition",
                type: "curve",
                plug: "input",
              }),
              e
            );
          }
        };
      },
      2821: (t) => {
        t.exports = class {
          constructor() {
            this._frame = this.frame.bind(this);
          }
          start(t) {
            (this.cb = t.end),
              this.timing.delay + this.timing.dur === 0
                ? this.end()
                : ((this.transitionForward = !t.back),
                  (this.startTime = window.performance.now()),
                  requestAnimationFrame(this._frame));
          }
          frame() {
            var t =
                (window.performance.now() -
                  (this.startTime + this.timing.delay)) /
                this.timing.dur,
              e = Math.max(0, Math.min(t, 1));
            this.transitionForward ? this.forward(e) : this.back(e),
              window.performance.now() <=
              this.startTime + this.timing.dur + this.timing.delay
                ? requestAnimationFrame(this._frame)
                : this.end();
          }
          end() {
            this.cb && this.cb();
          }
        };
      },
      5784: (t) => {
        "use strict";
        const e = {
          name: "And",
          docs: "https://docs.noodl.net/nodes/logic/and",
          category: "Logic",
          initialize: function () {
            this._internal.inputs = [];
          },
          getInspectInfo() {
            return n(this._internal.inputs);
          },
          numberedInputs: {
            input: {
              displayPrefix: "Input",
              type: "boolean",
              createSetter: (t) =>
                function (e) {
                  if (((e = !!e), this._internal.inputs[t] === e)) return;
                  this._internal.inputs[t] = e;
                  const i = n(this._internal.inputs);
                  this._internal.result !== i &&
                    ((this._internal.result = i),
                    this.flagOutputDirty("result"));
                },
            },
          },
          outputs: {
            result: {
              type: "boolean",
              displayName: "Result",
              get() {
                return this._internal.result;
              },
            },
          },
        };
        function n(t) {
          return t.length > 0 && !1 === t.some((t) => !t);
        }
        t.exports = { node: e };
      },
      4212: (t) => {
        "use strict";
        t.exports = {
          node: {
            name: "Boolean To String",
            docs: "https://docs.noodl.net/nodes/utilities/boolean-to-string",
            category: "Utilities",
            initialize: function () {
              (this._internal.inputs = []),
                (this._internal.currentSelectedIndex = 0),
                (this._internal.indexChanged = !1),
                (this._internal.trueString = ""),
                (this._internal.falseString = "");
            },
            inputs: {
              trueString: {
                displayName: "String for true",
                type: "string",
                set: function (t) {
                  this._internal.trueString !== t &&
                    ((this._internal.trueString = t),
                    this._internal.currentInput &&
                      this.flagOutputDirty("currentValue"));
                },
              },
              falseString: {
                displayName: "String for false",
                type: "string",
                set: function (t) {
                  this._internal.falseString !== t &&
                    ((this._internal.falseString = t),
                    this._internal.currentInput ||
                      this.flagOutputDirty("currentValue"));
                },
              },
              input: {
                type: { name: "boolean" },
                displayName: "Selector",
                set: function (t) {
                  this._internal.currentInput !== t &&
                    ((this._internal.currentInput = t),
                    this.flagOutputDirty("currentValue"),
                    this.sendSignalOnOutput("inputChanged"));
                },
              },
            },
            outputs: {
              currentValue: {
                type: "string",
                displayName: "Current Value",
                group: "Value",
                getter: function () {
                  return this._internal.currentInput
                    ? this._internal.trueString
                    : this._internal.falseString;
                },
              },
              inputChanged: {
                type: "signal",
                displayName: "Selector Changed",
                group: "Signals",
              },
            },
          },
        };
      },
      4540: (t, e, n) => {
        "use strict";
        const i = n(5936);
        function o(t, e) {
          for (var n = 0; n < 3; ++n) {
            var i = 1 + 2 * n;
            t[n] = parseInt(e.substring(i, i + 2), 16);
          }
        }
        function r(t) {
          var e = t.toString(16);
          return 1 == e.length ? "0" + e : e;
        }
        let s = [0, 0, 0],
          a = [0, 0, 0],
          l = [0, 0, 0];
        const u = {
          name: "Color Blend",
          docs: "https://docs.noodl.net/nodes/utilities/color-blend",
          shortDesc:
            "Given any number of input colors this node can interpolate between these and give the result color as output.",
          category: "Interpolation",
          getInspectInfo() {
            return [{ type: "color", value: this._internal.resultColor }];
          },
          initialize() {
            const t = this._internal;
            (t.resultColor = "#000000"), (t.blendValue = 0), (t.colors = []);
          },
          numberedInputs: {
            color: {
              type: "color",
              displayPrefix: "Color",
              createSetter: (t) =>
                function (e) {
                  (this._internal.colors[t] = e), this.updateColor();
                },
            },
          },
          inputs: {
            blendValue: {
              type: "number",
              displayName: "Blend Value",
              default: 0,
              set: function (t) {
                (this._internal.blendValue = t), this.updateColor();
              },
            },
          },
          outputs: {
            result: {
              type: "color",
              displayName: "Result",
              getter: function () {
                return this._internal.resultColor;
              },
            },
          },
          methods: {
            updateColor() {
              var t = this._internal.colors;
              if (0 !== t.length) {
                var e,
                  n,
                  u,
                  p =
                    (0,
                    (e = t.length - 1),
                    (n = this._internal.blendValue),
                    Math.max(0, Math.min(e, n))),
                  c = Math.floor(p),
                  d = p - c;
                0 === d
                  ? (this._internal.resultColor = h(c))
                  : (o(s, h(c)),
                    o(a, h(c + 1)),
                    (l[0] = Math.floor(i.linear(s[0], a[0], d))),
                    (l[1] = Math.floor(i.linear(s[1], a[1], d))),
                    (l[2] = Math.floor(i.linear(s[2], a[2], d))),
                    (this._internal.resultColor =
                      "#" + r((u = l)[0]) + r(u[1]) + r(u[2]))),
                  this.flagOutputDirty("result");
              }
              function h(e) {
                return t[e] ? t[e] : "#000000";
              }
            },
          },
        };
        t.exports = { node: u };
      },
      2594: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855),
          o = n(8750);
        t.exports = {
          extendSetComponentObjectProperties: function (t) {
            function e(t, e, n) {
              var i = [];
              const o = [
                { label: "String", value: "string" },
                { label: "Boolean", value: "boolean" },
                { label: "Number", value: "number" },
                { label: "Date", value: "date" },
                { label: "Array", value: "array" },
                { label: "Object", value: "object" },
                { label: "Any", value: "*" },
              ];
              var r = e.properties;
              if (r)
                for (var s in (r = r ? r.split(",") : void 0)) {
                  var a = r[s];
                  i.push({
                    type: {
                      name: void 0 === e["type-" + a] ? "*" : e["type-" + a],
                    },
                    plug: "input",
                    group: "Property Values",
                    displayName: a,
                    name: "prop-" + a,
                  }),
                    i.push({
                      type: { name: "enum", enums: o, allowEditOnly: !0 },
                      default: "any",
                      plug: "input",
                      group: "Property Types",
                      displayName: a,
                      default: "*",
                      name: "type-" + a,
                    });
                }
              n.sendDynamicPorts(t, i, { detectRenamed: { plug: "input" } });
            }
            return {
              node: {
                name: t.name,
                displayNodeName: t.displayName,
                category: "Component Utilities",
                color: "component",
                docs: t.docs,
                initialize: function () {
                  this._internal.inputValues = {};
                },
                inputs: {
                  properties: {
                    type: { name: "stringlist", allowEditOnly: !0 },
                    displayName: "Properties",
                    group: "Properties",
                    set(t) {},
                  },
                  store: {
                    type: "signal",
                    group: "Actions",
                    displayName: "Do",
                    valueChangedToTrue() {
                      this.scheduleStore();
                    },
                  },
                },
                outputs: {
                  stored: {
                    type: "signal",
                    group: "Events",
                    displayName: "Done",
                  },
                },
                methods: {
                  getComponentObjectId: t.getComponentObjectId,
                  scheduleStore() {
                    if (!this.hasScheduledStore) {
                      this.hasScheduledStore = !0;
                      var t = this._internal;
                      this.scheduleAfterInputsHaveUpdated(() => {
                        const e = o.get(this.getComponentObjectId());
                        for (var n in ((this.hasScheduledStore = !1),
                        t.inputValues))
                          e.set(n, t.inputValues[n], { resolve: !0 });
                        this.sendSignalOnOutput("stored");
                      });
                    }
                  },
                  registerInputIfNeeded: function (t) {
                    if (!this.hasInput(t))
                      if (t.startsWith("prop-")) {
                        const e = t.substring("prop-".length);
                        this.registerInput(t, {
                          set(t) {
                            this._internal.inputValues[e] = t;
                          },
                        });
                      } else
                        t.startsWith("type-") &&
                          this.registerInput(t, { set(t) {} });
                  },
                },
              },
              setup: function (n, i) {
                n.editorConnection &&
                  n.editorConnection.isRunningLocally() &&
                  i.on("nodeAdded." + t.name, (t) => {
                    e(t.id, t.parameters, n.editorConnection),
                      t.on("parameterUpdated", (i) => {
                        ("properties" === i.name ||
                          i.name.startsWith("type-")) &&
                          e(t.id, t.parameters, n.editorConnection);
                      });
                  });
              },
            };
          },
        };
      },
      9600: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855),
          o = n(8750),
          r = {
            name: "net.noodl.ComponentObject",
            displayNodeName: "Component Object",
            category: "Component Utilities",
            color: "component",
            docs: "https://docs.noodl.net/nodes/component-utilities/component-object",
            initialize: function () {
              (this._internal.inputValues = {}),
                (this._internal.dirtyValues = {}),
                (this._internal.onModelChangedCallback = (t) => {
                  !1 === this.isInputConnected("fetch") &&
                    (this.hasOutput("value-" + t.name) &&
                      this.flagOutputDirty("value-" + t.name),
                    this.hasOutput("changed-" + t.name) &&
                      this.sendSignalOnOutput("changed-" + t.name),
                    this.sendSignalOnOutput("changed"));
                });
              const t = o.get(
                "componentState" + this.nodeScope.componentOwner.getInstanceId()
              );
              (this._internal.model = t),
                t.on("change", this._internal.onModelChangedCallback);
            },
            getInspectInfo() {
              return { type: "value", value: this._internal.model.data };
            },
            inputs: {
              properties: {
                type: { name: "stringlist", allowEditOnly: !0 },
                displayName: "Properties",
                group: "Properties",
                set(t) {},
              },
              fetch: {
                displayName: "Fetch",
                group: "Actions",
                valueChangedToTrue() {
                  this.scheduleFetch();
                },
              },
            },
            outputs: {
              changed: {
                type: "signal",
                displayName: "Changed",
                group: "Events",
              },
              fetched: {
                type: "signal",
                displayName: "Fetched",
                group: "Events",
              },
            },
            methods: {
              scheduleStore() {
                if (!this.hasScheduledStore) {
                  this.hasScheduledStore = !0;
                  var t = this._internal;
                  this.scheduleAfterInputsHaveUpdated(() => {
                    for (var e in ((this.hasScheduledStore = !1),
                    t.dirtyValues))
                      t.model.set(e, t.inputValues[e], { resolve: !0 });
                    t.dirtyValues = {};
                  });
                }
              },
              scheduleFetch() {
                this.hasScheduledFetch ||
                  ((this.hasScheduledFetch = !0),
                  this.scheduleAfterInputsHaveUpdated(() => {
                    (this.hasScheduledFetch = !1), this.fetch();
                  }));
              },
              fetch() {
                for (var t in this._internal.model.data)
                  this.hasOutput("value-" + t) &&
                    (this.flagOutputDirty("value-" + t),
                    this.hasOutput("changed-" + t) &&
                      this.sendSignalOnOutput("changed-" + t));
                this.sendSignalOnOutput("fetched");
              },
              _onNodeDeleted() {
                i.prototype._onNodeDeleted.call(this),
                  this._internal.model.off(
                    "change",
                    this._internal.onModelChangedCallback
                  );
              },
              registerOutputIfNeeded(t) {
                if (this.hasOutput(t)) return;
                const e = t.split("-"),
                  n = e[e.length - 1];
                this.registerOutput(t, {
                  get() {
                    return this._internal.model.get(n, { resolve: !0 });
                  },
                });
              },
              registerInputIfNeeded: function (t) {
                if (!this.hasInput(t) && t.startsWith("value-")) {
                  const e = t.substring("value-".length);
                  this.registerInput(t, {
                    set(t) {
                      (this._internal.inputValues[e] = t),
                        (this._internal.dirtyValues[e] = !0),
                        this.scheduleStore();
                    },
                  });
                }
              },
            },
          };
        function s(t, e, n) {
          const i = [];
          if (e.properties) {
            var o = e.properties.split(",");
            for (var r in o) {
              var s = o[r];
              i.push({
                type: { name: "*", allowConnectionsOnly: !0 },
                plug: "input/output",
                group: "Properties",
                name: "value-" + s,
                displayName: s,
              }),
                i.push({
                  type: "signal",
                  plug: "output",
                  group: "Changed Events",
                  displayName: s + " Changed",
                  name: "changed-" + s,
                });
            }
          }
          n.sendDynamicPorts(t, i, { detectRenamed: { plug: "input/output" } });
        }
        t.exports = {
          node: r,
          setup: function (t, e) {
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("nodeAdded.net.noodl.ComponentObject", (e) => {
                s(e.id, e.parameters, t.editorConnection),
                  e.on("parameterUpdated", (n) => {
                    "properties" === n.name &&
                      s(e.id, e.parameters, t.editorConnection);
                  });
              });
          },
        };
      },
      3711: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855),
          o = n(8750),
          r = new (0, n(7187).EventEmitter)();
        r.setMaxListeners(1e6);
        const s = {
          name: "net.noodl.ParentComponentObject",
          displayNodeName: "Parent Component Object",
          category: "Component Utilities",
          color: "component",
          docs: "https://docs.noodl.net/nodes/component-utilities/parent-component-object",
          initialize() {
            (this._internal.inputValues = {}),
              (this._internal.onModelChangedCallback = (t) => {
                !1 === this.isInputConnected("fetch") &&
                  (this.hasOutput("value-" + t.name) &&
                    this.flagOutputDirty("value-" + t.name),
                  this.hasOutput("changed-" + t.name) &&
                    this.sendSignalOnOutput("changed-" + t.name),
                  this.sendSignalOnOutput("changed"));
              }),
              (this.onComponentStateNodesChanged = () => {
                const t = this.findParentComponentStateModelId();
                this._internal.modelId !== t &&
                  ((this._internal.modelId = t),
                  !1 === this.isInputConnected("fetch") &&
                    this.setModelId(this._internal.modelId));
              }),
              r.on(
                "componentStateNodesChanged",
                this.onComponentStateNodesChanged
              ),
              this.updateComponentState();
          },
          nodeScopeDidInitialize() {
            this._internal.modelId ||
              this.context.scheduleAfterUpdate(() => {
                this.updateComponentState();
              });
          },
          getInspectInfo() {
            if (!this._internal.model) return "No parent component state found";
            const t = [
                { type: "text", value: this._internal.parentComponentName },
              ],
              e = this._internal.model.data;
            return t.concat(
              Object.keys(e).map((t) => ({
                type: "text",
                value: t + ": " + e[t],
              }))
            );
          },
          inputs: {
            properties: {
              type: { name: "stringlist", allowEditOnly: !0 },
              displayName: "Properties",
              group: "Properties",
              set(t) {},
            },
            fetch: {
              displayName: "Fetch",
              group: "Actions",
              valueChangedToTrue: function () {
                this.setModelId(this._internal.modelId);
              },
            },
          },
          outputs: {
            changed: {
              type: "signal",
              displayName: "Changed",
              group: "Events",
            },
            fetched: {
              type: "signal",
              displayName: "Fetched",
              group: "Events",
            },
          },
          methods: {
            updateComponentState() {
              (this._internal.modelId = this.findParentComponentStateModelId()),
                !1 === this.isInputConnected("fetch") &&
                  this.setModelId(this._internal.modelId);
            },
            findParentComponentStateModelId() {
              const t = (function t(e) {
                let n;
                if (e.getRoots().length > 0) {
                  const t = e.getRoots()[0];
                  t.getVisualParentNode
                    ? t.getVisualParentNode() &&
                      (n = t.getVisualParentNode().nodeScope.componentOwner)
                    : t.parentNodeScope &&
                      (n = e.parentNodeScope.componentOwner);
                } else
                  e.parentNodeScope && (n = e.parentNodeScope.componentOwner);
                if (n && n.nodeScope && n.nodeScope.componentOwner !== e)
                  return n.nodeScope.getNodesWithType(
                    "net.noodl.ComponentObject"
                  ).length > 0
                    ? n
                    : t(n);
              })(this.nodeScope.componentOwner);
              if (t)
                return (
                  (this._internal.parentComponentName = t.name),
                  "componentState" + t.getInstanceId()
                );
            },
            setModelId(t) {
              if (
                (this._internal.model &&
                  this._internal.model.off(
                    "change",
                    this._internal.onModelChangedCallback
                  ),
                (this._internal.model = void 0),
                !t)
              )
                return;
              const e = o.get(t);
              for (var n in ((this._internal.model = e),
              e.on("change", this._internal.onModelChangedCallback),
              e.data))
                this.hasOutput("value-" + n) &&
                  this.flagOutputDirty("value-" + n),
                  this.hasOutput("changed-" + n) &&
                    this.sendSignalOnOutput("changed-" + n);
              this.sendSignalOnOutput("changed"),
                this.sendSignalOnOutput("fetched");
            },
            scheduleStore() {
              if (!this.hasScheduledStore) {
                this.hasScheduledStore = !0;
                var t = this._internal;
                this.scheduleAfterInputsHaveUpdated(() => {
                  if (((this.hasScheduledStore = !1), t.model))
                    for (var e in t.inputValues)
                      t.model.set(e, t.inputValues[e], { resolve: !0 });
                });
              }
            },
            _onNodeDeleted() {
              i.prototype._onNodeDeleted.call(this),
                r.off(
                  "componentStateNodesChanged",
                  this.onComponentStateNodesChanged
                ),
                this._internal.model &&
                  this._internal.model.off(
                    "change",
                    this._internal.onModelChangedCallback
                  );
            },
            registerOutputIfNeeded(t) {
              if (this.hasOutput(t)) return;
              const e = t.substring("value-".length);
              this.registerOutput(t, {
                get() {
                  if (this._internal.model)
                    return this._internal.model.get(e, { resolve: !0 });
                },
              });
            },
            registerInputIfNeeded: function (t) {
              if (!this.hasInput(t) && t.startsWith("value-")) {
                const e = t.substring("value-".length);
                this.registerInput(t, {
                  set(t) {
                    (this._internal.inputValues[e] = t), this.scheduleStore();
                  },
                });
              }
            },
          },
        };
        function a(t, e, n) {
          const i = [];
          var o = e.properties && e.properties.split(",");
          for (var r in o) {
            var s = o[r];
            i.push({
              type: { name: "*", allowConnectionsOnly: !0 },
              plug: "input/output",
              group: "Properties",
              name: "value-" + s,
              displayName: s,
            }),
              i.push({
                type: "signal",
                plug: "output",
                group: "Changed Events",
                displayName: s + " Changed",
                name: "changed-" + s,
              });
          }
          n.sendDynamicPorts(t, i, { detectRenamed: { plug: "input/output" } });
        }
        t.exports = {
          node: s,
          setup: function (t, e) {
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              (e.on("nodeAdded.net.noodl.ParentComponentObject", (e) => {
                a(e.id, e.parameters, t.editorConnection),
                  e.on("parameterUpdated", (n) => {
                    a(e.id, e.parameters, t.editorConnection);
                  });
              }),
              e.on("nodeAdded.net.noodl.ComponentObject", (t) => {
                setTimeout(() => {
                  r.emit("componentStateNodesChanged");
                }, 0);
              }),
              e.on("nodeRemoved.net.noodl.ComponentObject", (t) => {
                setTimeout(() => {
                  r.emit("componentStateNodesChanged");
                });
              }));
          },
        };
      },
      782: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855),
          o = (n(8750), n(2594));
        t.exports = o.extendSetComponentObjectProperties({
          name: "net.noodl.SetComponentObjectProperties",
          displayName: "Set Component Object Properties",
          docs: "https://docs.noodl.net/nodes/component-utilities/set-component-object-properties",
          getComponentObjectId: function () {
            return (
              "componentState" + this.nodeScope.componentOwner.getInstanceId()
            );
          },
        });
      },
      7540: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855),
          o = (n(8750), n(2594));
        t.exports = o.extendSetComponentObjectProperties({
          name: "net.noodl.SetParentComponentObjectProperties",
          displayName: "Set Parent Component Object Properties",
          docs: "https://docs.noodl.net/nodes/component-utilities/set-parent-component-object-properties",
          getComponentObjectId: function () {
            const t = (function t(e) {
              let n;
              if (e.getRoots().length > 0) {
                const t = e.getRoots()[0];
                t.getVisualParentNode
                  ? t.getVisualParentNode() &&
                    (n = t.getVisualParentNode().nodeScope.componentOwner)
                  : t.parentNodeScope && (n = e.parentNodeScope.componentOwner);
              } else
                e.parentNodeScope && (n = e.parentNodeScope.componentOwner);
              if (n && n.nodeScope && n.nodeScope.componentOwner !== e)
                return n.nodeScope.getNodesWithType("net.noodl.ComponentObject")
                  .length > 0
                  ? n
                  : t(n);
            })(this.nodeScope.componentOwner);
            if (t)
              return (
                (this._internal.parentComponentName = t.name),
                "componentState" + t.getInstanceId()
              );
          },
        });
      },
      2913: (t) => {
        "use strict";
        const e = {
          name: "Condition",
          docs: "https://docs.noodl.net/nodes/utilities/logic/condition",
          category: "Logic",
          initialize: function () {},
          getInspectInfo() {
            const t = this.getInputValue("condition");
            let e;
            return (
              void 0 === t && (e = "[No input]"),
              (e = t),
              [{ type: "value", value: e }]
            );
          },
          inputs: {
            condition: {
              type: "boolean",
              displayName: "Condition",
              group: "General",
              set(t) {
                this.isInputConnected("eval") || this.scheduleEvaluate();
              },
            },
            eval: {
              type: "signal",
              displayName: "Evaluate",
              group: "Actions",
              valueChangedToTrue() {
                this.scheduleEvaluate();
              },
            },
          },
          outputs: {
            ontrue: { type: "signal", displayName: "On True", group: "Events" },
            onfalse: {
              type: "signal",
              displayName: "On False",
              group: "Events",
            },
            result: {
              type: "boolean",
              displayName: "Is True",
              group: "Booleans",
              get() {
                return !!this.getInputValue("condition");
              },
            },
            isfalse: {
              type: "boolean",
              displayName: "Is False",
              group: "Booleans",
              get() {
                return !this.getInputValue("condition");
              },
            },
          },
          methods: {
            scheduleEvaluate() {
              this.scheduleAfterInputsHaveUpdated(() => {
                this.flagOutputDirty("result"), this.flagOutputDirty("isfalse");
                const t = this.getInputValue("condition");
                this.sendSignalOnOutput(t ? "ontrue" : "onfalse");
              });
            },
          },
        };
        t.exports = { node: e };
      },
      9066: (t) => {
        "use strict";
        const e = {
          name: "Counter",
          docs: "https://docs.noodl.net/nodes/math/counter",
          category: "Math",
          initialize: function () {
            (this._internal.currentValue = 0),
              (this._internal.startValue = 0),
              (this._internal.startValueSet = !1),
              (this._internal.limitsEnabled = !1),
              (this._internal.limitsMin = 0),
              (this._internal.limitsMax = 0);
          },
          getInspectInfo() {
            return "Count: " + this._internal.currentValue;
          },
          inputs: {
            increase: {
              group: "Actions",
              displayName: "Increase Count",
              valueChangedToTrue: function () {
                (this._internal.limitsEnabled &&
                  this._internal.currentValue >= this._internal.limitsMax) ||
                  (this._internal.currentValue++,
                  this.flagOutputDirty("currentCount"),
                  this.sendSignalOnOutput("countChanged"));
              },
            },
            decrease: {
              group: "Actions",
              displayName: "Decrease Count",
              valueChangedToTrue: function () {
                (this._internal.limitsEnabled &&
                  this._internal.currentValue <= this._internal.limitsMin) ||
                  (this._internal.currentValue--,
                  this.flagOutputDirty("currentCount"),
                  this.sendSignalOnOutput("countChanged"));
              },
            },
            reset: {
              group: "Actions",
              displayName: "Reset To Start",
              valueChangedToTrue: function () {
                0 !== this.currentValue &&
                  ((this._internal.currentValue = this._internal.startValue),
                  this.flagOutputDirty("currentCount"),
                  this.sendSignalOnOutput("countChanged"));
              },
            },
            startValue: {
              type: "number",
              displayName: "Start Value",
              default: 0,
              set: function (t) {
                (this._internal.startValue = Number(t)),
                  !1 === this._internal.startValueSet &&
                    ((this._internal.startValueSet = !0),
                    (this._internal.currentValue = this._internal.startValue),
                    this.flagOutputDirty("currentCount"),
                    this.sendSignalOnOutput("countChanged"));
              },
            },
            limitsMin: {
              type: { name: "number" },
              displayName: "Min Value",
              group: "Limits",
              default: 0,
              set: function (t) {
                this._internal.limitsMin = Number(t);
              },
            },
            limitsMax: {
              type: { name: "number" },
              displayName: "Max Value",
              group: "Limits",
              default: 0,
              set: function (t) {
                this._internal.limitsMax = Number(t);
              },
            },
            limitsEnabled: {
              type: { name: "boolean" },
              displayName: "Limits Enabled",
              group: "Limits",
              default: !1,
              set: function (t) {
                this._internal.limitsEnabled = !!t;
              },
            },
          },
          outputs: {
            currentCount: {
              displayName: "Current Count",
              type: "number",
              getter: function () {
                return this._internal.currentValue;
              },
            },
            countChanged: { displayName: "Count Changed", type: "signal" },
          },
        };
        t.exports = { node: e };
      },
      6732: (t) => {
        t.exports = class {
          constructor({ name: t, url: e }) {
            (this.name = t), (this.url = e);
          }
          getUrl() {
            return this.url;
          }
          getName() {
            return this.name;
          }
          toString() {
            return this.url;
          }
        };
      },
      7180: (t, e, n) => {
        const i = n(6732),
          o = {
            name: "Cloud File",
            docs: "https://docs.noodl.net/nodes/data/cloud-data/cloud-file",
            category: "Cloud Services",
            color: "data",
            getInspectInfo() {
              return (
                this._internal.cloudFile && this._internal.cloudFile.getUrl()
              );
            },
            outputs: {
              url: {
                type: "string",
                displayName: "URL",
                group: "General",
                get() {
                  return (
                    this._internal.cloudFile &&
                    this._internal.cloudFile.getUrl()
                  );
                },
              },
              name: {
                type: "string",
                displayName: "Name",
                group: "General",
                get() {
                  if (!this._internal.cloudFile) return;
                  const t = this._internal.cloudFile.getName().split("_");
                  return 1 === t.length ? t[0] : t.slice(1).join("_");
                },
              },
            },
            inputs: {
              file: {
                type: "cloudfile",
                displayName: "Cloud File",
                group: "General",
                set(t) {
                  t instanceof i != 0 &&
                    ((this._internal.cloudFile = t),
                    this.flagOutputDirty("name"),
                    this.flagOutputDirty("url"));
                },
              },
            },
          };
        t.exports = { node: o };
      },
      960: (t, e, n) => {
        const i = n(5855),
          o = n(1268);
        var r = {
          name: "Cloud Function",
          category: "Cloud Services",
          color: "data",
          usePortAsLabel: "functionName",
          docs: "https://docs.noodl.net/nodes/data/cloud-data/cloud-function",
          initialize: function () {
            this._internal.paramsValues = {};
          },
          getInspectInfo() {
            const t = this._internal.lastCallResult;
            return t ? [{ type: "value", value: t }] : "[Not executed yet]";
          },
          inputs: {
            functionName: {
              type: "string",
              displayName: "Function Name",
              group: "General",
              set: function (t) {
                this._internal.functionName = t;
              },
            },
            params: {
              group: "Parameters",
              type: { name: "stringlist", allowEditOnly: !0 },
              set: function (t) {
                this._internal.params = t;
              },
            },
            call: {
              type: "signal",
              displayName: "Call",
              group: "Actions",
              valueChangedToTrue: function () {
                this.scheduleCall();
              },
            },
          },
          outputs: {
            success: {
              type: "signal",
              displayName: "Success",
              group: "Signals",
            },
            failure: {
              type: "signal",
              displayName: "Failure",
              group: "Signals",
            },
            result: {
              type: "*",
              displayName: "Result",
              group: "Output",
              getter: function () {
                return this._internal.result;
              },
            },
          },
          methods: {
            registerOutputIfNeeded: function (t) {
              this.hasOutput(t);
            },
            setParamsValue: function (t, e) {
              this._internal.paramsValues[t] = e;
            },
            registerInputIfNeeded: function (t) {
              this.hasInput(t) ||
                (t.startsWith("pm-") &&
                  this.registerInput(t, {
                    set: this.setParamsValue.bind(
                      this,
                      t.substring("pm-".length)
                    ),
                  }));
            },
            scheduleCall: function () {
              var t = this._internal;
              t.hasScheduledCall ||
                ((t.hasScheduledCall = !0),
                this.scheduleAfterInputsHaveUpdated(this.doCall.bind(this)));
            },
            doCall: function () {
              this._internal.hasScheduledCall = !1;
              const t = i.instance.getMetaData("cloudservices");
              if (void 0 !== t) {
                var e = t.appId || t.workspaceId + "-" + t.instanceId,
                  n = t.endpoint;
                !(function (t, e) {
                  var n = new XMLHttpRequest();
                  (n.onreadystatechange = function () {
                    if (4 === n.readyState) {
                      var t;
                      try {
                        t = JSON.parse(n.response);
                      } catch (t) {}
                      200 === n.status || 201 === n.status
                        ? e.success(t)
                        : e.error(t);
                    }
                  }),
                    n.open(e.method || "GET", e.endpoint + t, !0),
                    n.setRequestHeader("X-Parse-Application-Id", e.appId),
                    n.setRequestHeader("Content-Type", "application/json");
                  var i = localStorage["Parse/" + e.appId + "/currentUser"];
                  if (void 0 !== i)
                    try {
                      const t = JSON.parse(i);
                      n.setRequestHeader(
                        "X-Parse-Session-Token",
                        t.sessionToken
                      );
                    } catch (t) {}
                  n.send(JSON.stringify(e.content));
                })("/functions/" + this._internal.functionName, {
                  appId: e,
                  endpoint: n,
                  content: this._internal.paramsValues,
                  method: "POST",
                  success: (t) => {
                    void 0 !== (t = t.result)
                      ? ((this._internal.result = o._deserializeJSON(t)),
                        this.flagOutputDirty("result"),
                        (this._internal.lastCallResult = {
                          status: "success",
                          result: this._internal.result,
                        }),
                        this.sendSignalOnOutput("success"))
                      : this.sendSignalOnOutput("failure");
                  },
                  error: (t) => {
                    (this._internal.lastCallResult = {
                      status: "failure",
                      res: t,
                    }),
                      this.sendSignalOnOutput("failure");
                  },
                });
              } else console.log("No cloud services defined in this project.");
            },
          },
        };
        t.exports = {
          node: r,
          setup: function (t, e) {
            function n(e) {
              function n() {
                var n = [],
                  i = e.parameters.params;
                if (void 0 !== i)
                  for (var o in (i = i.split(","))) {
                    var r = i[o];
                    n.push({
                      type: "*",
                      plug: "input",
                      group: "Parameters",
                      name: "pm-" + r,
                      displayName: r,
                    });
                  }
                t.editorConnection.sendDynamicPorts(e.id, n);
              }
              n(),
                e.on("parameterUpdated", function (t) {
                  "params" === t.name && n();
                });
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.Cloud Function", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("Cloud Function")) n(t);
              });
          },
        };
      },
      1268: (t, e, n) => {
        const i = n(5855),
          o = n(8750),
          r = n(266),
          s = n(6732),
          a = n(7187).EventEmitter;
        class l {
          constructor() {
            this._initCloudServices(),
              (this.events = new a()),
              this.events.setMaxListeners(1e4);
          }
          _initCloudServices() {
            const t = i.instance.getMetaData("cloudservices");
            t &&
              ((this.appId = t.appId || t.workspaceId + "-" + t.instanceId),
              (this.endpoint = t.endpoint));
          }
          on() {
            this.events.on.apply(this.events, arguments);
          }
          off() {
            this.events.off.apply(this.events, arguments);
          }
          _makeRequest(t, e) {
            var n = new XMLHttpRequest();
            (n.onreadystatechange = function () {
              if (4 === n.readyState) {
                var t;
                try {
                  t = JSON.parse(n.response);
                } catch (t) {}
                200 === n.status || 201 === n.status
                  ? e.success(t)
                  : e.error(t || { error: n.responseText, status: n.status });
              }
            }),
              n.open(e.method || "GET", this.endpoint + t, !0),
              n.setRequestHeader("X-Parse-Application-Id", this.appId);
            var i = localStorage["Parse/" + this.appId + "/currentUser"];
            if (void 0 !== i)
              try {
                const t = JSON.parse(i);
                n.setRequestHeader("X-Parse-Session-Token", t.sessionToken);
              } catch (t) {}
            e.onUploadProgress &&
              (n.upload.onprogress = (t) => e.onUploadProgress(t)),
              e.content instanceof File
                ? n.send(e.content)
                : (n.setRequestHeader("Content-Type", "application/json"),
                  n.send(JSON.stringify(e.content)));
          }
          query(t) {
            const e = [];
            t.where &&
              e.push("where=" + encodeURIComponent(JSON.stringify(t.where))),
              t.limit && e.push("limit=" + t.limit),
              t.skip && e.push("skip=" + t.skip),
              t.sort && e.push('order="' + t.sort.join(",") + '"'),
              this._makeRequest(
                "/classes/" +
                  t.collection +
                  (e.length > 0 ? "?" + e.join("&") : ""),
                {
                  success: function (e) {
                    t.success(e.results);
                  },
                  error: function () {
                    t.error();
                  },
                }
              );
          }
          fetch(t) {
            this._makeRequest("/classes/" + t.collection + "/" + t.objectId, {
              method: "GET",
              success: (e) => {
                t.success(e),
                  this.events.emit("fetch", {
                    type: "fetch",
                    objectId: t.objectId,
                    object: e,
                    collection: t.collection,
                  });
              },
              error: function (e) {
                t.error(e.error);
              },
            });
          }
          create(t) {
            this._makeRequest("/classes/" + t.collection, {
              method: "POST",
              content: Object.assign(p(t.data, t.collection), { ACL: t.acl }),
              success: (e) => {
                const n = Object.assign({}, t.data, e);
                t.success(n),
                  this.events.emit("create", {
                    type: "create",
                    objectId: t.objectId,
                    object: n,
                    collection: t.collection,
                  });
              },
              error: function (e) {
                t.error(e.error);
              },
            });
          }
          save(t) {
            const e = Object.assign({}, t.data);
            delete e.createdAt,
              delete e.updatedAt,
              this._makeRequest("/classes/" + t.collection + "/" + t.objectId, {
                method: "PUT",
                content: Object.assign(p(e, t.collection), { ACL: t.acl }),
                success: (e) => {
                  t.success(e),
                    this.events.emit("save", {
                      type: "save",
                      objectId: t.objectId,
                      object: Object.assign({}, t.data, e),
                      collection: t.collection,
                    });
                },
                error: function (e) {
                  t.error(e.error);
                },
              });
          }
          delete(t) {
            this._makeRequest("/classes/" + t.collection + "/" + t.objectId, {
              method: "DELETE",
              success: () => {
                t.success(),
                  this.events.emit("delete", {
                    type: "delete",
                    objectId: t.objectId,
                    collection: t.collection,
                  });
              },
              error: function (e) {
                t.error(e.error);
              },
            });
          }
          addRelation(t) {
            const e = {};
            (e[t.key] = {
              __op: "AddRelation",
              objects: [
                {
                  __type: "Pointer",
                  objectId: t.targetObjectId,
                  className: t.targetClass,
                },
              ],
            }),
              this._makeRequest("/classes/" + t.collection + "/" + t.objectId, {
                method: "PUT",
                content: e,
                success: function (e) {
                  t.success(e);
                },
                error: function (e) {
                  t.error(e.error);
                },
              });
          }
          removeRelation(t) {
            const e = {};
            (e[t.key] = {
              __op: "RemoveRelation",
              objects: [
                {
                  __type: "Pointer",
                  objectId: t.targetObjectId,
                  className: t.targetClass,
                },
              ],
            }),
              this._makeRequest("/classes/" + t.collection + "/" + t.objectId, {
                method: "PUT",
                content: e,
                success: function (e) {
                  t.success(e);
                },
                error: function (e) {
                  t.error(e.error);
                },
              });
          }
          uploadFile(t) {
            this._makeRequest("/files/" + t.file.name, {
              method: "POST",
              content: t.file,
              contentType: t.file.type,
              success: (e) => t.success(Object.assign({}, t.data, e)),
              error: (e) => t.error(e),
              onUploadProgress: t.onUploadProgress,
            });
          }
        }
        function u(t) {
          if (t instanceof o) {
            var e = {};
            for (var n in t.data) e[n] = u(t.data[n]);
            return e;
          }
          return t instanceof r
            ? ((e = []),
              t.items.forEach((t) => {
                e.push(u(t));
              }),
              e)
            : t;
        }
        function p(t, e) {
          if (l._collections[e]) var n = l._collections[e].schema;
          for (var i in t) {
            var a =
              n && n.properties && n.properties[i]
                ? n.properties[i].type
                : void 0;
            if ("Pointer" === a && "string" == typeof t[i])
              o.get(t[i]),
                (t[i] = {
                  __type: "Pointer",
                  className: n.properties[i].targetClass,
                  objectId: t[i],
                });
            else if (
              "Date" === a &&
              ("string" == typeof t[i] || t[i] instanceof Date)
            )
              t[i] = {
                __type: "Date",
                iso: t[i] instanceof Date ? t[i].toISOString() : t[i],
              };
            else if ("File" === a && t[i] instanceof s) {
              const e = t[i];
              t[i] = { __type: "File", url: e.getUrl(), name: e.getName() };
            } else
              "Array" === a && "string" == typeof t[i] && r.exists(t[i])
                ? (t[i] = u(r.get(t[i])))
                : "Object" === a && "string" == typeof t[i] && o.exists(t[i])
                ? (t[i] = u(o.get(t[i])))
                : (t[i] = u(t[i]));
          }
          return t;
        }
        function c(t, e) {
          if ("Relation" !== e || "Relation" !== t.__type) {
            if ("Pointer" === e && "Pointer" === t.__type) return t.objectId;
            if ("Date" === e && "Date" === t.__type) return new Date(t.iso);
            if ("Date" === e && "string" == typeof t) return new Date(t);
            if ("File" === e && "File" === t.__type) return new s(t);
            if (
              (function (t) {
                if (!Array.isArray(t)) return !1;
                for (var e = 0; e < t.length; e++)
                  if ("object" != typeof t[e]) return !1;
                return !0;
              })(t)
            ) {
              for (var n = [], i = 0; i < t.length; i++) n.push(c(t[i]));
              var o = Noodl.Array.get();
              return o.set(n), o;
            }
            if (Array.isArray(t)) return t;
            if ("object" == typeof t && null !== t) {
              var r = Noodl.Object.get();
              for (var a in t) r.set(a, c(t[a]));
              return r;
            }
            return t;
          }
        }
        var d, h;
        (l._fromJSON = function (t, e) {
          const n = o.get(t.objectId);
          if (((n._class = e), void 0 !== e && void 0 !== l._collections[e]))
            var i = l._collections[e].schema;
          for (var r in t)
            if ("objectId" !== r && "ACL" !== r) {
              var s =
                i && i.properties && i.properties[r]
                  ? i.properties[r].type
                  : void 0;
              n.set(r, c(t[r], s));
            }
          return n;
        }),
          (l._deserializeJSON = c),
          (l._serializeObject = p),
          Object.defineProperty(l, "instance", {
            get: function () {
              return void 0 === d && (d = new l()), d;
            },
          }),
          Object.defineProperty(l, "_collections", {
            get: function () {
              return (
                void 0 === h &&
                  ((h = {}),
                  (i.instance.getMetaData("dbCollections") || []).forEach(
                    (t) => {
                      h[t.name] = t;
                    }
                  ),
                  (i.instance.getMetaData("systemCollections") || []).forEach(
                    (t) => {
                      h[t.name] = t;
                    }
                  )),
                h
              );
            },
          }),
          (t.exports = l);
      },
      266: (t, e, n) => {
        "use strict";
        var i = n(8750);
        Object.defineProperty(Array.prototype, "items", {
          enumerable: !1,
          get() {
            return this;
          },
          set(t) {
            this.set(t);
          },
        }),
          Object.defineProperty(Array.prototype, "each", {
            enumerable: !1,
            writable: !1,
            value: Array.prototype.forEach,
          }),
          Object.defineProperty(Array.prototype, "size", {
            enumerable: !1,
            writable: !1,
            value: function () {
              return this.length;
            },
          }),
          Object.defineProperty(Array.prototype, "get", {
            enumerable: !1,
            writable: !1,
            value: function (t) {
              return this[t];
            },
          }),
          Object.defineProperty(Array.prototype, "getId", {
            enumerable: !1,
            writable: !1,
            value: function () {
              return this._id;
            },
          }),
          Object.defineProperty(Array.prototype, "id", {
            enumerable: !1,
            get() {
              return this.getId();
            },
          }),
          Object.defineProperty(Array.prototype, "set", {
            enumerable: !1,
            writable: !1,
            value: function (t) {
              var e, n;
              if (t !== this) {
                var o = [];
                for (e = (t = t || []).length, n = 0; n < e; n++) {
                  var r = t[n];
                  i.instanceOf(r) ? o.push(r) : o.push(i.create(r));
                }
                var s = this.items,
                  a = u(s),
                  l = u(o);
                for (e = s.length, n = 0; n < e; n++)
                  l.hasOwnProperty(s[n].getId()) ||
                    (this.removeAtIndex(n), n--, e--);
                for (n = 0; n < Math.min(s.length, o.length); n++)
                  s[n] !== o[n] &&
                    (a.hasOwnProperty(o[n].getId()) && this.remove(o[n]),
                    this.addAtIndex(o[n], n));
                for (n = s.length; n < o.length; n++) this.add(o[n]);
              }
              function u(t) {
                for (var e = {}, n = t.length, i = 0; i < n; i++) {
                  var o = t[i];
                  e[o.getId()] = o;
                }
                return e;
              }
            },
          }),
          Object.defineProperty(Array.prototype, "notify", {
            enumerable: !1,
            writable: !1,
            value: async function (t, e) {
              if (this._listeners && this._listeners[t])
                for (
                  var n = this._listeners[t].slice(), i = 0;
                  i < n.length;
                  i++
                )
                  await n[i](e);
            },
          }),
          Object.defineProperty(Array.prototype, "contains", {
            enumerable: !1,
            writable: !1,
            value: function (t) {
              return -1 !== this.indexOf(t);
            },
          }),
          Object.defineProperty(Array.prototype, "add", {
            enumerable: !1,
            writable: !1,
            value: async function (t) {
              this.contains(t) ||
                (this.items.push(t),
                await this.notify("add", {
                  item: t,
                  index: this.items.length - 1,
                }),
                await this.notify("change"),
                await t.notify("add", { collection: this }));
            },
          }),
          Object.defineProperty(Array.prototype, "remove", {
            enumerable: !1,
            writable: !1,
            value: function (t) {
              var e = this.items.indexOf(t);
              -1 !== e && this.removeAtIndex(e);
            },
          }),
          Object.defineProperty(Array.prototype, "addAtIndex", {
            enumerable: !1,
            writable: !1,
            value: async function (t, e) {
              this.contains(t) ||
                (this.items.splice(e, 0, t),
                await this.notify("add", { item: t, index: e }),
                await this.notify("change"),
                await t.notify("add", { collection: this, index: e }));
            },
          }),
          Object.defineProperty(Array.prototype, "removeAtIndex", {
            enumerable: !1,
            writable: !1,
            value: async function (t) {
              var e = this.items[t];
              this.items.splice(t, 1),
                await this.notify("remove", { item: e, index: t }),
                await this.notify("change"),
                await e.notify("remove", { collection: this });
            },
          }),
          Object.defineProperty(Array.prototype, "on", {
            enumerable: !1,
            writable: !1,
            value: function (t, e) {
              this._listeners ||
                Object.defineProperty(this, "_listeners", {
                  enumerable: !1,
                  writable: !1,
                  value: {},
                }),
                this._listeners[t] || (this._listeners[t] = []),
                this._listeners[t].push(e);
            },
          }),
          Object.defineProperty(Array.prototype, "off", {
            enumerable: !1,
            writable: !1,
            value: function (t, e) {
              if (this._listeners && this._listeners[t]) {
                var n = this._listeners[t].indexOf(e);
                -1 !== n && this._listeners[t].splice(n, 1);
              }
            },
          });
        class o extends Array {}
        var r = (o._collections = {});
        (o.create = function (t) {
          const e = i.guid();
          return (
            (r[e] = new o()),
            Object.defineProperty(r[e], "_id", {
              enumerable: !1,
              writable: !1,
              value: e,
            }),
            t && r[e].set(t),
            r[e]
          );
        }),
          (o.get = function (t) {
            return (
              void 0 === t && (t = i.guid()),
              r[t] ||
                ((r[t] = new o()),
                Object.defineProperty(r[t], "_id", {
                  enumerable: !1,
                  writable: !1,
                  value: t,
                })),
              r[t]
            );
          }),
          (o.instanceOf = function (t) {
            return t instanceof o;
          }),
          (o.exists = function (t) {
            return void 0 !== r[t];
          }),
          (t.exports = o);
      },
      9855: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        var o = n(8750),
          r = n(266),
          s = {
            name: "CollectionInsert",
            docs: "https://docs.noodl.net/nodes/data/array/insert-into-array",
            displayNodeName: "Insert Object Into Array",
            shortDesc:
              "A collection of models, mainly used together with a For Each Node.",
            category: "Data",
            usePortAsLabel: "collectionId",
            color: "data",
            initialize: function () {},
            inputs: {
              collectionId: {
                type: {
                  name: "string",
                  identifierOf: "CollectionName",
                  identifierDisplayName: "Array Ids",
                },
                displayName: "Array Id",
                group: "General",
                set: function (t) {
                  t instanceof r && (t = t.getId()), this.setCollectionID(t);
                },
              },
              modifyId: {
                type: { name: "string", allowConnectionsOnly: !0 },
                displayName: "Object Id",
                group: "Modify",
                set: function (t) {
                  this._internal.modifyId = t;
                },
              },
              add: {
                displayName: "Do",
                group: "Actions",
                valueChangedToTrue: function () {
                  var t = this,
                    e = this._internal;
                  this.scheduleAfterInputsHaveUpdated(function () {
                    if (void 0 !== e.modifyId && void 0 !== e.collection) {
                      var n = o.get(e.modifyId);
                      e.collection.add(n), t.sendSignalOnOutput("modified");
                    }
                  });
                },
              },
            },
            outputs: {
              modified: {
                group: "Events",
                type: "signal",
                displayName: "Done",
              },
            },
            prototypeExtensions: {
              setCollectionID: function (t) {
                this.setCollection(r.get(t));
              },
              setCollection: function (t) {
                this._internal.collection = t;
              },
            },
          };
        t.exports = { node: s };
      },
      2458: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        n(8750);
        var o = n(266),
          r = {
            name: "CollectionNew",
            docs: "https://docs.noodl.net/nodes/data/array/create-new-array",
            displayNodeName: "Create New Array",
            shortDesc:
              "A collection of models, mainly used together with a For Each Node.",
            category: "Data",
            color: "data",
            initialize: function () {},
            inputs: {
              new: {
                displayName: "Do",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleNew();
                },
              },
              items: {
                type: "array",
                group: "General",
                displayName: "Items",
                set: function (t) {
                  this._internal.sourceCollection = t;
                },
              },
            },
            outputs: {
              id: {
                type: "string",
                displayName: "Id",
                group: "General",
                getter: function () {
                  return this._internal.collection
                    ? this._internal.collection.getId()
                    : this._internal.collectionId;
                },
              },
              created: { group: "Events", type: "signal", displayName: "Done" },
            },
            prototypeExtensions: {
              setCollectionID: function (t) {
                this.setCollection(o.get(t));
              },
              setCollection: function (t) {
                (this._internal.collection = t), this.flagOutputDirty("id");
              },
              scheduleNew: function () {
                var t = this;
                this.hasScheduledNew ||
                  ((this.hasScheduledNew = !0),
                  this.scheduleAfterInputsHaveUpdated(function () {
                    t.hasScheduledNew = !1;
                    const e = o.get();
                    void 0 !== this._internal.sourceCollection &&
                      e.set(this._internal.sourceCollection),
                      t.setCollection(e),
                      t.sendSignalOnOutput("created");
                  }));
              },
            },
          };
        t.exports = { node: r };
      },
      7538: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        var o = n(8750),
          r = n(266),
          s = {
            name: "CollectionRemove",
            docs: "https://docs.noodl.net/nodes/data/array/remove-from-array",
            displayNodeName: "Remove Object From Array",
            shortDesc:
              "A collection of models, mainly used together with a For Each Node.",
            category: "Data",
            usePortAsLabel: "collectionId",
            color: "data",
            initialize: function () {},
            inputs: {
              collectionId: {
                type: {
                  name: "string",
                  identifierOf: "CollectionName",
                  identifierDisplayName: "Array Ids",
                },
                displayName: "Array Id",
                group: "General",
                set: function (t) {
                  t instanceof r && (t = t.getId()), this.setCollectionID(t);
                },
              },
              modifyId: {
                type: { name: "string", allowConnectionsOnly: !0 },
                displayName: "Object Id",
                group: "Modify",
                set: function (t) {
                  this._internal.modifyId = t;
                },
              },
              remove: {
                displayName: "Do",
                group: "Actions",
                valueChangedToTrue: function () {
                  var t = this,
                    e = this._internal;
                  this.scheduleAfterInputsHaveUpdated(function () {
                    if (void 0 !== e.modifyId && void 0 !== e.collection) {
                      var n = o.get(e.modifyId);
                      e.collection.remove(n), t.sendSignalOnOutput("modified");
                    }
                  });
                },
              },
            },
            outputs: {
              modified: {
                group: "Events",
                type: "signal",
                displayName: "Done",
              },
            },
            prototypeExtensions: {
              setCollectionID: function (t) {
                this.setCollection(r.get(t));
              },
              setCollection: function (t) {
                this._internal.collection = t;
              },
            },
          };
        t.exports = { node: s };
      },
      3301: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        n(8750);
        var o = n(266),
          r = {
            name: "Collection2",
            docs: "https://docs.noodl.net/nodes/data/array/array-node",
            displayNodeName: "Array",
            shortDesc:
              "A collection of models, mainly used together with a For Each Node.",
            category: "Data",
            usePortAsLabel: "collectionId",
            color: "data",
            initialize: function () {
              var t = this,
                e = !1;
              (this._internal.collectionChangedCallback = function () {
                !0 !== t.isInputConnected("fetch") &&
                  (e ||
                    ((e = !0),
                    t.scheduleAfterInputsHaveUpdated(function () {
                      t.sendSignalOnOutput("changed"),
                        t.flagOutputDirty("count"),
                        (e = !1);
                    })));
              }),
                (this._internal.sourceCollectionChangedCallback = function () {
                  !0 !== t.isInputConnected("store") && t.scheduleCopyItems();
                });
            },
            getInspectInfo() {
              const t = this._internal.collection;
              return t
                ? [
                    { type: "text", value: "Id: " + t.getId() },
                    { type: "value", value: t.items },
                  ]
                : { type: "text", value: "[No Array]" };
            },
            inputs: {
              collectionId: {
                type: {
                  name: "string",
                  identifierOf: "CollectionName",
                  identifierDisplayName: "Array Ids",
                },
                displayName: "Id",
                group: "General",
                set: function (t) {
                  t instanceof o && (t = t.getId()),
                    (this._internal.collectionId = t),
                    !1 === this.isInputConnected("fetch")
                      ? this.setCollectionID(t)
                      : this.flagOutputDirty("id");
                },
              },
              items: {
                type: "array",
                group: "General",
                displayName: "Items",
                set: function (t) {
                  var e = this;
                  void 0 !== t &&
                    t !== this._internal.collection &&
                    ((this._internal.pendingSourceCollection = t),
                    !1 === this.isInputConnected("store") &&
                      this.scheduleAfterInputsHaveUpdated(function () {
                        e.setSourceCollection(t);
                      }));
                },
              },
              fetch: {
                displayName: "Fetch",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleSetCollection();
                },
              },
            },
            outputs: {
              id: {
                type: "string",
                displayName: "Id",
                group: "General",
                getter: function () {
                  return this._internal.collection
                    ? this._internal.collection.getId()
                    : this._internal.collectionId;
                },
              },
              items: {
                type: "array",
                displayName: "Items",
                group: "General",
                getter: function () {
                  return this._internal.collection;
                },
              },
              count: {
                type: "number",
                displayName: "Count",
                group: "General",
                getter: function () {
                  return this._internal.collection
                    ? this._internal.collection.size()
                    : 0;
                },
              },
              changed: {
                group: "Events",
                type: "signal",
                displayName: "Changed",
              },
              fetched: {
                group: "Events",
                type: "signal",
                displayName: "Fetched",
              },
            },
            prototypeExtensions: {
              setCollectionID: function (t) {
                this.setCollection(o.get(t));
              },
              setCollection: function (t) {
                this._internal.collection &&
                  this._internal.collection.off(
                    "change",
                    this._internal.collectionChangedCallback
                  ),
                  (this._internal.collection = t),
                  this.flagOutputDirty("id"),
                  t.on("change", this._internal.collectionChangedCallback),
                  this.flagOutputDirty("items"),
                  this.flagOutputDirty("count");
              },
              setSourceCollection: function (t) {
                var e = this._internal;
                e.sourceCollection &&
                  e.sourceCollection instanceof o &&
                  e.sourceCollection.off(
                    "change",
                    e.sourceCollectionChangedCallback
                  ),
                  (e.sourceCollection = t),
                  e.sourceCollection instanceof o &&
                    e.sourceCollection.on(
                      "change",
                      e.sourceCollectionChangedCallback
                    ),
                  this._copySourceItems();
              },
              scheduleSetCollection: function () {
                var t = this;
                this.hasScheduledSetCollection ||
                  ((this.hasScheduledSetCollection = !0),
                  this.scheduleAfterInputsHaveUpdated(function () {
                    (t.hasScheduledSetCollection = !1),
                      t.setCollectionID(t._internal.collectionId),
                      t.sendSignalOnOutput("fetched");
                  }));
              },
              scheduleStore: function () {
                var t = this;
                if (!this.hasScheduledStore) {
                  this.hasScheduledStore = !0;
                  var e = this._internal;
                  this.scheduleAfterInputsHaveUpdated(function () {
                    (t.hasScheduledStore = !1),
                      t.setSourceCollection(e.pendingSourceCollection);
                  });
                }
              },
              _copySourceItems: function () {
                var t = this._internal;
                void 0 === t.collection &&
                  !1 === this.isInputConnected("fetch") &&
                  this.setCollection(o.get()),
                  t.collection && t.collection.set(t.sourceCollection);
              },
              scheduleCopyItems: function () {
                var t = this;
                this._internal,
                  this.hasScheduledCopyItems ||
                    ((this.hasScheduledCopyItems = !0),
                    this.scheduleAfterInputsHaveUpdated(function () {
                      (t.hasScheduledCopyItems = !1), t._copySourceItems();
                    }));
              },
              _onNodeDeleted: function () {
                i.prototype._onNodeDeleted.call(this),
                  this._internal.collection &&
                    this._internal.collection.off(
                      "change",
                      this._internal.collectionChangedCallback
                    );
              },
            },
          };
        t.exports = { node: r };
      },
      7826: (t, e, n) => {
        const { Node: i, EdgeTriggeredInput: o } = n(5855),
          r = n(8750),
          s = n(266),
          a = n(1268),
          l = n(9406),
          u = n(6062);
        function p(t, e) {
          const n = Object.keys(t);
          if (0 === n.length) return {};
          if (1 !== n.length)
            return e.error(
              "Filter must only have one key found " + n.join(",")
            );
          const i = {},
            o = n[0];
          if (void 0 !== t.and && Array.isArray(t.and))
            i.$and = t.and.map((t) => p(t, e));
          else if (void 0 !== t.or && Array.isArray(t.or))
            i.$or = t.or.map((t) => p(t, e));
          else if (void 0 !== t.idEqualTo) i.objectId = { $eq: t.idEqualTo };
          else if (void 0 !== t.idContainedIn)
            i.objectId = { $in: t.idContainedIn };
          else if (void 0 !== t.relatedTo) {
            var s = t.relatedTo.id;
            if (void 0 === s)
              return e.error("Must provide id in relatedTo filter");
            var l = t.relatedTo.key;
            if (void 0 === l)
              return e.error("Must provide key in relatedTo filter");
            var u = r.get(s);
            i.$relatedTo = {
              object: { __type: "Pointer", objectId: s, className: u._class },
              key: l,
            };
          } else if ("object" == typeof t[o]) {
            const n = t[o];
            if (void 0 !== n.equalTo) i[o] = { $eq: n.equalTo };
            else if (void 0 !== n.notEqualTo) i[o] = { $ne: n.notEqualTo };
            else if (void 0 !== n.lessThan) i[o] = { $lt: n.lessThan };
            else if (void 0 !== n.greaterThan) i[o] = { $gt: n.greaterThan };
            else if (void 0 !== n.lessThanOrEqualTo)
              i[o] = { $lte: n.lessThanOrEqualTo };
            else if (void 0 !== n.greaterThanOrEqualTo)
              i[o] = { $gte: n.greaterThanOrEqualTo };
            else if (void 0 !== n.exists) i[o] = { $exists: n.exists };
            else if (void 0 !== n.containedIn) i[o] = { $in: n.containedIn };
            else if (void 0 !== n.notContainedIn)
              i[o] = { $nin: n.notContainedIn };
            else if (void 0 !== n.pointsTo) {
              if (((u = r.get(n.pointsTo)), a._collections[e.collectionName]))
                var c = a._collections[e.collectionName].schema;
              var d =
                c && c.properties && c.properties[o]
                  ? c.properties[o].targetClass
                  : void 0;
              "Relation" ===
              (c && c.properties && c.properties[o]
                ? c.properties[o].type
                : void 0)
                ? (i[o] = {
                    __type: "Pointer",
                    objectId: n.pointsTo,
                    className: d,
                  })
                : Array.isArray(n.pointsTo)
                ? (i[o] = {
                    $in: n.pointsTo.map((t) => ({
                      __type: "Pointer",
                      objectId: t,
                      className: d,
                    })),
                  })
                : (i[o] = {
                    $eq: {
                      __type: "Pointer",
                      objectId: n.pointsTo,
                      className: d,
                    },
                  });
            } else if (void 0 !== n.matchesRegex)
              i[o] = { $regex: n.matchesRegex, $options: n.options };
            else if (void 0 !== n.text && void 0 !== n.text.search) {
              var h = n.text.search;
              i[o] =
                "string" == typeof h
                  ? { $text: { $search: { $term: h, $caseSensitive: !1 } } }
                  : {
                      $text: {
                        $search: {
                          $term: h.term,
                          $language: h.language,
                          $caseSensitive: h.caseSensitive,
                          $diacriticSensitive: h.diacriticSensitive,
                        },
                      },
                    };
            }
          } else e.error("Unrecognized filter keys " + n.join(","));
          return i;
        }
        var c = {
          name: "DbCollection2",
          docs: "https://docs.noodl.net/nodes/data/cloud-data/query-records",
          displayName: "Query Records",
          category: "Cloud Services",
          usePortAsLabel: "collectionName",
          color: "data",
          initialize: function () {
            var t = this;
            this._internal.queryParameters = {};
            var e = !1;
            (this._internal.collectionChangedCallback = function () {
              e ||
                ((e = !0),
                t.scheduleAfterInputsHaveUpdated(function () {
                  t.flagOutputDirty("count"),
                    t.flagOutputDirty("firstItemId"),
                    (e = !1);
                }));
            }),
              (this._internal.cloudStoreEvents = function (e) {
                if (
                  !0 !== t.isInputConnected("storageFetch") &&
                  void 0 !== t._internal.collection &&
                  e.collection === t._internal.name
                )
                  if ("create" === e.type) {
                    const i = r.get(e.object.objectId);
                    void 0 !== i &&
                      u.matchesQuery(i, t._internal.currentQuery.where) &&
                      n(i);
                  } else if ("save" === e.type) {
                    const i = r.get(e.objectId);
                    if (void 0 !== i) {
                      const e = u.matchesQuery(
                        i,
                        t._internal.currentQuery.where
                      );
                      !e && t._internal.collection.contains(i)
                        ? (t._internal.collection.remove(i),
                          t.flagOutputDirty("count"),
                          t.flagOutputDirty("firstItemId"))
                        : e && !t._internal.collection.contains(i) && n(i);
                    }
                  } else if ("delete" === e.type) {
                    const n = r.get(e.objectId);
                    void 0 !== n &&
                      (t._internal.collection.remove(n),
                      t.flagOutputDirty("count"),
                      t.flagOutputDirty("firstItemId"));
                  }
                function n(e) {
                  if (void 0 !== t._internal.currentQuery.sort) {
                    for (
                      var n = 0;
                      n < t._internal.collection.size() &&
                      !(
                        u.compareObjects(
                          t._internal.currentQuery.sort,
                          t._internal.collection.get(n),
                          e
                        ) > 0
                      );
                      n++
                    );
                    t._internal.collection.addAtIndex(e, n);
                  } else t._internal.collection.add(e);
                  let i = t._internal.collection.size();
                  void 0 !== t._internal.currentQuery.limit &&
                    i > t._internal.currentQuery.limit &&
                    t._internal.collection.remove(
                      t._internal.collection.get(
                        void 0 !== t._internal.currentQuery.sort &&
                          "-" === t._internal.currentQuery.sort[0][0]
                          ? i - 1
                          : 0
                      )
                    ),
                    t.flagOutputDirty("count"),
                    t.flagOutputDirty("firstItemId");
                }
              }),
              a.instance.on("save", this._internal.cloudStoreEvents),
              a.instance.on("create", this._internal.cloudStoreEvents),
              a.instance.on("delete", this._internal.cloudStoreEvents),
              (this._internal.storageSettings = {});
          },
          getInspectInfo() {
            const t = this._internal.collection;
            return t
              ? [{ type: "value", value: t.items }]
              : { type: "text", value: "[Not executed yet]" };
          },
          inputs: {},
          outputs: {
            items: {
              type: "array",
              displayName: "Items",
              group: "General",
              getter: function () {
                return this._internal.collection;
              },
            },
            firstItemId: {
              type: "string",
              displayName: "First Record Id",
              group: "General",
              getter: function () {
                if (this._internal.collection) {
                  var t = this._internal.collection.get(0);
                  if (void 0 !== t) return t.getId();
                }
              },
            },
            count: {
              type: "number",
              displayName: "Count",
              group: "General",
              getter: function () {
                return this._internal.collection
                  ? this._internal.collection.size()
                  : 0;
              },
            },
            fetched: {
              group: "Events",
              type: "signal",
              displayName: "Success",
            },
            failure: {
              group: "Events",
              type: "signal",
              displayName: "Failure",
            },
            error: {
              type: "string",
              displayName: "Error",
              group: "Error",
              getter: function () {
                return this._internal.error;
              },
            },
          },
          prototypeExtensions: {
            setCollectionName: function (t) {
              (this._internal.name = t),
                !1 === this.isInputConnected("storageFetch") &&
                  this.scheduleFetch();
            },
            setCollection: function (t) {
              this.bindCollection(t),
                this.flagOutputDirty("firstItemId"),
                this.flagOutputDirty("items"),
                this.flagOutputDirty("count");
            },
            unbindCurrentCollection: function () {
              var t = this._internal.collection;
              t &&
                (t.off("change", this._internal.collectionChangedCallback),
                (this._internal.collection = void 0));
            },
            bindCollection: function (t) {
              this.unbindCurrentCollection(),
                (this._internal.collection = t),
                t && t.on("change", this._internal.collectionChangedCallback);
            },
            _onNodeDeleted: function () {
              i.prototype._onNodeDeleted.call(this),
                this.unbindCurrentCollection(),
                a.instance.off("insert", this._internal.cloudStoreEvents),
                a.instance.off("delete", this._internal.cloudStoreEvents),
                a.instance.off("save", this._internal.cloudStoreEvents);
            },
            setError: function (t) {
              (this._internal.err = t),
                this.flagOutputDirty("error"),
                this.sendSignalOnOutput("failure");
            },
            scheduleFetch: function () {
              var t = this._internal;
              t.fetchScheduled ||
                ((t.fetchScheduled = !0),
                this.scheduleAfterInputsHaveUpdated(() => {
                  (t.fetchScheduled = !1), this.fetch();
                }));
            },
            fetch: function () {
              this.context.editorConnection &&
                (void 0 === this._internal.name
                  ? this.context.editorConnection.sendWarning(
                      this.nodeScope.componentOwner.name,
                      this.id,
                      "query-collection",
                      { message: "No collection specified for query" }
                    )
                  : this.context.editorConnection.clearWarning(
                      this.nodeScope.componentOwner.name,
                      this.id,
                      "query-collection"
                    ));
              const t = s.get(),
                e = this.getStorageFilter(),
                n = this.getStorageLimit(),
                i = this.getStorageSkip();
              (this._internal.currentQuery = {
                where: e.where,
                sort: e.sort,
                limit: n,
                skip: i,
              }),
                a.instance.query({
                  collection: this._internal.name,
                  where: e.where,
                  sort: e.sort,
                  limit: n,
                  skip: i,
                  success: (e) => {
                    void 0 !== e &&
                      t.set(e.map((t) => a._fromJSON(t, this._internal.name))),
                      this.setCollection(t),
                      this.sendSignalOnOutput("fetched");
                  },
                  error: (e) => {
                    this.setCollection(t),
                      this.setError(e || "Failed to fetch.");
                  },
                });
            },
            getStorageFilter: function () {
              const t = this._internal.storageSettings;
              if (
                void 0 === t.storageFilterType ||
                "simple" === t.storageFilterType
              )
                return {
                  where:
                    void 0 !== this._internal.visualFilter
                      ? u.convertVisualFilter(this._internal.visualFilter, {
                          queryParameters: this._internal.queryParameters,
                          collectionName: this._internal.name,
                        })
                      : void 0,
                  sort:
                    void 0 !== this._internal.visualSorting
                      ? u.convertVisualSorting(this._internal.visualSorting)
                      : void 0,
                };
              if ("json" === t.storageFilterType) {
                if (!this._internal.filterFunc)
                  try {
                    var e = t.storageJSONFilter;
                    (e = e.replace(/\/\*[\s\S]*?\*\/|\/\/.*/g, "")),
                      (this._internal.filterVariables =
                        e.match(/\$[A-Za-z0-9]+/g) || []);
                    var n = ["filter", "where", "sort", "Inputs"]
                      .concat(this._internal.filterVariables)
                      .concat([e]);
                    this._internal.filterFunc = Function.apply(null, n);
                  } catch (t) {
                    (this._internal.filterFunc = void 0),
                      console.log("Error while parsing filter script: " + t);
                  }
                if (!this._internal.filterFunc) return;
                var i = {},
                  o = [],
                  r = this,
                  s = function (t) {
                    i = p(t, {
                      collectionName: r._internal.name,
                      error: function (t) {
                        r.context.editorConnection.sendWarning(
                          r.nodeScope.componentOwner.name,
                          r.id,
                          "query-collection-filter",
                          { message: t }
                        );
                      },
                    });
                  };
                const l = {};
                for (let e in t)
                  e.startsWith("storageFilterValue-") &&
                    (l[e.substring("storageFilterValue-".length)] = t[e]);
                var a = [
                  s,
                  s,
                  function (t) {
                    o = t;
                  },
                  l,
                ];
                this._internal.filterVariables.forEach((e) => {
                  a.push(t["storageFilterValue-" + e.substring(1)]);
                });
                try {
                  this._internal.filterFunc.apply(this, a);
                } catch (t) {
                  console.log("Error while running filter script: " + t);
                }
                return { where: i, sort: o };
              }
            },
            getStorageLimit: function () {
              const t = this._internal.storageSettings;
              return t.storageEnableLimit ? t.storageLimit || 10 : void 0;
            },
            getStorageSkip: function () {
              const t = this._internal.storageSettings;
              return t.storageEnableLimit ? t.storageSkip || 0 : void 0;
            },
            registerOutputIfNeeded: function (t) {
              this.hasOutput(t) ||
                this.registerOutput(t, { getter: d.bind(this, t) });
            },
            setVisualFilter: function (t) {
              (this._internal.visualFilter = t),
                !1 === this.isInputConnected("storageFetch") &&
                  this.scheduleFetch();
            },
            setVisualSorting: function (t) {
              (this._internal.visualSorting = t),
                !1 === this.isInputConnected("storageFetch") &&
                  this.scheduleFetch();
            },
            setQueryParameter: function (t, e) {
              (this._internal.queryParameters[t] = e),
                !1 === this.isInputConnected("storageFetch") &&
                  this.scheduleFetch();
            },
            registerInputIfNeeded: function (t) {
              if (this.hasInput(t)) return;
              if (t.startsWith("qp-"))
                return this.registerInput(t, {
                  set: this.setQueryParameter.bind(
                    this,
                    t.substring("qp-".length)
                  ),
                });
              const e = { storageFetch: this.scheduleFetch.bind(this) };
              if (e[t])
                return this.registerInput(t, {
                  set: o.createSetter({ valueChangedToTrue: e[t] }),
                });
              const n = {
                collectionName: this.setCollectionName.bind(this),
                visualFilter: this.setVisualFilter.bind(this),
                visualSort: this.setVisualSorting.bind(this),
              };
              if (n[t]) return this.registerInput(t, { set: n[t] });
              this.registerInput(t, { set: h.bind(this, t) });
            },
          },
        };
        function d(t) {
          return this._internal.storageSettings[t];
        }
        function h(t, e) {
          (this._internal.storageSettings[t] = e),
            !1 === this.isInputConnected("storageFetch") &&
              this.scheduleFetch();
        }
        function f(t, e, n, i) {
          var o = [];
          const r = i.getMetaData("dbCollections"),
            s = i.getMetaData("systemCollections");
          if (
            (o.push({
              name: "collectionName",
              type: {
                name: "enum",
                enums: [
                  { label: "User", value: "_User" },
                  { label: "Role", value: "_Role" },
                ].concat(
                  void 0 !== r
                    ? r.map((t) => ({ value: t.name, label: t.name }))
                    : []
                ),
                allowEditOnly: !0,
              },
              displayName: "Class",
              plug: "input",
              group: "General",
            }),
            o.push({
              name: "storageFilterType",
              type: {
                name: "enum",
                allowEditOnly: !0,
                enums: [
                  { value: "simple", label: "Visual" },
                  { value: "json", label: "Javascript" },
                ],
              },
              displayName: "Filter",
              default: "simple",
              plug: "input",
              group: "General",
            }),
            o.push({
              type: "boolean",
              plug: "input",
              group: "Limit",
              name: "storageEnableLimit",
              displayName: "Use limit",
            }),
            e.storageEnableLimit &&
              (o.push({
                type: "number",
                default: 10,
                plug: "input",
                group: "Limit",
                name: "storageLimit",
                displayName: "Limit",
              }),
              o.push({
                type: "number",
                default: 0,
                plug: "input",
                group: "Limit",
                name: "storageSkip",
                displayName: "Skip",
              })),
            o.push({
              type: "signal",
              plug: "input",
              group: "Actions",
              name: "storageFetch",
              displayName: "Do",
            }),
            void 0 === e.storageFilterType || "simple" === e.storageFilterType)
          ) {
            if (void 0 !== e.collectionName) {
              var a = r.find((t) => t.name === e.collectionName);
              if (
                (void 0 === a &&
                  s &&
                  (a = s.find((t) => t.name === e.collectionName)),
                a && a.schema && a.schema.properties)
              ) {
                const t = JSON.parse(JSON.stringify(a.schema));
                function u(n) {
                  if (void 0 !== n.schema && void 0 !== n.schema.properties)
                    for (var i in n.schema.properties) {
                      var o = n.schema.properties[i];
                      "Relation" === o.type &&
                        o.targetClass === e.collectionName &&
                        (void 0 === t.relations && (t.relations = {}),
                        void 0 === t.relations[n.name] &&
                          (t.relations[n.name] = []),
                        t.relations[n.name].push({ property: i }));
                    }
                }
                r.forEach(u),
                  s.forEach(u),
                  o.push({
                    name: "visualFilter",
                    plug: "input",
                    type: {
                      name: "query-filter",
                      schema: t,
                      allowEditOnly: !0,
                    },
                    displayName: "Filter",
                    group: "Filter",
                  }),
                  o.push({
                    name: "visualSort",
                    plug: "input",
                    type: {
                      name: "query-sorting",
                      schema: t,
                      allowEditOnly: !0,
                    },
                    displayName: "Sort",
                    group: "Sorting",
                  });
              }
              if (void 0 !== e.visualFilter) {
                const t = {};
                !(function e(n) {
                  void 0 !== n &&
                    (void 0 !== n.rules
                      ? n.rules.forEach((t) => e(t))
                      : void 0 !== n.input && (t[n.input] = !0));
                })(e.visualFilter),
                  Object.keys(t).forEach((t) => {
                    o.push({
                      name: "qp-" + t,
                      plug: "input",
                      type: "*",
                      displayName: t,
                      group: "Query Parameters",
                    });
                  });
              }
            }
          } else if ("json" === e.storageFilterType) {
            o.push({
              type: {
                name: "string",
                allowEditOnly: !0,
                codeeditor: "javascript",
              },
              plug: "input",
              group: "Filter",
              name: "storageJSONFilter",
              default:
                "// Write your query script here, check out the reference documentation for examples\nwhere({ })\n",
              displayName: "Filter",
            });
            var p = e.storageJSONFilter;
            if (p) {
              var c = (p = p.replace(/\/\*[\s\S]*?\*\/|\/\/.*/g, "")).match(
                /\$[A-Za-z0-9]+/g
              );
              if (c) {
                const t = {};
                c.forEach((e) => {
                  t[e] = !0;
                }),
                  Object.keys(t).forEach((t) => {
                    o.push({
                      name: "storageFilterValue-" + t.substring(1),
                      displayName: t.substring(1),
                      group: "Filter Values",
                      plug: "input",
                      type: { name: "*", allowConnectionsOnly: !0 },
                    });
                  });
              }
              l.parseAndAddPortsFromScript(p, o, {
                inputPrefix: "storageFilterValue-",
                inputGroup: "Filter Values",
                inputType: { name: "*", allowConnectionsOnly: !0 },
                skipOutputs: !0,
              });
            }
          }
          n.sendDynamicPorts(t, o);
        }
        t.exports = {
          node: c,
          setup: function (t, e) {
            function n(n) {
              f(n.id, n.parameters, t.editorConnection, e),
                n.on("parameterUpdated", function (i) {
                  (i.name.startsWith("storage") ||
                    "visualFilter" === i.name ||
                    "collectionName" === i.name) &&
                    f(n.id, n.parameters, t.editorConnection, e);
                }),
                e.on("metadataChanged.dbCollections", function (i) {
                  f(n.id, n.parameters, t.editorConnection, e);
                }),
                e.on("metadataChanged.systemCollections", function (i) {
                  f(n.id, n.parameters, t.editorConnection, e);
                }),
                e.on("metadataChanged.cloudservices", function (t) {
                  a.instance._initCloudServices();
                });
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.DbCollection2", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("DbCollection2")) n(t);
              });
          },
        };
      },
      8478: (t, e, n) => {
        "use strict";
        const i = n(8750),
          o = n(3335);
        t.exports = {
          addInputProperties: function (t) {
            var e = { node: Object.assign({}, t.node), setup: t.setup },
              n = Object.assign({}, t.node.methods);
            Object.assign(t.node, {
              inputs: t.node.inputs || {},
              outputs: t.node.outputs || {},
              methods: t.node.methods || {},
            }),
              Object.assign(t.node, {
                initialize: function () {
                  (this._internal.inputValues = {}),
                    e.node.initialize && e.node.initialize.call(this);
                },
              }),
              Object.assign(t.node.outputs, {}),
              Object.assign(t.node.inputs, {}),
              Object.assign(t.node.methods, {
                registerInputIfNeeded: function (t) {
                  this.hasInput(t) ||
                    (t.startsWith("prop-") &&
                      this.registerInput(t, {
                        set: this._setInputValue.bind(
                          this,
                          t.substring("prop-".length)
                        ),
                      }),
                    n &&
                      n.registerInputIfNeeded &&
                      n.registerInputIfNeeded.call(this, t));
                },
                _setInputValue: function (t, e) {
                  this._internal.inputValues[t] = e;
                },
              });
          },
          addModelId: function (t, e) {
            Object.assign({}, t.node), t.setup;
            var n = Object.assign({}, t.node.methods);
            const o = void 0 === e || e.includeInputs,
              r = void 0 === e || e.includeOutputs;
            Object.assign(t.node, {
              inputs: t.node.inputs || {},
              outputs: t.node.outputs || {},
              methods: t.node.methods || {},
            }),
              o &&
                (Object.assign(t.node, { usePortAsLabel: "collectionName" }),
                (t.node.dynamicports = (t.node.dynamicports || []).concat([
                  {
                    name: "conditionalports/extended",
                    condition: "idSource = explicit OR idSource NOT SET",
                    inputs: ["modelId"],
                  },
                ])),
                Object.assign(t.node.inputs, {
                  idSource: {
                    type: {
                      name: "enum",
                      enums: [
                        { label: "Specify explicitly", value: "explicit" },
                        { label: "From repeater", value: "foreach" },
                      ],
                      allowEditOnly: !0,
                    },
                    default: "explicit",
                    displayName: "Id Source",
                    group: "General",
                    tooltip:
                      "Choose if you want to specify the Id explicitly, \n or if you want it to be that of the current record in a repeater.",
                    set: function (t) {
                      "foreach" === t &&
                        this.scheduleAfterInputsHaveUpdated(() => {
                          for (
                            var t = this.nodeScope.componentOwner;
                            void 0 !== t &&
                            void 0 === t._forEachModel &&
                            t.parentNodeScope;

                          )
                            t = t.parentNodeScope.componentOwner;
                          this.setModel(
                            void 0 !== t ? t._forEachModel : void 0
                          );
                        });
                    },
                  },
                  modelId: {
                    type: {
                      name: "string",
                      identifierOf: "ModelName",
                      identifierDisplayName: "Object Ids",
                    },
                    displayName: "Id",
                    group: "General",
                    set: function (t) {
                      t instanceof i && (t = t.getId()),
                        (this._internal.modelId = t),
                        this.setModelID(t);
                    },
                  },
                })),
              r &&
                Object.assign(t.node.outputs, {
                  id: {
                    type: "string",
                    displayName: "Id",
                    group: "General",
                    getter: function () {
                      return this._internal.model
                        ? this._internal.model.getId()
                        : this._internal.modelId;
                    },
                  },
                }),
              Object.assign(t.node.methods, {
                setCollectionID: function (t) {
                  (this._internal.collectionId = t), this.clearWarnings();
                },
                setModelID: function (t) {
                  var e = i.get(t);
                  this.setModel(e);
                },
                setModel: function (t) {
                  (this._internal.model = t), this.flagOutputDirty("id");
                },
                registerInputIfNeeded: function (t) {
                  this.hasInput(t) ||
                    ("collectionName" === t &&
                      this.registerInput(t, {
                        set: this.setCollectionID.bind(this),
                      }),
                    n &&
                      n.registerInputIfNeeded &&
                      n.registerInputIfNeeded.call(this, t));
                },
              });
          },
          addBaseInfo: function (t, e) {
            const n = void 0 === e || e.includeInputProperties,
              i = void 0 !== e && e.includeRelations;
            Object.assign(t.node, {
              category: "Data",
              color: "data",
              inputs: t.node.inputs || {},
              outputs: t.node.outputs || {},
              methods: t.node.methods || {},
            }),
              Object.assign(t.node.outputs, {
                failure: {
                  type: "signal",
                  displayName: "Failure",
                  group: "Events",
                },
                error: {
                  type: "string",
                  displayName: "Error",
                  group: "Error",
                  getter: function () {
                    return this._internal.error;
                  },
                },
              }),
              Object.assign(t.node.methods, {
                scheduleOnce: function (t, e) {
                  const n = this,
                    i = "hasScheduled" + t;
                  this._internal[i] ||
                    ((this._internal[i] = !0),
                    this.scheduleAfterInputsHaveUpdated(function () {
                      (n._internal[i] = !1), e();
                    }));
                },
                checkWarningsBeforeCloudOp() {
                  return (
                    this.clearWarnings(),
                    !!this._internal.collectionId ||
                      (this.setError("No class name specified"), !1)
                  );
                },
                setError: function (t) {
                  (this._internal.error = t),
                    this.flagOutputDirty("error"),
                    this.sendSignalOnOutput("failure"),
                    this.context.editorConnection &&
                      this.context.editorConnection.sendWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "storage-op-warning",
                        { message: t, showGlobally: !0 }
                      );
                },
                clearWarnings() {
                  this.context.editorConnection &&
                    this.context.editorConnection.clearWarning(
                      this.nodeScope.componentOwner.name,
                      this.id,
                      "storage-op-warning"
                    );
                },
              }),
              Object.assign(t, {
                setup: function (e, o) {
                  function r(r) {
                    function s() {
                      var s = [];
                      const a = o.getMetaData("dbCollections"),
                        l = o.getMetaData("systemCollections"),
                        u = r.parameters;
                      if (
                        (s.push({
                          name: "collectionName",
                          displayName: "Class",
                          group: "General",
                          type: {
                            name: "enum",
                            enums: [
                              { label: "User", value: "_User" },
                              { label: "Role", value: "_Role" },
                            ].concat(
                              void 0 !== a
                                ? a.map((t) => ({
                                    value: t.name,
                                    label: t.name,
                                  }))
                                : []
                            ),
                            allowEditOnly: !0,
                          },
                          plug: "input",
                        }),
                        i &&
                          u.collectionName &&
                          a &&
                          (void 0 ===
                            (p = a.find((t) => t.name === u.collectionName)) &&
                            l &&
                            (p = l.find((t) => t.name === u.collectionName)),
                          p && p.schema && p.schema.properties))
                      ) {
                        const t = p.schema.properties,
                          e = Object.keys(t)
                            .filter((e) => "Relation" === t[e].type)
                            .map((t) => ({ label: t, value: t }));
                        s.push({
                          name: "relationProperty",
                          displayName: "Relation",
                          group: "General",
                          type: { name: "enum", enums: e, allowEditOnly: !0 },
                          plug: "input",
                        });
                      }
                      if (n && u.collectionName && a) {
                        const t = {
                          String: "string",
                          Boolean: "boolean",
                          Number: "number",
                          Date: "date",
                        };
                        var p;
                        if (
                          (void 0 ===
                            (p = a.find((t) => t.name === u.collectionName)) &&
                            l &&
                            (p = l.find((t) => t.name === u.collectionName)),
                          p && p.schema && p.schema.properties)
                        ) {
                          var c = p.schema.properties;
                          for (var d in c) {
                            var h = c[d];
                            s.find((t) => t.name === d) ||
                              s.push({
                                type: { name: t[h.type] ? t[h.type] : "*" },
                                plug: "input",
                                group: "Properties",
                                name: "prop-" + d,
                                displayName: d,
                              });
                          }
                        }
                      }
                      t._additionalDynamicPorts &&
                        t._additionalDynamicPorts(r, s, o),
                        e.editorConnection.sendDynamicPorts(r.id, s);
                    }
                    s(),
                      r.on("parameterUpdated", function (t) {
                        s();
                      }),
                      o.on("metadataChanged.dbCollections", function (t) {
                        s();
                      }),
                      o.on("metadataChanged.systemCollections", function (t) {
                        s();
                      });
                  }
                  e.editorConnection &&
                    e.editorConnection.isRunningLocally() &&
                    o.on("editorImportComplete", () => {
                      o.on("nodeAdded." + t.node.name, function (t) {
                        r(t);
                      });
                      for (const e of o.getNodesWithType(t.node.name)) r(e);
                    });
                },
              });
          },
          addRelationProperty: function (t) {
            Object.assign({}, t.node), t.setup;
            var e = Object.assign({}, t.node.methods);
            Object.assign(t.node, {
              inputs: t.node.inputs || {},
              outputs: t.node.outputs || {},
              methods: t.node.methods || {},
            }),
              Object.assign(t.node.inputs, {
                targetId: {
                  type: { name: "string", allowConnectionsOnly: !0 },
                  displayName: "Target Record Id",
                  group: "General",
                  set: function (t) {
                    this._internal.targetModelId = t;
                  },
                },
              }),
              Object.assign(t.node.methods, {
                registerInputIfNeeded: function (t) {
                  this.hasInput(t) ||
                    ("relationProperty" === t &&
                      this.registerInput(t, {
                        set: this.setRelationProperty.bind(this),
                      }),
                    e &&
                      e.registerInputIfNeeded &&
                      e.registerInputIfNeeded.call(this, t));
                },
                setRelationProperty: function (t) {
                  this._internal.relationProperty = t;
                },
              });
          },
          addAccessControl: function (t) {
            var e = { node: Object.assign({}, t.node), setup: t.setup },
              n = Object.assign({}, t.node.methods);
            Object.assign(t.node, {
              inputs: t.node.inputs || {},
              outputs: t.node.outputs || {},
              methods: t.node.methods || {},
            }),
              Object.assign(t.node, {
                initialize: function () {
                  (this._internal.accessControl = {}),
                    e.node.initialize && e.node.initialize.call(this);
                },
              }),
              Object.assign(t.node.inputs, {
                accessControl: {
                  type: {
                    name: "proplist",
                    autoName: "Rule",
                    allowEditOnly: !0,
                  },
                  index: 1e3,
                  displayName: "Access Control Rules",
                  group: "Access Control Rules",
                  set: function (t) {
                    this._internal.accessControlRules = t;
                  },
                },
              });
            const i = t._additionalDynamicPorts;
            (t._additionalDynamicPorts = function (t, e, n) {
              void 0 !== t.parameters.accessControl &&
                t.parameters.accessControl.length > 0 &&
                t.parameters.accessControl.forEach((n) => {
                  const i = "acl-" + n.id;
                  e.push({
                    name: i + "-target",
                    displayName: "Target",
                    editorName: n.label + " | Target",
                    plug: "input",
                    type: {
                      name: "enum",
                      enums: [
                        { value: "user", label: "User" },
                        { value: "everyone", label: "Everyone" },
                        { value: "role", label: "Role" },
                      ],
                      allowEditOnly: !0,
                    },
                    group: n.label + " Access Rule",
                    default: "user",
                    parent: "accessControl",
                    parentItemId: n.id,
                  }),
                    "role" === t.parameters[i + "-target"]
                      ? e.push({
                          name: i + "-role",
                          displayName: "Role",
                          editorName: n.label + " | Role",
                          group: n.label + " Access Rule",
                          plug: "input",
                          type: "string",
                          parent: "accessControl",
                          parentItemId: n.id,
                        })
                      : (void 0 !== t.parameters[i + "-target"] &&
                          "user" !== t.parameters[i + "-target"]) ||
                        e.push({
                          name: i + "-userid",
                          displayName: "User Id",
                          group: n.label + " Access Rule",
                          editorName: n.label + " | User Id",
                          plug: "input",
                          type: { name: "string", allowConnectionsOnly: !0 },
                          parent: "accessControl",
                          parentItemId: n.id,
                        }),
                    e.push({
                      name: i + "-read",
                      displayName: "Read",
                      editorName: n.label + " | Read",
                      group: n.label + " Access Rule",
                      plug: "input",
                      type: { name: "boolean" },
                      default: !0,
                      parent: "accessControl",
                      parentItemId: n.id,
                    }),
                    e.push({
                      name: i + "-write",
                      displayName: "Write",
                      editorName: n.label + " | Write",
                      group: n.label + " Access Rule",
                      plug: "input",
                      type: { name: "boolean" },
                      default: !0,
                      parent: "accessControl",
                      parentItemId: n.id,
                    });
                }),
                i && i(t, e, n);
            }),
              Object.assign(t.node.methods, {
                registerInputIfNeeded: function (t) {
                  this.hasInput(t) ||
                    (t.startsWith("acl-") &&
                      this.registerInput(t, {
                        set: this.setAccessControl.bind(this, t),
                      }),
                    n &&
                      n.registerInputIfNeeded &&
                      n.registerInputIfNeeded.call(this, t));
                },
                _getACL: function () {
                  let t = {};
                  function e(t) {
                    return {
                      read: void 0 === t.read || t.read,
                      write: void 0 === t.write || t.write,
                    };
                  }
                  const n = o.instance.getCurrentUser();
                  return (
                    void 0 !== this._internal.accessControlRules &&
                      this._internal.accessControlRules.forEach((i) => {
                        const o = this._internal.accessControl[i.id];
                        if (void 0 === o) {
                          const e = void 0 !== n ? n.objectId : void 0;
                          void 0 !== e && (t[e] = { write: !0, read: !0 });
                        } else if ("everyone" === o.target) t["*"] = e(o);
                        else if ("user" === o.target) {
                          const i =
                            o.userid || (void 0 !== n ? n.objectId : void 0);
                          t[i] = e(o);
                        } else
                          "role" === o.target && (t["role:" + o.role] = e(o));
                      }),
                    Object.keys(t).length > 0 ? t : void 0
                  );
                },
                setAccessControl: function (t, e) {
                  const n = t.split("-");
                  void 0 === this._internal.accessControl[n[1]] &&
                    (this._internal.accessControl[n[1]] = {}),
                    (this._internal.accessControl[n[1]][n[2]] = e);
                },
              });
          },
        };
      },
      7928: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        var o = n(8750),
          r = n(8478);
        const s = n(1268);
        var a = {
          node: {
            name: "AddDbModelRelation",
            docs: "https://docs.noodl.net/nodes/data/cloud-data/add-record-relation",
            displayNodeName: "Add Record Relation",
            usePortAsLabel: "collectionName",
            inputs: {
              store: {
                displayName: "Do",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleAddRelation();
                },
              },
            },
            outputs: {
              relationAdded: {
                type: "signal",
                displayName: "Success",
                group: "Events",
              },
            },
            methods: {
              validateInputs: function () {
                if (!this.context.editorConnection) return;
                const t = (t) => {
                  this.context.editorConnection.sendWarning(
                    this.nodeScope.componentOwner.name,
                    this.id,
                    "add-relation",
                    { message: t }
                  );
                };
                void 0 === this._internal.collectionId
                  ? t("No class specified")
                  : void 0 === this._internal.relationProperty
                  ? t("No relation property specified")
                  : void 0 === this._internal.targetModelId
                  ? t(
                      "No target record Id (the record to add a relation to) specified"
                    )
                  : void 0 === this._internal.model
                  ? t(
                      "No record Id specified (the record that should get the relation)"
                    )
                  : this.context.editorConnection.clearWarning(
                      this.nodeScope.componentOwner.name,
                      this.id,
                      "add-relation"
                    );
              },
              scheduleAddRelation: function (t) {
                const e = this,
                  n = this._internal;
                this.scheduleOnce("StorageAddRelation", function () {
                  if ((e.validateInputs(), n.model)) {
                    var t = n.model,
                      i = n.targetModelId;
                    void 0 !== i &&
                      s.instance.addRelation({
                        collection: n.collectionId,
                        objectId: t.getId(),
                        key: n.relationProperty,
                        targetObjectId: i,
                        targetClass: o.get(i)._class,
                        success: function (n) {
                          for (var i in n) t.set(i, n[i]);
                          e.sendSignalOnOutput("relationAdded");
                        },
                        error: function (t) {
                          e.setError(t || "Failed to add relation.");
                        },
                      });
                  }
                });
              },
            },
          },
        };
        r.addBaseInfo(a, { includeRelations: !0 }),
          r.addModelId(a),
          r.addRelationProperty(a),
          (t.exports = a);
      },
      5222: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        var o = n(8750),
          r = n(8478);
        const s = n(1268);
        var a = {
          node: {
            name: "RemoveDbModelRelation",
            docs: "https://docs.noodl.net/nodes/data/cloud-data/remove-record-relation",
            displayName: "Remove Record Relation",
            usePortAsLabel: "collectionName",
            inputs: {
              store: {
                displayName: "Do",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleRemoveRelation();
                },
              },
            },
            outputs: {
              relationRemoved: {
                type: "signal",
                displayName: "Success",
                group: "Events",
              },
            },
            methods: {
              validateInputs: function () {
                if (!this.context.editorConnection) return;
                const t = (t) => {
                  this.context.editorConnection.sendWarning(
                    this.nodeScope.componentOwner.name,
                    this.id,
                    "add-relation",
                    { message: t }
                  );
                };
                void 0 === this._internal.collectionId
                  ? t("No class specified")
                  : void 0 === this._internal.relationProperty
                  ? t("No relation property specified")
                  : void 0 === this._internal.targetModelId
                  ? t(
                      "No target record Id (the record to add a relation to) specified"
                    )
                  : void 0 === this._internal.model
                  ? t(
                      "No record Id specified (the record that should get the relation)"
                    )
                  : this.context.editorConnection.clearWarning(
                      this.nodeScope.componentOwner.name,
                      this.id,
                      "add-relation"
                    );
              },
              scheduleRemoveRelation: function (t) {
                const e = this,
                  n = this._internal;
                this.scheduleOnce("StorageRemoveRelation", function () {
                  if ((e.validateInputs(), n.model)) {
                    var t = n.model,
                      i = n.targetModelId;
                    void 0 !== i &&
                      s.instance.removeRelation({
                        collection: n.collectionId,
                        objectId: t.getId(),
                        key: n.relationProperty,
                        targetObjectId: i,
                        targetClass: o.get(i)._class,
                        success: function (n) {
                          for (var i in n) t.set(i, n[i]);
                          e.sendSignalOnOutput("relationRemoved");
                        },
                        error: function (t) {
                          e.setError(t || "Failed to remove relation.");
                        },
                      });
                  }
                });
              },
            },
          },
        };
        r.addBaseInfo(a, { includeRelations: !0 }),
          r.addModelId(a),
          r.addRelationProperty(a),
          (t.exports = a);
      },
      874: (t, e, n) => {
        "use strict";
        const { Node: i, EdgeTriggeredInput: o } = n(5855);
        n(2307);
        var r = n(8750);
        const s = n(1268);
        var a = {
          name: "DbModel2",
          docs: "https://docs.noodl.net/nodes/data/cloud-data/record",
          displayNodeName: "Record",
          shortDesc: "Database model",
          category: "Cloud Services",
          usePortAsLabel: "collectionName",
          color: "data",
          dynamicports: [
            {
              name: "conditionalports/extended",
              condition: "idSource = explicit OR idSource NOT SET",
              inputs: ["modelId"],
            },
          ],
          initialize: function () {
            var t = this._internal;
            (t.inputValues = {}), (t.relationModelIds = {});
            var e = this;
            this._internal.onModelChangedCallback = function (t) {
              e.isInputConnected("fetch") ||
                (e.hasOutput("prop-" + t.name) &&
                  e.flagOutputDirty("prop-" + t.name),
                e.hasOutput("changed-" + t.name) &&
                  e.sendSignalOnOutput("changed-" + t.name),
                e.sendSignalOnOutput("changed"));
            };
          },
          getInspectInfo() {
            const t = this._internal.model;
            return t
              ? [
                  { type: "text", value: "Id: " + t.getId() },
                  { type: "value", value: t.data },
                ]
              : "[No Record]";
          },
          outputs: {
            id: {
              type: "string",
              displayName: "Id",
              group: "General",
              getter: function () {
                return this._internal.model
                  ? this._internal.model.getId()
                  : this._internal.modelId;
              },
            },
            fetched: {
              type: "signal",
              displayName: "Fetched",
              group: "Events",
            },
            changed: {
              type: "signal",
              displayName: "Changed",
              group: "Events",
            },
            failure: {
              type: "signal",
              displayName: "Failure",
              group: "Events",
            },
            error: {
              type: "string",
              displayName: "Error",
              group: "Error",
              getter: function () {
                return this._internal.error;
              },
            },
          },
          inputs: {
            idSource: {
              type: {
                name: "enum",
                enums: [
                  { label: "Specify explicitly", value: "explicit" },
                  { label: "From repeater", value: "foreach" },
                ],
                allowEditOnly: !0,
              },
              default: "explicit",
              displayName: "Id Source",
              group: "General",
              set: function (t) {
                "foreach" === t &&
                  this.scheduleAfterInputsHaveUpdated(() => {
                    for (
                      var t = this.nodeScope.componentOwner;
                      void 0 !== t &&
                      void 0 === t._forEachModel &&
                      t.parentNodeScope;

                    )
                      t = t.parentNodeScope.componentOwner;
                    this.setModel(void 0 !== t ? t._forEachModel : void 0);
                  });
              },
            },
            modelId: {
              type: { name: "string", allowConnectionsOnly: !0 },
              displayName: "Id",
              group: "General",
              set: function (t) {
                t instanceof r && (t = t.getId()),
                  (this._internal.modelId = t),
                  !1 === this.isInputConnected("fetch")
                    ? this.setModelID(t)
                    : this.flagOutputDirty("id");
              },
            },
            fetch: {
              displayName: "Fetch",
              group: "Actions",
              valueChangedToTrue: function () {
                this.scheduleFetch();
              },
            },
          },
          methods: {
            setCollectionID: function (t) {
              this._internal.collectionId = t;
            },
            setModelID: function (t) {
              var e = r.get(t);
              this.setModel(e);
            },
            setModel: function (t) {
              for (var e in (this._internal.model &&
                this._internal.model.off(
                  "change",
                  this._internal.onModelChangedCallback
                ),
              (this._internal.model = t),
              this.flagOutputDirty("id"),
              t.on("change", this._internal.onModelChangedCallback),
              t.data))
                this.hasOutput("prop-" + e) &&
                  this.flagOutputDirty("prop-" + e);
              this.sendSignalOnOutput("fetched");
            },
            _onNodeDeleted: function () {
              i.prototype._onNodeDeleted.call(this),
                this._internal.model &&
                  this._internal.model.off(
                    "change",
                    this._internal.onModelChangedCallback
                  );
            },
            scheduleOnce: function (t, e) {
              const n = this,
                i = "hasScheduled" + t;
              this._internal[i] ||
                ((this._internal[i] = !0),
                this.scheduleAfterInputsHaveUpdated(function () {
                  (n._internal[i] = !1), e();
                }));
            },
            setError: function (t) {
              (this._internal.error = t),
                this.flagOutputDirty("error"),
                this.sendSignalOnOutput("failure"),
                this.context.editorConnection &&
                  this.context.editorConnection.sendWarning(
                    this.nodeScope.componentOwner.name,
                    this.id,
                    "storage-op-warning",
                    { message: t, showGlobally: !0 }
                  );
            },
            clearWarnings() {
              this.context.editorConnection &&
                this.context.editorConnection.clearWarning(
                  this.nodeScope.componentOwner.name,
                  this.id,
                  "storage-op-warning"
                );
            },
            scheduleFetch: function () {
              var t = this;
              const e = this._internal;
              this.scheduleOnce("Fetch", function () {
                void 0 !== e.modelId &&
                  "" !== e.modelId &&
                  s.instance.fetch({
                    collection: e.collectionId,
                    objectId: e.modelId,
                    success: function (n) {
                      var i = s._fromJSON(n, e.collectionId);
                      for (var o in (e.model !== i &&
                        (e.model &&
                          e.model.off("change", e.onModelChangedCallback),
                        (e.model = i),
                        i.on("change", e.onModelChangedCallback)),
                      t.flagOutputDirty("id"),
                      delete n.objectId,
                      n))
                        t.hasOutput("prop-" + o) &&
                          t.flagOutputDirty("prop-" + o);
                      t.sendSignalOnOutput("fetched");
                    },
                    error: function (e) {
                      t.setError(e || "Failed to fetch.");
                    },
                  });
              });
            },
            scheduleStore: function () {
              var t = this._internal;
              t.model &&
                this.scheduleOnce("Store", function () {
                  for (var e in t.inputValues)
                    t.model.set(e, t.inputValues[e], { resolve: !0 });
                });
            },
            registerOutputIfNeeded: function (t) {
              this.hasOutput(t) ||
                (t.startsWith("prop-") &&
                  this.registerOutput(t, {
                    getter: l.bind(this, t.substring("prop-".length)),
                  }));
            },
            registerInputIfNeeded: function (t) {
              if (this.hasInput(t)) return;
              const e = {};
              if (e[t])
                return this.registerInput(t, {
                  set: o.createSetter({ valueChangedToTrue: e[t] }),
                });
              const n = { collectionName: this.setCollectionID.bind(this) };
              if (n[t]) return this.registerInput(t, { set: n[t] });
              t.startsWith("prop-") &&
                this.registerInput(t, {
                  set: u.bind(this, t.substring("prop-".length)),
                });
            },
          },
        };
        function l(t) {
          return this._internal.model
            ? this._internal.model.get(t, { resolve: !0 })
            : void 0;
        }
        function u(t, e) {
          this._internal.inputValues[t] = e;
        }
        function p(t, e, n, i) {
          var o = [];
          const r = i.getMetaData("dbCollections"),
            s = i.getMetaData("systemCollections");
          if (
            (o.push({
              name: "collectionName",
              displayName: "Class",
              group: "General",
              type: {
                name: "enum",
                enums: [
                  { label: "User", value: "_User" },
                  { label: "Role", value: "_Role" },
                ].concat(
                  void 0 !== r
                    ? r.map((t) => ({ value: t.name, label: t.name }))
                    : []
                ),
                allowEditOnly: !0,
              },
              plug: "input",
            }),
            e.collectionName && r)
          ) {
            var a = r.find((t) => t.name === e.collectionName);
            if (
              (void 0 === a &&
                s &&
                (a = s.find((t) => t.name === e.collectionName)),
              a && a.schema && a.schema.properties)
            ) {
              var l = a.schema.properties;
              for (var u in l) {
                var p = l[u];
                if (!o.find((t) => t.name === u))
                  if ("Relation" === p.type);
                  else {
                    const t = {
                      String: "string",
                      Boolean: "boolean",
                      Number: "number",
                      Date: "date",
                    };
                    o.push({
                      type: { name: t[p.type] ? t[p.type] : "*" },
                      plug: "output",
                      group: "Properties",
                      name: "prop-" + u,
                      displayName: u,
                    }),
                      o.push({
                        type: "signal",
                        plug: "output",
                        group: "Changed Events",
                        displayName: u + " Changed",
                        name: "changed-" + u,
                      });
                  }
              }
            }
          }
          n.sendDynamicPorts(t, o);
        }
        t.exports = {
          node: a,
          setup: function (t, e) {
            function n(n) {
              p(n.id, n.parameters, t.editorConnection, e),
                n.on("parameterUpdated", function (i) {
                  p(n.id, n.parameters, t.editorConnection, e);
                }),
                e.on("metadataChanged.dbCollections", function (i) {
                  p(n.id, n.parameters, t.editorConnection, e);
                }),
                e.on("metadataChanged.systemCollections", function (i) {
                  p(n.id, n.parameters, t.editorConnection, e);
                });
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.DbModel2", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("DbModel2")) n(t);
              });
          },
        };
      },
      437: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        n(8750);
        var o = n(8478);
        const r = n(1268);
        var s = {
          node: {
            name: "DeleteDbModelProperties",
            docs: "https://docs.noodl.net/nodes/data/cloud-data/delete-record",
            displayNodeName: "Delete Record",
            shortDesc:
              "Stores any amount of properties and can be used standalone or together with Collections and For Each nodes.",
            inputs: {
              store: {
                displayName: "Do",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.storageDelete();
                },
              },
            },
            outputs: {
              deleted: {
                type: "signal",
                displayName: "Success",
                group: "Events",
              },
            },
            methods: {
              storageDelete: function () {
                const t = this,
                  e = this._internal;
                e.model
                  ? this.checkWarningsBeforeCloudOp() &&
                    this.scheduleOnce("StorageDelete", function () {
                      r.instance.delete({
                        collection: e.collectionId,
                        objectId: e.model.getId(),
                        success: function () {
                          e.model.notify("delete"),
                            t.sendSignalOnOutput("deleted");
                        },
                        error: function (e) {
                          t.setError(e || "Failed to delete.");
                        },
                      });
                    })
                  : t.setError("Missing Record Id");
              },
            },
          },
        };
        o.addBaseInfo(s, { includeInputProperties: !1 }),
          o.addModelId(s),
          (t.exports = s);
      },
      3315: (t, e, n) => {
        "use strict";
        const { Node: i, EdgeTriggeredInput: o } = n(5855),
          r = n(266),
          s = n(8750);
        function a(t, e) {
          for (var n in (t instanceof s && (t = t.data),
          e instanceof s && (e = e.data),
          this)) {
            var i = t[n],
              o = e[n];
            if (i !== o)
              return "string" == typeof i && "string" == typeof o
                ? 1 === this[n]
                  ? i > o
                    ? 1
                    : -1
                  : i > o
                  ? -1
                  : 1
                : "number" == typeof i && "number" == typeof o
                ? 1 === this[n]
                  ? i - o
                  : o - i
                : 1 === this[n]
                ? i > o
                  ? 1
                  : -1
                : i > o
                ? -1
                : 1;
          }
          return 0;
        }
        var l = {
          name: "Filter Collection",
          docs: "https://docs.noodl.net/nodes/data/array/array-filter",
          displayNodeName: "Array Filter",
          shortDesc: "Filter, sort and limit array",
          category: "Data",
          color: "data",
          initialize: function () {
            var t = this;
            (this._internal.collectionChangedCallback = function () {
              !0 !== t.isInputConnected("filter") && t.scheduleFilter();
            }),
              (this._internal.enabled = !0),
              (this._internal.filterSettings = {});
          },
          getInspectInfo() {
            const t = this._internal.filteredCollection;
            return t
              ? [
                  { type: "text", value: "Id: " + t.getId() },
                  { type: "value", value: t.items },
                ]
              : { type: "text", value: "[Not executed yet]" };
          },
          inputs: {
            items: {
              type: "array",
              displayName: "Items",
              group: "General",
              set(t) {
                this.bindCollection(t),
                  !1 === this.isInputConnected("filter") &&
                    this.scheduleFilter();
              },
            },
            enabled: {
              type: "boolean",
              group: "General",
              displayName: "Enabled",
              default: !0,
              set: function (t) {
                (this._internal.enabled = t),
                  !1 === this.isInputConnected("filter") &&
                    this.scheduleFilter();
              },
            },
            filter: {
              type: "signal",
              group: "Actions",
              displayName: "Filter",
              valueChangedToTrue: function () {
                this.scheduleFilter();
              },
            },
          },
          outputs: {
            items: {
              type: "array",
              displayName: "Items",
              group: "General",
              getter: function () {
                return this._internal.filteredCollection;
              },
            },
            firstItemId: {
              type: "string",
              displayName: "First Item Id",
              group: "General",
              getter: function () {
                if (void 0 !== this._internal.filteredCollection) {
                  const t = this._internal.filteredCollection.get(0);
                  if (void 0 !== t) return t.getId();
                }
              },
            },
            count: {
              type: "number",
              displayName: "Count",
              group: "General",
              getter: function () {
                return this._internal.filteredCollection
                  ? this._internal.filteredCollection.size()
                  : 0;
              },
            },
            modified: {
              group: "Events",
              type: "signal",
              displayName: "Filtered",
            },
          },
          prototypeExtensions: {
            unbindCurrentCollection: function () {
              var t = this._internal.collection;
              t &&
                (t.off("change", this._internal.collectionChangedCallback),
                (this._internal.collection = void 0));
            },
            bindCollection: function (t) {
              this.unbindCurrentCollection(),
                (this._internal.collection = t),
                t && t.on("change", this._internal.collectionChangedCallback);
            },
            _onNodeDeleted: function () {
              i.prototype._onNodeDeleted.call(this),
                this.unbindCurrentCollection();
            },
            getFilter: function () {
              const t = this._internal.filterSettings,
                e = ["case"];
              if (t.filterFilter) {
                const i = t.filterFilter.split(",");
                var n = {};
                return (
                  i.forEach(function (i) {
                    var o = "$" + (t["filterFilterOp-" + i] || "eq");
                    (n[i] = {}),
                      (n[i][o] = t["filterFilterValue-" + i]),
                      e.forEach((e) => {
                        var o = t["filterFilterOption-" + e + "-" + i];
                        o && (n[i]["$" + e] = o);
                      });
                  }),
                  n
                );
              }
            },
            getSort: function () {
              const t = this._internal.filterSettings;
              if (t.filterSort) {
                const n = t.filterSort.split(",");
                var e = {};
                return (
                  n.forEach(function (n) {
                    e[n] = "descending" === t["filterSort-" + n] ? -1 : 1;
                  }),
                  e
                );
              }
            },
            getLimit: function () {
              const t = this._internal.filterSettings;
              return t.filterEnableLimit ? t.filterLimit || 10 : void 0;
            },
            getSkip: function () {
              const t = this._internal.filterSettings;
              return t.filterEnableLimit ? t.filterSkip || 0 : void 0;
            },
            scheduleFilter: function () {
              this.collectionChangedScheduled ||
                ((this.collectionChangedScheduled = !0),
                this.scheduleAfterInputsHaveUpdated(() => {
                  if (
                    ((this.collectionChangedScheduled = !1),
                    this._internal.collection)
                  ) {
                    var t = [].concat(this._internal.collection.items);
                    if (this._internal.enabled) {
                      var e = this.getFilter();
                      e &&
                        (t = t.filter((t) =>
                          (function (t, e) {
                            for (var n in e) {
                              var i = e[n];
                              if (void 0 !== i.$neq) {
                                if (t[n] == i.$neq) return !1;
                              } else {
                                if (void 0 === t[n]) return !1;
                                if (void 0 !== i.$eq && t[n] != i.$eq)
                                  return !1;
                                if (!(void 0 === i.$gt || t[n] > i.$gt))
                                  return !1;
                                if (!(void 0 === i.$lt || t[n] < i.$lt))
                                  return !1;
                                if (!(void 0 === i.$gte || t[n] >= i.$gte))
                                  return !1;
                                if (!(void 0 === i.$lte || t[n] <= i.$lte))
                                  return !1;
                                if (void 0 !== i.$regex) {
                                  var o = t[n] + "";
                                  if (
                                    !new RegExp(
                                      i.$regex,
                                      !0 !== i.$case ? "i" : void 0
                                    ).test(o)
                                  )
                                    return !1;
                                }
                              }
                            }
                            return !0;
                          })(t.data, e)
                        ));
                      var n = this.getSort();
                      n && t.sort(a.bind(n));
                      var i = this.getSkip();
                      i && (t = t.slice(i, t.length));
                      var o = this.getLimit();
                      o && (t = t.slice(0, o));
                    }
                    (this._internal.filteredCollection = r.create(t)),
                      this.sendSignalOnOutput("modified"),
                      this.flagOutputDirty("firstItemId"),
                      this.flagOutputDirty("items"),
                      this.flagOutputDirty("count");
                  }
                }));
            },
            registerInputIfNeeded: function (t) {
              this.hasInput(t) ||
                this.registerInput(t, { set: u.bind(this, t) });
            },
          },
        };
        function u(t, e) {
          (this._internal.filterSettings[t] = e),
            !1 === this.isInputConnected("filter") && this.scheduleFilter();
        }
        function p(t, e, n, i) {
          var o = [];
          o.push({
            type: "boolean",
            plug: "input",
            group: "Limit",
            name: "filterEnableLimit",
            displayName: "Use limit",
          }),
            e.filterEnableLimit &&
              (o.push({
                type: "number",
                default: 10,
                plug: "input",
                group: "Limit",
                name: "filterLimit",
                displayName: "Limit",
              }),
              o.push({
                type: "number",
                default: 0,
                plug: "input",
                group: "Limit",
                name: "filterSkip",
                displayName: "Skip",
              })),
            o.push({
              type: { name: "stringlist", allowEditOnly: !0 },
              plug: "input",
              group: "Filter",
              name: "filterFilter",
              displayName: "Filter",
            }),
            o.push({
              type: { name: "stringlist", allowEditOnly: !0 },
              plug: "input",
              group: "Sort",
              name: "filterSort",
              displayName: "Sort",
            });
          const r = {
            string: [
              { value: "eq", label: "Equals" },
              { value: "neq", label: "Not Equals" },
              { value: "regex", label: "Matches RegEx" },
            ],
            boolean: [
              { value: "eq", label: "Equals" },
              { value: "neq", label: "Not Equals" },
            ],
            number: [
              { value: "eq", label: "Equals" },
              { value: "neq", label: "Not Equals" },
              { value: "lt", label: "Less than" },
              { value: "gt", label: "Greater than" },
              { value: "gte", label: "Greater than or equal" },
              { value: "lte", label: "Less than or equal" },
            ],
          };
          e.filterFilter &&
            e.filterFilter.split(",").forEach((t) => {
              o.push({
                type: {
                  name: "enum",
                  enums: [
                    { value: "string", label: "String" },
                    { value: "number", label: "Number" },
                    { value: "boolean", label: "Boolean" },
                  ],
                },
                default: "string",
                plug: "input",
                group: t + " filter",
                displayName: "Type",
                editorName: t + " filter | Type",
                name: "filterFilterType-" + t,
              });
              var n = e["filterFilterType-" + t];
              o.push({
                type: { name: "enum", enums: r[n || "string"] },
                default: "eq",
                plug: "input",
                group: t + " filter",
                displayName: "Op",
                editorName: t + " filter| Op",
                name: "filterFilterOp-" + t,
              }),
                "regex" === e["filterFilterOp-" + t] &&
                  o.push({
                    type: "boolean",
                    default: !1,
                    plug: "input",
                    group: t + " filter",
                    displayName: "Case sensitive",
                    editorName: t + " filter| Case",
                    name: "filterFilterOption-case-" + t,
                  }),
                o.push({
                  type: n || "string",
                  plug: "input",
                  group: t + " filter",
                  displayName: "Value",
                  editorName: t + " Filter Value",
                  name: "filterFilterValue-" + t,
                });
            }),
            e.filterSort &&
              e.filterSort.split(",").forEach((t) => {
                o.push({
                  type: {
                    name: "enum",
                    enums: [
                      { value: "ascending", label: "Ascending" },
                      { value: "descending", label: "Descending" },
                    ],
                  },
                  default: "ascending",
                  plug: "input",
                  group: t + " sort",
                  displayName: "Sort",
                  editorName: t + " sorting",
                  name: "filterSort-" + t,
                });
              }),
            n.sendDynamicPorts(t, o);
        }
        t.exports = {
          node: l,
          setup: function (t, e) {
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("nodeAdded.Filter Collection", function (n) {
                p(
                  n.id,
                  n.parameters,
                  t.editorConnection,
                  e.getMetaData("dbCollections")
                ),
                  n.on("parameterUpdated", function (i) {
                    i.name.startsWith("filter") &&
                      p(
                        n.id,
                        n.parameters,
                        t.editorConnection,
                        e.getMetaData("dbCollections")
                      );
                  }),
                  e.on("metadataChanged.dbCollections", function (e) {
                    p(n.id, n.parameters, t.editorConnection);
                  });
              });
          },
        };
      },
      705: (t, e, n) => {
        "use strict";
        const { Node: i, EdgeTriggeredInput: o } = n(5855),
          r = n(266),
          s = n(8750),
          a = n(1268),
          l = n(6062);
        var u = {
          name: "FilterDBModels",
          docs: "https://docs.noodl.net/nodes/data/cloud-data/filter-records",
          displayNodeName: "Filter Records",
          shortDesc: "Filter, sort and limit array",
          category: "Data",
          color: "data",
          initialize: function () {
            var t = this;
            (this._internal.collectionChangedCallback = function () {
              !0 !== t.isInputConnected("filter") && t.scheduleFilter();
            }),
              (this._internal.cloudStoreEvents = function (e) {
                !0 !== t.isInputConnected("filter") &&
                  void 0 !== t._internal.visualFilter &&
                  void 0 !== t._internal.collection &&
                  e.collection === t._internal.collectionName &&
                  void 0 !== e.objectId &&
                  t._internal.collection.contains(s.get(e.objectId)) &&
                  t.scheduleFilter();
              }),
              a.instance.on("save", this._internal.cloudStoreEvents),
              (this._internal.enabled = !0),
              (this._internal.filterSettings = {}),
              (this._internal.filterParameters = {});
          },
          getInspectInfo() {
            const t = this._internal.filteredCollection;
            return t
              ? [
                  { type: "text", value: "Id: " + t.getId() },
                  { type: "value", value: t.items },
                ]
              : { type: "text", value: "[Not executed yet]" };
          },
          inputs: {
            items: {
              type: "array",
              displayName: "Items",
              group: "General",
              set(t) {
                this.bindCollection(t),
                  !1 === this.isInputConnected("filter") &&
                    this.scheduleFilter();
              },
            },
            enabled: {
              type: "boolean",
              group: "General",
              displayName: "Enabled",
              default: !0,
              set: function (t) {
                (this._internal.enabled = t),
                  !1 === this.isInputConnected("filter") &&
                    this.scheduleFilter();
              },
            },
            filter: {
              type: "signal",
              group: "Actions",
              displayName: "Filter",
              valueChangedToTrue: function () {
                this.scheduleFilter();
              },
            },
          },
          outputs: {
            items: {
              type: "array",
              displayName: "Items",
              group: "General",
              getter: function () {
                return this._internal.filteredCollection;
              },
            },
            firstItemId: {
              type: "string",
              displayName: "First Record Id",
              group: "General",
              getter: function () {
                if (void 0 !== this._internal.filteredCollection) {
                  const t = this._internal.filteredCollection.get(0);
                  if (void 0 !== t) return t.getId();
                }
              },
            },
            count: {
              type: "number",
              displayName: "Count",
              group: "General",
              getter: function () {
                return this._internal.filteredCollection
                  ? this._internal.filteredCollection.size()
                  : 0;
              },
            },
            modified: {
              group: "Events",
              type: "signal",
              displayName: "Filtered",
            },
          },
          prototypeExtensions: {
            unbindCurrentCollection: function () {
              var t = this._internal.collection;
              t &&
                (t.off("change", this._internal.collectionChangedCallback),
                (this._internal.collection = void 0));
            },
            bindCollection: function (t) {
              this.unbindCurrentCollection(),
                (this._internal.collection = t),
                t && t.on("change", this._internal.collectionChangedCallback);
            },
            _onNodeDeleted: function () {
              i.prototype._onNodeDeleted.call(this),
                this.unbindCurrentCollection(),
                a.instance.off("save", this._internal.cloudStoreEvents);
            },
            getLimit: function () {
              const t = this._internal.filterSettings;
              return t.filterEnableLimit ? t.filterLimit || 10 : void 0;
            },
            getSkip: function () {
              const t = this._internal.filterSettings;
              return t.filterEnableLimit ? t.filterSkip || 0 : void 0;
            },
            scheduleFilter: function () {
              this.collectionChangedScheduled ||
                ((this.collectionChangedScheduled = !0),
                this.scheduleAfterInputsHaveUpdated(() => {
                  if (
                    ((this.collectionChangedScheduled = !1),
                    this._internal.collection)
                  ) {
                    var t = [].concat(this._internal.collection.items);
                    if (this._internal.enabled) {
                      const r = this._internal.visualFilter;
                      if (void 0 !== r) {
                        var e = l.convertVisualFilter(r, {
                          queryParameters: this._internal.filterParameters,
                          collectionName: this._internal.collectionName,
                        });
                        e && (t = t.filter((t) => l.matchesQuery(t, e)));
                      }
                      var n = this._internal.visualSorting;
                      if (void 0 !== n && n.length > 0)
                        var i = l.convertVisualSorting(n);
                      i && t.sort(l.compareObjects.bind(this, i));
                      var o = this.getSkip();
                      o && (t = t.slice(o, t.length));
                      var s = this.getLimit();
                      s && (t = t.slice(0, s));
                    }
                    (this._internal.filteredCollection = r.create(t)),
                      this.sendSignalOnOutput("modified"),
                      this.flagOutputDirty("firstItemId"),
                      this.flagOutputDirty("items"),
                      this.flagOutputDirty("count");
                  }
                }));
            },
            setCollectionName: function (t) {
              this._internal.collectionName = t;
            },
            setVisualFilter: function (t) {
              (this._internal.visualFilter = t),
                !1 === this.isInputConnected("filter") && this.scheduleFilter();
            },
            setVisualSorting: function (t) {
              (this._internal.visualSorting = t),
                !1 === this.isInputConnected("filter") && this.scheduleFilter();
            },
            setFilterParameter: function (t, e) {
              (this._internal.filterParameters[t] = e),
                !1 === this.isInputConnected("filter") && this.scheduleFilter();
            },
            registerInputIfNeeded: function (t) {
              if (!this.hasInput(t))
                return "collectionName" === t
                  ? this.registerInput(t, {
                      set: this.setCollectionName.bind(this),
                    })
                  : "visualFilter" === t
                  ? this.registerInput(t, {
                      set: this.setVisualFilter.bind(this),
                    })
                  : "visualSorting" === t
                  ? this.registerInput(t, {
                      set: this.setVisualSorting.bind(this),
                    })
                  : t.startsWith("fp-")
                  ? this.registerInput(t, {
                      set: this.setFilterParameter.bind(
                        this,
                        t.substring("fp-".length)
                      ),
                    })
                  : void this.registerInput(t, { set: p.bind(this, t) });
            },
          },
        };
        function p(t, e) {
          (this._internal.filterSettings[t] = e),
            !1 === this.isInputConnected("filter") && this.scheduleFilter();
        }
        function c(t, e, n, i) {
          var o = [];
          if (
            (o.push({
              name: "collectionName",
              type: {
                name: "enum",
                enums:
                  void 0 !== i
                    ? i.map((t) => ({ value: t.name, label: t.name }))
                    : [],
                allowEditOnly: !0,
              },
              displayName: "Class",
              plug: "input",
              group: "General",
            }),
            o.push({
              type: "boolean",
              plug: "input",
              group: "Limit",
              name: "filterEnableLimit",
              displayName: "Use limit",
            }),
            e.filterEnableLimit &&
              (o.push({
                type: "number",
                default: 10,
                plug: "input",
                group: "Limit",
                name: "filterLimit",
                displayName: "Limit",
              }),
              o.push({
                type: "number",
                default: 0,
                plug: "input",
                group: "Limit",
                name: "filterSkip",
                displayName: "Skip",
              })),
            void 0 !== e.collectionName)
          ) {
            var r = i.find((t) => t.name === e.collectionName);
            if (r && r.schema && r.schema.properties) {
              const t = JSON.parse(JSON.stringify(r.schema)),
                e = {
                  Boolean: !0,
                  String: !0,
                  Date: !0,
                  Number: !0,
                  Pointer: !0,
                };
              for (var s in t.properties)
                e[t.properties[s].type] || delete t.properties[s];
              o.push({
                name: "visualFilter",
                plug: "input",
                type: { name: "query-filter", schema: t, allowEditOnly: !0 },
                displayName: "Filter",
                group: "Filter",
              }),
                o.push({
                  name: "visualSorting",
                  plug: "input",
                  type: { name: "query-sorting", schema: t, allowEditOnly: !0 },
                  displayName: "Sorting",
                  group: "Sorting",
                });
            }
            if (void 0 !== e.visualFilter) {
              const t = {};
              !(function e(n) {
                void 0 !== n &&
                  (void 0 !== n.rules
                    ? n.rules.forEach((t) => e(t))
                    : void 0 !== n.input && (t[n.input] = !0));
              })(e.visualFilter),
                Object.keys(t).forEach((t) => {
                  o.push({
                    name: "fp-" + t,
                    plug: "input",
                    type: "*",
                    displayName: t,
                    group: "Filter Parameters",
                  });
                });
            }
          }
          n.sendDynamicPorts(t, o);
        }
        t.exports = {
          node: u,
          setup: function (t, e) {
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("nodeAdded.FilterDBModels", function (n) {
                c(
                  n.id,
                  n.parameters,
                  t.editorConnection,
                  e.getMetaData("dbCollections")
                ),
                  n.on("parameterUpdated", function (i) {
                    c(
                      n.id,
                      n.parameters,
                      t.editorConnection,
                      e.getMetaData("dbCollections")
                    );
                  }),
                  e.on("metadataChanged.dbCollections", function (e) {
                    c(n.id, n.parameters, t.editorConnection, e);
                  });
              });
          },
        };
      },
      2863: (t, e, n) => {
        const { Node: i } = n(5855),
          o = n(5821),
          r = n(266),
          s = n(3804),
          a = n(5855),
          { useEffect: l } = s;
        function u(t) {
          const { didMount: e, willUnmount: n } = t;
          return (
            l(
              () => (
                e(),
                () => {
                  n();
                }
              ),
              []
            ),
            null
          );
        }
        const p = {
          name: "For Each",
          displayNodeName: "Repeater",
          docs: "https://docs.noodl.net/nodes/ui-controls/repeater",
          color: "visual",
          category: "Visual",
          dynamicports: [
            {
              name: "conditionalports/extended",
              condition: "templateType = explicit OR templateType NOT SET",
              inputs: ["template"],
            },
            {
              name: "conditionalports/extended",
              condition: "templateType = dynamic",
              inputs: ["templateScript"],
            },
          ],
          initialize() {
            (this._internal.itemNodes = []),
              (this._internal.itemOutputSignals = {}),
              (this._internal.itemOutputs = {}),
              (this._internal.collection = r.get()),
              (this._internal.queuedOperations = []),
              (this._internal.mountedOperations = []),
              this._internal.collection.on("add", async (t) => {
                this._internal.target &&
                  this._queueOperation(async () => {
                    const e =
                      this._internal.target.getChildren().indexOf(this) + 1;
                    await this.addItem(t.item, e + t.index);
                  });
              }),
              this._internal.collection.on("remove", (t) => {
                this._queueOperation(() => {
                  this.removeItem(t.item);
                });
              }),
              (this._internal.onItemsCollectionChanged = () => {
                a.instance.getProjectSettings().repeaterDisabledWhenUnmounted &&
                !this.isMounted
                  ? this._internal.mountedOperations.push(() => {
                      this._internal.collection.set(this._internal.items);
                    })
                  : this._queueOperation(() => {
                      this._internal.collection.set(this._internal.items);
                    });
              }),
              this.addDeleteListener(() => {
                this._deleteAllItemNodes();
              });
          },
          inputs: {
            items: {
              group: "Data",
              displayName: "Items",
              type: { name: "array", allowConnectionsOnly: !0 },
              set: function (t) {
                t && t !== this._internal.items && this.bindCollection(t);
              },
            },
            templateType: {
              group: "Appearance",
              displayName: "Template Type",
              type: {
                name: "enum",
                enums: [
                  { label: "Explicit", value: "explicit" },
                  { label: "Dynamic", value: "dynamic" },
                ],
              },
              default: "explicit",
              set: function (t) {
                (this._internal.templateType = t), this.scheduleRefresh();
              },
            },
            template: {
              type: "component",
              displayName: "Template",
              group: "Appearance",
              set: function (t) {
                (this._internal.template = t), this.scheduleRefresh();
              },
            },
            templateScript: {
              type: {
                name: "string",
                codeeditor: "javascript",
                allowEditOnly: !0,
              },
              displayName: "Script",
              group: "Appearance",
              default:
                "// Set the 'component' variable to the name of the desired component for this item.\n// Component name must start with a '/'.\n// A component in a sheet is referred to by '/#Sheet Name/Comopnent Name'.\n// The data for each item is available in a variable called 'item'\ncomponent = '/MyComponent';",
              set: function (t) {
                try {
                  this._internal.templateFunction = new Function(
                    "item",
                    "var component;" + t + ";return component;"
                  );
                } catch (t) {
                  console.log(t),
                    this.context.editorConnection &&
                      this.context.editorConnection.sendWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "foreach-syntax-warning",
                        { message: "<strong>Syntax</strong>: " + t.message }
                      );
                }
                this.scheduleRefresh();
              },
            },
            refresh: {
              group: "Appearance",
              displayName: "Refresh",
              type: "signal",
              valueChangedToTrue: function () {
                this.scheduleRefresh();
              },
            },
          },
          outputs: {
            itemActionItemId: {
              type: "string",
              group: "Actions",
              displayName: "Item Id",
              getter: function () {
                return this._internal.itemActionItemId;
              },
            },
          },
          prototypeExtensions: {
            updateTarget: function (t) {
              (this._internal.target = t
                ? this.nodeScope.getNodeWithId(t)
                : void 0),
                this.scheduleRefresh();
            },
            setNodeModel: function (t) {
              i.prototype.setNodeModel.call(this, t),
                t.parent && this.updateTarget(t.parent.id);
              var e = this;
              t.on(
                "parentUpdated",
                function (t) {
                  e.updateTarget(t ? t.id : void 0);
                },
                this
              );
            },
            scheduleRefresh: function () {
              var t = this._internal;
              t.hasScheduledRefresh ||
                ((t.hasScheduledRefresh = !0),
                this.scheduleAfterInputsHaveUpdated(() => {
                  this._queueOperation(() => {
                    this.refresh();
                  });
                }));
            },
            unbindCurrentCollection: function () {
              var t = this._internal.items;
              t &&
                (r.instanceOf(t) &&
                  t.off("change", this._internal.onItemsCollectionChanged),
                (this._internal.items = void 0));
            },
            bindCollection: function (t) {
              var e = this._internal;
              this.unbindCurrentCollection(),
                r.instanceOf(t) &&
                  t.on("change", this._internal.onItemsCollectionChanged),
                (e.items = t),
                this.scheduleCopyItems();
            },
            getTemplateForModel: function (t) {
              var e = this._internal;
              if (void 0 === e.templateType || "explicit" === e.templateType)
                return e.template;
              if (e.templateFunction) {
                try {
                  var n = e.templateFunction(t);
                } catch (t) {
                  console.log(t),
                    this.context.editorConnection &&
                      this.context.editorConnection.sendWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "foreach-dynamic-warning",
                        {
                          message:
                            "<strong>Dynamic template</strong>: " + t.message,
                        }
                      );
                }
                return n;
              }
            },
            _mapInputs: function (t, e) {
              void 0 !== this._internal.inputMapFunc &&
                this._internal.inputMapFunc(function (n) {
                  for (var i in n)
                    t.hasInput(i) &&
                      ("function" == typeof n[i]
                        ? t.setInputValue(i, n[i](e))
                        : "string" == typeof n[i] &&
                          t.setInputValue(i, e.get(n[i])));
                }, e);
            },
            addItem: async function (t, e) {
              var n = this._internal,
                i = this.getTemplateForModel(t);
              if (i) {
                var r = await this.nodeScope.createNode(i, o(), {
                  _forEachModel: t,
                  _forEachNode: this,
                });
                if (void 0 === this._internal.inputMapFunc) {
                  for (var s in (r.hasInput("Id") &&
                    r.setInputValue("Id", t.getId()),
                  r.hasInput("id") && r.setInputValue("id", t.getId()),
                  r._inputs))
                    void 0 !== t.data[s] && r.setInputValue(s, t.data[s]);
                  (r._forEachModelChangeListener = function (t) {
                    r._inputs[t.name] && r.setInputValue(t.name, t.value);
                  }),
                    t.on("change", r._forEachModelChangeListener),
                    r.componentModel.on(
                      "inputPortAdded",
                      (e) => {
                        "id" === e.name && r.setInputValue("id", t.getId()),
                          "Id" === e.name && r.setInputValue("Id", t.getId()),
                          void 0 !== t.data[e.name] &&
                            r.setInputValue(e.name, t.data[e.name]);
                      },
                      this
                    );
                } else
                  this._mapInputs(r, t),
                    (r._forEachModelChangeListener = () =>
                      this._mapInputs(r, t)),
                    t.on("change", r._forEachModelChangeListener);
                r._internal.creatorCallbacks = {
                  onOutputChanged: (e, i, o) => {
                    (!1 !== o && void 0 !== o) ||
                      !0 !== i ||
                      !n.itemOutputSignals[e] ||
                      this.itemOutputSignalTriggered(e, t, r);
                  },
                };
                for (
                  var a = r.nodeScope.getNodesWithType("For Each Actions"),
                    l = 0;
                  l < a.length;
                  l++
                )
                  a[l].signalAdded();
                n.itemNodes.push(r), n.target.addChild(r, e);
              }
            },
            removeItem: function (t) {
              var e = this._internal;
              if (e.target) {
                var n = (function () {
                  var n = e.target.getChildren();
                  for (var i in n) {
                    var o = n[i];
                    if (o._forEachModel === t && !o._forEachRemoveInProgress)
                      return o;
                  }
                })();
                if (n) {
                  var i = n.nodeScope.getNodesWithType("For Each Actions");
                  i && i.length > 0
                    ? ((n._forEachRemoveInProgress = !0),
                      i[0].tryRemove(() => this._deleteItem(n)))
                    : this._deleteItem(n);
                  var o = e.itemNodes.indexOf(n);
                  -1 !== o && e.itemNodes.splice(o, 1);
                }
              }
            },
            _deleteItem(t) {
              t._forEachModel.off("change", t._forEachModelChangeListener),
                t.model && t.model.removeListenersWithRef(this),
                t.componentModel &&
                  t.componentModel.removeListenersWithRef(this);
              const e = t.parent;
              !t._deleted &&
                e &&
                (e.removeChild(t), this.nodeScope.deleteNode(t));
            },
            _deleteAllItemNodes: function () {
              if (this._internal.itemNodes) {
                for (const t of this._internal.itemNodes) this._deleteItem(t);
                this._internal.itemNodes = [];
              }
            },
            refresh: async function () {
              var t = this._internal;
              if (
                ((t.hasScheduledRefresh = !1),
                (!t.template && !t.templateFunction) || !t.items)
              )
                return;
              if ((this._deleteAllItemNodes(), !t.target)) return;
              const e = this._internal.target.getChildren().indexOf(this) + 1;
              for (var n = 0; n < t.collection.size(); n++) {
                var i = t.collection.get(n);
                await this.addItem(i, e + n);
              }
            },
            _queueOperation(t) {
              this._internal.queuedOperations.push(t),
                this._runQueueOperations();
            },
            async _runQueueOperations() {
              if (!this.runningOperations)
                if (
                  ((this.runningOperations = !0),
                  a.instance.getProjectSettings().repeaterCreateComponentsAsync)
                ) {
                  const t = async () => {
                    const e = performance.now();
                    for (
                      ;
                      this._internal.queuedOperations.length &&
                      performance.now() - e < 25;

                    ) {
                      const t = this._internal.queuedOperations.shift();
                      await t();
                    }
                    this._internal.queuedOperations.length
                      ? setTimeout(t, 0)
                      : (this.runningOperations = !1);
                  };
                  t();
                } else {
                  for (; this._internal.queuedOperations.length; ) {
                    const t = this._internal.queuedOperations.shift();
                    await t();
                  }
                  this.runningOperations = !1;
                }
            },
            _onNodeDeleted: function () {
              i.prototype._onNodeDeleted.call(this),
                this.unbindCurrentCollection();
            },
            render() {
              return s.createElement(u, {
                didMount: () => this.didMount(),
                willUnmount: () => this.willUnmount(),
              });
            },
            didMount() {
              this.isMounted = !0;
              for (const t of this._internal.mountedOperations)
                this._queueOperation(t);
              this._internal.mountedOperations = [];
            },
            willUnmount() {
              this.isMounted = !1;
            },
            getItemActionParameter: function (t) {
              if (this._internal.itemActionParameters)
                return this._internal.itemActionParameters[t];
            },
            scheduleCopyItems: function () {
              this._internal.hasScheduledCopyItems ||
                ((this._internal.hasScheduledCopyItems = !0),
                this.scheduleAfterInputsHaveUpdated(() => {
                  (this._internal.hasScheduledCopyItems = !1),
                    void 0 !== this._internal.items &&
                      (a.instance.getProjectSettings()
                        .repeaterDisabledWhenUnmounted && !this.isMounted
                        ? this._internal.mountedOperations.push(() => {
                            this._internal.collection.set(this._internal.items);
                          })
                        : this._internal.collection.set(this._internal.items));
                }));
            },
            itemOutputSignalTriggered: function (t, e, n) {
              (this._internal.itemActionItemId = e.getId()),
                (this._internal.itemActionSignal = t),
                this.flagOutputDirty("itemActionItemId"),
                this._internal.hasScheduledTriggerItemOutputSignal ||
                  ((this._internal.hasScheduledTriggerItemOutputSignal = !0),
                  this.context.scheduleAfterUpdate(() => {
                    for (var t in ((this._internal.hasScheduledTriggerItemOutputSignal =
                      !1),
                    n._outputs)) {
                      var e = "itemOutput-" + t;
                      this.hasOutput(e) &&
                        ((this._internal.itemOutputs[t] = n._outputs[t].value),
                        this.flagOutputDirty(e));
                    }
                    this.sendSignalOnOutput(
                      "itemOutputSignal-" + this._internal.itemActionSignal
                    );
                  }));
            },
            getItemOutput: function (t) {
              return this._internal.itemOutputs[t];
            },
            registerOutputIfNeeded: function (t) {
              this.hasOutput(t) ||
                (t.startsWith("itemOutputSignal-")
                  ? ((this._internal.itemOutputSignals[
                      t.substring("itemOutputSignal-".length)
                    ] = !0),
                    this.registerOutput(t, { getter: function () {} }))
                  : t.startsWith("itemOutput-") &&
                    this.registerOutput(t, {
                      getter: this.getItemOutput.bind(
                        this,
                        t.substring("itemOutput-".length)
                      ),
                    }));
            },
            setInputMappingScript: function (t) {
              if (
                (this.context.editorConnection &&
                  this.context.editorConnection.clearWarning(
                    this.nodeScope.componentOwner.name,
                    this.id,
                    "foreach-inputmapping-warning"
                  ),
                (this._internal.inputMappingScript = t),
                this._internal.inputMappingScript)
              )
                try {
                  this._internal.inputMapFunc = new Function(
                    "map",
                    "object",
                    this._internal.inputMappingScript
                  );
                } catch (t) {
                  (this._internal.inputMapFunc = void 0),
                    this.context.editorConnection &&
                      this.context.editorConnection.sendWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "foreach-inputmapping-warning",
                        {
                          message:
                            "<strong>Input mapping</strong>: " + t.message,
                        }
                      );
                }
              else this._internal.inputMapFunc = void 0;
              this.scheduleRefresh();
            },
            registerInputIfNeeded: function (t) {
              if (!this.hasInput(t))
                return "inputMappingScript" === t
                  ? this.registerInput(t, {
                      set: this.setInputMappingScript.bind(this),
                    })
                  : void 0;
            },
          },
        };
        function c(t) {
          return "object" == typeof t ? t.name : t;
        }
        t.exports = {
          node: p,
          setup: function (t, e) {
            function n(n) {
              function i() {
                var i = n.parameters.template;
                if (void 0 !== i) {
                  var o = [],
                    r = e.components[i];
                  if (void 0 !== r) {
                    for (var s in r.outputPorts)
                      "signal" === c((u = r.outputPorts[s]).type)
                        ? o.push({
                            name: "itemOutputSignal-" + s,
                            displayName: s,
                            type: "signal",
                            plug: "output",
                            group: "Item Signals",
                          })
                        : o.push({
                            name: "itemOutput-" + s,
                            displayName: s,
                            type: u.type,
                            plug: "output",
                            group: "Item Outputs",
                          });
                    var a = "";
                    for (var l in r.inputPorts) {
                      var u;
                      "signal" !== c((u = r.inputPorts[l]).type) &&
                        (a += "\t'" + l + "': '" + l + "',\n");
                    }
                    o.push({
                      name: "inputMappingScript",
                      type: { name: "string", codeeditor: "javascript" },
                      displayName: "Script",
                      group: "Input Mapping",
                      default:
                        "// Here you add mappings between the properties of the item objects and the inputs of the components.\n// 'myComponentInput': 'myObjectProperty',\n// 'anotherComponentInput': function () { return object.get('someProperty') + ' ' + object.get('otherProp') }\n// These are the default mappings based on the selected template component.\nmap({\n{{#mappings}}})\n".replace(
                          "{{#mappings}}",
                          a
                        ),
                      plug: "input",
                    }),
                      t.editorConnection.sendDynamicPorts(n.id, o, {
                        detectRenamed: { plug: "output", prefix: "itemOutput" },
                      });
                  }
                }
              }
              function o(t) {
                if (void 0 !== t) {
                  var n = e.components[t];
                  void 0 !== n &&
                    (n.on("outputPortAdded", i),
                    n.on("outputPortRemoved", i),
                    n.on("outputPortTypesUpdated", i),
                    n.on("inputPortTypesUpdated", i),
                    n.on("inputPortAdded", i),
                    n.on("inputPortRemoved", i));
                }
              }
              i(),
                o(n.parameters.template),
                n.on("parameterUpdated", function (t) {
                  "template" === t.name && (i(), o(n.parameters.template));
                });
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.For Each", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("For Each")) n(t);
              });
          },
        };
      },
      3130: (t, e, n) => {
        const { EdgeTriggeredInput: i } = n(5855),
          o = {
            name: "For Each Actions",
            docs: "https://docs.noodl.net/nodes/ui-controls/repeater-item",
            displayNodeName: "Repeater Item",
            category: "Data",
            color: "data",
            inputs: {
              removeCompleted: {
                type: { name: "boolean", allowConnectionsOnly: !0 },
                displayName: "Remove Completed",
                group: "Events",
                valueChangedToTrue: function () {
                  this._internal.removeCompletedCallback &&
                    this._internal.removeCompletedCallback();
                },
              },
            },
            outputs: {
              added: { type: "signal", displayName: "Added", group: "Events" },
              tryRemove: {
                type: "signal",
                displayName: "Try Remove",
                group: "Events",
              },
              itemId: {
                type: "string",
                displayName: "Item Id",
                group: "General",
                get() {
                  return this.getItemId();
                },
              },
            },
            prototypeExtensions: {
              getItemId() {
                const t = this.nodeScope.componentOwner._forEachModel;
                return t && t.getId();
              },
              signalAdded: function () {
                this.sendSignalOnOutput("added");
              },
              tryRemove: function (t) {
                this.getOutput("tryRemove").hasConnections()
                  ? ((this._internal.removeCompletedCallback = t),
                    this.sendSignalOnOutput("tryRemove"))
                  : this.scheduleAfterInputsHaveUpdated(function () {
                      t();
                    });
              },
              itemActionTriggered(t) {
                this.scheduleAfterInputsHaveUpdated(() => {
                  const e = this.getItemId();
                  this.nodeScope.componentOwner._forEachNode.signalItemAction(
                    t,
                    e,
                    this._internal.actionParameters || {}
                  );
                });
              },
              setItemActionParameter(t) {
                this._internal.actionParameters ||
                  (this._internal.actionParameters = {}),
                  (this._internal.actionParameters[t] = t);
              },
              registerInputIfNeeded: function (t) {
                if (!this.hasInput(t))
                  return t.startsWith("itemAction-")
                    ? this.registerInput(t, {
                        set: i.createSetter({
                          valueChangedToTrue: this.itemActionTriggered.bind(
                            this,
                            t
                          ),
                        }),
                      })
                    : t.startsWith("itemActionParameter-")
                    ? this.registerInput(t, {
                        set: this.setItemActionParameter.bind(this, t),
                      })
                    : void 0;
              },
            },
          };
        t.exports = {
          node: o,
          setup: function (t, e) {
            t.editorConnection && t.editorConnection.isRunningLocally();
          },
        };
      },
      8070: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        var o = n(8750),
          r = n(266),
          s = {
            name: "Map Collection",
            docs: "https://docs.noodl.net/nodes/data/array/array-map",
            displayNodeName: "Array Map",
            shortDesc: "Map array fields",
            category: "Data",
            color: "data",
            initialize: function () {
              var t = this;
              this._internal.collectionChangedCallback = function () {
                t.scheduleMap();
              };
            },
            inputs: {
              items: {
                type: "array",
                displayName: "Items",
                group: "General",
                set: function (t) {
                  this.setCollection(t), this.scheduleMap();
                },
              },
              mapScript: {
                type: {
                  name: "string",
                  allowEditOnly: !0,
                  codeeditor: "javascript",
                },
                displayName: "Script",
                default:
                  "map({\n\t// Here you add mappings between the input object and the mapped output object.\n\t//myOutputProp: 'inputProp',\n\t//anotherProperty: function(object) { return object.get('someProperty') + ' ' + object.get('otherProp') }\n})\n",
                set: function (t) {
                  this._internal.mapCode = t;
                  try {
                    this._internal.mapFunc = new Function(
                      "map",
                      "object",
                      this._internal.mapCode
                    );
                  } catch (t) {
                    (this._internal.mapFunc = void 0),
                      console.log("Error while parsing map script: " + t);
                  }
                  this.scheduleMap();
                },
              },
            },
            outputs: {
              items: {
                type: "array",
                displayName: "Items",
                group: "General",
                getter: function () {
                  return this._internal.mappedCollection;
                },
              },
              count: {
                type: "number",
                displayName: "Count",
                group: "General",
                getter: function () {
                  return this._internal.mappedCollection
                    ? this._internal.mappedCollection.size()
                    : 0;
                },
              },
              modified: {
                group: "Events",
                type: "signal",
                displayName: "Changed",
              },
            },
            prototypeExtensions: {
              setCollection: function (t) {
                this.bindCollection(t),
                  this.flagOutputDirty("items"),
                  this.flagOutputDirty("count");
              },
              unbindCurrentCollection: function () {
                var t = this._internal.collection;
                t &&
                  (t.off("change", this._internal.collectionChangedCallback),
                  (this._internal.collection = void 0));
              },
              bindCollection: function (t) {
                this.unbindCurrentCollection(),
                  (this._internal.collection = t),
                  t && t.on("change", this._internal.collectionChangedCallback);
              },
              _onNodeDeleted: function () {
                i.prototype._onNodeDeleted.call(this),
                  this.unbindCurrentCollection();
              },
              scheduleMap: function () {
                this.collectionChangedScheduled ||
                  ((this.collectionChangedScheduled = !0),
                  this.scheduleAfterInputsHaveUpdated(() => {
                    if (
                      ((this.collectionChangedScheduled = !1),
                      void 0 !== this._internal.collection)
                    ) {
                      var t = this._internal.collection.map((t) => {
                        var e = o.create();
                        return (
                          this._internal.mapFunc(function (n) {
                            for (var i in n)
                              "function" == typeof n[i]
                                ? e.set(i, n[i](t))
                                : "string" == typeof n[i] &&
                                  e.set(i, t.get(n[i]));
                          }, t),
                          e
                        );
                      });
                      (this._internal.mappedCollection = r.create(t)),
                        this.sendSignalOnOutput("modified"),
                        this.flagOutputDirty("items"),
                        this.flagOutputDirty("count");
                    }
                  }));
              },
            },
          };
        t.exports = {
          node: s,
          setup: function (t, e) {
            t.editorConnection && t.editorConnection.isRunningLocally();
          },
        };
      },
      8750: (t) => {
        function e(t, e) {
          (this.id = t), (this.data = e);
        }
        const n = (e._models = {}),
          i = {},
          o = {
            get: function (t, e, n) {
              return "function" == typeof t[e]
                ? t[e].bind(t)
                : e in t
                ? Reflect.get(t, e, n)
                : t.get(e);
            },
            set: function (t, e, n) {
              if ("_class" === e) t._class = n;
              else {
                if ("id" === e)
                  return (
                    console.log(
                      `Noodl.Object warning: id is readonly (Id is ${t.id}, trying to set to ${n})`
                    ),
                    !0
                  );
                t.set(e, n);
              }
              return !0;
            },
          };
        (e.get = function (t) {
          return (
            void 0 === t && (t = e.guid()),
            n[t] || ((n[t] = new e(t, {})), (i[t] = new Proxy(n[t], o))),
            i[t]
          );
        }),
          (e.create = function (t) {
            var n = t || {},
              i = e.get(n.id);
            for (var o in n) "id" !== o && i.set(o, n[o]);
            return i;
          }),
          (e.exists = function (t) {
            return void 0 !== n[t];
          }),
          (e.instanceOf = function (t) {
            return t instanceof e || t.target instanceof e;
          }),
          (e.guid = function () {
            return (function (t) {
              const e =
                "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
              let n = "";
              for (let t = 0; t < 10; ++t)
                n += e[Math.floor(65536 * (1 + Math.random())) % e.length];
              return n;
            })();
          }),
          (e.prototype.on = function (t, e) {
            this.listeners || (this.listeners = {}),
              this.listeners[t] || (this.listeners[t] = []),
              this.listeners[t].push(e);
          }),
          (e.prototype.off = function (t, e) {
            if (this.listeners && this.listeners[t]) {
              var n = this.listeners[t].indexOf(e);
              -1 !== n && this.listeners[t].splice(n, 1);
            }
          }),
          (e.prototype.notify = function (t, e) {
            if (this.listeners && this.listeners[t])
              for (var n = this.listeners[t].slice(), i = 0; i < n.length; i++)
                n[i](e);
          }),
          (e.prototype.setAll = function (t) {
            for (var e in t)
              if ("id" !== e && this.data[e] !== t[e]) {
                var n = this.data[e];
                (this.data[e] = t[e]),
                  this.notify("change", { name: e, value: t[e], old: n });
              }
          }),
          (e.prototype.set = function (t, n, i) {
            if (i && i.resolve && -1 !== t.indexOf(".")) {
              for (
                var o = t.split("."), r = this, s = 0;
                s < o.length - 1;
                s++
              ) {
                var a = r.get(o[s]);
                if (!e.instanceOf(a)) return;
                r = a;
              }
              r.set(o[o.length - 1], n);
            } else {
              var l = this.data[t];
              (this.data[t] = n),
                l !== n &&
                  (!i || !i.silent) &&
                  this.notify("change", { name: t, value: n, old: l });
            }
          }),
          (e.prototype.getId = function () {
            return this.id;
          }),
          (e.prototype.get = function (t, n) {
            if (n && n.resolve && -1 !== t.indexOf(".")) {
              for (
                var i = t.split("."), o = this, r = 0;
                r < i.length - 1;
                r++
              ) {
                var s = o.get(i[r]);
                if (!e.instanceOf(s)) return;
                o = s;
              }
              return o.get(i[i.length - 1]);
            }
            return this.data[t];
          }),
          (e.prototype.toJSON = function () {
            return Object.assign({}, this.data);
          }),
          (t.exports = e);
      },
      3725: (t, e, n) => {
        "use strict";
        const i = n(266),
          o = n(8750);
        t.exports = {
          addInputProperties: function (t) {
            var e = { node: Object.assign({}, t.node), setup: t.setup },
              n = Object.assign({}, t.node.methods);
            Object.assign(t.node, {
              inputs: t.node.inputs || {},
              outputs: t.node.outputs || {},
              methods: t.node.methods || {},
            }),
              Object.assign(t, {
                setup: function (n, i) {
                  n.editorConnection &&
                    n.editorConnection.isRunningLocally() &&
                    (i.on("nodeAdded." + t.node.name, function (t) {
                      function e() {
                        var e = [];
                        const i = [
                          { label: "String", value: "string" },
                          { label: "Boolean", value: "boolean" },
                          { label: "Number", value: "number" },
                          { label: "Date", value: "date" },
                          { label: "Array", value: "array" },
                          { label: "Object", value: "object" },
                          { label: "Any", value: "*" },
                        ];
                        var o = t.parameters.properties;
                        if (o)
                          for (var r in (o = o ? o.split(",") : void 0)) {
                            var s = o[r];
                            e.push({
                              type: {
                                name:
                                  void 0 === t.parameters["type-" + s]
                                    ? "*"
                                    : t.parameters["type-" + s],
                              },
                              plug: "input",
                              group: "Property Values",
                              displayName: s,
                              name: "prop-" + s,
                            }),
                              e.push({
                                type: {
                                  name: "enum",
                                  enums: i,
                                  allowEditOnly: !0,
                                },
                                default: "any",
                                plug: "input",
                                group: "Property Types",
                                displayName: s,
                                default: "*",
                                name: "type-" + s,
                              });
                          }
                        n.editorConnection.sendDynamicPorts(t.id, e, {
                          detectRenamed: { plug: "input" },
                        });
                      }
                      e(),
                        t.on("parameterUpdated", function (t) {
                          e();
                        });
                    }),
                    e.setup && e.setup(n, i));
                },
              }),
              Object.assign(t.node, {
                initialize: function () {
                  var t = this._internal;
                  (t.inputValues = {}),
                    (t.inputTypes = {}),
                    e.node.initialize && e.node.initialize.call(this);
                },
              }),
              Object.assign(t.node.outputs, {}),
              Object.assign(t.node.inputs, {
                properties: {
                  type: { name: "stringlist", allowEditOnly: !0 },
                  displayName: "Properties",
                  group: "Properties to set",
                  set: function (t) {},
                },
              }),
              Object.assign(t.node.methods, {
                _pushInputValues: function (t) {
                  var e = this._internal;
                  const n = {
                      boolean: !1,
                      string: "",
                      number: 0,
                      date: new Date(),
                    },
                    r = {};
                  for (var s in e.inputTypes) r[s] = !0;
                  for (var s in e.inputValues) r[s] = !0;
                  for (var a in r) {
                    var l = e.inputValues[a];
                    void 0 !== l
                      ? (void 0 !== e.inputTypes[a] &&
                          "array" === e.inputTypes[a] &&
                          "string" == typeof l &&
                          (l = i.get(l)),
                        void 0 !== e.inputTypes[a] &&
                          "object" === e.inputTypes[a] &&
                          "string" == typeof l &&
                          (l = o.get(l)),
                        t.set(a, l, { resolve: !0 }))
                      : t.set(a, n[e.inputTypes[a]], { resolve: !0 });
                  }
                },
                scheduleStore: function () {
                  if (!this.hasScheduledStore) {
                    this.hasScheduledStore = !0;
                    var t = this._internal;
                    this.scheduleAfterInputsHaveUpdated(() => {
                      (this.hasScheduledStore = !1),
                        t.model &&
                          (this._pushInputValues(t.model),
                          this.sendSignalOnOutput("stored"));
                    });
                  }
                },
                registerInputIfNeeded: function (t) {
                  this.hasInput(t) ||
                    (t.startsWith("prop-") &&
                      this.registerInput(t, {
                        set: this._setInputValue.bind(
                          this,
                          t.substring("prop-".length)
                        ),
                      }),
                    t.startsWith("type-") &&
                      this.registerInput(t, {
                        set: this._setInputType.bind(
                          this,
                          t.substring("type-".length)
                        ),
                      }),
                    n &&
                      n.registerInputIfNeeded &&
                      e.node.methods.registerInputIfNeeded.call(this, t));
                },
                _setInputValue: function (t, e) {
                  this._internal.inputValues[t] = e;
                },
                _setInputType: function (t, e) {
                  this._internal.inputTypes[t] = e;
                },
              });
          },
          addModelId: function (t, e) {
            const n = void 0 === e || e.includeInputs,
              i = void 0 === e || e.includeOutputs;
            Object.assign(t.node, {
              inputs: t.node.inputs || {},
              outputs: t.node.outputs || {},
              methods: t.node.methods || {},
            }),
              n &&
                (Object.assign(t.node, { usePortAsLabel: "modelId" }),
                (t.node.dynamicports = (t.node.dynamicports || []).concat([
                  {
                    name: "conditionalports/extended",
                    condition: "idSource = explicit OR idSource NOT SET",
                    inputs: ["modelId"],
                  },
                ])),
                Object.assign(t.node.inputs, {
                  idSource: {
                    type: {
                      name: "enum",
                      enums: [
                        { label: "Specify explicitly", value: "explicit" },
                        { label: "From repeater", value: "foreach" },
                      ],
                      allowEditOnly: !0,
                    },
                    default: "explicit",
                    displayName: "Id Source",
                    group: "General",
                    set: function (t) {
                      "foreach" === t &&
                        this.scheduleAfterInputsHaveUpdated(() => {
                          for (
                            var t = this.nodeScope.componentOwner;
                            void 0 !== t &&
                            void 0 === t._forEachModel &&
                            t.parentNodeScope;

                          )
                            t = t.parentNodeScope.componentOwner;
                          this.setModel(
                            void 0 !== t ? t._forEachModel : void 0
                          );
                        });
                    },
                  },
                  modelId: {
                    type: {
                      name: "string",
                      identifierOf: "ModelName",
                      identifierDisplayName: "Object Ids",
                    },
                    displayName: "Id",
                    group: "General",
                    set: function (t) {
                      t instanceof o && (t = t.getId()),
                        (this._internal.modelId = t),
                        this.setModelID(t);
                    },
                  },
                })),
              i &&
                Object.assign(t.node.outputs, {
                  id: {
                    type: "string",
                    displayName: "Id",
                    group: "General",
                    getter: function () {
                      return this._internal.model
                        ? this._internal.model.getId()
                        : this._internal.modelId;
                    },
                  },
                }),
              Object.assign(t.node.methods, {
                setModelID: function (t) {
                  var e = o.get(t);
                  this.setModel(e);
                },
                setModel: function (t) {
                  (this._internal.model = t), this.flagOutputDirty("id");
                },
              });
          },
          addBaseInfo: function (t) {
            Object.assign(t.node, { category: "Data", color: "data" });
          },
        };
      },
      4905: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        var o = n(8750),
          r = {
            name: "Model2",
            docs: "https://docs.noodl.net/nodes/data/object/object-node",
            displayNodeName: "Object",
            shortDesc:
              "Stores any amount of properties and can be used standalone or together with Collections and For Each nodes.",
            category: "Data",
            usePortAsLabel: "modelId",
            color: "data",
            dynamicports: [
              {
                name: "conditionalports/extended",
                condition: "idSource = explicit OR idSource NOT SET",
                inputs: ["modelId"],
              },
            ],
            initialize: function () {
              var t = this._internal;
              (t.inputValues = {}), (t.dirtyValues = {});
              var e = this;
              this._internal.onModelChangedCallback = function (t) {
                !0 !== e.isInputConnected("fetch") &&
                  (e.hasOutput("prop-" + t.name) &&
                    e.flagOutputDirty("prop-" + t.name),
                  e.hasOutput("changed-" + t.name) &&
                    e.sendSignalOnOutput("changed-" + t.name),
                  e.sendSignalOnOutput("changed"));
              };
            },
            getInspectInfo() {
              const t = this._internal.model;
              return t
                ? [
                    { type: "text", value: "Id: " + t.getId() },
                    { type: "value", value: t.data },
                  ]
                : "[No Object]";
            },
            outputs: {
              id: {
                type: "string",
                displayName: "Id",
                group: "General",
                getter: function () {
                  return this._internal.model
                    ? this._internal.model.getId()
                    : this._internal.modelId;
                },
              },
              changed: {
                type: "signal",
                displayName: "Changed",
                group: "Events",
              },
              fetched: {
                type: "signal",
                displayName: "Fetched",
                group: "Events",
              },
            },
            inputs: {
              idSource: {
                type: {
                  name: "enum",
                  enums: [
                    { label: "Specify explicitly", value: "explicit" },
                    { label: "From repeater", value: "foreach" },
                  ],
                  allowEditOnly: !0,
                },
                default: "explicit",
                displayName: "Get Id from",
                group: "General",
                set: function (t) {
                  "foreach" === t &&
                    this.scheduleAfterInputsHaveUpdated(() => {
                      for (
                        var t = this.nodeScope.componentOwner;
                        void 0 !== t &&
                        void 0 === t._forEachModel &&
                        t.parentNodeScope;

                      )
                        t = t.parentNodeScope.componentOwner;
                      this.setModel(void 0 !== t ? t._forEachModel : void 0);
                    });
                },
              },
              modelId: {
                type: {
                  name: "string",
                  identifierOf: "ModelName",
                  identifierDisplayName: "Object Ids",
                },
                displayName: "Id",
                group: "General",
                set: function (t) {
                  t instanceof o && (t = t.getId()),
                    (this._internal.modelId = t),
                    !1 === this.isInputConnected("fetch")
                      ? this.setModelID(t)
                      : this.flagOutputDirty("id");
                },
              },
              properties: {
                type: { name: "stringlist", allowEditOnly: !0 },
                displayName: "Properties",
                group: "Properties",
                set: function (t) {},
              },
              fetch: {
                displayName: "Fetch",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleSetModel();
                },
              },
            },
            prototypeExtensions: {
              scheduleStore: function () {
                if (!this.hasScheduledStore) {
                  this.hasScheduledStore = !0;
                  var t = this._internal;
                  this.scheduleAfterInputsHaveUpdated(() => {
                    if (((this.hasScheduledStore = !1), t.model)) {
                      for (var e in t.dirtyValues)
                        t.model.set(e, t.inputValues[e], { resolve: !0 });
                      t.dirtyValues = {};
                    }
                  });
                }
              },
              scheduleSetModel: function () {
                this.hasScheduledSetModel ||
                  ((this.hasScheduledSetModel = !0),
                  this._internal,
                  this.scheduleAfterInputsHaveUpdated(() => {
                    (this.hasScheduledSetModel = !1),
                      this.setModelID(this._internal.modelId);
                  }));
              },
              setModelID: function (t) {
                var e = o.get(t);
                this.setModel(e), this.sendSignalOnOutput("fetched");
              },
              setModel: function (t) {
                for (var e in (this._internal.model &&
                  this._internal.model.off(
                    "change",
                    this._internal.onModelChangedCallback
                  ),
                (this._internal.model = t),
                this.flagOutputDirty("id"),
                t.on("change", this._internal.onModelChangedCallback),
                t.data))
                  this.hasOutput("prop-" + e) &&
                    this.flagOutputDirty("prop-" + e);
              },
              _onNodeDeleted: function () {
                i.prototype._onNodeDeleted.call(this),
                  this._internal.model &&
                    this._internal.model.off(
                      "change",
                      this._internal.onModelChangedCallback
                    );
              },
              registerOutputIfNeeded: function (t) {
                this.hasOutput(t) ||
                  (t.startsWith("prop-") &&
                    this.registerOutput(t, {
                      getter: s.bind(this, t.substring("prop-".length)),
                    }));
              },
              registerInputIfNeeded: function (t) {
                this.hasInput(t) ||
                  (t.startsWith("prop-") &&
                    this.registerInput(t, {
                      set: a.bind(this, t.substring("prop-".length)),
                    }));
              },
            },
          };
        function s(t) {
          return this._internal.model
            ? this._internal.model.get(t, { resolve: !0 })
            : void 0;
        }
        function a(t, e) {
          this._internal.inputValues[t] = e;
          const n = this._internal.model;
          (!n || n.get(t) !== e) &&
            ((this._internal.dirtyValues[t] = !0), this.scheduleStore());
        }
        function l(t, e, n) {
          var i = [],
            o = e.properties;
          if (o)
            for (var r in (o = o ? o.split(",") : void 0)) {
              var s = o[r];
              i.push({
                type: { name: "*", allowConnectionsOnly: !0 },
                plug: "input/output",
                group: "Properties",
                name: "prop-" + s,
                displayName: s,
              }),
                i.push({
                  type: "signal",
                  plug: "output",
                  group: "Changed Events",
                  displayName: s + " Changed",
                  name: "changed-" + s,
                });
            }
          n.sendDynamicPorts(t, i, { detectRenamed: { plug: "input/output" } });
        }
        t.exports = {
          node: r,
          setup: function (t, e) {
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("nodeAdded.Model2", function (e) {
                l(e.id, e.parameters, t.editorConnection),
                  e.on("parameterUpdated", function (n) {
                    l(e.id, e.parameters, t.editorConnection);
                  });
              });
          },
        };
      },
      2814: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        n(8750);
        var o = n(8478);
        const r = n(1268);
        var s = {
          node: {
            name: "NewDbModelProperties",
            docs: "https://docs.noodl.net/nodes/data/cloud-data/create-new-record",
            displayName: "Create New Record",
            usePortAsLabel: "collectionName",
            inputs: {
              store: {
                displayName: "Do",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.storageInsert();
                },
              },
            },
            outputs: {
              created: {
                type: "signal",
                displayName: "Success",
                group: "Events",
              },
            },
            methods: {
              storageInsert: function () {
                const t = this,
                  e = this._internal;
                this.checkWarningsBeforeCloudOp() &&
                  this.scheduleOnce("StorageInsert", function () {
                    r.instance.create({
                      collection: e.collectionId,
                      data: e.inputValues,
                      acl: t._getACL(),
                      success: function (n) {
                        const i = r._fromJSON(n, e.collectionId);
                        t.setModel(i), t.sendSignalOnOutput("created");
                      },
                      error: function (e) {
                        t.setError(e || "Failed to insert.");
                      },
                    });
                  });
              },
            },
          },
        };
        o.addBaseInfo(s),
          o.addModelId(s, { includeOutputs: !0 }),
          o.addInputProperties(s),
          o.addAccessControl(s),
          (t.exports = s);
      },
      1238: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        var o = n(8750),
          r = n(3725),
          s = {
            node: {
              name: "NewModel",
              docs: "https://docs.noodl.net/nodes/data/object/create-new-object",
              displayNodeName: "Create New Object",
              inputs: {
                new: {
                  displayName: "Do",
                  group: "Actions",
                  valueChangedToTrue: function () {
                    this.scheduleNew();
                  },
                },
              },
              outputs: {
                created: {
                  type: "signal",
                  displayName: "Done",
                  group: "Events",
                },
              },
              methods: {
                scheduleNew: function () {
                  this.hasScheduledNew ||
                    ((this.hasScheduledNew = !0),
                    this.scheduleAfterInputsHaveUpdated(() => {
                      this.hasScheduledNew = !1;
                      const t = o.get();
                      this._pushInputValues(t),
                        this.setModel(t),
                        this.sendSignalOnOutput("created");
                    }));
                },
              },
            },
          };
        r.addBaseInfo(s),
          r.addModelId(s, { includeOutputs: !0 }),
          r.addInputProperties(s),
          (t.exports = s);
      },
      6062: (t, e, n) => {
        const i = n(1268);
        t.exports = {
          convertVisualFilter: function t(e, n) {
            var o = n.queryParameters;
            if (void 0 !== e.combinator && void 0 !== e.rules) {
              if (0 === e.rules.length) return;
              if (1 === e.rules.length) return t(e.rules[0], n);
              {
                const i = {},
                  o = "$" + e.combinator;
                return (
                  (i[o] = []),
                  e.rules.forEach((e) => {
                    var r = t(e, n);
                    void 0 !== r && i[o].push(r);
                  }),
                  i
                );
              }
            }
            if ("related to" === e.operator) {
              if (void 0 === (s = void 0 !== e.input ? o[e.input] : void 0))
                return;
              return {
                $relatedTo: {
                  object: {
                    __type: "Pointer",
                    objectId: s,
                    className: e.relatedTo,
                  },
                  key: e.relationProperty,
                },
              };
            }
            {
              var r, s;
              if (void 0 === (s = void 0 !== e.input ? o[e.input] : e.value))
                return;
              if (i._collections[n.collectionName])
                var a = i._collections[n.collectionName].schema;
              "Date" ===
                (a && a.properties && a.properties[e.property]
                  ? a.properties[e.property].type
                  : void 0) &&
                (s instanceof Date || (s = new Date(s.toString())),
                (s = { __type: "Date", iso: s.toISOString() })),
                "exist" === e.operator
                  ? (r = { $exists: !0 })
                  : "not exist" === e.operator
                  ? (r = { $exists: !1 })
                  : "greater than" === e.operator
                  ? (r = { $gt: s })
                  : "greater than or equal to" === e.operator
                  ? (r = { $gte: s })
                  : "less than" === e.operator
                  ? (r = { $lt: s })
                  : "less than or equal to" === e.operator
                  ? (r = { $lte: s })
                  : "equal to" === e.operator
                  ? (r = { $eq: s })
                  : "not equal to" === e.operator
                  ? (r = { $neq: s })
                  : "points to" === e.operator
                  ? (r = {
                      $eq: {
                        __type: "Pointer",
                        objectId: s,
                        className:
                          a && a.properties && a.properties[e.property]
                            ? a.properties[e.property].targetClass
                            : void 0,
                      },
                    })
                  : "contain" === e.operator &&
                    (r = { $regex: s, $options: "i" });
              const t = {};
              return (t[e.property] = r), t;
            }
          },
          compareObjects: function (t, e, n) {
            for (var i = 0; i < t.length; i++) {
              let o = t[i];
              if ("-" === o[0]) {
                let t = o.substring(1);
                if (e.get(t) > n.get(t)) return -1;
                if (e.get(t) < n.get(t)) return 1;
              } else {
                if (e.get(o) > n.get(o)) return 1;
                if (e.get(o) < n.get(o)) return -1;
              }
            }
            return 0;
          },
          matchesQuery: function t(e, n) {
            var i = !0;
            return (
              void 0 === n ||
              (void 0 !== n.$and
                ? n.$and.forEach((n) => {
                    i &= t(e, n);
                  })
                : void 0 !== n.$or
                ? ((i = !1),
                  n.$or.forEach((n) => {
                    i |= t(e, n);
                  }))
                : Object.keys(n).forEach((t) => {
                    if ("objectId" === t)
                      void 0 !== n[t].$eq
                        ? (i &= e.getId() === n[t].$eq)
                        : void 0 !== n[t].$in &&
                          (i &= -1 !== n[t].$in.indexOf(e.getId()));
                    else {
                      var o = e.get(t);
                      void 0 !== n[t].$eq && "Pointer" === n[t].$eq.__type
                        ? (i &= o === n[t].$eq.objectId)
                        : void 0 !== n[t].$eq
                        ? (i &= o == n[t].$eq)
                        : void 0 !== n[t].$neq
                        ? (i &= o != n[t].$enq)
                        : void 0 !== n[t].$lt
                        ? (i &= o < n[t].$lt)
                        : void 0 !== n[t].$lte
                        ? (i &= o <= n[t].$lt)
                        : void 0 !== n[t].$gt
                        ? (i &= o > n[t].$gt)
                        : void 0 !== n[t].$gte
                        ? (i &= o >= n[t].$gte)
                        : void 0 !== n[t].$exists
                        ? (i &= void 0 !== o)
                        : void 0 !== n[t].$in
                        ? (i &= -1 !== n[t].$in.indexOf(o))
                        : void 0 !== n[t].$nin
                        ? (i &= -1 === n[t].$in.indexOf(o))
                        : void 0 !== n[t].$regex &&
                          (i &= new RegExp(n[t].$regex, n[t].$options).test(o));
                    }
                  }),
              i)
            );
          },
          convertVisualSorting: function (t) {
            return t.map(
              (t) => ("descending" === t.order ? "-" : "") + t.property
            );
          },
        };
      },
      2758: (t, e, n) => {
        var i = n(5055),
          o = {
            name: "REST2",
            displayNodeName: "REST",
            docs: "https://docs.noodl.net/nodes/data/rest",
            category: "Data",
            color: "data",
            initialize: function () {
              (this._internal.inputValues = {}),
                (this._internal.outputValues = {}),
                (this._internal.outputValuesProxy = new Proxy(
                  this._internal.outputValues,
                  {
                    set: (t, e, n) => (
                      n !== this._internal.outputValues[e] &&
                        (this.registerOutputIfNeeded("out-" + e),
                        (this._internal.outputValues[e] = n),
                        this.flagOutputDirty("out-" + e)),
                      !0
                    ),
                  }
                )),
                (this._internal.self = {});
            },
            getInspectInfo() {
              return this._internal.inspectData
                ? { type: "value", value: this._internal.inspectData }
                : { type: "text", value: "[Not executed yet]" };
            },
            inputs: {
              resource: {
                type: "string",
                displayName: "Resource",
                group: "Request",
                default: "/",
                set: function (t) {
                  this._internal.resource = t;
                },
              },
              method: {
                type: {
                  name: "enum",
                  enums: [
                    { label: "GET", value: "GET" },
                    { label: "POST", value: "POST" },
                    { label: "DELETE", value: "DELETE" },
                    { label: "PUT", value: "PUT" },
                    { label: "PATCH", value: "PATCH" },
                    { label: "DELETE", value: "DELETE" },
                  ],
                },
                displayName: "Method",
                group: "Request",
                default: "GET",
                set: function (t) {
                  this._internal.method = t;
                },
              },
              requestScript: {
                type: {
                  name: "string",
                  allowEditOnly: !0,
                  codeeditor: "javascript",
                },
                displayName: "Request",
                default:
                  "//Add custom code to setup the request object before the request\n//is made.\n//\n//*Request.resource     contains the resource path of the request.\n//*Request.method       contains the method, GET, POST, PUT or DELETE.\n//*Request.headers      is a map where you can add additional headers.\n//*Request.parameters   is a map the parameters that will be appended\n//                      to the url.\n//*Request.content      contains the content of the request as a javascript\n//                      object.\n//\n",
                group: "Scripts",
                set: function (t) {
                  try {
                    this._internal.requestFunc = new Function(
                      "Inputs",
                      "Outputs",
                      "Request",
                      t
                    );
                  } catch (t) {
                    console.log(t);
                  }
                },
              },
              responseScript: {
                type: {
                  name: "string",
                  allowEditOnly: !0,
                  codeeditor: "javascript",
                },
                displayName: "Response",
                default:
                  "// Add custom code to convert the response content to outputs\n//\n//*Response.status    The status code of the response\n//*Response.content   The content of the response as a javascript\n//                    object.\n//*Response.request   The request object that resulted in the response.\n//\n//*Inputs and *Outputs contain the inputs and outputs of the node.\n",
                group: "Scripts",
                set: function (t) {
                  try {
                    this._internal.responseFunc = new Function(
                      "Inputs",
                      "Outputs",
                      "Response",
                      t
                    );
                  } catch (t) {
                    console.log(t);
                  }
                },
              },
              fetch: {
                type: "signal",
                displayName: "Fetch",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleFetch();
                },
              },
              cancel: {
                type: "signal",
                displayName: "Cancel",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.cancelFetch();
                },
              },
            },
            outputs: {
              failure: {
                type: "signal",
                displayName: "Failure",
                group: "Events",
              },
              success: {
                type: "signal",
                displayName: "Success",
                group: "Events",
              },
            },
            prototypeExtensions: {
              getScriptOutputValue: function (t) {
                return this._internal.outputValues[t];
              },
              setScriptInputValue: function (t, e) {
                return (this._internal.inputValues[t] = e);
              },
              registerOutputIfNeeded: function (t) {
                if (!this.hasOutput(t))
                  return t.startsWith("out-")
                    ? this.registerOutput(t, {
                        getter: this.getScriptOutputValue.bind(
                          this,
                          t.substring("out-".length)
                        ),
                      })
                    : void 0;
              },
              registerInputIfNeeded: function (t) {
                if (!this.hasInput(t))
                  return t.startsWith("in-")
                    ? this.registerInput(t, {
                        set: this.setScriptInputValue.bind(
                          this,
                          t.substring("in-".length)
                        ),
                      })
                    : void 0;
              },
              scheduleFetch: function () {
                var t = this._internal;
                t.hasScheduledFetch ||
                  ((t.hasScheduledFetch = !0),
                  this.scheduleAfterInputsHaveUpdated(this.doFetch.bind(this)));
              },
              doResponse: function (t, e, n) {
                this._internal.responseFunc &&
                  this._internal.responseFunc.apply(this._internal.self, [
                    this._internal.inputValues,
                    this._internal.outputValuesProxy,
                    { status: t, content: e, request: n },
                  ]),
                  (this._internal.inspectData = { status: t, content: e }),
                  t >= 200 && t < 300
                    ? this.sendSignalOnOutput("success")
                    : this.sendSignalOnOutput("failure");
              },
              doExternalFetch: function (t) {
                var e = this,
                  n = new window.XMLHttpRequest(),
                  o = t.resource;
                if (Object.keys(t.parameters).length > 0) {
                  var r = Object.keys(t.parameters).map(function (e) {
                    return e + "=" + encodeURIComponent(t.parameters[e]);
                  });
                  o += "?" + r.join("&");
                }
                for (var s in (n.open(t.method, o, !0), t.headers))
                  n.setRequestHeader(s, t.headers[s]);
                (n.onreadystatechange = function () {
                  var n = !1;
                  if (
                    4 === this.readyState ||
                    this.readyState === XMLHttpRequest.DONE
                  ) {
                    var o = this.status,
                      r = this.getResponseHeader("content-type"),
                      s = this.response;
                    r &&
                      (-1 !== (r = r.toLowerCase()).indexOf("/json")
                        ? (e.doResponse(o, JSON.parse(s), t), (n = !0))
                        : -1 !== r.indexOf("/xml") &&
                          (i.parseString(s, function (n, i) {
                            e.doResponse(o, n ? s : i, t);
                          }),
                          (n = !0))),
                      !1 === n && e.doResponse(o, s, t);
                  }
                }),
                  (n.onerror = function () {
                    console.log("REST: Failed to request", o),
                      e.sendSignalOnOutput("failure");
                  }),
                  t.content
                    ? (n.setRequestHeader("Content-Type", "application/json"),
                      n.send(JSON.stringify(t.content)))
                    : n.send();
              },
              doFetch: function () {
                this._internal.hasScheduledFetch = !1;
                var t = this._internal.resource;
                if (t)
                  for (var e in this._internal.inputValues)
                    t = t.replace("{" + e + "}", this._internal.inputValues[e]);
                var n = {
                  resource: t,
                  headers: {},
                  method:
                    void 0 !== this._internal.method
                      ? this._internal.method
                      : "GET",
                  parameters: {},
                };
                this._internal.requestFunc &&
                  this._internal.requestFunc.apply(this._internal.self, [
                    this._internal.inputValues,
                    this._internal.outputValuesProxy,
                    n,
                  ]),
                  this.doExternalFetch(n);
              },
            },
          };
        function r(t, e, n, i, o, r) {
          if (
            (o.editorConnection.clearWarning(
              i.component.name,
              i.id,
              "rest-run-waring-" + n
            ),
            void 0 === t)
          )
            return void o.editorConnection.clearWarning(
              i.component.name,
              i.id,
              "rest-parse-waring-" + n
            );
          try {
            new Function(...e, t),
              o.editorConnection.clearWarning(
                i.component.name,
                i.id,
                "rest-parse-waring-" + n
              );
          } catch (t) {
            o.editorConnection.sendWarning(
              i.component.name,
              i.id,
              "rest-parse-waring-" + n,
              {
                message: "<strong>" + n + "</strong>: " + t.message,
                showGlobally: !0,
              }
            );
          }
          function s(t) {
            return void 0 !== r.find((e) => e.name === t);
          }
          const a = t.replace(/\/\*[\s\S]*?\*\/|\/\/.*/g, ""),
            l = a.match(/Inputs\.[A-Za-z0-9]+/g);
          if (l) {
            const t = {};
            l.forEach((e) => {
              t[e.substring("Inputs.".length)] = !0;
            }),
              Object.keys(t).forEach((t) => {
                s("in-" + t) ||
                  r.push({
                    name: "in-" + t,
                    displayName: t,
                    plug: "input",
                    type: "*",
                    group: "Inputs",
                  });
              });
          }
          const u = a.match(/Outputs\.[A-Za-z0-9]+/g);
          if (u) {
            const t = {};
            u.forEach((e) => {
              t[e.substring("Outputs.".length)] = !0;
            }),
              Object.keys(t).forEach((t) => {
                s("out-" + t) ||
                  r.push({
                    name: "out-" + t,
                    displayName: t,
                    plug: "output",
                    type: "*",
                    group: "Outputs",
                  });
              });
          }
        }
        t.exports = {
          node: o,
          setup: function (t, e) {
            function n(e) {
              function n() {
                if (e.parameters) {
                  var n = [];
                  if (e.parameters.resource) {
                    var i = e.parameters.resource.match(/\{[A-Za-z0-9_]*\}/g);
                    for (var o in i) {
                      var s = i[o].replace("{", "").replace("}", "");
                      a("in-" + s) ||
                        n.push({
                          name: "in-" + s,
                          displayName: s,
                          type: "string",
                          plug: "input",
                          group: "Inputs",
                        });
                    }
                  }
                  e.parameters.requestScript &&
                    r(
                      e.parameters.requestScript,
                      ["Inputs", "Outputs", "Request"],
                      "Request script",
                      e,
                      t,
                      n
                    ),
                    e.parameters.responseScript &&
                      r(
                        e.parameters.responseScript,
                        ["Inputs", "Outputs", "Response"],
                        "Response script",
                        e,
                        t,
                        n
                      ),
                    t.editorConnection.sendDynamicPorts(e.id, n);
                }
                function a(t) {
                  for (var e = 0; e < n.length; e++)
                    if (n[e].name === t && "input" === n[e].plug) return !0;
                  return !1;
                }
              }
              n(),
                e.on("parameterUpdated", function () {
                  n();
                });
            }
            t.editorConnection &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.REST2", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("REST2")) n(t);
              });
          },
        };
      },
      6378: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        n(8750);
        var o = n(8478);
        const r = n(1268);
        var s = {
          node: {
            name: "SetDbModelProperties",
            docs: "https://docs.noodl.net/nodes/data/cloud-data/set-record-properties",
            displayNodeName: "Set Record Properties",
            usePortAsLabel: "collectionName",
            inputs: {
              store: {
                displayName: "Do",
                group: "Actions",
                valueChangedToTrue: function () {
                  void 0 === this._internal.storeType ||
                  "cloud" === this._internal.storeType
                    ? this.scheduleSave()
                    : this.scheduleStore();
                },
              },
              storeType: {
                displayName: "Store to",
                group: "General",
                type: {
                  name: "enum",
                  enums: [
                    { label: "Cloud and local", value: "cloud" },
                    { label: "Local only", value: "local" },
                  ],
                },
                default: "cloud",
                set: function (t) {
                  this._internal.storeType = t;
                },
              },
            },
            outputs: {
              stored: {
                type: "signal",
                displayName: "Success",
                group: "Events",
              },
            },
            methods: {
              scheduleSave: function () {
                const t = this,
                  e = this._internal;
                this.checkWarningsBeforeCloudOp() &&
                  this.scheduleOnce("StorageSave", function () {
                    if (e.model) {
                      var n = e.model;
                      for (var i in e.inputValues)
                        n.set(i, e.inputValues[i], { resolve: !0 });
                      r.instance.save({
                        collection: e.collectionId,
                        objectId: n.getId(),
                        data: e.inputValues,
                        acl: t._getACL(),
                        success: function (e) {
                          for (var i in e) n.set(i, e[i]);
                          t.sendSignalOnOutput("stored");
                        },
                        error: function (e) {
                          t.setError(e || "Failed to save.");
                        },
                      });
                    } else t.setError("Missing Record Id");
                  });
              },
              scheduleStore: function () {
                if (!this.hasScheduledStore) {
                  this.hasScheduledStore = !0;
                  var t = this._internal;
                  this.scheduleAfterInputsHaveUpdated(() => {
                    if (((this.hasScheduledStore = !1), t.model)) {
                      for (var e in t.inputValues)
                        t.model.set(e, t.inputValues[e], { resolve: !0 });
                      this.sendSignalOnOutput("stored");
                    }
                  });
                }
              },
            },
          },
        };
        o.addBaseInfo(s),
          o.addModelId(s),
          o.addInputProperties(s),
          o.addAccessControl(s),
          (t.exports = s);
      },
      4614: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        n(8750);
        var o = n(3725),
          r = {
            node: {
              name: "SetModelProperties",
              docs: "https://docs.noodl.net/nodes/data/object/set-object-properties",
              displayNodeName: "Set Object Properties",
              inputs: {
                store: {
                  displayName: "Do",
                  group: "Actions",
                  valueChangedToTrue: function () {
                    this.scheduleStore();
                  },
                },
              },
              outputs: {
                stored: {
                  type: "signal",
                  displayName: "Done",
                  group: "Events",
                },
              },
            },
          };
        o.addBaseInfo(r),
          o.addModelId(r),
          o.addInputProperties(r),
          (t.exports = r);
      },
      181: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855),
          o = n(8750),
          r = n(266);
        var s = {
          name: "Set Variable",
          docs: "https://docs.noodl.net/nodes/data/variable/set-variable",
          category: "Data",
          usePortAsLabel: "name",
          color: "data",
          initialize: function () {
            this._internal.variablesModel = o.get("--ndl--global-variables");
          },
          outputs: {
            done: { type: "signal", displayName: "Done", group: "Events" },
          },
          inputs: {
            name: {
              type: {
                name: "string",
                identifierOf: "VariableName",
                identifierDisplayName: "Variable names",
              },
              displayName: "Name",
              group: "General",
              set: function (t) {
                this._internal.name = t;
              },
            },
            setWith: {
              type: {
                name: "enum",
                enums: [
                  { label: "String", value: "string" },
                  { label: "Boolean", value: "boolean" },
                  { label: "Number", value: "number" },
                  { label: "Empty string", value: "emptyString" },
                  { label: "Date", value: "date" },
                  { label: "Object", value: "object" },
                  { label: "Array", value: "array" },
                  { label: "Any", value: "*" },
                ],
                allowEditOnly: !0,
              },
              displayName: "Set as",
              default: "*",
              group: "General",
              set: function (t) {
                this._internal.setWith = t;
              },
            },
            do: {
              displayName: "Do",
              group: "Actions",
              valueChangedToTrue: function () {
                this.scheduleStore();
              },
            },
          },
          methods: {
            setValue: function (t) {
              this._internal.value = t;
            },
            scheduleStore: function () {
              if (!this.hasScheduledStore) {
                this.hasScheduledStore = !0;
                var t = this._internal;
                this.scheduleAfterInputsHaveUpdated(function () {
                  this.hasScheduledStore = !1;
                  var e = "emptyString" === t.setWith ? "" : t.value;
                  "object" === t.setWith &&
                    "string" == typeof e &&
                    (e = o.get(e)),
                    "array" === t.setWith &&
                      "string" == typeof e &&
                      (e = r.get(e)),
                    "boolean" === t.setWith && (e = !!e),
                    t.variablesModel.set(t.name, e),
                    this.sendSignalOnOutput("done");
                });
              }
            },
            registerInputIfNeeded: function (t) {
              this.hasInput(t) ||
                ("value" === t &&
                  this.registerInput(t, { set: this.setValue.bind(this) }));
            },
          },
        };
        t.exports = {
          node: s,
          setup: function (t, e) {
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("nodeAdded.Set Variable", function (e) {
                function n() {
                  var n = [];
                  "emptyString" === e.parameters.setWith ||
                    n.push({
                      type:
                        void 0 !== e.parameters.setWith
                          ? e.parameters.setWith
                          : "*",
                      plug: "input",
                      group: "General",
                      name: "value",
                      displayName: "Value",
                    }),
                    t.editorConnection.sendDynamicPorts(e.id, n);
                }
                n(),
                  e.on("parameterUpdated", function (t) {
                    n();
                  });
              });
          },
        };
      },
      8115: (t, e, n) => {
        "use strict";
        const i = n(266);
        var o = {
          name: "Static Data",
          docs: "https://docs.noodl.net/nodes/data/array/static-array",
          displayNodeName: "Static Array",
          shortDesc: "Store static data to populate a Collection with items.",
          category: "Data",
          color: "data",
          getInspectInfo() {
            if (this._internal.collection)
              return [
                { type: "value", value: this._internal.collection.items },
              ];
          },
          dynamicports: [
            {
              name: "conditionalports/extended",
              condition: "type = csv OR type NOT SET",
              inputs: ["csv"],
            },
            {
              name: "conditionalports/extended",
              condition: "type = json",
              inputs: ["json"],
            },
          ],
          inputs: {
            type: {
              type: {
                name: "enum",
                enums: [
                  { label: "CSV", value: "csv" },
                  { label: "JSON", value: "json" },
                ],
                allowEditOnly: !0,
              },
              displayName: "Type",
              group: "General",
              default: "csv",
              set: function (t) {
                this._internal.type = t;
              },
            },
            csv: {
              type: { name: "string", codeeditor: "text", allowEditOnly: !0 },
              displayName: "CSV",
              group: "General",
              set: function (t) {
                (this._internal.csv = t), this.scheduleParseData();
              },
            },
            json: {
              type: { name: "string", codeeditor: "json", allowEditOnly: !0 },
              displayName: "JSON",
              group: "General",
              set: function (t) {
                (this._internal.json = t), this.scheduleParseData();
              },
            },
          },
          outputs: {
            items: {
              type: "array",
              displayName: "Items",
              group: "General",
              getter: function () {
                return this._internal.collection;
              },
            },
          },
          prototypeExtensions: {
            scheduleParseData: function () {
              var t = this._internal;
              t.hasScheduledParseData ||
                ((t.hasScheduledParseData = !0),
                this.scheduleAfterInputsHaveUpdated(this.parseData.bind(this)));
            },
            parseData: function () {
              var t = this._internal;
              if (
                ((t.hasScheduledParseData = !1),
                (t.collection = i.get()),
                void 0 === t.type || "csv" === t.type)
              ) {
                for (
                  var e = (function (t, e) {
                      e = e || ",";
                      for (
                        var n,
                          i = new RegExp(
                            "(\\" +
                              e +
                              '|\\r?\\n|\\r|^)(?:"([^"]*(?:""[^"]*)*)"|([^"\\' +
                              e +
                              "\\r\\n]*))",
                            "gi"
                          ),
                          o = [[]],
                          r = null;
                        (r = i.exec(t)) && n !== i.lastIndex;

                      ) {
                        n = i.lastIndex;
                        var s,
                          a = r[1];
                        a.length && a !== e && o.push([]),
                          (s = r[2]
                            ? r[2].replace(new RegExp('""', "g"), '"')
                            : r[3]),
                          o[o.length - 1].push(s);
                      }
                      return o;
                    })(t.csv),
                    n = [],
                    o = e[0],
                    r = 1;
                  r < e.length;
                  r++
                ) {
                  for (var s = e[r], a = {}, l = 0; l < o.length; l++)
                    a[o[l]] = s[l];
                  n.push(a);
                }
                t.collection.set(n), this.flagOutputDirty("items");
              } else
                "json" === t.type &&
                  ((n = JSON.parse(t.json)),
                  t.collection.set(n),
                  this.flagOutputDirty("items"));
            },
          },
        };
        t.exports = { node: o };
      },
      5146: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855);
        var o = n(8750),
          r = {
            name: "Variable2",
            displayNodeName: "Variable",
            docs: "https://docs.noodl.net/nodes/data/variable/variable-node",
            category: "Data",
            usePortAsLabel: "name",
            color: "data",
            initialize: function () {
              var t = this,
                e = this._internal;
              (this._internal.onModelChangedCallback = function (n) {
                t.isInputConnected("fetch") ||
                  n.name !== e.name ||
                  (t.sendSignalOnOutput("changed"), t.flagOutputDirty("value"));
              }),
                (e.variablesModel = o.get("--ndl--global-variables")),
                e.variablesModel.on(
                  "change",
                  this._internal.onModelChangedCallback
                );
            },
            getInspectInfo() {
              return this._internal.name
                ? this._internal.variablesModel.get(this._internal.name)
                : "[No value set]";
            },
            outputs: {
              name: {
                type: "string",
                displayName: "Name",
                group: "General",
                getter: function () {
                  return this._internal.name;
                },
              },
              changed: {
                type: "signal",
                displayName: "Changed",
                group: "Events",
              },
              fetched: {
                type: "signal",
                displayName: "Fetched",
                group: "Events",
              },
              value: {
                type: "*",
                displayName: "Value",
                group: "General",
                getter: function () {
                  var t = this._internal;
                  if (t.name) return t.variablesModel.get(t.name);
                },
              },
            },
            inputs: {
              name: {
                type: {
                  name: "string",
                  identifierOf: "VariableName",
                  identifierDisplayName: "Variable names",
                },
                displayName: "Name",
                group: "General",
                set: function (t) {
                  !1 === this.isInputConnected("fetch")
                    ? this.setVariableName(t)
                    : ((this._internal.name = t), this.flagOutputDirty("name"));
                },
              },
              fetch: {
                displayName: "Fetch",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.setVariableName(this._internal.name);
                },
              },
              value: {
                type: "*",
                displayName: "Value",
                group: "General",
                set: function (t) {
                  (this._internal.value = t), this.scheduleStore();
                },
              },
            },
            prototypeExtensions: {
              scheduleStore: function () {
                if (!this.hasScheduledStore) {
                  this.hasScheduledStore = !0;
                  var t = this._internal;
                  this.scheduleAfterInputsHaveUpdated(function () {
                    (this.hasScheduledStore = !1),
                      t.variablesModel.set(t.name, t.value);
                  });
                }
              },
              setVariableName: function (t) {
                (this._internal.name = t),
                  this.flagOutputDirty("name"),
                  this.flagOutputDirty("value"),
                  this.sendSignalOnOutput("fetched");
              },
              _onNodeDeleted: function () {
                i.prototype._onNodeDeleted.call(this),
                  this._internal.variablesModel.off(
                    "change",
                    this._internal.onModelChangedCallback
                  );
              },
            },
          };
        t.exports = { node: r };
      },
      5575: (t) => {
        "use strict";
        const e = {
          name: "Date To String",
          docs: "https://docs.noodl.net/nodes/utilities/date-to-string",
          category: "Utilities",
          initialize: function () {
            this._internal.formatString = "{year}-{month}-{date}";
          },
          inputs: {
            formatString: {
              displayName: "Format",
              type: "string",
              default: "{year}-{month}-{date}",
              set: function (t) {
                this._internal.formatString !== t &&
                  ((this._internal.formatString = t),
                  void 0 !== this._internal.currentInput &&
                    (this._format(), this.flagOutputDirty("currentValue")));
              },
            },
            input: {
              type: { name: "date" },
              displayName: "Date",
              set: function (t) {
                const e = "string" == typeof t ? new Date(t) : t;
                this._internal.currentInput !== e &&
                  ((this._internal.currentInput = e),
                  this._format(),
                  this.flagOutputDirty("currentValue"),
                  this.sendSignalOnOutput("inputChanged"));
              },
            },
          },
          outputs: {
            currentValue: {
              type: "string",
              displayName: "Date String",
              group: "Value",
              getter: function () {
                return this._internal.dateString;
              },
            },
            inputChanged: {
              type: "signal",
              displayName: "Date Changed",
              group: "Signals",
            },
          },
          methods: {
            _format() {
              const t = this._internal.currentInput,
                e = this._internal.formatString,
                n = ("0" + t.getDate()).slice(-2),
                i = ("0" + (t.getMonth() + 1)).slice(-2),
                o = t.getFullYear(),
                r = ("0" + t.getHours()).slice(-2),
                s = ("0" + t.getMinutes()).slice(-2),
                a = ("0" + t.getSeconds()).slice(-2);
              this._internal.dateString = e
                .replace(/\{date\}/g, n)
                .replace(/\{month\}/g, i)
                .replace(/\{year\}/g, o)
                .replace(/\{hours\}/g, r)
                .replace(/\{minutes\}/g, s)
                .replace(/\{seconds\}/g, a);
            },
          },
        };
        t.exports = { node: e };
      },
      6256: (t, e, n) => {
        "use strict";
        const { Node: i } = n(5855),
          o = {
            name: "Event Receiver",
            docs: "https://docs.noodl.net/nodes/events/receive-event",
            displayNodeName: "Receive Event",
            category: "Events",
            usePortAsLabel: "channelName",
            color: "component",
            initialize: function () {
              var t = this._internal;
              (t.outputValues = {}),
                (t.outputNames = []),
                (t.eventReceived = !1),
                (t._isEnabled = !0),
                (t.channelName = "");
            },
            inputs: {
              enabled: {
                displayName: "Enabled",
                type: "boolean",
                default: !0,
                set: function (t) {
                  this._internal._isEnabled = !!t;
                },
              },
              consume: {
                displayName: "Consume",
                type: {
                  name: "enum",
                  enums: [
                    { label: "Never", value: "never" },
                    { label: "Always", value: "always" },
                  ],
                },
                default: "never",
                set: function (t) {
                  this._internal.consume = t;
                },
              },
              channelName: {
                type: { name: "string", identifierOf: "EventChannelName" },
                displayName: "Channel",
                set: function (t) {
                  this._internal.onEventReceivedCallback &&
                    (this.context.eventSenderEmitter.removeListener(
                      this._internal.channelName,
                      this._internal.onEventReceivedCallback
                    ),
                    (this._internal.onEventReceivedCallback = null)),
                    (this._internal.channelName = t),
                    this.registerListenersForChannel(t);
                },
              },
            },
            outputs: {
              eventReceived: { displayName: "Received", type: "signal" },
            },
            prototypeExtensions: {
              registerOutputIfNeeded: function (t) {
                if (!this.hasOutput(t)) {
                  var e = this;
                  this._internal.outputNames.push(t),
                    this.registerOutput(t, {
                      getter: function () {
                        return e._internal.outputValues[t];
                      },
                    });
                }
              },
              handleEvent: function (t) {
                if (!1 !== this._internal._isEnabled) {
                  for (var e in (this.sendSignalOnOutput("eventReceived"), t))
                    this.hasOutput(e) &&
                      ((this._internal.outputValues[e] = t[e]),
                      this.flagOutputDirty(e));
                  return "always" === this._internal.consume;
                }
              },
              onEventReceived: function (t) {
                this.handleEvent(t);
              },
              _onNodeDeleted: function () {
                i.prototype._onNodeDeleted.call(this),
                  this._internal.onEventReceivedCallback &&
                    this.context.eventSenderEmitter.removeListener(
                      this._internal.channelName,
                      this._internal.onEventReceivedCallback
                    );
              },
              registerListenersForChannel: function (t) {
                var e = this.context.eventSenderEmitter;
                (this._internal.onEventReceivedCallback =
                  this.onEventReceived.bind(this)),
                  e.on(t, this._internal.onEventReceivedCallback);
                var n = this;
                this.context.eventEmitter.once(
                  "applicationDataReloaded",
                  function () {
                    n._internal.onEventReceivedCallback &&
                      e.removeListener(t, n._internal.onEventReceivedCallback);
                  }
                );
              },
              getChannelName: function () {
                return this._internal.channelName;
              },
            },
          };
        (t.exports = { node: o }),
          (t.exports = {
            node: o,
            setup: function (t, e) {
              function n(n) {
                var i = n.parameters.channelName;
                function o() {
                  var o = e
                      .getNodesWithType("Event Sender")
                      .filter((t) => t.parameters.channelName === i),
                    r = {};
                  o.forEach((t) => {
                    for (let e in t.inputPorts) r[e] = !0;
                  });
                  var s = [];
                  for (var a in r)
                    s.push({
                      name: a,
                      type: "*",
                      plug: "output",
                      displayName: a,
                    });
                  t.editorConnection.sendDynamicPorts(n.id, s, {
                    detectRenamed: { plug: "output" },
                  });
                }
                function r(t) {
                  t.on("inputPortAdded", function (t) {
                    o();
                  }),
                    t.on("inputPortRemoved", function (t) {
                      o();
                    }),
                    t.on("parameterUpdated", function (t) {
                      "channelName" === t.name && o();
                    });
                }
                o(),
                  n.on("parameterUpdated", function (t) {
                    "channelName" === t.name && ((i = t.value), o());
                  }),
                  e.getNodesWithType("Event Sender").forEach(r),
                  e.on("nodeAdded.Event Sender", r),
                  e.on("nodeRemoved.Event Sender", (t) => {
                    o();
                  });
              }
              t.editorConnection &&
                t.editorConnection.isRunningLocally() &&
                e.on("editorImportComplete", () => {
                  e.on("nodeAdded.Event Receiver", (t) => n(t)),
                    e.getNodesWithType("Event Receiver").forEach((t) => n(t));
                });
            },
          });
      },
      3099: (t) => {
        "use strict";
        t.exports = {
          node: {
            name: "Event Sender",
            docs: "https://docs.noodl.net/nodes/events/send-event",
            displayNodeName: "Send Event",
            category: "Events",
            usePortAsLabel: "channelName",
            color: "component",
            exportDynamicPorts: !0,
            panels: [
              {
                name: "PortEditor",
                context: ["select", "connectFrom"],
                title: "Payload",
                plug: "input",
                group: "Payload",
                type: { name: "*", allowConnectionOnly: !0 },
              },
            ],
            initialize: function () {
              (this._internal.inputValues = {}),
                (this._internal.channelName = ""),
                (this._internal.propagation = "global");
            },
            inputs: {
              sendEvent: {
                displayName: "Send",
                valueChangedToTrue: function () {
                  var t = this;
                  this.scheduleAfterInputsHaveUpdated(function () {
                    "global" === t._internal.propagation
                      ? t.context.sendGlobalEventFromEventSender(
                          t._internal.channelName,
                          t._internal.inputValues
                        )
                      : t.nodeScope.sendEventFromThisScope(
                          t._internal.channelName,
                          t._internal.inputValues,
                          t._internal.propagation
                        );
                  });
                },
              },
              channelName: {
                type: {
                  name: "string",
                  allowEditOnly: !0,
                  identifierOf: "EventChannelName",
                  identifierDisplayName: "Event Channels",
                },
                default: "",
                group: "Settings",
                displayName: "Channel Name",
                set: function (t) {
                  (this._internal.channelName = t),
                    (this._internal.inputValues._channelName = t);
                },
              },
              propagation: {
                type: {
                  name: "enum",
                  enums: [
                    { value: "global", label: "Global" },
                    { value: "parent", label: "Parent" },
                    { value: "children", label: "Children" },
                    { value: "siblings", label: "Siblings" },
                  ],
                },
                default: "global",
                group: "Settings",
                displayName: "Send to",
                set: function (t) {
                  this._internal.propagation = t;
                },
              },
            },
            prototypeExtensions: {
              registerInputIfNeeded: {
                value: function (t) {
                  if (!this.hasInput(t)) {
                    var e = this;
                    this.registerInput(t, {
                      set: function (n) {
                        e._internal.inputValues[t] = n;
                      },
                    });
                  }
                },
              },
            },
          },
          setup: function (t, e) {
            t.editorConnection && t.editorConnection.isRunningLocally();
          },
        };
      },
      9283: (t, e, n) => {
        "use strict";
        const i = n(1478),
          o = n(8750),
          r = {
            name: "Expression",
            docs: "https://docs.noodl.net/nodes/math/expression",
            usePortAsLabel: "expression",
            category: "CustomCode",
            color: "javascript",
            initialize: function () {
              var t = this._internal;
              (t.scope = {}),
                (t.hasScheduledEvaluation = !1),
                (t.code = void 0),
                (t.cachedValue = 0),
                (t.currentExpression = ""),
                (t.compiledFunction = void 0),
                (t.inputNames = []),
                (t.inputValues = []);
            },
            getInspectInfo() {
              return this._internal.cachedValue;
            },
            inputs: {
              expression: {
                inputPriority: 1,
                type: {
                  name: "string",
                  allowEditOnly: !0,
                  codeeditor: "javascript",
                },
                displayName: "Expression",
                set: function (t) {
                  var e = this._internal;
                  (e.currentExpression = s + "return (" + t + ");"),
                    (e.compiledFunction = void 0);
                  var n = u(t),
                    r = i(n, e.inputNames),
                    a = i(e.inputNames, n),
                    l = this;
                  a.forEach(function (t) {
                    l.deregisterInput(t), delete e.scope[t];
                  }),
                    r.forEach(function (t) {
                      l.hasInput(t) ||
                        (l.registerInput(t, {
                          set: function (n) {
                            (e.scope[t] = n),
                              this._scheduleEvaluateExpression();
                          },
                        }),
                        (e.scope[t] = 0),
                        (l._inputValues[t] = 0));
                    }),
                    (-1 === t.indexOf("Vars") &&
                      -1 === t.indexOf("Variables")) ||
                      ((this._internal.onVariablesChangedCallback = (t) => {
                        this._scheduleEvaluateExpression();
                      }),
                      o
                        .get("--ndl--global-variables")
                        .off(
                          "change",
                          this._internal.onVariablesChangedCallback
                        ),
                      o
                        .get("--ndl--global-variables")
                        .on(
                          "change",
                          this._internal.onVariablesChangedCallback
                        )),
                    (e.inputNames = Object.keys(e.scope)),
                    this._scheduleEvaluateExpression();
                },
              },
            },
            outputs: {
              result: {
                type: "*",
                displayName: "Result",
                getter: function () {
                  return this._internal.currentExpression
                    ? this._internal.cachedValue
                    : 0;
                },
              },
            },
            prototypeExtensions: {
              registerInputIfNeeded: {
                value: function (t) {
                  this.hasInput(t) ||
                    ((this._internal.scope[t] = 0),
                    (this._inputValues[t] = 0),
                    this.registerInput(t, {
                      set: function (e) {
                        (this._internal.scope[t] = e),
                          this._scheduleEvaluateExpression();
                      },
                    }));
                },
              },
              _scheduleEvaluateExpression: {
                value: function () {
                  var t = this._internal;
                  !1 === t.hasScheduledEvaluation &&
                    ((t.hasScheduledEvaluation = !0),
                    this.flagDirty(),
                    this.scheduleAfterInputsHaveUpdated(function () {
                      var e = t.cachedValue;
                      (t.cachedValue = this._calculateExpression()),
                        e !== t.cachedValue && this.flagOutputDirty("result"),
                        (t.hasScheduledEvaluation = !1);
                    }));
                },
              },
              _calculateExpression: {
                value: function () {
                  var t = this._internal;
                  t.compiledFunction ||
                    (t.compiledFunction = this._compileFunction());
                  for (var e = 0; e < t.inputNames.length; ++e) {
                    var n = t.scope[t.inputNames[e]];
                    t.inputValues[e] = n;
                  }
                  try {
                    return t.compiledFunction.apply(null, t.inputValues);
                  } catch (t) {
                    console.error("Error in expression:", t.message);
                  }
                  return 0;
                },
              },
              _compileFunction: {
                value: function () {
                  var t = this._internal.currentExpression,
                    e = Object.keys(this._internal.scope),
                    n = t + e.join(" ");
                  if (!1 === a.hasOwnProperty(n)) {
                    e.push(t);
                    try {
                      a[n] = (function (t, e) {
                        function n() {
                          return t.apply(this, e);
                        }
                        return (n.prototype = t.prototype), new n();
                      })(Function, e);
                    } catch (t) {
                      console.error("Failed to compile JS function", t.message);
                    }
                  }
                  return a[n];
                },
              },
            },
          };
        var s = [
            'var min = Math.min,    max = Math.max,    cos = Math.cos,    sin = Math.sin,    tan = Math.tan,    sqrt = Math.sqrt,    pi = Math.PI,    round = Math.round,    floor = Math.floor,    ceil = Math.ceil,    abs = Math.abs,    random = Math.random,    Vars = Variables = Noodl.Object.get("--ndl--global-variables");',
          ].join(""),
          a = {},
          l = [
            "min",
            "max",
            "cos",
            "sin",
            "tan",
            "sqrt",
            "pi",
            "round",
            "floor",
            "ceil",
            "abs",
            "random",
            "Math",
            "window",
            "document",
            "undefined",
            "Vars",
            "true",
            "false",
          ];
        function u(t) {
          var e = [];
          function n(t) {
            -1 === l.indexOf(t) &&
              (e.some(function (e) {
                return e === t;
              }) ||
                e.push(t));
          }
          var i = (t = t
            .replace(/\"([^\"]*)\"/g, "")
            .replace(/\'([^\']*)\'/g, "")).matchAll(
            /[a-zA-Z\_\$][a-zA-Z0-9\.\_\$]*/g
          );
          for (const t of i) {
            var o = t[0];
            -1 !== o.indexOf(".") && (o = o.split(".")[0]), n(o);
          }
          return e;
        }
        function p(t, e, n) {
          var i = u(e).map(function (t) {
            return {
              name: t,
              type: { name: "*", editAsType: "string" },
              plug: "input",
            };
          });
          n.sendDynamicPorts(t, i);
        }
        function c(t, e) {
          try {
            new Function(e.parameters.expression),
              t.clearWarning(
                e.component.name,
                e.id,
                "expression-compile-error"
              );
          } catch (n) {
            t.sendWarning(e.component.name, e.id, "expression-compile-error", {
              message: n.message,
            });
          }
        }
        t.exports = {
          node: r,
          setup: function (t, e) {
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("nodeAdded.Expression", function (e) {
                e.parameters.expression &&
                  (p(e.id, e.parameters.expression, t.editorConnection),
                  c(t.editorConnection, e)),
                  e.on("parameterUpdated", function (n) {
                    "expression" === n.name &&
                      (p(e.id, e.parameters.expression, t.editorConnection),
                      c(t.editorConnection, e));
                  });
              });
          },
        };
      },
      8471: (t) => {
        "use strict";
        function e(t) {
          if (void 0 !== t) return !t;
        }
        const n = {
          name: "Inverter",
          docs: "https://docs.noodl.net/nodes/logic/inverter",
          category: "Logic",
          initialize: function () {
            this._internal.currentValue = void 0;
          },
          getInspectInfo() {
            return String(e(this._internal.currentValue));
          },
          inputs: {
            value: {
              type: { name: "boolean" },
              displayName: "Value",
              set: function (t) {
                (this._internal.currentValue = t),
                  this.flagOutputDirty("result");
              },
            },
          },
          outputs: {
            result: {
              type: "boolean",
              displayName: "Result",
              getter: function () {
                return e(this._internal.currentValue);
              },
            },
          },
        };
        t.exports = { node: n };
      },
      5617: (t, e, n) => {
        "use strict";
        const i = n(5855).Node,
          o = n(9406),
          r = n(5821);
        var s = {
          name: "Javascript2",
          docs: "https://docs.noodl.net/nodes/javascript/script",
          displayNodeName: "Script",
          category: "CustomCode",
          color: "javascript",
          exportDynamicPorts: !0,
          initialize: function () {
            var t = this._internal;
            (t.inputValues = {}),
              (t.outputValues = {}),
              (t.outputProperties = {}),
              (t.runScheduled = !1),
              (t.setupScheduled = !1),
              (t.runNextFrameScheduled = !1),
              (t.isWaitingForExternalFileToLoad = !1),
              (t.useExternalFile = !1),
              (t.runFunction = void 0),
              (t.destroyFunction = void 0),
              (t.setupFunction = void 0),
              (t.hasParsedCode = !1),
              (t.changedInputs = {}),
              (t.signalScheduled = {}),
              (t.killed = !1),
              (t.inputQueue = []);
            var e = this;
            (t.userFunctionScope = {
              createComponent: (t) => (
                t && t.length > 0 && "/" !== t[0] && (t = "/" + t),
                e.nodeScope.createNode(t, r())
              ),
              deleteComponent(t) {
                e.nodeScope.deleteNode(t);
              },
              flagOutputDirty: function (t) {
                if (!t) throw new Error("Output port name must be specified");
                e.flagOutputDirty(t);
              },
              runNextFrame: function () {
                t.runNextFrameScheduled ||
                  ((t.runNextFrameScheduled = !0),
                  e.context.scheduleNextFrame(function () {
                    (t.runNextFrameScheduled = !1), t.killed || l.call(e);
                  }));
              },
              sendSignalOnOutput: function (t) {
                e.sendSignalOnOutput(t);
              },
            }),
              (t.onFrameStart = p.bind(this));
          },
          dynamicports: [
            {
              condition: "useExternalFile = no OR useExternalFile NOT SET",
              inputs: ["code"],
            },
            { condition: "useExternalFile = yes", inputs: ["externalFile"] },
          ],
          inputs: {
            scriptInputs: {
              type: { name: "proplist", allowEditOnly: !0 },
              group: "Script Inputs",
              set: function (t) {},
            },
            scriptOutputs: {
              type: { name: "proplist", allowEditOnly: !0 },
              group: "Script Outputs",
              set: function (t) {},
            },
            useExternalFile: {
              type: {
                name: "enum",
                enums: [
                  { value: "yes", label: "Yes" },
                  { value: "no", label: "No" },
                ],
                allowEditOnly: !0,
              },
              default: "no",
              displayName: "Use External File",
              group: "Code",
              set: function (t) {
                (this._internal.isWaitingForExternalFileToLoad = "yes" === t),
                  (this._internal.useExternalFile = "yes" === t);
              },
            },
            code: {
              displayName: "Code",
              group: "Code",
              type: {
                name: "string",
                allowEditOnly: !0,
                codeeditor: "javascript",
              },
              default: "",
              set: function (t) {
                if (t) {
                  var e = this;
                  this.scheduleAfterInputsHaveUpdated(function () {
                    if (!1 === this._internal.useExternalFile) {
                      this._callDestroyFunction();
                      var n = o.createFromCode(t, { node: this });
                      e._onCodeParsed(n);
                    }
                  });
                }
              },
            },
            externalFile: {
              displayName: "File Path",
              group: "Code",
              type: { name: "source", allowEditOnly: !0 },
              set: function (t) {
                if (!1 !== this._internal.useExternalFile) {
                  var e = this;
                  o.createFromURL(
                    t,
                    function (t) {
                      (e._internal.isWaitingForExternalFileToLoad = !1),
                        e._onCodeParsed(t);
                    },
                    { node: this }
                  );
                }
              },
            },
          },
          prototypeExtensions: {
            _onNodeDeleted: function () {
              i.prototype._onNodeDeleted.call(this),
                (this._internal.killed = !0),
                this._callDestroyFunction();
            },
            update: function () {
              !0 === this._internal.isWaitingForExternalFileToLoad
                ? (this._dirty = !1)
                : i.prototype.update.call(this);
            },
            _onCodeParsed: function (t) {
              const e = this.context.editorConnection;
              if (e)
                for (const t of [
                  "js-destroy-waring",
                  "js-run-waring",
                  "js-setup-waring",
                ])
                  e.clearWarning(
                    this.nodeScope.componentOwner.name,
                    this.id,
                    t
                  );
              if (!t.error) {
                if (
                  (Object.keys(this.model.inputPorts).forEach((t) => {
                    const e = this.model.inputPorts[t].type;
                    ("color" !== e && "color" !== e.name) ||
                      ((this._internal.inputValues[t] = void 0),
                      this.hasInput(t)
                        ? (this.getInput(t).type = "color")
                        : this.registerInput(t, {
                            type: "color",
                            set: d.bind(this, t),
                          }));
                  }),
                  Object.keys(this.model.outputPorts).forEach((t) => {
                    this.registerOutputIfNeeded(t);
                  }),
                  (this._internal.setupFunction = t.setup),
                  (this._internal.runFunction = t.change),
                  (this._internal.destroyFunction = t.destroy),
                  (this._internal.definedObject = t.definedObject),
                  this._internal.setupFunction && a.call(this),
                  this._internal.runFunction && l.call(this),
                  (this._internal.hasParsedCode = !0),
                  this._internal.inputQueue)
                ) {
                  for (const { name: t, value: e } of this._internal.inputQueue)
                    this.setInputValue(t, e);
                  this._internal.inputQueue = void 0;
                }
                (t.apis.Node.Inputs = this._internal.inputValues),
                  (t.apis.Node.Outputs = this._internal.outputProperties);
              }
            },
            registerInputIfNeeded: function (t) {
              this.hasInput(t) ||
                ((this._internal.inputValues[t] = void 0),
                this.registerInput(t, { set: d.bind(this, t) }));
            },
            registerOutputIfNeeded: function (t) {
              if (this.hasOutput(t)) return;
              var e = this;
              const n = "signal" === c(this.model.outputPorts[t].type);
              Object.defineProperty(this._internal.outputProperties, t, {
                set: function (i) {
                  n ||
                    ((e._internal.outputValues[t] = i), e.flagOutputDirty(t));
                },
                get: function () {
                  return n
                    ? () => {
                        e.hasOutput(t) && e.sendSignalOnOutput(t);
                      }
                    : e._internal.outputValues[t];
                },
              }),
                this.registerOutput(t, { getter: h.bind(this, t) });
            },
            _callRunFunction: function () {
              var t = this._internal;
              if (t.runFunction && !t.killed)
                try {
                  t.runFunction.call(
                    t.userFunctionScope,
                    t.inputValues,
                    t.outputProperties,
                    t.changedInputs
                  );
                } catch (t) {
                  console.log(
                    "Error in JS node run code.",
                    Object.getPrototypeOf(t).constructor.name + ": " + t.message
                  ),
                    this.context.editorConnection &&
                      this.context.isWarningTypeEnabled(
                        "javascriptExecution"
                      ) &&
                      this.context.editorConnection.sendWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "js-run-waring",
                        {
                          showGlobally: !0,
                          message: "<strong>run</strong>: " + t.message,
                        }
                      );
                }
            },
            _callSignalFunction: function (t) {
              var e = this._internal;
              if (
                e.definedObject &&
                !e.killed &&
                e.definedObject[t] &&
                "function" == typeof e.definedObject[t]
              )
                try {
                  e.definedObject[t].call(
                    e.userFunctionScope,
                    e.inputValues,
                    e.outputProperties
                  );
                } catch (t) {
                  console.log(
                    "Error in JS node signal function code.",
                    Object.getPrototypeOf(t).constructor.name + ": " + t.message
                  ),
                    this.context.editorConnection &&
                      this.context.isWarningTypeEnabled(
                        "javascriptExecution"
                      ) &&
                      this.context.editorConnection.sendWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "js-run-waring",
                        {
                          showGlobally: !0,
                          message: "<strong>run</strong>: " + t.message,
                        }
                      );
                }
            },
            _callDestroyFunction: function () {
              var t = this._internal;
              if (t.destroyFunction)
                try {
                  t.destroyFunction.call(
                    t.userFunctionScope,
                    t.inputValues,
                    t.outputProperties
                  );
                } catch (t) {
                  console.log(
                    "Error in JS node destroy code.",
                    Object.getPrototypeOf(t).constructor.name + ": " + t.message
                  ),
                    this.context.editorConnection &&
                      this.context.isWarningTypeEnabled(
                        "javascriptExecution"
                      ) &&
                      this.context.editorConnection.sendWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "js-destroy-waring",
                        {
                          showGlobally: !0,
                          message: "<strong>setup</strong>: " + t.message,
                        }
                      );
                }
            },
            _callSetupFunction: function () {
              var t = this._internal;
              if (t.setupFunction && !t.killed)
                try {
                  t.setupFunction.call(
                    t.userFunctionScope,
                    t.inputValues,
                    t.outputProperties
                  );
                } catch (t) {
                  console.log(
                    "Error in JS node setup code.",
                    Object.getPrototypeOf(t).constructor.name + ": " + t.message
                  ),
                    this.context.editorConnection &&
                      this.context.isWarningTypeEnabled(
                        "javascriptExecution"
                      ) &&
                      this.context.editorConnection.sendWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "js-setup-waring",
                        {
                          showGlobally: !0,
                          message: "<strong>setup</strong>: " + t.message,
                        }
                      );
                }
            },
          },
        };
        function a() {
          this._internal.setupScheduled ||
            ((this._internal.setupScheduled = !0),
            this.scheduleAfterInputsHaveUpdated(function () {
              this._internal.killed ||
                (this._callSetupFunction(),
                (this._internal.setupScheduled = !1));
            }));
        }
        function l() {
          this._internal.runScheduled ||
            this._internal.killed ||
            ((this._internal.runScheduled = !0),
            this.scheduleAfterInputsHaveUpdated(function () {
              this._internal.killed ||
                (this._callRunFunction(),
                (this._internal.changedInputs = {}),
                (this._internal.runScheduled = !1));
            }));
        }
        function u(t) {
          this._internal.signalScheduled[t] ||
            this._internal.killed ||
            ((this._internal.signalScheduled[t] = !0),
            this.scheduleAfterInputsHaveUpdated(function () {
              this._internal.killed ||
                (this._callSignalFunction(t),
                (this._internal.signalScheduled[t] = !1));
            }));
        }
        function p() {
          (this._internal.runNextFrame = !1), l.call(this);
        }
        function c(t) {
          return "string" == typeof t ? t : t.name;
        }
        function d(t, e) {
          !0 === this._internal.hasParsedCode
            ? void 0 !== this.model.inputPorts[t] &&
              "signal" === c(this.model.inputPorts[t].type)
              ? this._internal.definedObject &&
                "function" == typeof this._internal.definedObject[t] &&
                e &&
                u.call(this, t)
              : ((this._internal.inputValues[t] = e),
                (this._internal.changedInputs[t] = !0),
                l.call(this))
            : this._internal.inputQueue.push({ name: t, value: e });
        }
        function h(t) {
          return this._internal.outputValues[t];
        }
        t.exports = {
          node: s,
          setup: function (t, e) {
            function n(e) {
              function n() {
                var n = [];
                const i = [
                    { value: "string", label: "String" },
                    { value: "boolean", label: "Boolean" },
                    { value: "number", label: "Number" },
                    { value: "object", label: "Object" },
                    { value: "array", label: "Array" },
                  ],
                  r = [
                    { value: "string", label: "String" },
                    { value: "boolean", label: "Boolean" },
                    { value: "number", label: "Number" },
                    { value: "object", label: "Object" },
                    { value: "array", label: "Array" },
                    { value: "signal", label: "Signal" },
                  ];
                void 0 !== e.parameters.scriptOutputs &&
                  e.parameters.scriptOutputs.length > 0 &&
                  e.parameters.scriptOutputs.forEach((t) => {
                    n.push({
                      name: "outtype-" + t.label,
                      displayName: "Type",
                      plug: "input",
                      type: { name: "enum", enums: r, allowEditOnly: !0 },
                      default: "string",
                      parent: "scriptOutputs",
                      parentItemId: t.id,
                    }),
                      n.push({
                        name: t.label,
                        plug: "output",
                        type: e.parameters["outtype-" + t.label] || "*",
                        group: "Outputs",
                      });
                  }),
                  void 0 !== e.parameters.scriptInputs &&
                    e.parameters.scriptInputs.length > 0 &&
                    e.parameters.scriptInputs.forEach((t) => {
                      n.push({
                        name: "intype-" + t.label,
                        displayName: "Type",
                        plug: "input",
                        type: { name: "enum", enums: i, allowEditOnly: !0 },
                        default: "string",
                        parent: "scriptInputs",
                        parentItemId: t.id,
                      }),
                        n.push({
                          name: t.label,
                          plug: "input",
                          type: e.parameters["intype-" + t.label] || "string",
                          group: "Inputs",
                        });
                    }),
                  (function (t, e, n) {
                    var i = e.editorConnection;
                    if (t.parameters)
                      if (
                        t.parameters.externalFile &&
                        "yes" === t.parameters.useExternalFile
                      ) {
                        var r = t.parameters.externalFile;
                        o.createFromURL(r, a);
                      } else
                        t.parameters.code
                          ? a(o.createFromCode(t.parameters.code))
                          : (s(), n([]));
                    function s() {
                      for (const e of [
                        "js-parse-waring",
                        "js-destroy-waring",
                        "js-run-waring",
                        "js-setup-waring",
                      ])
                        i.clearWarning(t.component.name, t.id, e);
                    }
                    function a(e) {
                      e.error
                        ? i.sendWarning(
                            t.component.name,
                            t.id,
                            "js-parse-waring",
                            { showGlobally: !0, message: e.error }
                          )
                        : s(),
                        n(e.getPorts());
                    }
                  })(e, t, function (i) {
                    i.forEach((t) => {
                      n.find((e) => e.name === t.name && e.plug === t.plug) ||
                        n.push(t);
                    }),
                      t.editorConnection.sendDynamicPorts(e.id, n);
                  });
              }
              n(),
                e.on("parameterUpdated", function (t) {
                  n();
                });
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.Javascript2", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("Javascript2")) n(t);
              });
          },
        };
      },
      6534: (t) => {
        "use strict";
        const e = {
          name: "Number Remapper",
          docs: "https://docs.noodl.net/nodes/math/number-remapper",
          category: "Math",
          initialize: function () {
            var t = this._internal;
            (t._currentInputValue = 0),
              (t._remappedValue = 0),
              (t._minInputValue = 0),
              (t._maxInputValue = 0),
              (t._minOutputValue = 0),
              (t._maxOutputValue = 1),
              (t._clampOutput = !0);
          },
          getInspectInfo() {
            return this._internal._remappedValue;
          },
          inputs: {
            inputValue: {
              group: "Value to Remap",
              type: { name: "number", allowConnectionOnly: !0 },
              default: 0,
              displayName: "Input Value",
              set: function (t) {
                (this._internal._currentInputValue = t),
                  this._calculateNewOutputValue();
              },
            },
            minInputValue: {
              group: "Input Parameters",
              type: { name: "number" },
              default: 0,
              displayName: "Input Minimum",
              set: function (t) {
                (this._internal._minInputValue = t),
                  this._calculateNewOutputValue();
              },
            },
            maxInputValue: {
              group: "Input Parameters",
              type: { name: "number" },
              default: 0,
              displayName: "Input Maximum",
              set: function (t) {
                (this._internal._maxInputValue = t),
                  this._calculateNewOutputValue();
              },
            },
            minOutputValue: {
              group: "Output Parameters",
              type: { name: "number" },
              default: 0,
              displayName: "Output Minimum",
              set: function (t) {
                (this._internal._minOutputValue = t),
                  this._calculateNewOutputValue();
              },
            },
            maxOutputValue: {
              group: "Output Parameters",
              type: { name: "number" },
              default: 1,
              displayName: "Output Maximum",
              set: function (t) {
                (this._internal._maxOutputValue = t),
                  this._calculateNewOutputValue();
              },
            },
            clamp: {
              group: "Output Parameters",
              type: { name: "boolean", allowEditOnly: !0 },
              default: !0,
              displayName: "Clamp Output",
              set: function (t) {
                (this._internal._clampOutput = !!t),
                  this._calculateNewOutputValue();
              },
            },
          },
          outputs: {
            remappedValue: {
              type: "number",
              displayName: "Remapped Value",
              group: "Outputs",
              getter: function () {
                return this._internal._remappedValue;
              },
            },
          },
          prototypeExtensions: {
            _calculateNewOutputValue: {
              value: function () {
                var t,
                  e = this._internal;
                (t =
                  e._maxInputValue === e._minInputValue
                    ? 0
                    : (e._currentInputValue - e._minInputValue) /
                      (e._maxInputValue - e._minInputValue)),
                  e._clampOutput && (t = Math.max(0, Math.min(1, t))),
                  (e._remappedValue =
                    e._minOutputValue +
                    t * (e._maxOutputValue - e._minOutputValue)),
                  this.flagOutputDirty("remappedValue");
              },
            },
          },
        };
        t.exports = { node: e };
      },
      2784: (t) => {
        "use strict";
        const e = {
          name: "Open File Picker",
          docs: "https://docs.noodl.net/nodes/utilities/open-file-picker",
          category: "Utilities",
          getInspectInfo() {
            if (this._internal.file) return this._internal.file.path;
          },
          initialize() {
            const t = document.createElement("input");
            (t.type = "file"), (this._internal.inputElement = t);
          },
          inputs: {
            open: {
              type: "signal",
              displayName: "Open",
              group: "Actions",
              valueChangedToTrue() {
                const t = this._internal.inputElement;
                (t.accept = this._internal.acceptedFileTypes),
                  (t.onchange = (e) => {
                    (this._internal.file = e.target.files[0]),
                      this.flagOutputDirty("file"),
                      this.flagOutputDirty("path"),
                      this.flagOutputDirty("name"),
                      this.flagOutputDirty("sizeInBytes"),
                      this.flagOutputDirty("type"),
                      this.sendSignalOnOutput("success"),
                      (t.onchange = null);
                  }),
                  t.click();
              },
            },
            acceptedFileTypes: {
              group: "General",
              type: "string",
              displayName: "Accepted file types",
              set(t) {
                this._internal.acceptedFileTypes = t;
              },
            },
          },
          outputs: {
            file: {
              type: "*",
              displayName: "File",
              group: "General",
              get() {
                return this._internal.file;
              },
            },
            path: {
              displayName: "Path",
              group: "Metadata",
              type: "string",
              get() {
                return this._internal.file && this._internal.file.path;
              },
            },
            name: {
              displayName: "Name",
              group: "Metadata",
              type: "string",
              get() {
                return this._internal.file && this._internal.file.name;
              },
            },
            sizeInBytes: {
              displayName: "Size in bytes",
              group: "Metadata",
              type: "number",
              get() {
                return this._internal.file && this._internal.file.size;
              },
            },
            type: {
              displayName: "Type",
              group: "Metadata",
              type: "string",
              get() {
                return this._internal.file && this._internal.file.type;
              },
            },
            success: {
              type: "signal",
              group: "Events",
              displayName: "Success",
            },
          },
        };
        t.exports = { node: e };
      },
      483: (t) => {
        "use strict";
        const e = {
          name: "Or",
          docs: "https://docs.noodl.net/nodes/logic/or",
          category: "Logic",
          initialize: function () {
            this._internal.inputs = [];
          },
          getInspectInfo() {
            return this._internal.inputs.some(n);
          },
          numberedInputs: {
            input: {
              type: "boolean",
              displayPrefix: "Input",
              createSetter: (t) =>
                function (e) {
                  this._internal.inputs[t] !== e &&
                    ((this._internal.inputs[t] = e),
                    this.flagOutputDirty("result"));
                },
            },
          },
          outputs: {
            result: {
              type: "boolean",
              displayName: "Result",
              getter: function () {
                return this._internal.inputs.some(n);
              },
            },
          },
        };
        function n(t) {
          return !!t;
        }
        t.exports = { node: e };
      },
      4417: (t) => {
        "use strict";
        const e = {
          name: "Screen Resolution",
          docs: "https://docs.noodl.net/nodes/utilities/screen-resolution",
          category: "Utilities",
          initialize() {
            window.addEventListener("resize", () => {
              this._viewportSizeChanged();
            }),
              this._viewportSizeChanged();
          },
          getInspectInfo() {
            return this._internal.width + " x " + this._internal.height;
          },
          outputs: {
            width: {
              type: "number",
              displayName: "Width",
              get() {
                return this._internal.width;
              },
            },
            height: {
              type: "number",
              displayName: "Height",
              get() {
                return this._internal.height;
              },
            },
            aspectRatio: {
              type: "number",
              displayName: "Aspect Ratio",
              get() {
                return this._internal.width / this._internal.height;
              },
            },
          },
          methods: {
            _viewportSizeChanged() {
              (this._internal.width = window.innerWidth),
                (this._internal.height = window.innerHeight),
                this.flagAllOutputsDirty();
            },
          },
        };
        t.exports = { node: e };
      },
      4419: (t, e, n) => {
        const i = n(9406),
          o = {
            name: "JavaScriptFunction",
            displayNodeName: "Function",
            docs: "https://docs.noodl.net/nodes/javascript/function",
            category: "CustomCode",
            color: "javascript",
            exportDynamicPorts: !0,
            initialize: function () {
              (this._internal.inputValues = {}),
                (this._internal.outputValues = {}),
                (this._internal.outputValuesProxy = new Proxy(
                  this._internal.outputValues,
                  {
                    set: (t, e, n) => (
                      n !== this._internal.outputValues[e] &&
                        (this.registerOutputIfNeeded("out-" + e),
                        (this._internal.outputValues[e] = n),
                        this.flagOutputDirty("out-" + e)),
                      !0
                    ),
                  }
                )),
                (this._internal._this = {});
            },
            getInspectInfo() {
              return [
                {
                  type: "value",
                  value: {
                    inputs: this._internal.inputValues,
                    outputs: this._internal.outputValues,
                  },
                },
              ];
            },
            inputs: {
              scriptInputs: {
                type: { name: "proplist", allowEditOnly: !0 },
                group: "Script Inputs",
                set(t) {},
              },
              scriptOutputs: {
                type: { name: "proplist", allowEditOnly: !0 },
                group: "Script Outputs",
                set(t) {},
              },
              functionScript: {
                displayName: "Script",
                plug: "input",
                type: {
                  name: "string",
                  allowEditOnly: !0,
                  codeeditor: "javascript",
                },
                group: "General",
                set(t) {
                  void 0 !== t
                    ? ((this._internal.func = this.parseScript(t)),
                      this.isInputConnected("run") || this.scheduleRun())
                    : (this._internal.func = void 0);
                },
              },
              run: {
                type: "signal",
                displayName: "Run",
                group: "Actions",
                valueChangedToTrue: function () {
                  this.scheduleRun();
                },
              },
            },
            outputs: {},
            methods: {
              scheduleRun: function () {
                this.runScheduled ||
                  ((this.runScheduled = !0),
                  this.scheduleAfterInputsHaveUpdated(() => {
                    (this.runScheduled = !1), this._deleted || this.runScript();
                  }));
              },
              runScript: async function () {
                const t = this._internal.func;
                if (void 0 === t) return;
                const e = this._internal.inputValues,
                  n = this._internal.outputValuesProxy;
                for (const t in this.model.outputPorts)
                  if (this._isSignalType(t)) {
                    const e = () => {
                      this.hasOutput(t) && this.sendSignalOnOutput(t);
                    };
                    (this._internal.outputValues[t.substring("out-".length)] =
                      e),
                      (this._internal.outputValues[
                        t.substring("out-".length)
                      ].send = e);
                  }
                try {
                  await t.apply(this._internal._this, [
                    e,
                    n,
                    i.getComponentScopeForNode(this),
                  ]);
                } catch (t) {
                  console.log(
                    "Error in JS node run code.",
                    Object.getPrototypeOf(t).constructor.name + ": " + t.message
                  ),
                    this.context.editorConnection &&
                      this.context.isWarningTypeEnabled(
                        "javascriptExecution"
                      ) &&
                      this.context.editorConnection.sendWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "js-function-run-waring",
                        { showGlobally: !0, message: t.message, stack: t.stack }
                      );
                }
              },
              setScriptInputValue: function (t, e) {
                (this._internal.inputValues[t] = e),
                  this.isInputConnected("run") || this.scheduleRun();
              },
              getScriptOutputValue: function (t) {
                return this._internal.outputValues[t];
              },
              setScriptInputType: function (t, e) {
                this._internal.inputTypes[t] = e;
              },
              setScriptOutputType: function (t, e) {
                this._internal.outputTypes[t] = e;
              },
              parseScript: function (t) {
                var e;
                try {
                  e = new (0,
                  Object.getPrototypeOf(async function () {}).constructor)(
                    "Inputs",
                    "Outputs",
                    "Component",
                    i.getCodePrefix() + t
                  );
                } catch (t) {
                  console.log("Error while parsing action script: " + t);
                }
                return e;
              },
              _isSignalType: function (t) {
                return (
                  this.model.outputPorts[t] &&
                  "signal" === this.model.outputPorts[t].type
                );
              },
              registerInputIfNeeded: function (t) {
                if (!this.hasInput(t)) {
                  if (t.startsWith("in-")) {
                    const e = t.substring("in-".length),
                      n = { set: this.setScriptInputValue.bind(this, e) };
                    this.model &&
                      this.model.parameters["intype-" + e] &&
                      (n.type = this.model.parameters["intype-" + e]),
                      this.registerInput(t, n);
                  }
                  if (t.startsWith("intype-")) {
                    const e = t.substring("intype-".length);
                    this.registerInput(t, {
                      set(t) {
                        this.hasInput("in" + e) &&
                          (this.getInput("in" + e).type = t);
                      },
                    });
                  }
                  t.startsWith("outtype-") &&
                    this.registerInput(t, { set() {} });
                }
              },
              registerOutputIfNeeded: function (t) {
                if (!this.hasOutput(t))
                  return t.startsWith("out-")
                    ? this.registerOutput(t, {
                        getter: this.getScriptOutputValue.bind(
                          this,
                          t.substring("out-".length)
                        ),
                      })
                    : void 0;
              },
            },
          },
          r = [
            { value: "string", label: "String" },
            { value: "boolean", label: "Boolean" },
            { value: "number", label: "Number" },
            { value: "object", label: "Object" },
            { value: "date", label: "Date" },
            { value: "array", label: "Array" },
            { value: "color", label: "Color" },
          ];
        t.exports = {
          node: o,
          setup: function (t, e) {
            function n(e) {
              function n() {
                var n = [];
                const o = r.concat([{ value: "signal", label: "Signal" }]);
                void 0 !== e.parameters.scriptOutputs &&
                  e.parameters.scriptOutputs.length > 0 &&
                  e.parameters.scriptOutputs.forEach((t) => {
                    n.push({
                      name: "outtype-" + t.label,
                      displayName: "Type",
                      editorName: t.label + " | Type",
                      plug: "input",
                      type: { name: "enum", enums: o, allowEditOnly: !0 },
                      default: "string",
                      parent: "scriptOutputs",
                      parentItemId: t.id,
                    }),
                      n.push({
                        name: "out-" + t.label,
                        displayName: t.label,
                        plug: "output",
                        type: e.parameters["outtype-" + t.label] || "*",
                        group: "Outputs",
                      });
                  }),
                  void 0 !== e.parameters.scriptInputs &&
                    e.parameters.scriptInputs.length > 0 &&
                    e.parameters.scriptInputs.forEach((t) => {
                      n.push({
                        name: "intype-" + t.label,
                        displayName: "Type",
                        editorName: t.label + " | Type",
                        plug: "input",
                        type: { name: "enum", enums: r, allowEditOnly: !0 },
                        default: "string",
                        parent: "scriptInputs",
                        parentItemId: t.id,
                      }),
                        n.push({
                          name: "in-" + t.label,
                          displayName: t.label,
                          plug: "input",
                          type: e.parameters["intype-" + t.label] || "string",
                          group: "Inputs",
                        });
                    }),
                  e.parameters.functionScript &&
                    ((function (t, e, n, o, r) {
                      if (
                        (o.editorConnection.clearWarning(
                          n.component.name,
                          n.id,
                          "js-function-run-waring"
                        ),
                        void 0 !== t)
                      ) {
                        try {
                          new (0,
                          Object.getPrototypeOf(async function () {})
                            .constructor)("Inputs", "Outputs", "Component", t),
                            o.editorConnection.clearWarning(
                              n.component.name,
                              n.id,
                              "js-function-parse-waring-"
                            );
                        } catch (t) {
                          o.editorConnection.sendWarning(
                            n.component.name,
                            n.id,
                            "js-function-parse-waring-",
                            { showGlobally: !0, message: t.message }
                          );
                        }
                        i.parseAndAddPortsFromScript(t, r, {
                          inputPrefix: "in-",
                          outputPrefix: "out-",
                        });
                      } else
                        o.editorConnection.clearWarning(
                          n.component.name,
                          n.id,
                          "js-function-parse-waring"
                        );
                    })(e.parameters.functionScript, 0, e, t, n),
                    n.forEach((t) => {
                      "signal" === t.type &&
                        "output" === t.plug &&
                        (e.outputPorts[t.name] = t);
                    })),
                  t.editorConnection.sendDynamicPorts(e.id, n);
              }
              n(),
                e.on("parameterUpdated", function (t) {
                  n();
                });
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.JavaScriptFunction", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("JavaScriptFunction")) n(t);
              });
          },
        };
      },
      6306: (t, e, n) => {
        "use strict";
        const { EdgeTriggeredInput: i } = n(5855),
          o = n(5936),
          r = n(9932),
          s = {},
          a = {};
        function l(t, e) {
          for (var n = 0; n < 3; ++n) {
            var i = 1 + 2 * n;
            t[n] = parseInt(e.substring(i, i + 2), 16);
          }
        }
        function u(t) {
          return "#" + p(t[0]) + p(t[1]) + p(t[2]);
        }
        function p(t) {
          var e = t.toString(16);
          return 1 == e.length ? "0" + e : e;
        }
        const c = {
          name: "States",
          docs: "https://docs.noodl.net/nodes/utilities/logic/states",
          shortDesc:
            "Define states with values and this node can interpolate between these values when the state is changed.",
          category: "Animation",
          initialize: function () {
            var t = this,
              e = this._internal;
            (e.useTransitions = !0),
              (e.currentValues = {}),
              (e.stateParameters = {}),
              (e.stateParameterTypes = {}),
              (e.startValues = {}),
              (e.bezierEaseCurves = {}),
              (e.transitionFuncs = {}),
              (e.valuesAreInitialised = !1),
              (e.animation = this.context.timerScheduler.createTimer({
                duration: 300,
                ease: o.easeOut,
                onStart: function () {
                  e.values;
                  var n = e.startValues,
                    i = e.stateParameters,
                    o = e.stateParameterTypes,
                    r = "value-" + e.state + "-";
                  for (var s in ((this.targetValues = {}),
                  (this.startValues = {}),
                  (this.valueTypes = {}),
                  this.transitionCurves))
                    "number" === o["type-" + s] || void 0 === o["type-" + s]
                      ? ((this.valueTypes[s] = "number"),
                        (this.startValues[s] = n[s]),
                        (this.targetValues[s] = i[r + s] || 0))
                      : "color" === o["type-" + s] &&
                        ((this.valueTypes[s] = "color"),
                        (this.startValues[s] = [0, 0, 0]),
                        l(
                          this.startValues[s],
                          t.context.styles.resolveColor(n[s] || "#000000")
                        ),
                        (this.targetValues[s] = [0, 0, 0]),
                        l(
                          this.targetValues[s],
                          t.context.styles.resolveColor(i[r + s] || "#000000")
                        ));
                },
                onRunning: function (n) {
                  var i = n * this.duration,
                    r = (e.values, e.currentValues),
                    s = [0, 0, 0];
                  for (var a in this.transitionCurves) {
                    var l = this.transitionCurves[a];
                    if (i < l.delay) r[a] = this.startValues[a];
                    else if (i >= l.delay + l.dur)
                      r[a] =
                        "color" === this.valueTypes[a]
                          ? u(this.targetValues[a])
                          : this.targetValues[a];
                    else {
                      var p = e.transitionFuncs[a].get((i - l.delay) / l.dur);
                      if ("number" === this.valueTypes[a])
                        r[a] = o.linear(
                          Number(this.startValues[a]),
                          Number(this.targetValues[a]),
                          p
                        );
                      else if ("color" === this.valueTypes[a]) {
                        var c = this.startValues[a],
                          d = this.targetValues[a];
                        (s[0] = Math.floor(o.linear(c[0], d[0], p))),
                          (s[1] = Math.floor(o.linear(c[1], d[1], p))),
                          (s[2] = Math.floor(o.linear(c[2], d[2], p))),
                          (r[a] = u(s));
                      }
                    }
                    t.flagOutputDirty(a);
                  }
                },
                onFinish: function () {
                  var n = "reached-" + e.state;
                  t.hasOutput(n) && t.sendSignalOnOutput(n);
                },
              }));
          },
          getInspectInfo() {
            return `Current state: ${this._internal.state}`;
          },
          inputs: {
            states: {
              type: { name: "stringlist", allowEditOnly: !0 },
              displayName: "States",
              group: "States",
              set: function (t) {
                if (
                  ((this._internal.states = t ? t.split(",") : []),
                  this._internal.states.length > 0)
                ) {
                  var e = this;
                  e._internal.state ||
                    this.scheduleGoToState(
                      e._internal.startState || e._internal.states[0]
                    );
                }
              },
            },
            values: {
              type: { name: "stringlist", allowEditOnly: !0 },
              displayName: "Values",
              group: "Values",
              set: function (t) {
                var e = this._internal;
                for (var n in ((e.values = t.split(",")), e.values))
                  this.registerOutputIfNeeded(e.values[n]);
              },
            },
            toggle: {
              group: "Go to state",
              displayName: "Toggle",
              valueChangedToTrue: function () {
                var t = this._internal;
                if (t.states) {
                  var e = (t.states.indexOf(t.state) + 1) % t.states.length;
                  this.scheduleGoToState(t.states[e]);
                }
              },
            },
            useTransitions: {
              type: "boolean",
              displayName: "Use Transitions",
              group: "General",
              default: !0,
              set: function (t) {
                this._internal.useTransitions = t;
              },
            },
          },
          outputs: {
            currentState: {
              type: "string",
              displayName: "State",
              group: "Current State",
              getter: function () {
                return this._internal.state;
              },
            },
            stateChanged: {
              type: "signal",
              displayName: "State Changed",
              group: "Current State",
            },
          },
          prototypeExtensions: {
            registerOutputIfNeeded: function (t) {
              var e = this._internal;
              this.hasOutput(t) ||
                this.registerOutput(t, {
                  getter: function () {
                    return e.currentValues[t];
                  },
                });
            },
            registerInputIfNeeded: function (t) {
              var e = this,
                n = this._internal;
              if (!this.hasInput(t))
                if (0 === t.indexOf("to-")) {
                  var o = t.substring(3);
                  this.registerInput(t, {
                    set: i.createSetter({
                      valueChangedToTrue: function () {
                        this.scheduleGoToState(o);
                      },
                    }),
                  });
                } else if ("startState" === t)
                  this.registerInput(t, {
                    set: function (t) {
                      (this._internal.startState = t),
                        this.scheduleGoToState(t);
                    },
                  });
                else if ("currentState" === t)
                  this.registerInput(t, {
                    set: this.scheduleGoToState.bind(this),
                  });
                else if (0 === t.indexOf("type-"))
                  this.registerInput(t, {
                    set: function (e) {
                      n.stateParameterTypes[t] = e;
                    },
                  });
                else if (0 === t.indexOf("value-")) {
                  var r = t.split("-"),
                    s = ((o = r[1]), r[2]);
                  this.registerInput(t, {
                    set: function (i) {
                      (n.stateParameters[t] = i),
                        n.state === o &&
                          ((n.currentValues[s] = i), e.flagOutputDirty(s));
                    },
                  });
                } else
                  0 === t.search(/duration-/g)
                    ? this.registerInput(t, {
                        set: function (e) {
                          n.stateParameters[t] = e;
                        },
                      })
                    : 0 === t.search(/transition/g) &&
                      ((o = t.substring(11)),
                      this.registerInput(t, {
                        set: function (e) {
                          n.stateParameters[t] = e;
                        },
                      }));
            },
            setCurrentState: function (t) {
              this.scheduleGoToState(t);
            },
            jumpToState: function (t) {
              var e = this._internal;
              if (e.states && (t || (t = e.states[0]), e.state !== t)) {
                e.animation.stop();
                var n = "value-" + t + "-";
                for (var i in e.values) {
                  var o = e.values[i];
                  (e.currentValues[o] = e.stateParameters[n + o] || 0),
                    this.flagOutputDirty(o);
                }
                (e.state = t),
                  this.flagOutputDirty("currentState"),
                  e.valuesAreInitialised &&
                    this.sendSignalOnOutput("stateChanged"),
                  (e.valuesAreInitialised = !0),
                  this.updateAtStatePorts();
              }
            },
            scheduleGoToState: function (t) {
              var e = this;
              (this._internal.goToState = t),
                this.hasScheduledGoToState ||
                  ((this.hasScheduledGoToState = !0),
                  this.scheduleAfterInputsHaveUpdated(function () {
                    (e.hasScheduledGoToState = !1),
                      e.goToState(e._internal.goToState);
                  }));
            },
            goToState: function (t) {
              var e = this._internal;
              if (e.states && (t || (t = e.states[0]), e.state !== t))
                if (e.valuesAreInitialised) {
                  var n = 0,
                    i = 0,
                    o = {};
                  for (var s in e.values) {
                    var a = e.values[s];
                    e.startValues[a] = e.currentValues[a];
                    const p = e.stateParameterTypes["type-" + a];
                    if ("boolean" === p) {
                      var l = e.stateParameters["value-" + t + "-" + a];
                      (e.currentValues[a] = void 0 !== l && !!l),
                        this.flagOutputDirty(a);
                    } else if ("string" === p || "textStyle" === p)
                      (e.currentValues[a] =
                        e.stateParameters["value-" + t + "-" + a]),
                        this.flagOutputDirty(a);
                    else {
                      var u = e.stateParameters["transition-" + t + "-" + a];
                      u ||
                        (u = e.stateParameters["transitiondef-" + t] || {
                          curve: [0, 0, 0.58, 1],
                          dur: 300,
                          delay: 0,
                        }),
                        (0 === u.dur && 0 === u.delay) || !e.useTransitions
                          ? ((e.currentValues[a] =
                              e.stateParameters["value-" + t + "-" + a]),
                            this.flagOutputDirty(a))
                          : ((e.transitionFuncs[a] = r(u.curve)),
                            (o[a] = u),
                            (n = Math.min(n, u.delay)),
                            (i = Math.max(i, u.dur + u.delay)));
                    }
                  }
                  if (
                    ((i > 0 || n > 0) &&
                      ((e.animation.transitionCurves = o),
                      (e.animation.duration = i),
                      (e.animation.delay = n),
                      e.animation.start()),
                    (e.state = t),
                    this.flagOutputDirty("currentState"),
                    this.sendSignalOnOutput("stateChanged"),
                    this.updateAtStatePorts(),
                    0 == i && 0 == n)
                  ) {
                    var p = "reached-" + e.state;
                    this.hasOutput(p) && this.sendSignalOnOutput(p);
                  }
                } else this.jumpToState(t);
            },
            updateAtStatePorts: function () {
              var t = this._internal,
                e = t.states;
              for (var n in e) {
                var i = e[n],
                  o = "at-" + i;
                (t.currentValues[o] = t.state === i),
                  this.hasOutput(o) && this.flagOutputDirty(o);
              }
            },
          },
        };
        function d(t, e) {
          if (t && e && t.length === e.length) {
            for (var n = {}, i = 0; i < t.length; i++) {
              if (-1 === e.indexOf(t[i])) {
                if (n.before) return;
                n.before = t[i];
              }
              if (-1 === t.indexOf(e[i])) {
                if (n.after) return;
                n.after = e[i];
              }
            }
            return n.before && n.after ? n : void 0;
          }
        }
        function h(t, e, n) {
          var i = e.states,
            o = e.values,
            r = [];
          for (var l in (o = o ? o.split(",") : void 0)) {
            var u = o[l];
            r.push({
              type: {
                name: e["type-" + u] || "number",
                allowConnectionsOnly: !0,
              },
              plug: "output",
              group: "Values",
              name: u,
            }),
              r.push({
                type: {
                  name: "enum",
                  enums: [
                    { label: "Number", value: "number" },
                    { label: "String", value: "string" },
                    { label: "Boolean", value: "boolean" },
                    { label: "Color", value: "color" },
                    { label: "Text Style", value: "textStyle" },
                  ],
                  allowEditOnly: !0,
                },
                default: "number",
                plug: "input",
                group: "Types",
                displayName: u,
                name: "type-" + u,
              });
          }
          (i = i ? i.split(",") : void 0) &&
            i.forEach(function (t) {
              o &&
                o.forEach(function (n) {
                  r.push({
                    plug: "input",
                    type: e["type-" + n] || "number",
                    group: t + " Values",
                    name: "value-" + t + "-" + n,
                    displayName: n,
                    editorName: t + "|" + n,
                  });
                }),
                o &&
                  !1 !== e.useTransitions &&
                  (r.push({
                    plug: "input",
                    type: "curve",
                    displayName: "Default",
                    default: { curve: [0, 0, 0.58, 1], dur: 300, delay: 0 },
                    group: t + " Transitions",
                    name: "transitiondef-" + t,
                  }),
                  o.forEach(function (n) {
                    (void 0 !== e["type-" + n] &&
                      "number" !== e["type-" + n] &&
                      "color" !== e["type-" + n]) ||
                      r.push({
                        plug: "input",
                        type: { name: "curve" },
                        default: e["transitiondef-" + t] || {
                          curve: [0, 0, 0.58, 1],
                          dur: 300,
                          delay: 0,
                        },
                        group: t + " Transitions",
                        name: "transition-" + t + "-" + n,
                        displayName: n,
                        editorName: "Transition " + t + "|" + n,
                      });
                  })),
                r.push({
                  plug: "input",
                  type: { name: "signal", allowConnectionsOnly: !0 },
                  displayName: "To " + t,
                  name: "to-" + t,
                  group: "Go to state",
                }),
                r.push({
                  plug: "output",
                  type: "boolean",
                  displayName: "At " + t,
                  name: "at-" + t,
                  group: "Current state",
                }),
                r.push({
                  plug: "output",
                  type: "signal",
                  displayName: "Has Reached " + t,
                  name: "reached-" + t,
                  group: "Current state",
                });
            }),
            i &&
              r.push({
                plug: "input",
                type: { name: "enum", enums: i },
                group: "States",
                displayName: "State",
                name: "currentState",
                default: e.startState || i[0],
              });
          var p = d(s[t], i);
          s[t] = i;
          var c = d(a[t], o);
          if (((a[t] = o), p)) {
            var h = {
              plug: "input",
              before: p.before,
              after: p.after,
              patterns: [
                "transition-{{*}}",
                "to-{{*}}",
                "at-{{*}}",
                "reached-{{*}}",
              ],
            };
            o &&
              o.forEach(function (t) {
                h.patterns.push("value-{{*}}-" + t);
              });
          } else
            c &&
              (h = [
                {
                  plug: "output",
                  before: c.before,
                  after: c.after,
                  patterns: ["{{*}}"],
                },
                {
                  plug: "input",
                  before: c.before,
                  after: c.after,
                  patterns: ["type-{{*}}"],
                },
                {
                  plug: "input",
                  before: c.before,
                  after: c.after,
                  patterns: i
                    ? i.map(function (t) {
                        return "value-" + t + "-{{*}}";
                      })
                    : void 0,
                },
              ]);
          n.sendDynamicPorts(t, r, { renamed: h });
        }
        t.exports = {
          node: c,
          setup: function (t, e) {
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("nodeAdded.States", function (e) {
                e.parameters.states &&
                  h(e.id, e.parameters, t.editorConnection),
                  e.on("parameterUpdated", function (n) {
                    ("useTransitions" === n.name ||
                      "states" === n.name ||
                      "values" === n.name ||
                      n.name.startsWith("transition") ||
                      n.name.startsWith("type-")) &&
                      h(e.id, e.parameters, t.editorConnection);
                  });
              });
          },
        };
      },
      6023: (t) => {
        const e = {
          name: "String Format",
          docs: "https://docs.noodl.net/nodes/string-manipulation/string-format",
          category: "String Manipulation",
          initialize() {
            const t = this._internal;
            (t.format = ""),
              (t.cachedResult = ""),
              (t.resultDirty = !1),
              (t.inputValues = {});
          },
          getInspectInfo() {
            return this.formatValue();
          },
          inputs: {
            format: {
              type: { name: "string", multiline: !0 },
              displayName: "Format",
              set(t) {
                this._internal.format !== t &&
                  ((this._internal.format = t),
                  (this._internal.resultDirty = !0),
                  this.scheduleFormat());
              },
            },
          },
          outputs: {
            formatted: {
              type: "string",
              displayName: "Formatted",
              get() {
                return this.formatValue();
              },
            },
          },
          methods: {
            formatValue() {
              var t = this._internal;
              if (t.resultDirty) {
                var e = t.format,
                  n = t.format.match(/\{[A-Za-z0-9_]*\}/g),
                  i = [];
                n &&
                  (i = n.map(function (t) {
                    return t.replace("{", "").replace("}", "");
                  })),
                  i.forEach(function (n) {
                    var i = t.inputValues[n];
                    e = e.replace("{" + n + "}", void 0 !== i ? i : "");
                  }),
                  (t.cachedResult = e),
                  (t.resultDirty = !1);
              }
              return t.cachedResult;
            },
            registerInputIfNeeded(t) {
              this.hasInput(t) ||
                this.registerInput(t, { set: n.bind(this, t) });
            },
            scheduleFormat() {
              this.formatScheduled ||
                ((this.formatScheduled = !0),
                this.scheduleAfterInputsHaveUpdated(() => {
                  this.formatValue(),
                    this.flagOutputDirty("formatted"),
                    (this.formatScheduled = !1);
                }));
            },
          },
        };
        function n(t, e) {
          this._internal.inputValues[t] !== e &&
            ((this._internal.inputValues[t] = e),
            (this._internal.resultDirty = !0),
            this.scheduleFormat());
        }
        function i(t, e, n) {
          var i = (e.match(/\{[A-Za-z0-9_]*\}/g) || [])
            .map(function (t) {
              return t.replace("{", "").replace("}", "");
            })
            .filter(function (t, e, n) {
              return n.indexOf(t) === e;
            })
            .map(function (t) {
              return { name: t, type: "string", plug: "input" };
            });
          n.sendDynamicPorts(t, i);
        }
        t.exports = {
          node: e,
          setup: function (t, e) {
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("nodeAdded.String Format", function (e) {
                e.parameters.format &&
                  i(e.id, e.parameters.format, t.editorConnection),
                  e.on("parameterUpdated", function (n) {
                    "format" === n.name &&
                      i(e.id, e.parameters.format, t.editorConnection);
                  });
              });
          },
        };
      },
      6506: (t) => {
        const e = {
          name: "String Mapper",
          docs: "https://docs.noodl.net/nodes/string-manipulation/string-mapper",
          category: "Utilities",
          initialize: function () {
            (this._internal.inputs = []), (this._internal.mappings = []);
          },
          getInspectInfo() {
            return this._internal.mappedString;
          },
          numberedInputs: {
            input: {
              type: "string",
              displayPrefix: "Input",
              group: "Inputs",
              index: 10,
              createSetter: (t) =>
                function (e) {
                  (e = void 0 === e ? "" : e.toString()),
                    (this._internal.inputs[t] = e),
                    this.scheduleMapping();
                },
            },
            output: {
              type: "string",
              displayPrefix: "Mapping",
              index: 1001,
              group: "Mappings",
              createSetter: (t) =>
                function (e) {
                  (e = void 0 === e ? "" : e.toString()),
                    (this._internal.mappings[t] = e),
                    this.scheduleMapping();
                },
            },
          },
          inputs: {
            inputString: {
              type: { name: "string" },
              index: 1,
              displayName: "Input String",
              set: function (t) {
                (this._internal.currentInputString =
                  void 0 !== t ? t.toString() : void 0),
                  this.scheduleMapping();
              },
            },
            defaultMapping: {
              type: "string",
              displayName: "Default",
              index: 1e3,
              group: "Mappings",
              set: function (t) {
                (this._internal.defaultMapping = t), this.scheduleMapping();
              },
            },
          },
          outputs: {
            mappedString: {
              type: "string",
              displayName: "Mapped String",
              group: "Value",
              getter: function () {
                return this._internal.mappedString;
              },
            },
          },
          prototypeExtensions: {
            doMapping: function () {
              this._internal.hasScheduledFetch = !1;
              var t = this._internal.inputs.indexOf(
                this._internal.currentInputString
              );
              (this._internal.mappedString =
                -1 !== t
                  ? this._internal.mappings[t]
                  : this._internal.defaultMapping),
                this.flagOutputDirty("mappedString");
            },
            scheduleMapping: function () {
              var t = this._internal;
              t.hasScheduledFetch ||
                ((t.hasScheduledFetch = !0),
                this.scheduleAfterInputsHaveUpdated(this.doMapping.bind(this)));
            },
          },
        };
        t.exports = { node: e };
      },
      5178: (t) => {
        "use strict";
        t.exports = {
          node: {
            name: "Substring",
            docs: "https://docs.noodl.net/nodes/string-manipulation/substring",
            category: "String Manipulation",
            initialize: function () {
              var t = this._internal;
              (t.startIndex = 0),
                (t.endIndex = -1),
                (t.cachedResult = ""),
                (t.inputString = ""),
                (t.resultDirty = !1);
            },
            inputs: {
              start: {
                type: "number",
                displayName: "Start",
                default: 0,
                set: function (t) {
                  (this._internal.startIndex = t),
                    (this._internal.resultDirty = !0),
                    this.flagOutputDirty("result");
                },
              },
              end: {
                type: "number",
                displayName: "End",
                default: 0,
                set: function (t) {
                  (this._internal.endIndex = t),
                    (this._internal.resultDirty = !0),
                    this.flagOutputDirty("result");
                },
              },
              string: {
                type: { name: "string" },
                displayName: "String",
                default: "",
                set: function (t) {
                  (t = t.toString()),
                    (this._internal.inputString = t),
                    (this._internal.resultDirty = !0),
                    this.flagOutputDirty("result");
                },
              },
            },
            outputs: {
              result: {
                type: "string",
                displayName: "Result",
                getter: function () {
                  var t = this._internal;
                  return (
                    t.resultDirty &&
                      (-1 === t.endIndex
                        ? (t.cachedResult = t.inputString.substr(t.startIndex))
                        : (t.cachedResult = t.inputString.substr(
                            t.startIndex,
                            t.endIndex - t.startIndex
                          )),
                      (t.resultDirty = !1)),
                    t.cachedResult
                  );
                },
              },
            },
          },
        };
      },
      1972: (t) => {
        "use strict";
        const e = {
          name: "Switch",
          docs: "https://docs.noodl.net/nodes/logic/switch",
          category: "Logic",
          initialize: function () {
            (this._internal.state = !1), (this._internal.initialized = !1);
          },
          getInspectInfo() {
            return this._internal.state;
          },
          inputs: {
            on: {
              displayName: "On",
              group: "Change State",
              valueChangedToTrue: function () {
                !0 !== this._internal.state &&
                  ((this._internal.state = !0),
                  this.flagOutputDirty("state"),
                  this.emitSignals());
              },
            },
            off: {
              displayName: "Off",
              group: "Change State",
              valueChangedToTrue: function () {
                !1 !== this._internal.state &&
                  ((this._internal.state = !1),
                  this.flagOutputDirty("state"),
                  this.emitSignals());
              },
            },
            flip: {
              displayName: "Flip",
              group: "Change State",
              valueChangedToTrue: function () {
                (this._internal.state = !this._internal.state),
                  this.flagOutputDirty("state"),
                  this.emitSignals();
              },
            },
            onFromStart: {
              type: "boolean",
              displayName: "State",
              group: "General",
              default: !1,
              set: function (t) {
                (this._internal.state = !!t),
                  this.flagOutputDirty("state"),
                  this.emitSignals();
              },
            },
          },
          outputs: {
            state: {
              type: "boolean",
              displayName: "Current State",
              getter: function () {
                return this._internal.state;
              },
            },
            switchedToOn: {
              displayName: "Switched To On",
              type: "signal",
              group: "Signals",
            },
            switchedToOff: {
              displayName: "Switched To Off",
              type: "signal",
              group: "Signals",
            },
          },
          prototypeExtensions: {
            emitSignals: function () {
              !0 === this._internal.state
                ? this.sendSignalOnOutput("switchedToOn")
                : this.sendSignalOnOutput("switchedToOff");
            },
          },
        };
        t.exports = { node: e };
      },
      4388: (t) => {
        "use strict";
        const e = {
          name: "Timer",
          docs: "https://docs.noodl.net/nodes/utilities/delay",
          displayName: "Delay",
          category: "Utilities",
          initialize: function () {
            var t = this;
            (this._internal._animation =
              this.context.timerScheduler.createTimer({
                duration: 0,
                onStart: function () {
                  t.sendSignalOnOutput("timerStarted");
                },
                onFinish: function () {
                  t.sendSignalOnOutput("timerFinished");
                },
              })),
              this.addDeleteListener(() => {
                this._internal._animation.stop();
              });
          },
          getInspectInfo() {
            return this._internal._animation.isRunning()
              ? Math.floor(this._internal._animation.durationLeft() / 10) /
                  100 +
                  " seconds"
              : "Not running";
          },
          inputs: {
            start: {
              displayName: "Start",
              valueChangedToTrue: function () {
                !1 === this._internal._animation._isRunning &&
                  this._internal._animation.start();
              },
            },
            restart: {
              displayName: "Restart",
              valueChangedToTrue: function () {
                this._internal._animation.start();
              },
            },
            duration: {
              type: "number",
              displayName: "Duration",
              default: 0,
              set: function (t) {
                this._internal._animation.duration = t;
              },
            },
            startDelay: {
              type: "number",
              displayName: "Start Delay",
              default: 0,
              set: function (t) {
                this._internal._animation.delay = t;
              },
            },
            stop: {
              displayName: "Stop",
              valueChangedToTrue: function () {
                this._internal._animation.stop();
              },
            },
          },
          outputs: {
            timerStarted: { type: "signal", displayName: "Started" },
            timerFinished: { type: "signal", displayName: "Finished" },
          },
        };
        t.exports = { node: e };
      },
      619: (t, e, n) => {
        "use strict";
        const i = n(8750),
          o = {
            name: "Unique Id",
            docs: "https://docs.noodl.net/nodes/utilities/unique-id",
            category: "String Manipulation",
            initialize: function () {
              this._internal.guid = i.guid();
            },
            getInspectInfo() {
              return this._internal.guid;
            },
            inputs: {
              new: {
                displayName: "New",
                valueChangedToTrue: function () {
                  (this._internal.guid = i.guid()),
                    this.flagOutputDirty("guid");
                },
              },
            },
            outputs: {
              guid: {
                type: "string",
                displayName: "Id",
                getter: function () {
                  return this._internal.guid;
                },
              },
            },
            prototypeExtensions: {},
          };
        t.exports = { node: o };
      },
      4464: (t, e, n) => {
        "use strict";
        const i = n(6732),
          o = n(1268),
          r = {
            name: "Upload File",
            docs: "https://docs.noodl.net/#/nodes/data/cloud-data/upload-file",
            category: "Cloud Services",
            color: "data",
            getInspectInfo() {
              return this._internal.response;
            },
            inputs: {
              file: {
                group: "General",
                displayName: "File",
                type: "*",
                set(t) {
                  this._internal.file = t;
                },
              },
              upload: {
                type: "signal",
                displayName: "Upload",
                group: "Actions",
                valueChangedToTrue() {
                  this.scheduleAfterInputsHaveUpdated(() => {
                    const t = this._internal.file;
                    t
                      ? o.instance.uploadFile({
                          file: t,
                          onUploadProgress: (t) => {
                            (this._internal.progressTotal = t.total),
                              (this._internal.progressLoaded = t.loaded),
                              this.flagOutputDirty("progressTotalBytes"),
                              this.flagOutputDirty("progressLoadedBytes"),
                              this.flagOutputDirty("progressLoadedPercent"),
                              this.sendSignalOnOutput("progressChanged");
                          },
                          success: (t) => {
                            (this._internal.cloudFile = new i(t)),
                              this.flagOutputDirty("cloudFile"),
                              this.sendSignalOnOutput("success");
                          },
                          error: (t) => this.setError(t),
                        })
                      : this.setError("No file specified");
                  });
                },
              },
            },
            outputs: {
              cloudFile: {
                group: "General",
                displayName: "Cloud File",
                type: "cloudfile",
                get() {
                  return this._internal.cloudFile;
                },
              },
              success: {
                group: "Events",
                displayName: "Success",
                type: "signal",
              },
              failure: {
                group: "Events",
                displayName: "Failure",
                type: "signal",
              },
              error: {
                type: "string",
                displayName: "Error",
                group: "Error",
                get() {
                  return this._internal.error;
                },
              },
              errorStatus: {
                type: "number",
                displayName: "Error Status Code",
                group: "Error",
                get() {
                  return this._internal.errorStatus;
                },
              },
              progressChanged: {
                type: "signal",
                displayName: "Progress Changed",
                group: "Events",
              },
              progressTotalBytes: {
                type: "number",
                displayName: "Total Bytes",
                group: "Progress",
                get() {
                  return this._internal.progressTotal;
                },
              },
              progressLoadedBytes: {
                type: "number",
                displayName: "Uploaded Bytes",
                group: "Progress",
                get() {
                  return this._internal.progressLoaded;
                },
              },
              progressLoadedPercent: {
                type: "number",
                displayName: "Uploaded Percent",
                group: "Progress",
                get() {
                  return this._internal.progressTotal
                    ? (this._internal.progressLoaded /
                        this._internal.progressTotal) *
                        100
                    : 0;
                },
              },
            },
            methods: {
              setError(t) {
                (this._internal.error = t.hasOwnProperty("error")
                  ? t.error
                  : t),
                  (this._internal.errorStatus = t.code || t.status || 0),
                  this.flagOutputDirty("error"),
                  this.flagOutputDirty("errorStatus"),
                  this.sendSignalOnOutput("failure");
              },
            },
          };
        t.exports = { node: r };
      },
      3752: (t, e, n) => {
        "use strict";
        const { Node: i, EdgeTriggeredInput: o } = n(5855),
          r = n(3335);
        var s = {
          name: "net.noodl.user.LogIn",
          docs: "https://docs.noodl.net/nodes/data/user/log-in",
          displayNodeName: "Log In",
          category: "Cloud Services",
          color: "data",
          initialize: function () {
            this._internal;
          },
          getInspectInfo() {},
          outputs: {
            success: {
              type: "signal",
              displayName: "Success",
              group: "Events",
            },
            failure: {
              type: "signal",
              displayName: "Failure",
              group: "Events",
            },
            error: {
              type: "string",
              displayName: "Error",
              group: "Error",
              getter: function () {
                return this._internal.error;
              },
            },
          },
          inputs: {
            login: {
              displayName: "Do",
              group: "Actions",
              valueChangedToTrue: function () {
                this.scheduleLogIn();
              },
            },
            username: {
              displayName: "Username",
              type: "string",
              group: "General",
              set: function (t) {
                this._internal.username = t;
              },
            },
            password: {
              displayName: "Password",
              type: "string",
              group: "General",
              set: function (t) {
                this._internal.password = t;
              },
            },
          },
          methods: {
            setError: function (t) {
              (this._internal.error = t),
                this.flagOutputDirty("error"),
                this.sendSignalOnOutput("failure"),
                this.context.editorConnection &&
                  this.context.editorConnection.sendWarning(
                    this.nodeScope.componentOwner.name,
                    this.id,
                    "user-login-warning",
                    { message: t, showGlobally: !0 }
                  );
            },
            clearWarnings() {
              this.context.editorConnection &&
                this.context.editorConnection.clearWarning(
                  this.nodeScope.componentOwner.name,
                  this.id,
                  "user-login-warning"
                );
            },
            scheduleLogIn: function () {
              this._internal,
                !0 !== this.logInScheduled &&
                  ((this.logInScheduled = !0),
                  this.scheduleAfterInputsHaveUpdated(() => {
                    (this.logInScheduled = !1),
                      r.instance.logIn({
                        username: this._internal.username,
                        password: this._internal.password,
                        success: () => {
                          this.sendSignalOnOutput("success");
                        },
                        error: (t) => {
                          this.setError(t);
                        },
                      });
                  }));
            },
          },
        };
        t.exports = { node: s, setup: function (t, e) {} };
      },
      8604: (t, e, n) => {
        "use strict";
        const { Node: i, EdgeTriggeredInput: o } = n(5855),
          r = n(3335);
        var s = {
          name: "net.noodl.user.LogOut",
          docs: "https://docs.noodl.net/nodes/data/user/log-out",
          displayNodeName: "Log Out",
          category: "Cloud Services",
          color: "data",
          initialize: function () {
            this._internal;
          },
          getInspectInfo() {},
          outputs: {
            success: {
              type: "signal",
              displayName: "Success",
              group: "Events",
            },
            failure: {
              type: "signal",
              displayName: "Failure",
              group: "Events",
            },
            error: {
              type: "string",
              displayName: "Error",
              group: "Error",
              getter: function () {
                return this._internal.error;
              },
            },
          },
          inputs: {
            login: {
              displayName: "Do",
              group: "Actions",
              valueChangedToTrue: function () {
                this.scheduleLogOut();
              },
            },
          },
          methods: {
            setError: function (t) {
              (this._internal.error = t),
                this.flagOutputDirty("error"),
                this.sendSignalOnOutput("failure"),
                this.context.editorConnection &&
                  this.context.editorConnection.sendWarning(
                    this.nodeScope.componentOwner.name,
                    this.id,
                    "user-login-warning",
                    { message: t, showGlobally: !0 }
                  );
            },
            clearWarnings() {
              this.context.editorConnection &&
                this.context.editorConnection.clearWarning(
                  this.nodeScope.componentOwner.name,
                  this.id,
                  "user-login-warning"
                );
            },
            scheduleLogOut: function () {
              this._internal,
                !0 !== this.logOutScheduled &&
                  ((this.logOutScheduled = !0),
                  this.scheduleAfterInputsHaveUpdated(() => {
                    (this.logOutScheduled = !1),
                      r.instance.logOut({
                        success: () => {
                          this.sendSignalOnOutput("success");
                        },
                        error: (t) => {
                          this.setError(t);
                        },
                      });
                  }));
            },
          },
        };
        t.exports = { node: s, setup: function (t, e) {} };
      },
      5522: (t, e, n) => {
        "use strict";
        const { Node: i, EdgeTriggeredInput: o } = n(5855),
          r = n(3335);
        var s = {
          name: "net.noodl.user.RequestPasswordReset",
          docs: "https://docs.noodl.net/nodes/data/user/request-password-reset",
          displayNodeName: "Request Password Reset",
          category: "Cloud Services",
          color: "data",
          initialize: function () {
            this._internal;
          },
          getInspectInfo() {},
          outputs: {
            success: {
              type: "signal",
              displayName: "Success",
              group: "Events",
            },
            failure: {
              type: "signal",
              displayName: "Failure",
              group: "Events",
            },
            error: {
              type: "string",
              displayName: "Error",
              group: "Error",
              getter: function () {
                return this._internal.error;
              },
            },
          },
          inputs: {
            send: {
              displayName: "Do",
              group: "Actions",
              valueChangedToTrue: function () {
                this.scheduleRequestPasswordReset();
              },
            },
            email: {
              type: "string",
              displayName: "Email",
              group: "General",
              set: function (t) {
                this._internal.email = t;
              },
            },
          },
          methods: {
            setError: function (t) {
              (this._internal.error = t),
                this.flagOutputDirty("error"),
                this.sendSignalOnOutput("failure"),
                this.context.editorConnection &&
                  this.context.editorConnection.sendWarning(
                    this.nodeScope.componentOwner.name,
                    this.id,
                    "user-send-email-verification-warning",
                    { message: t, showGlobally: !0 }
                  );
            },
            clearWarnings() {
              this.context.editorConnection &&
                this.context.editorConnection.clearWarning(
                  this.nodeScope.componentOwner.name,
                  this.id,
                  "user-send-email-verification-warning"
                );
            },
            scheduleRequestPasswordReset: function () {
              this._internal,
                !0 !== this.sendScheduled &&
                  ((this.sendScheduled = !0),
                  this.scheduleAfterInputsHaveUpdated(() => {
                    (this.sendScheduled = !1),
                      r.instance.requestPasswordReset({
                        email: this._internal.email,
                        success: () => {
                          this.sendSignalOnOutput("success");
                        },
                        error: (t) => {
                          this.setError(t);
                        },
                      });
                  }));
            },
          },
        };
        t.exports = { node: s, setup: function (t, e) {} };
      },
      3029: (t, e, n) => {
        "use strict";
        const { Node: i, EdgeTriggeredInput: o } = n(5855),
          r = n(3335);
        var s = {
          name: "net.noodl.user.ResetPassword",
          docs: "https://docs.noodl.net/nodes/data/user/reset-password",
          displayNodeName: "Reset Password",
          category: "Cloud Services",
          color: "data",
          initialize: function () {
            this._internal;
          },
          getInspectInfo() {},
          outputs: {
            success: {
              type: "signal",
              displayName: "Success",
              group: "Events",
            },
            failure: {
              type: "signal",
              displayName: "Failure",
              group: "Events",
            },
            error: {
              type: "string",
              displayName: "Error",
              group: "Error",
              getter: function () {
                return this._internal.error;
              },
            },
          },
          inputs: {
            reset: {
              displayName: "Do",
              group: "Actions",
              valueChangedToTrue: function () {
                this.scheduleResetPassword();
              },
            },
            token: {
              type: "string",
              displayName: "Token",
              group: "General",
              set: function (t) {
                this._internal.token = t;
              },
            },
            username: {
              type: "string",
              displayName: "Username",
              group: "General",
              set: function (t) {
                this._internal.username = t;
              },
            },
            newPassword: {
              type: "string",
              displayName: "New Password",
              group: "General",
              set: function (t) {
                this._internal.newPassword = t;
              },
            },
          },
          methods: {
            setError: function (t) {
              (this._internal.error = t),
                this.flagOutputDirty("error"),
                this.sendSignalOnOutput("failure"),
                this.context.editorConnection &&
                  this.context.editorConnection.sendWarning(
                    this.nodeScope.componentOwner.name,
                    this.id,
                    "user-verify-email-warning",
                    { message: t, showGlobally: !0 }
                  );
            },
            clearWarnings() {
              this.context.editorConnection &&
                this.context.editorConnection.clearWarning(
                  this.nodeScope.componentOwner.name,
                  this.id,
                  "user-verify-email-warning"
                );
            },
            scheduleResetPassword: function () {
              this._internal,
                !0 !== this.resetPasswordScheduled &&
                  ((this.resetPasswordScheduled = !0),
                  this.scheduleAfterInputsHaveUpdated(() => {
                    (this.resetPasswordScheduled = !1),
                      r.instance.resetPassword({
                        token: this._internal.token,
                        username: this._internal.username,
                        newPassword: this._internal.newPassword,
                        success: () => {
                          this.sendSignalOnOutput("success");
                        },
                        error: (t) => {
                          this.setError(t);
                        },
                      });
                  }));
            },
          },
        };
        t.exports = { node: s, setup: function (t, e) {} };
      },
      4296: (t, e, n) => {
        "use strict";
        const { Node: i, EdgeTriggeredInput: o } = n(5855),
          r = n(3335);
        var s = {
          name: "net.noodl.user.SendEmailVerification",
          docs: "https://docs.noodl.net/nodes/data/user/send-email-verification",
          displayNodeName: "Send Email Verification",
          category: "Cloud Services",
          color: "data",
          initialize: function () {
            this._internal;
          },
          getInspectInfo() {},
          outputs: {
            success: {
              type: "signal",
              displayName: "Success",
              group: "Events",
            },
            failure: {
              type: "signal",
              displayName: "Failure",
              group: "Events",
            },
            error: {
              type: "string",
              displayName: "Error",
              group: "Error",
              getter: function () {
                return this._internal.error;
              },
            },
          },
          inputs: {
            send: {
              displayName: "Do",
              group: "Actions",
              valueChangedToTrue: function () {
                this.scheduleSendEmailVerification();
              },
            },
            email: {
              type: "string",
              displayName: "Email",
              group: "General",
              set: function (t) {
                this._internal.email = t;
              },
            },
          },
          methods: {
            setError: function (t) {
              (this._internal.error = t),
                this.flagOutputDirty("error"),
                this.sendSignalOnOutput("failure"),
                this.context.editorConnection &&
                  this.context.editorConnection.sendWarning(
                    this.nodeScope.componentOwner.name,
                    this.id,
                    "user-send-email-verification-warning",
                    { message: t, showGlobally: !0 }
                  );
            },
            clearWarnings() {
              this.context.editorConnection &&
                this.context.editorConnection.clearWarning(
                  this.nodeScope.componentOwner.name,
                  this.id,
                  "user-send-email-verification-warning"
                );
            },
            scheduleSendEmailVerification: function () {
              this._internal,
                !0 !== this.sendScheduled &&
                  ((this.sendScheduled = !0),
                  this.scheduleAfterInputsHaveUpdated(() => {
                    (this.sendScheduled = !1),
                      r.instance.sendEmailVerification({
                        email: this._internal.email,
                        success: () => {
                          this.sendSignalOnOutput("success");
                        },
                        error: (t) => {
                          this.setError(t);
                        },
                      });
                  }));
            },
          },
        };
        t.exports = { node: s, setup: function (t, e) {} };
      },
      3108: (t, e, n) => {
        "use strict";
        const { Node: i, EdgeTriggeredInput: o } = n(5855),
          r = n(3335);
        var s = {
          name: "net.noodl.user.SetUserProperties",
          docs: "https://docs.noodl.net/nodes/data/user/set-user-properties",
          displayNodeName: "Set User Properties",
          category: "Cloud Services",
          color: "data",
          initialize: function () {
            this._internal.userProperties = {};
          },
          getInspectInfo() {},
          outputs: {
            success: {
              type: "signal",
              displayName: "Success",
              group: "Events",
            },
            failure: {
              type: "signal",
              displayName: "Failure",
              group: "Events",
            },
            error: {
              type: "string",
              displayName: "Error",
              group: "Error",
              getter: function () {
                return this._internal.error;
              },
            },
          },
          inputs: {
            store: {
              displayName: "Do",
              group: "Actions",
              valueChangedToTrue: function () {
                this.scheduleStore();
              },
            },
            email: {
              displayName: "Email",
              type: "string",
              group: "General",
              set: function (t) {
                this._internal.email = t;
              },
            },
          },
          methods: {
            setError: function (t) {
              (this._internal.error = t),
                this.flagOutputDirty("error"),
                this.sendSignalOnOutput("failure"),
                this.context.editorConnection &&
                  this.context.editorConnection.sendWarning(
                    this.nodeScope.componentOwner.name,
                    this.id,
                    "user-set-warning",
                    { message: t, showGlobally: !0 }
                  );
            },
            clearWarnings() {
              this.context.editorConnection &&
                this.context.editorConnection.clearWarning(
                  this.nodeScope.componentOwner.name,
                  this.id,
                  "user-set-warning"
                );
            },
            scheduleStore: function () {
              const t = this._internal;
              !0 !== this.storeScheduled &&
                ((this.storeScheduled = !0),
                this.scheduleAfterInputsHaveUpdated(() => {
                  (this.storeScheduled = !1),
                    r.instance.setUserProperties({
                      email: this._internal.email,
                      properties: t.userProperties,
                      success: () => {
                        this.sendSignalOnOutput("success");
                      },
                      error: (t) => {
                        this.setError(t);
                      },
                    });
                }));
            },
            setUserProperty: function (t, e) {
              this._internal.userProperties[t] = e;
            },
            registerInputIfNeeded: function (t) {
              if (!this.hasInput(t))
                return t.startsWith("prop-")
                  ? this.registerInput(t, {
                      set: this.setUserProperty.bind(
                        this,
                        t.substring("prop-".length)
                      ),
                    })
                  : void 0;
            },
          },
        };
        function a(t, e, n, i) {
          var o = [];
          if (i) {
            var r = i.find((t) => "_User" === t.name);
            if (r && r.schema && r.schema.properties) {
              var s = r.schema.properties;
              const t = [
                "authData",
                "password",
                "username",
                "createdAt",
                "updatedAt",
                "emailVerified",
                "email",
              ];
              for (var a in s)
                if (-1 === t.indexOf(a)) {
                  var l = s[a];
                  if (!o.find((t) => t.name === a))
                    if ("Relation" === l.type);
                    else {
                      const t = {
                        String: "string",
                        Boolean: "boolean",
                        Number: "number",
                        Date: "date",
                      };
                      o.push({
                        type: { name: t[l.type] ? t[l.type] : "*" },
                        plug: "input",
                        group: "Properties",
                        name: "prop-" + a,
                        displayName: a,
                      });
                    }
                }
            }
          }
          n.sendDynamicPorts(t, o);
        }
        t.exports = {
          node: s,
          setup: function (t, e) {
            function n(n) {
              a(
                n.id,
                n.parameters,
                t.editorConnection,
                e.getMetaData("systemCollections")
              ),
                n.on("parameterUpdated", function (i) {
                  a(
                    n.id,
                    n.parameters,
                    t.editorConnection,
                    e.getMetaData("systemCollections")
                  );
                }),
                e.on("metadataChanged.systemCollections", function (e) {
                  a(n.id, n.parameters, t.editorConnection, e);
                });
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on(
                  "nodeAdded.net.noodl.user.SetUserProperties",
                  function (t) {
                    n(t);
                  }
                );
                for (const t of e.getNodesWithType(
                  "net.noodl.user.SetUserProperties"
                ))
                  n(t);
              });
          },
        };
      },
      6709: (t, e, n) => {
        "use strict";
        const { Node: i, EdgeTriggeredInput: o } = n(5855),
          r = n(3335);
        var s = {
          name: "net.noodl.user.SignUp",
          docs: "https://docs.noodl.net/nodes/data/user/sign-up",
          displayNodeName: "Sign Up",
          category: "Cloud Services",
          color: "data",
          initialize: function () {
            this._internal.userProperties = {};
          },
          getInspectInfo() {},
          outputs: {
            success: {
              type: "signal",
              displayName: "Success",
              group: "Events",
            },
            failure: {
              type: "signal",
              displayName: "Failure",
              group: "Events",
            },
            error: {
              type: "string",
              displayName: "Error",
              group: "Error",
              getter: function () {
                return this._internal.error;
              },
            },
          },
          inputs: {
            signup: {
              displayName: "Do",
              group: "Actions",
              valueChangedToTrue: function () {
                this.scheduleSignUp();
              },
            },
            username: {
              displayName: "Username",
              type: "string",
              group: "General",
              set: function (t) {
                this._internal.username = t;
              },
            },
            password: {
              displayName: "Password",
              type: "string",
              group: "General",
              set: function (t) {
                this._internal.password = t;
              },
            },
            email: {
              displayName: "Email",
              type: "string",
              group: "General",
              set: function (t) {
                this._internal.email = t;
              },
            },
          },
          methods: {
            setError: function (t) {
              (this._internal.error = t),
                this.flagOutputDirty("error"),
                this.sendSignalOnOutput("failure"),
                this.context.editorConnection &&
                  this.context.editorConnection.sendWarning(
                    this.nodeScope.componentOwner.name,
                    this.id,
                    "user-login-warning",
                    { message: t, showGlobally: !0 }
                  );
            },
            clearWarnings() {
              this.context.editorConnection &&
                this.context.editorConnection.clearWarning(
                  this.nodeScope.componentOwner.name,
                  this.id,
                  "user-login-warning"
                );
            },
            scheduleSignUp: function () {
              const t = this._internal;
              !0 !== this.signUpScheduled &&
                ((this.signUpScheduled = !0),
                this.scheduleAfterInputsHaveUpdated(() => {
                  (this.signUpScheduled = !1),
                    r.instance.signUp({
                      username: this._internal.username,
                      password: this._internal.password,
                      email: this._internal.email,
                      properties: t.userProperties,
                      success: () => {
                        this.sendSignalOnOutput("success");
                      },
                      error: (t) => {
                        this.setError(t);
                      },
                    });
                }));
            },
            setUserProperty: function (t, e) {
              this._internal.userProperties[t] = e;
            },
            registerInputIfNeeded: function (t) {
              if (!this.hasInput(t))
                return t.startsWith("prop-")
                  ? this.registerInput(t, {
                      set: this.setUserProperty.bind(
                        this,
                        t.substring("prop-".length)
                      ),
                    })
                  : void 0;
            },
          },
        };
        function a(t, e, n, i) {
          var o = [];
          if (i) {
            var r = i.find((t) => "_User" === t.name);
            if (r && r.schema && r.schema.properties) {
              var s = r.schema.properties;
              const t = [
                "authData",
                "password",
                "username",
                "createdAt",
                "updatedAt",
                "emailVerified",
                "email",
              ];
              for (var a in s)
                if (-1 === t.indexOf(a)) {
                  var l = s[a];
                  if (!o.find((t) => t.name === a))
                    if ("Relation" === l.type);
                    else {
                      const t = {
                        String: "string",
                        Boolean: "boolean",
                        Number: "number",
                        Date: "date",
                      };
                      o.push({
                        type: { name: t[l.type] ? t[l.type] : "*" },
                        plug: "input",
                        group: "Properties",
                        name: "prop-" + a,
                        displayName: a,
                      });
                    }
                }
            }
          }
          n.sendDynamicPorts(t, o);
        }
        t.exports = {
          node: s,
          setup: function (t, e) {
            function n(n) {
              a(
                n.id,
                n.parameters,
                t.editorConnection,
                e.getMetaData("systemCollections")
              ),
                n.on("parameterUpdated", function (i) {
                  a(
                    n.id,
                    n.parameters,
                    t.editorConnection,
                    e.getMetaData("systemCollections")
                  );
                }),
                e.on("metadataChanged.systemCollections", function (e) {
                  a(n.id, n.parameters, t.editorConnection, e);
                });
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.net.noodl.user.SignUp", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("net.noodl.user.SignUp"))
                  n(t);
              });
          },
        };
      },
      9752: (t, e, n) => {
        "use strict";
        const { Node: i, EdgeTriggeredInput: o } = n(5855),
          r = (n(2307), n(3335));
        var s = {
          name: "net.noodl.user.User",
          docs: "https://docs.noodl.net/nodes/data/user/user-node",
          displayNodeName: "User",
          category: "Cloud Services",
          color: "data",
          initialize: function () {
            var t = this;
            (this._internal.onModelChangedCallback = function (e) {
              t.isInputConnected("fetch") ||
                (t.hasOutput("prop-" + e.name) &&
                  t.flagOutputDirty("prop-" + e.name),
                t.hasOutput("changed-" + e.name) &&
                  t.sendSignalOnOutput("changed-" + e.name),
                t.sendSignalOnOutput("changed"));
            }),
              this.setUserModel(r.instance.getUserModel()),
              r.instance.on("loggedIn", () => {
                this.setUserModel(r.instance.getUserModel()),
                  this.sendSignalOnOutput("loggedIn");
              }),
              r.instance.on("loggedOut", () => {
                this.setUserModel(void 0), this.sendSignalOnOutput("loggedOut");
              }),
              r.instance.on("sessionLost", () => {
                this.setUserModel(void 0),
                  this.sendSignalOnOutput("sessionLost");
              });
          },
          getInspectInfo() {
            const t = this._internal.model;
            return t
              ? [
                  { type: "text", value: "Id: " + t.getId() },
                  { type: "value", value: this._internal.model.data },
                ]
              : "[No Model]";
          },
          outputs: {
            id: {
              type: "string",
              displayName: "Id",
              group: "General",
              getter: function () {
                return void 0 !== this._internal.model
                  ? this._internal.model.getId()
                  : void 0;
              },
            },
            fetched: {
              type: "signal",
              displayName: "Fetched",
              group: "Events",
            },
            changed: {
              type: "signal",
              displayName: "Changed",
              group: "Events",
            },
            failure: {
              type: "signal",
              displayName: "Failure",
              group: "Events",
            },
            error: {
              type: "string",
              displayName: "Error",
              group: "Error",
              getter: function () {
                return this._internal.error;
              },
            },
            username: {
              type: "string",
              displayName: "Username",
              group: "General",
              getter: function () {
                return void 0 !== this._internal.model
                  ? this._internal.model.get("username")
                  : void 0;
              },
            },
            email: {
              type: "string",
              displayName: "Email",
              group: "General",
              getter: function () {
                return void 0 !== this._internal.model
                  ? this._internal.model.get("email")
                  : void 0;
              },
            },
            authenticated: {
              type: "boolean",
              displayName: "Authenticated",
              group: "General",
              getter: function () {
                return void 0 !== this._internal.model;
              },
            },
            loggedIn: {
              type: "signal",
              displayName: "Logged In",
              group: "Events",
            },
            loggedOut: {
              type: "signal",
              displayName: "Logged Out",
              group: "Events",
            },
            sessionLost: {
              type: "signal",
              displayName: "Session Lost",
              group: "Events",
            },
          },
          inputs: {
            fetch: {
              displayName: "Fetch",
              group: "Actions",
              valueChangedToTrue: function () {
                this.scheduleFetch();
              },
            },
          },
          methods: {
            _onNodeDeleted: function () {
              i.prototype._onNodeDeleted.call(this),
                this._internal.model &&
                  this._internal.model.off(
                    "change",
                    this._internal.onModelChangedCallback
                  );
            },
            scheduleOnce: function (t, e) {
              const n = this,
                i = "hasScheduled" + t;
              this._internal[i] ||
                ((this._internal[i] = !0),
                this.scheduleAfterInputsHaveUpdated(function () {
                  (n._internal[i] = !1), e();
                }));
            },
            setError: function (t) {
              (this._internal.error = t),
                this.flagOutputDirty("error"),
                this.sendSignalOnOutput("failure"),
                this.context.editorConnection &&
                  this.context.editorConnection.sendWarning(
                    this.nodeScope.componentOwner.name,
                    this.id,
                    "user-warning",
                    { message: t, showGlobally: !0 }
                  );
            },
            clearWarnings() {
              this.context.editorConnection &&
                this.context.editorConnection.clearWarning(
                  this.nodeScope.componentOwner.name,
                  this.id,
                  "user-warning"
                );
            },
            setUserModel(t) {
              const e = this._internal;
              if (
                (e.model !== t &&
                  (e.model && e.model.off("change", e.onModelChangedCallback),
                  (e.model = t),
                  t && t.on("change", e.onModelChangedCallback)),
                this.flagOutputDirty("id"),
                this.flagOutputDirty("authenticated"),
                this.flagOutputDirty("email"),
                this.flagOutputDirty("username"),
                t)
              )
                for (var n in t.data)
                  this.hasOutput("prop-" + n) &&
                    this.flagOutputDirty("prop-" + n);
            },
            scheduleFetch: function () {
              this._internal,
                this.scheduleOnce("Fetch", () => {
                  r.instance.fetchCurrentUser({
                    success: (t) => {
                      this.setUserModel(r.instance.getUserModel()),
                        this.sendSignalOnOutput("fetched");
                    },
                    error: (t) => {
                      this.setError(t || "Failed to fetch.");
                    },
                  });
                });
            },
            registerOutputIfNeeded: function (t) {
              this.hasOutput(t) ||
                (t.startsWith("prop-") &&
                  this.registerOutput(t, {
                    getter: this.getUserProperty.bind(
                      this,
                      t.substring("prop-".length)
                    ),
                  }));
            },
            getUserProperty: function (t) {
              return void 0 !== this._internal.model
                ? this._internal.model.get(t)
                : void 0;
            },
          },
        };
        function a(t, e, n, i) {
          var o = [];
          if (i) {
            var r = i.find((t) => "_User" === t.name);
            if (r && r.schema && r.schema.properties) {
              var s = r.schema.properties;
              const t = ["authData", "password", "username", "email"];
              for (var a in s)
                if (-1 === t.indexOf(a)) {
                  var l = s[a];
                  if (!o.find((t) => t.name === a))
                    if ("Relation" === l.type);
                    else {
                      const t = {
                        String: "string",
                        Boolean: "boolean",
                        Number: "number",
                        Date: "date",
                      };
                      o.push({
                        type: { name: t[l.type] ? t[l.type] : "*" },
                        plug: "output",
                        group: "Properties",
                        name: "prop-" + a,
                        displayName: a,
                      }),
                        o.push({
                          type: "signal",
                          plug: "output",
                          group: "Changed Events",
                          displayName: a + " Changed",
                          name: "changed-" + a,
                        });
                    }
                }
            }
          }
          n.sendDynamicPorts(t, o);
        }
        t.exports = {
          node: s,
          setup: function (t, e) {
            function n(n) {
              a(
                n.id,
                n.parameters,
                t.editorConnection,
                e.getMetaData("systemCollections")
              ),
                n.on("parameterUpdated", function (i) {
                  a(
                    n.id,
                    n.parameters,
                    t.editorConnection,
                    e.getMetaData("systemCollections")
                  );
                }),
                e.on("metadataChanged.systemCollections", function (e) {
                  a(n.id, n.parameters, t.editorConnection, e);
                });
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.net.noodl.user.User", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("net.noodl.user.User")) n(t);
              });
          },
        };
      },
      3335: (t, e, n) => {
        function i(t, e) {
          var n = Object.keys(t);
          if (Object.getOwnPropertySymbols) {
            var i = Object.getOwnPropertySymbols(t);
            e &&
              (i = i.filter(function (e) {
                return Object.getOwnPropertyDescriptor(t, e).enumerable;
              })),
              n.push.apply(n, i);
          }
          return n;
        }
        function o(t) {
          for (var e = 1; e < arguments.length; e++) {
            var n = null != arguments[e] ? arguments[e] : {};
            e % 2
              ? i(Object(n), !0).forEach(function (e) {
                  r(t, e, n[e]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
              : i(Object(n)).forEach(function (e) {
                  Object.defineProperty(
                    t,
                    e,
                    Object.getOwnPropertyDescriptor(n, e)
                  );
                });
          }
          return t;
        }
        function r(t, e, n) {
          return (
            e in t
              ? Object.defineProperty(t, e, {
                  value: n,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (t[e] = n),
            t
          );
        }
        const s = n(5855),
          a = n(7187).EventEmitter,
          l = n(5821),
          u = n(1268);
        class p {
          constructor() {
            this._initCloudServices(),
              (this.events = new a()),
              this.events.setMaxListeners(1e5),
              this.getUserFromLocalStorage() &&
                this.fetchCurrentUser({
                  success: () => {},
                  error: () => {
                    delete localStorage["Parse/" + this.appId + "/currentUser"],
                      this.events.emit("sessionLost");
                  },
                });
          }
          getUserFromLocalStorage() {
            const t = localStorage["Parse/" + this.appId + "/currentUser"];
            if (t)
              try {
                return JSON.parse(t);
              } catch (t) {}
          }
          _initCloudServices() {
            const t = s.instance.getMetaData("cloudservices");
            t &&
              ((this.appId = t.appId || t.workspaceId + "-" + t.instanceId),
              (this.endpoint = t.endpoint));
          }
          on() {
            this.events.on.apply(this.events, arguments);
          }
          off() {
            this.events.off.apply(this.events, arguments);
          }
          _makeRequest(t, e) {
            var n = new XMLHttpRequest();
            (n.onreadystatechange = function () {
              if (4 === n.readyState) {
                var t;
                try {
                  t = JSON.parse(n.response);
                } catch (t) {}
                200 === n.status || 201 === n.status
                  ? e.success(t || n.response)
                  : e.error(t || { error: n.responseText, status: n.status });
              }
            }),
              n.open(e.method || "GET", this.endpoint + t, !0),
              n.setRequestHeader("X-Parse-Application-Id", this.appId);
            var i = localStorage["Parse/" + this.appId + "/installationId"];
            void 0 === i &&
              (i = localStorage["Parse/" + this.appId + "/installationId"] =
                l()),
              n.setRequestHeader("X-Parse-Installation-Id", i);
            var o = this.getUserFromLocalStorage();
            void 0 !== o &&
              n.setRequestHeader("X-Parse-Session-Token", o.sessionToken),
              n.setRequestHeader("Content-Type", "application/json"),
              n.send(JSON.stringify(e.content));
          }
          logIn(t) {
            this._makeRequest("/login", {
              method: "POST",
              content: {
                username: t.username,
                password: t.password,
                _method: "GET",
              },
              success: (e) => {
                (localStorage["Parse/" + this.appId + "/currentUser"] =
                  JSON.stringify(e)),
                  t.success(e),
                  this.events.emit("loggedIn");
              },
              error: (e) => {
                t.error(e.error);
              },
            });
          }
          logOut(t) {
            this._makeRequest("/logout", {
              method: "POST",
              content: {},
              success: (e) => {
                delete localStorage["Parse/" + this.appId + "/currentUser"],
                  t.success(),
                  this.events.emit("loggedOut");
              },
              error: (e) => {
                t.error(e.error);
              },
            });
          }
          signUp(t) {
            const e = t.properties
              ? u._serializeObject(o({}, t.properties), "_User")
              : {};
            this._makeRequest("/users", {
              method: "POST",
              content: Object.assign({}, e, {
                username: t.username,
                password: t.password,
                email: t.email,
              }),
              success: (e) => {
                const n = Object.assign(
                  e,
                  { username: t.username },
                  t.properties
                );
                (localStorage["Parse/" + this.appId + "/currentUser"] =
                  JSON.stringify(n)),
                  this.getUserModel(),
                  t.success(e),
                  this.events.emit("loggedIn");
              },
              error: (e) => {
                t.error(e.error);
              },
            });
          }
          setUserProperties(t) {
            const e = this.getCurrentUser();
            if (void 0 !== e) {
              const n = u._serializeObject(o({}, t.properties), "_User"),
                i = Object.assign({}, { email: t.email }, n);
              this._makeRequest("/users/" + e.objectId, {
                method: "PUT",
                content: i,
                success: (n) => {
                  Object.assign(e, i),
                    (localStorage["Parse/" + this.appId + "/currentUser"] =
                      JSON.stringify(e)),
                    this.getUserModel(),
                    t.success(n);
                },
                error: (e) => {
                  t.error(e.error);
                },
              });
            }
          }
          fetchCurrentUser(t) {
            this._makeRequest("/users/me", {
              method: "GET",
              success: (e) => {
                (localStorage["Parse/" + this.appId + "/currentUser"] =
                  JSON.stringify(e)),
                  t.success(e);
              },
              error: (e) => {
                t.error(e.error);
              },
            });
          }
          verifyEmail(t) {
            this._makeRequest(
              "/apps/" +
                this.appId +
                "/verify_email?username=" +
                t.username +
                "&token=" +
                t.token,
              {
                method: "GET",
                success: (e) => {
                  -1 !== e.indexOf("Successfully verified your email")
                    ? t.success()
                    : e.indexOf("Invalid Verification Link")
                    ? t.error("Invalid verification token")
                    : t.error("Failed to verify email");
                },
                error: (e) => {
                  t.error(e.error);
                },
              }
            );
          }
          sendEmailVerification(t) {
            this._makeRequest("/verificationEmailRequest", {
              method: "POST",
              content: { email: t.email },
              success: (e) => {
                t.success();
              },
              error: (e) => {
                t.error(e.error);
              },
            });
          }
          resetPassword(t) {
            this._makeRequest(
              "/apps/" + this.appId + "/request_password_reset",
              {
                method: "POST",
                content: {
                  username: t.username,
                  token: t.token,
                  new_password: t.newPassword,
                },
                success: (e) => {
                  -1 !== e.indexOf("Password successfully reset") ||
                  -1 !== e.indexOf("Successfully updated your password")
                    ? t.success()
                    : e.indexOf("Invalid Link")
                    ? t.error("Invalid verification token")
                    : t.error("Failed to verify email");
                },
                error: (e) => {
                  t.error(e.error);
                },
              }
            );
          }
          requestPasswordReset(t) {
            this._makeRequest("/requestPasswordReset", {
              method: "POST",
              content: { email: t.email },
              success: (e) => {
                t.success();
              },
              error: (e) => {
                t.error(e.error);
              },
            });
          }
          getCurrentUser() {
            var t = localStorage["Parse/" + this.appId + "/currentUser"];
            if (void 0 !== t) return JSON.parse(t);
          }
          getUserModel() {
            const t = this.getCurrentUser();
            if (void 0 !== t)
              return (
                delete t.sessionToken,
                delete t.ACL,
                delete t.className,
                delete t.__type,
                u._fromJSON(t, "_User")
              );
          }
        }
        var c;
        Object.defineProperty(p, "instance", {
          get: function () {
            return void 0 === c && (c = new p()), c;
          },
        }),
          (t.exports = p);
      },
      8818: (t, e, n) => {
        "use strict";
        const { Node: i, EdgeTriggeredInput: o } = n(5855),
          r = n(3335);
        var s = {
          name: "net.noodl.user.VerifyEmail",
          docs: "https://docs.noodl.net/nodes/data/user/verify-email",
          displayNodeName: "Verify Email",
          category: "Cloud Services",
          color: "data",
          initialize: function () {
            this._internal;
          },
          getInspectInfo() {},
          outputs: {
            success: {
              type: "signal",
              displayName: "Success",
              group: "Events",
            },
            failure: {
              type: "signal",
              displayName: "Failure",
              group: "Events",
            },
            error: {
              type: "string",
              displayName: "Error",
              group: "Error",
              getter: function () {
                return this._internal.error;
              },
            },
          },
          inputs: {
            verify: {
              displayName: "Do",
              group: "Actions",
              valueChangedToTrue: function () {
                this.scheduleVerifyEmail();
              },
            },
            token: {
              type: "string",
              displayName: "Token",
              group: "General",
              set: function (t) {
                this._internal.token = t;
              },
            },
            username: {
              type: "string",
              displayName: "Username",
              group: "General",
              set: function (t) {
                this._internal.username = t;
              },
            },
          },
          methods: {
            setError: function (t) {
              (this._internal.error = t),
                this.flagOutputDirty("error"),
                this.sendSignalOnOutput("failure"),
                this.context.editorConnection &&
                  this.context.editorConnection.sendWarning(
                    this.nodeScope.componentOwner.name,
                    this.id,
                    "user-verify-email-warning",
                    { message: t, showGlobally: !0 }
                  );
            },
            clearWarnings() {
              this.context.editorConnection &&
                this.context.editorConnection.clearWarning(
                  this.nodeScope.componentOwner.name,
                  this.id,
                  "user-verify-email-warning"
                );
            },
            scheduleVerifyEmail: function () {
              this._internal,
                !0 !== this.logOutScheduled &&
                  ((this.logOutScheduled = !0),
                  this.scheduleAfterInputsHaveUpdated(() => {
                    (this.logOutScheduled = !1),
                      r.instance.verifyEmail({
                        token: this._internal.token,
                        username: this._internal.username,
                        success: () => {
                          this.sendSignalOnOutput("success");
                        },
                        error: (t) => {
                          this.setError(t);
                        },
                      });
                  }));
            },
          },
        };
        t.exports = { node: s, setup: function (t, e) {} };
      },
      1056: (t) => {
        "use strict";
        const e = {
          name: "Value Changed",
          docs: "https://docs.noodl.net/nodes/logic/value-changed",
          category: "Logic",
          initialize: function () {
            (this._internal.lastValue = void 0),
              (this._internal.changeCount = 0);
          },
          getInspectInfo() {
            return this._internal.changeCount
              ? "Triggered " +
                  this._internal.changeCount +
                  (1 === this._internal.changeCount ? " time" : " times")
              : "Not triggered";
          },
          inputs: {
            value: {
              type: "*",
              displayName: "Input",
              set: function (t) {
                this._internal.lastValue !== t &&
                  (this._internal.changeCount++,
                  this.sendSignalOnOutput("valueChanged"),
                  (this._internal.lastValue = t));
              },
            },
          },
          outputs: {
            valueChanged: { type: "signal", displayName: "Value Changed" },
          },
        };
        t.exports = { node: e };
      },
      2426: (t, e, n) => {
        "use strict";
        const i = n(9482).createDefinition({
          name: "Boolean",
          docs: "https://docs.noodl.net/nodes/data/boolean",
          startValue: !1,
          type: { name: "boolean" },
          cast: function (t) {
            return Boolean(t);
          },
        });
        t.exports = { node: i };
      },
      3606: (t, e, n) => {
        "use strict";
        const i = n(9482);
        t.exports = {
          node: i.createDefinition({
            name: "Color",
            docs: "https://docs.noodl.net/nodes/data/color",
            startValue: "#f1f2f4",
            type: { name: "color" },
            cast: function (t) {
              return t;
            },
          }),
        };
      },
      642: (t, e, n) => {
        "use strict";
        const i = n(9482).createDefinition({
          name: "Number",
          docs: "https://docs.noodl.net/nodes/data/number",
          startValue: 0,
          type: { name: "number" },
          cast: function (t) {
            return Number(t);
          },
        });
        t.exports = { node: i };
      },
      6496: (t, e, n) => {
        "use strict";
        const i = n(9482),
          { NodeDefinition: o } = n(5855),
          r = i.createDefinition({
            name: "String",
            docs: "https://docs.noodl.net/nodes/data/string",
            shortDesc: "Contains a string (text).",
            startValue: "",
            type: { name: "string" },
            cast: function (t) {
              return String(t);
            },
            onChanged: function () {
              this.flagOutputDirty("length");
            },
          });
        o.extend(r, {
          outputs: {
            length: {
              type: "number",
              displayName: "Length",
              getter: function () {
                return this._internal.currentValue.length;
              },
            },
          },
        }),
          (t.exports = { node: r });
      },
      9482: (t) => {
        "use strict";
        t.exports = {
          createDefinition: function (t) {
            return {
              name: t.name,
              docs: t.docs,
              shortDesc: t.shortDesc,
              category: "Variables",
              initialize: function () {
                (this._internal.currentValue = t.startValue),
                  (this._internal.latestValue = 0);
              },
              getInspectInfo() {
                return [
                  {
                    type: "color" === t.type.name ? "color" : "text",
                    value: this._internal.currentValue,
                  },
                ];
              },
              inputs: {
                value: {
                  type: t.type,
                  displayName: "Value",
                  default: t.startValue,
                  set: function (t) {
                    !1 === this.isInputConnected("saveValue")
                      ? this.setValueTo(t)
                      : (this._internal.latestValue = t);
                  },
                },
                saveValue: {
                  displayName: "Set",
                  valueChangedToTrue: function () {
                    this.scheduleAfterInputsHaveUpdated(function () {
                      this.setValueTo(this._internal.latestValue),
                        this.sendSignalOnOutput("stored");
                    });
                  },
                },
              },
              outputs: {
                savedValue: {
                  type: t.type.name,
                  displayName: "Value",
                  getter: function () {
                    return this._internal.currentValue;
                  },
                },
                changed: { type: "signal", displayName: "Changed" },
                stored: { type: "signal", displayName: "Stored" },
              },
              prototypeExtensions: {
                setValueTo: function (e) {
                  e = t.cast(e);
                  const n = this._internal.currentValue !== e;
                  (this._internal.currentValue = e),
                    n &&
                      (this.flagOutputDirty("savedValue"),
                      this.sendSignalOnOutput("changed"),
                      t.onChanged && t.onChanged.call(this));
                },
              },
            };
          },
        };
      },
      5876: (t) => {
        const e = {
          name: "CSS Definition",
          docs: "https://docs.noodl.net/nodes/utilities/css-definition",
          category: "CustomCode",
          color: "javascript",
          initialize: function () {
            (this._internal.style = ""),
              this.addDeleteListener(() => {
                this.removeStyleDeclaration();
              });
          },
          inputs: {
            style: {
              index: 4005,
              type: { name: "string", allowEditOnly: !0, codeeditor: "css" },
              displayName: "Style",
              group: "Content",
              default: "",
              set: function (t) {
                this.updateStyle(t);
              },
            },
          },
          outputs: {},
          methods: {
            getStyleRefId: function () {
              return "style_" + this.id;
            },
            removeStyleDeclaration: function () {
              var t = this.getStyleRefId(),
                e = document.getElementById(t);
              null !== e && e.parentNode.removeChild(e);
            },
            updateStyle: function (t) {
              var e = this._internal,
                n = this.getStyleRefId();
              if (((e.style = t), null !== t)) {
                var i = document.getElementById(n);
                null === i &&
                  (((i = document.createElement("style")).id = n),
                  (i.type = "text/css"),
                  document.head.appendChild(i)),
                  (i.innerHTML = "\n" + t + "\n");
              } else this.removeStyleDeclaration();
            },
          },
        };
        t.exports = { node: e };
      },
      6930: (t) => {
        t.exports = function (t, e, n, i, o, r, s) {
          void 0 === s && (s = this.options);
          var a = t - e,
            l = Math.abs(a) / n,
            u = s.deceleration,
            p =
              (s.swipeBounceTime,
              {
                destination: t + (l / u) * (a < 0 ? -1 : 1),
                duration: s.swipeTime,
                rate: 15,
              });
          return (
            this.hooks.trigger(this.hooks.eventTypes.momentum, p, a),
            p.destination < i
              ? ((p.destination = r
                  ? Math.max(i - r / 4, i - (r / p.rate) * l)
                  : i),
                (p.duration = Math.abs(p.destination - t) / l))
              : p.destination > o &&
                ((p.destination = r
                  ? Math.min(o + r / 4, o + (r / p.rate) * l)
                  : o),
                (p.duration = Math.abs(p.destination - t) / l)),
            (p.destination = Math.round(p.destination)),
            p
          );
        };
      },
      4648: (t, e, n) => {
        "use strict";
        function i(t) {
          const e = String(t);
          return !e ||
            "/" === e[0] ||
            e.includes("://") ||
            e.startsWith("data:")
            ? e
            : "/" + e;
        }
        n.r(e), n.d(e, { getAbsoluteUrl: () => i });
      },
      9742: (t, e) => {
        "use strict";
        (e.byteLength = function (t) {
          var e = l(t),
            n = e[0],
            i = e[1];
          return (3 * (n + i)) / 4 - i;
        }),
          (e.toByteArray = function (t) {
            var e,
              n,
              r = l(t),
              s = r[0],
              a = r[1],
              u = new o(
                (function (t, e, n) {
                  return (3 * (e + n)) / 4 - n;
                })(0, s, a)
              ),
              p = 0,
              c = a > 0 ? s - 4 : s;
            for (n = 0; n < c; n += 4)
              (e =
                (i[t.charCodeAt(n)] << 18) |
                (i[t.charCodeAt(n + 1)] << 12) |
                (i[t.charCodeAt(n + 2)] << 6) |
                i[t.charCodeAt(n + 3)]),
                (u[p++] = (e >> 16) & 255),
                (u[p++] = (e >> 8) & 255),
                (u[p++] = 255 & e);
            return (
              2 === a &&
                ((e =
                  (i[t.charCodeAt(n)] << 2) | (i[t.charCodeAt(n + 1)] >> 4)),
                (u[p++] = 255 & e)),
              1 === a &&
                ((e =
                  (i[t.charCodeAt(n)] << 10) |
                  (i[t.charCodeAt(n + 1)] << 4) |
                  (i[t.charCodeAt(n + 2)] >> 2)),
                (u[p++] = (e >> 8) & 255),
                (u[p++] = 255 & e)),
              u
            );
          }),
          (e.fromByteArray = function (t) {
            for (
              var e,
                i = t.length,
                o = i % 3,
                r = [],
                s = 16383,
                a = 0,
                l = i - o;
              a < l;
              a += s
            )
              r.push(u(t, a, a + s > l ? l : a + s));
            return (
              1 === o
                ? ((e = t[i - 1]), r.push(n[e >> 2] + n[(e << 4) & 63] + "=="))
                : 2 === o &&
                  ((e = (t[i - 2] << 8) + t[i - 1]),
                  r.push(
                    n[e >> 10] + n[(e >> 4) & 63] + n[(e << 2) & 63] + "="
                  )),
              r.join("")
            );
          });
        for (
          var n = [],
            i = [],
            o = "undefined" != typeof Uint8Array ? Uint8Array : Array,
            r =
              "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
            s = 0,
            a = r.length;
          s < a;
          ++s
        )
          (n[s] = r[s]), (i[r.charCodeAt(s)] = s);
        function l(t) {
          var e = t.length;
          if (e % 4 > 0)
            throw new Error("Invalid string. Length must be a multiple of 4");
          var n = t.indexOf("=");
          return -1 === n && (n = e), [n, n === e ? 0 : 4 - (n % 4)];
        }
        function u(t, e, i) {
          for (var o, r, s = [], a = e; a < i; a += 3)
            (o =
              ((t[a] << 16) & 16711680) +
              ((t[a + 1] << 8) & 65280) +
              (255 & t[a + 2])),
              s.push(
                n[((r = o) >> 18) & 63] +
                  n[(r >> 12) & 63] +
                  n[(r >> 6) & 63] +
                  n[63 & r]
              );
          return s.join("");
        }
        (i["-".charCodeAt(0)] = 62), (i["_".charCodeAt(0)] = 63);
      },
      9932: (t) => {
        var e = 0.1,
          n = "function" == typeof Float32Array;
        function i(t, e) {
          return 1 - 3 * e + 3 * t;
        }
        function o(t, e) {
          return 3 * e - 6 * t;
        }
        function r(t) {
          return 3 * t;
        }
        function s(t, e, n) {
          return ((i(e, n) * t + o(e, n)) * t + r(e)) * t;
        }
        function a(t, e, n) {
          return 3 * i(e, n) * t * t + 2 * o(e, n) * t + r(e);
        }
        function l(t, e, i, o) {
          if (4 === arguments.length) return new l([t, e, i, o]);
          if (!(this instanceof l)) return new l(t);
          if (!t || 4 !== t.length)
            throw new Error("BezierEasing: points must contains 4 values");
          for (var r = 0; r < 4; ++r)
            if ("number" != typeof t[r] || isNaN(t[r]) || !isFinite(t[r]))
              throw new Error("BezierEasing: points should be integers.");
          if (t[0] < 0 || t[0] > 1 || t[2] < 0 || t[2] > 1)
            throw new Error("BezierEasing x values must be in [0, 1] range.");
          (this._str = "BezierEasing(" + t + ")"),
            (this._css = "cubic-bezier(" + t + ")"),
            (this._p = t),
            (this._mSampleValues = n ? new Float32Array(11) : new Array(11)),
            (this._precomputed = !1),
            (this.get = this.get.bind(this));
        }
        (l.prototype = {
          get: function (t) {
            var e = this._p[0],
              n = this._p[1],
              i = this._p[2],
              o = this._p[3];
            return (
              this._precomputed || this._precompute(),
              e === n && i === o
                ? t
                : 0 === t
                ? 0
                : 1 === t
                ? 1
                : s(this._getTForX(t), n, o)
            );
          },
          getPoints: function () {
            return this._p;
          },
          toString: function () {
            return this._str;
          },
          toCSS: function () {
            return this._css;
          },
          _precompute: function () {
            var t = this._p[0],
              e = this._p[1],
              n = this._p[2],
              i = this._p[3];
            (this._precomputed = !0),
              (t === e && n === i) || this._calcSampleValues();
          },
          _calcSampleValues: function () {
            for (var t = this._p[0], n = this._p[2], i = 0; i < 11; ++i)
              this._mSampleValues[i] = s(i * e, t, n);
          },
          _getTForX: function (t) {
            for (
              var n = this._p[0],
                i = this._p[2],
                o = this._mSampleValues,
                r = 0,
                l = 1;
              10 !== l && o[l] <= t;
              ++l
            )
              r += e;
            var u = r + ((t - o[--l]) / (o[l + 1] - o[l])) * e,
              p = a(u, n, i);
            return p >= 0.001
              ? (function (t, e, n, i) {
                  for (var o = 0; o < 4; ++o) {
                    var r = a(e, n, i);
                    if (0 === r) return e;
                    e -= (s(e, n, i) - t) / r;
                  }
                  return e;
                })(t, u, n, i)
              : 0 === p
              ? u
              : (function (t, e, n, i, o) {
                  var r,
                    a,
                    l = 0;
                  do {
                    (r = s((a = e + (n - e) / 2), i, o) - t) > 0
                      ? (n = a)
                      : (e = a);
                  } while (Math.abs(r) > 1e-7 && ++l < 10);
                  return a;
                })(t, r, r + e, n, i);
          },
        }),
          (l.css = {
            ease: (l.ease = l(0.25, 0.1, 0.25, 1)),
            linear: (l.linear = l(0, 0, 1, 1)),
            "ease-in": (l.easeIn = l(0.42, 0, 1, 1)),
            "ease-out": (l.easeOut = l(0, 0, 0.58, 1)),
            "ease-in-out": (l.easeInOut = l(0.42, 0, 0.58, 1)),
          }),
          (t.exports = l);
      },
      8764: (t, e, n) => {
        "use strict";
        const i = n(9742),
          o = n(645),
          r =
            "function" == typeof Symbol && "function" == typeof Symbol.for
              ? Symbol.for("nodejs.util.inspect.custom")
              : null;
        (e.Buffer = l),
          (e.SlowBuffer = function (t) {
            return +t != t && (t = 0), l.alloc(+t);
          }),
          (e.INSPECT_MAX_BYTES = 50);
        const s = 2147483647;
        function a(t) {
          if (t > s)
            throw new RangeError(
              'The value "' + t + '" is invalid for option "size"'
            );
          const e = new Uint8Array(t);
          return Object.setPrototypeOf(e, l.prototype), e;
        }
        function l(t, e, n) {
          if ("number" == typeof t) {
            if ("string" == typeof e)
              throw new TypeError(
                'The "string" argument must be of type string. Received type number'
              );
            return c(t);
          }
          return u(t, e, n);
        }
        function u(t, e, n) {
          if ("string" == typeof t)
            return (function (t, e) {
              if (
                (("string" == typeof e && "" !== e) || (e = "utf8"),
                !l.isEncoding(e))
              )
                throw new TypeError("Unknown encoding: " + e);
              const n = 0 | g(t, e);
              let i = a(n);
              const o = i.write(t, e);
              return o !== n && (i = i.slice(0, o)), i;
            })(t, e);
          if (ArrayBuffer.isView(t))
            return (function (t) {
              if (G(t, Uint8Array)) {
                const e = new Uint8Array(t);
                return h(e.buffer, e.byteOffset, e.byteLength);
              }
              return d(t);
            })(t);
          if (null == t)
            throw new TypeError(
              "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " +
                typeof t
            );
          if (G(t, ArrayBuffer) || (t && G(t.buffer, ArrayBuffer)))
            return h(t, e, n);
          if (
            "undefined" != typeof SharedArrayBuffer &&
            (G(t, SharedArrayBuffer) || (t && G(t.buffer, SharedArrayBuffer)))
          )
            return h(t, e, n);
          if ("number" == typeof t)
            throw new TypeError(
              'The "value" argument must not be of type number. Received type number'
            );
          const i = t.valueOf && t.valueOf();
          if (null != i && i !== t) return l.from(i, e, n);
          const o = (function (t) {
            if (l.isBuffer(t)) {
              const e = 0 | f(t.length),
                n = a(e);
              return 0 === n.length || t.copy(n, 0, 0, e), n;
            }
            return void 0 !== t.length
              ? "number" != typeof t.length || J(t.length)
                ? a(0)
                : d(t)
              : "Buffer" === t.type && Array.isArray(t.data)
              ? d(t.data)
              : void 0;
          })(t);
          if (o) return o;
          if (
            "undefined" != typeof Symbol &&
            null != Symbol.toPrimitive &&
            "function" == typeof t[Symbol.toPrimitive]
          )
            return l.from(t[Symbol.toPrimitive]("string"), e, n);
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " +
              typeof t
          );
        }
        function p(t) {
          if ("number" != typeof t)
            throw new TypeError('"size" argument must be of type number');
          if (t < 0)
            throw new RangeError(
              'The value "' + t + '" is invalid for option "size"'
            );
        }
        function c(t) {
          return p(t), a(t < 0 ? 0 : 0 | f(t));
        }
        function d(t) {
          const e = t.length < 0 ? 0 : 0 | f(t.length),
            n = a(e);
          for (let i = 0; i < e; i += 1) n[i] = 255 & t[i];
          return n;
        }
        function h(t, e, n) {
          if (e < 0 || t.byteLength < e)
            throw new RangeError('"offset" is outside of buffer bounds');
          if (t.byteLength < e + (n || 0))
            throw new RangeError('"length" is outside of buffer bounds');
          let i;
          return (
            (i =
              void 0 === e && void 0 === n
                ? new Uint8Array(t)
                : void 0 === n
                ? new Uint8Array(t, e)
                : new Uint8Array(t, e, n)),
            Object.setPrototypeOf(i, l.prototype),
            i
          );
        }
        function f(t) {
          if (t >= s)
            throw new RangeError(
              "Attempt to allocate Buffer larger than maximum size: 0x" +
                s.toString(16) +
                " bytes"
            );
          return 0 | t;
        }
        function g(t, e) {
          if (l.isBuffer(t)) return t.length;
          if (ArrayBuffer.isView(t) || G(t, ArrayBuffer)) return t.byteLength;
          if ("string" != typeof t)
            throw new TypeError(
              'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' +
                typeof t
            );
          const n = t.length,
            i = arguments.length > 2 && !0 === arguments[2];
          if (!i && 0 === n) return 0;
          let o = !1;
          for (;;)
            switch (e) {
              case "ascii":
              case "latin1":
              case "binary":
                return n;
              case "utf8":
              case "utf-8":
                return $(t).length;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return 2 * n;
              case "hex":
                return n >>> 1;
              case "base64":
                return Y(t).length;
              default:
                if (o) return i ? -1 : $(t).length;
                (e = ("" + e).toLowerCase()), (o = !0);
            }
        }
        function m(t, e, n) {
          let i = !1;
          if (((void 0 === e || e < 0) && (e = 0), e > this.length)) return "";
          if (((void 0 === n || n > this.length) && (n = this.length), n <= 0))
            return "";
          if ((n >>>= 0) <= (e >>>= 0)) return "";
          for (t || (t = "utf8"); ; )
            switch (t) {
              case "hex":
                return T(this, e, n);
              case "utf8":
              case "utf-8":
                return I(this, e, n);
              case "ascii":
                return P(this, e, n);
              case "latin1":
              case "binary":
                return E(this, e, n);
              case "base64":
                return C(this, e, n);
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return D(this, e, n);
              default:
                if (i) throw new TypeError("Unknown encoding: " + t);
                (t = (t + "").toLowerCase()), (i = !0);
            }
        }
        function y(t, e, n) {
          const i = t[e];
          (t[e] = t[n]), (t[n] = i);
        }
        function v(t, e, n, i, o) {
          if (0 === t.length) return -1;
          if (
            ("string" == typeof n
              ? ((i = n), (n = 0))
              : n > 2147483647
              ? (n = 2147483647)
              : n < -2147483648 && (n = -2147483648),
            J((n = +n)) && (n = o ? 0 : t.length - 1),
            n < 0 && (n = t.length + n),
            n >= t.length)
          ) {
            if (o) return -1;
            n = t.length - 1;
          } else if (n < 0) {
            if (!o) return -1;
            n = 0;
          }
          if (("string" == typeof e && (e = l.from(e, i)), l.isBuffer(e)))
            return 0 === e.length ? -1 : b(t, e, n, i, o);
          if ("number" == typeof e)
            return (
              (e &= 255),
              "function" == typeof Uint8Array.prototype.indexOf
                ? o
                  ? Uint8Array.prototype.indexOf.call(t, e, n)
                  : Uint8Array.prototype.lastIndexOf.call(t, e, n)
                : b(t, [e], n, i, o)
            );
          throw new TypeError("val must be string, number or Buffer");
        }
        function b(t, e, n, i, o) {
          let r,
            s = 1,
            a = t.length,
            l = e.length;
          if (
            void 0 !== i &&
            ("ucs2" === (i = String(i).toLowerCase()) ||
              "ucs-2" === i ||
              "utf16le" === i ||
              "utf-16le" === i)
          ) {
            if (t.length < 2 || e.length < 2) return -1;
            (s = 2), (a /= 2), (l /= 2), (n /= 2);
          }
          function u(t, e) {
            return 1 === s ? t[e] : t.readUInt16BE(e * s);
          }
          if (o) {
            let i = -1;
            for (r = n; r < a; r++)
              if (u(t, r) === u(e, -1 === i ? 0 : r - i)) {
                if ((-1 === i && (i = r), r - i + 1 === l)) return i * s;
              } else -1 !== i && (r -= r - i), (i = -1);
          } else
            for (n + l > a && (n = a - l), r = n; r >= 0; r--) {
              let n = !0;
              for (let i = 0; i < l; i++)
                if (u(t, r + i) !== u(e, i)) {
                  n = !1;
                  break;
                }
              if (n) return r;
            }
          return -1;
        }
        function S(t, e, n, i) {
          n = Number(n) || 0;
          const o = t.length - n;
          i ? (i = Number(i)) > o && (i = o) : (i = o);
          const r = e.length;
          let s;
          for (i > r / 2 && (i = r / 2), s = 0; s < i; ++s) {
            const i = parseInt(e.substr(2 * s, 2), 16);
            if (J(i)) return s;
            t[n + s] = i;
          }
          return s;
        }
        function w(t, e, n, i) {
          return X($(e, t.length - n), t, n, i);
        }
        function O(t, e, n, i) {
          return X(
            (function (t) {
              const e = [];
              for (let n = 0; n < t.length; ++n) e.push(255 & t.charCodeAt(n));
              return e;
            })(e),
            t,
            n,
            i
          );
        }
        function _(t, e, n, i) {
          return X(Y(e), t, n, i);
        }
        function N(t, e, n, i) {
          return X(
            (function (t, e) {
              let n, i, o;
              const r = [];
              for (let s = 0; s < t.length && !((e -= 2) < 0); ++s)
                (n = t.charCodeAt(s)),
                  (i = n >> 8),
                  (o = n % 256),
                  r.push(o),
                  r.push(i);
              return r;
            })(e, t.length - n),
            t,
            n,
            i
          );
        }
        function C(t, e, n) {
          return 0 === e && n === t.length
            ? i.fromByteArray(t)
            : i.fromByteArray(t.slice(e, n));
        }
        function I(t, e, n) {
          n = Math.min(t.length, n);
          const i = [];
          let o = e;
          for (; o < n; ) {
            const e = t[o];
            let r = null,
              s = e > 239 ? 4 : e > 223 ? 3 : e > 191 ? 2 : 1;
            if (o + s <= n) {
              let n, i, a, l;
              switch (s) {
                case 1:
                  e < 128 && (r = e);
                  break;
                case 2:
                  (n = t[o + 1]),
                    128 == (192 & n) &&
                      ((l = ((31 & e) << 6) | (63 & n)), l > 127 && (r = l));
                  break;
                case 3:
                  (n = t[o + 1]),
                    (i = t[o + 2]),
                    128 == (192 & n) &&
                      128 == (192 & i) &&
                      ((l = ((15 & e) << 12) | ((63 & n) << 6) | (63 & i)),
                      l > 2047 && (l < 55296 || l > 57343) && (r = l));
                  break;
                case 4:
                  (n = t[o + 1]),
                    (i = t[o + 2]),
                    (a = t[o + 3]),
                    128 == (192 & n) &&
                      128 == (192 & i) &&
                      128 == (192 & a) &&
                      ((l =
                        ((15 & e) << 18) |
                        ((63 & n) << 12) |
                        ((63 & i) << 6) |
                        (63 & a)),
                      l > 65535 && l < 1114112 && (r = l));
              }
            }
            null === r
              ? ((r = 65533), (s = 1))
              : r > 65535 &&
                ((r -= 65536),
                i.push(((r >>> 10) & 1023) | 55296),
                (r = 56320 | (1023 & r))),
              i.push(r),
              (o += s);
          }
          return (function (t) {
            const e = t.length;
            if (e <= x) return String.fromCharCode.apply(String, t);
            let n = "",
              i = 0;
            for (; i < e; )
              n += String.fromCharCode.apply(String, t.slice(i, (i += x)));
            return n;
          })(i);
        }
        (e.kMaxLength = s),
          (l.TYPED_ARRAY_SUPPORT = (function () {
            try {
              const t = new Uint8Array(1),
                e = {
                  foo: function () {
                    return 42;
                  },
                };
              return (
                Object.setPrototypeOf(e, Uint8Array.prototype),
                Object.setPrototypeOf(t, e),
                42 === t.foo()
              );
            } catch (t) {
              return !1;
            }
          })()),
          l.TYPED_ARRAY_SUPPORT ||
            "undefined" == typeof console ||
            "function" != typeof console.error ||
            console.error(
              "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
            ),
          Object.defineProperty(l.prototype, "parent", {
            enumerable: !0,
            get: function () {
              if (l.isBuffer(this)) return this.buffer;
            },
          }),
          Object.defineProperty(l.prototype, "offset", {
            enumerable: !0,
            get: function () {
              if (l.isBuffer(this)) return this.byteOffset;
            },
          }),
          (l.poolSize = 8192),
          (l.from = function (t, e, n) {
            return u(t, e, n);
          }),
          Object.setPrototypeOf(l.prototype, Uint8Array.prototype),
          Object.setPrototypeOf(l, Uint8Array),
          (l.alloc = function (t, e, n) {
            return (function (t, e, n) {
              return (
                p(t),
                t <= 0
                  ? a(t)
                  : void 0 !== e
                  ? "string" == typeof n
                    ? a(t).fill(e, n)
                    : a(t).fill(e)
                  : a(t)
              );
            })(t, e, n);
          }),
          (l.allocUnsafe = function (t) {
            return c(t);
          }),
          (l.allocUnsafeSlow = function (t) {
            return c(t);
          }),
          (l.isBuffer = function (t) {
            return null != t && !0 === t._isBuffer && t !== l.prototype;
          }),
          (l.compare = function (t, e) {
            if (
              (G(t, Uint8Array) && (t = l.from(t, t.offset, t.byteLength)),
              G(e, Uint8Array) && (e = l.from(e, e.offset, e.byteLength)),
              !l.isBuffer(t) || !l.isBuffer(e))
            )
              throw new TypeError(
                'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
              );
            if (t === e) return 0;
            let n = t.length,
              i = e.length;
            for (let o = 0, r = Math.min(n, i); o < r; ++o)
              if (t[o] !== e[o]) {
                (n = t[o]), (i = e[o]);
                break;
              }
            return n < i ? -1 : i < n ? 1 : 0;
          }),
          (l.isEncoding = function (t) {
            switch (String(t).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "latin1":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return !0;
              default:
                return !1;
            }
          }),
          (l.concat = function (t, e) {
            if (!Array.isArray(t))
              throw new TypeError(
                '"list" argument must be an Array of Buffers'
              );
            if (0 === t.length) return l.alloc(0);
            let n;
            if (void 0 === e)
              for (e = 0, n = 0; n < t.length; ++n) e += t[n].length;
            const i = l.allocUnsafe(e);
            let o = 0;
            for (n = 0; n < t.length; ++n) {
              let e = t[n];
              if (G(e, Uint8Array))
                o + e.length > i.length
                  ? (l.isBuffer(e) || (e = l.from(e)), e.copy(i, o))
                  : Uint8Array.prototype.set.call(i, e, o);
              else {
                if (!l.isBuffer(e))
                  throw new TypeError(
                    '"list" argument must be an Array of Buffers'
                  );
                e.copy(i, o);
              }
              o += e.length;
            }
            return i;
          }),
          (l.byteLength = g),
          (l.prototype._isBuffer = !0),
          (l.prototype.swap16 = function () {
            const t = this.length;
            if (t % 2 != 0)
              throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (let e = 0; e < t; e += 2) y(this, e, e + 1);
            return this;
          }),
          (l.prototype.swap32 = function () {
            const t = this.length;
            if (t % 4 != 0)
              throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (let e = 0; e < t; e += 4)
              y(this, e, e + 3), y(this, e + 1, e + 2);
            return this;
          }),
          (l.prototype.swap64 = function () {
            const t = this.length;
            if (t % 8 != 0)
              throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (let e = 0; e < t; e += 8)
              y(this, e, e + 7),
                y(this, e + 1, e + 6),
                y(this, e + 2, e + 5),
                y(this, e + 3, e + 4);
            return this;
          }),
          (l.prototype.toString = function () {
            const t = this.length;
            return 0 === t
              ? ""
              : 0 === arguments.length
              ? I(this, 0, t)
              : m.apply(this, arguments);
          }),
          (l.prototype.toLocaleString = l.prototype.toString),
          (l.prototype.equals = function (t) {
            if (!l.isBuffer(t))
              throw new TypeError("Argument must be a Buffer");
            return this === t || 0 === l.compare(this, t);
          }),
          (l.prototype.inspect = function () {
            let t = "";
            const n = e.INSPECT_MAX_BYTES;
            return (
              (t = this.toString("hex", 0, n)
                .replace(/(.{2})/g, "$1 ")
                .trim()),
              this.length > n && (t += " ... "),
              "<Buffer " + t + ">"
            );
          }),
          r && (l.prototype[r] = l.prototype.inspect),
          (l.prototype.compare = function (t, e, n, i, o) {
            if (
              (G(t, Uint8Array) && (t = l.from(t, t.offset, t.byteLength)),
              !l.isBuffer(t))
            )
              throw new TypeError(
                'The "target" argument must be one of type Buffer or Uint8Array. Received type ' +
                  typeof t
              );
            if (
              (void 0 === e && (e = 0),
              void 0 === n && (n = t ? t.length : 0),
              void 0 === i && (i = 0),
              void 0 === o && (o = this.length),
              e < 0 || n > t.length || i < 0 || o > this.length)
            )
              throw new RangeError("out of range index");
            if (i >= o && e >= n) return 0;
            if (i >= o) return -1;
            if (e >= n) return 1;
            if (this === t) return 0;
            let r = (o >>>= 0) - (i >>>= 0),
              s = (n >>>= 0) - (e >>>= 0);
            const a = Math.min(r, s),
              u = this.slice(i, o),
              p = t.slice(e, n);
            for (let t = 0; t < a; ++t)
              if (u[t] !== p[t]) {
                (r = u[t]), (s = p[t]);
                break;
              }
            return r < s ? -1 : s < r ? 1 : 0;
          }),
          (l.prototype.includes = function (t, e, n) {
            return -1 !== this.indexOf(t, e, n);
          }),
          (l.prototype.indexOf = function (t, e, n) {
            return v(this, t, e, n, !0);
          }),
          (l.prototype.lastIndexOf = function (t, e, n) {
            return v(this, t, e, n, !1);
          }),
          (l.prototype.write = function (t, e, n, i) {
            if (void 0 === e) (i = "utf8"), (n = this.length), (e = 0);
            else if (void 0 === n && "string" == typeof e)
              (i = e), (n = this.length), (e = 0);
            else {
              if (!isFinite(e))
                throw new Error(
                  "Buffer.write(string, encoding, offset[, length]) is no longer supported"
                );
              (e >>>= 0),
                isFinite(n)
                  ? ((n >>>= 0), void 0 === i && (i = "utf8"))
                  : ((i = n), (n = void 0));
            }
            const o = this.length - e;
            if (
              ((void 0 === n || n > o) && (n = o),
              (t.length > 0 && (n < 0 || e < 0)) || e > this.length)
            )
              throw new RangeError("Attempt to write outside buffer bounds");
            i || (i = "utf8");
            let r = !1;
            for (;;)
              switch (i) {
                case "hex":
                  return S(this, t, e, n);
                case "utf8":
                case "utf-8":
                  return w(this, t, e, n);
                case "ascii":
                case "latin1":
                case "binary":
                  return O(this, t, e, n);
                case "base64":
                  return _(this, t, e, n);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return N(this, t, e, n);
                default:
                  if (r) throw new TypeError("Unknown encoding: " + i);
                  (i = ("" + i).toLowerCase()), (r = !0);
              }
          }),
          (l.prototype.toJSON = function () {
            return {
              type: "Buffer",
              data: Array.prototype.slice.call(this._arr || this, 0),
            };
          });
        const x = 4096;
        function P(t, e, n) {
          let i = "";
          n = Math.min(t.length, n);
          for (let o = e; o < n; ++o) i += String.fromCharCode(127 & t[o]);
          return i;
        }
        function E(t, e, n) {
          let i = "";
          n = Math.min(t.length, n);
          for (let o = e; o < n; ++o) i += String.fromCharCode(t[o]);
          return i;
        }
        function T(t, e, n) {
          const i = t.length;
          (!e || e < 0) && (e = 0), (!n || n < 0 || n > i) && (n = i);
          let o = "";
          for (let i = e; i < n; ++i) o += Q[t[i]];
          return o;
        }
        function D(t, e, n) {
          const i = t.slice(e, n);
          let o = "";
          for (let t = 0; t < i.length - 1; t += 2)
            o += String.fromCharCode(i[t] + 256 * i[t + 1]);
          return o;
        }
        function k(t, e, n) {
          if (t % 1 != 0 || t < 0) throw new RangeError("offset is not uint");
          if (t + e > n)
            throw new RangeError("Trying to access beyond buffer length");
        }
        function R(t, e, n, i, o, r) {
          if (!l.isBuffer(t))
            throw new TypeError('"buffer" argument must be a Buffer instance');
          if (e > o || e < r)
            throw new RangeError('"value" argument is out of bounds');
          if (n + i > t.length) throw new RangeError("Index out of range");
        }
        function A(t, e, n, i, o) {
          W(e, i, o, t, n, 7);
          let r = Number(e & BigInt(4294967295));
          (t[n++] = r),
            (r >>= 8),
            (t[n++] = r),
            (r >>= 8),
            (t[n++] = r),
            (r >>= 8),
            (t[n++] = r);
          let s = Number((e >> BigInt(32)) & BigInt(4294967295));
          return (
            (t[n++] = s),
            (s >>= 8),
            (t[n++] = s),
            (s >>= 8),
            (t[n++] = s),
            (s >>= 8),
            (t[n++] = s),
            n
          );
        }
        function j(t, e, n, i, o) {
          W(e, i, o, t, n, 7);
          let r = Number(e & BigInt(4294967295));
          (t[n + 7] = r),
            (r >>= 8),
            (t[n + 6] = r),
            (r >>= 8),
            (t[n + 5] = r),
            (r >>= 8),
            (t[n + 4] = r);
          let s = Number((e >> BigInt(32)) & BigInt(4294967295));
          return (
            (t[n + 3] = s),
            (s >>= 8),
            (t[n + 2] = s),
            (s >>= 8),
            (t[n + 1] = s),
            (s >>= 8),
            (t[n] = s),
            n + 8
          );
        }
        function M(t, e, n, i, o, r) {
          if (n + i > t.length) throw new RangeError("Index out of range");
          if (n < 0) throw new RangeError("Index out of range");
        }
        function F(t, e, n, i, r) {
          return (
            (e = +e),
            (n >>>= 0),
            r || M(t, 0, n, 4),
            o.write(t, e, n, i, 23, 4),
            n + 4
          );
        }
        function V(t, e, n, i, r) {
          return (
            (e = +e),
            (n >>>= 0),
            r || M(t, 0, n, 8),
            o.write(t, e, n, i, 52, 8),
            n + 8
          );
        }
        (l.prototype.slice = function (t, e) {
          const n = this.length;
          (t = ~~t) < 0 ? (t += n) < 0 && (t = 0) : t > n && (t = n),
            (e = void 0 === e ? n : ~~e) < 0
              ? (e += n) < 0 && (e = 0)
              : e > n && (e = n),
            e < t && (e = t);
          const i = this.subarray(t, e);
          return Object.setPrototypeOf(i, l.prototype), i;
        }),
          (l.prototype.readUintLE = l.prototype.readUIntLE =
            function (t, e, n) {
              (t >>>= 0), (e >>>= 0), n || k(t, e, this.length);
              let i = this[t],
                o = 1,
                r = 0;
              for (; ++r < e && (o *= 256); ) i += this[t + r] * o;
              return i;
            }),
          (l.prototype.readUintBE = l.prototype.readUIntBE =
            function (t, e, n) {
              (t >>>= 0), (e >>>= 0), n || k(t, e, this.length);
              let i = this[t + --e],
                o = 1;
              for (; e > 0 && (o *= 256); ) i += this[t + --e] * o;
              return i;
            }),
          (l.prototype.readUint8 = l.prototype.readUInt8 =
            function (t, e) {
              return (t >>>= 0), e || k(t, 1, this.length), this[t];
            }),
          (l.prototype.readUint16LE = l.prototype.readUInt16LE =
            function (t, e) {
              return (
                (t >>>= 0),
                e || k(t, 2, this.length),
                this[t] | (this[t + 1] << 8)
              );
            }),
          (l.prototype.readUint16BE = l.prototype.readUInt16BE =
            function (t, e) {
              return (
                (t >>>= 0),
                e || k(t, 2, this.length),
                (this[t] << 8) | this[t + 1]
              );
            }),
          (l.prototype.readUint32LE = l.prototype.readUInt32LE =
            function (t, e) {
              return (
                (t >>>= 0),
                e || k(t, 4, this.length),
                (this[t] | (this[t + 1] << 8) | (this[t + 2] << 16)) +
                  16777216 * this[t + 3]
              );
            }),
          (l.prototype.readUint32BE = l.prototype.readUInt32BE =
            function (t, e) {
              return (
                (t >>>= 0),
                e || k(t, 4, this.length),
                16777216 * this[t] +
                  ((this[t + 1] << 16) | (this[t + 2] << 8) | this[t + 3])
              );
            }),
          (l.prototype.readBigUInt64LE = K(function (t) {
            z((t >>>= 0), "offset");
            const e = this[t],
              n = this[t + 7];
            (void 0 !== e && void 0 !== n) || H(t, this.length - 8);
            const i =
                e + 256 * this[++t] + 65536 * this[++t] + this[++t] * 2 ** 24,
              o = this[++t] + 256 * this[++t] + 65536 * this[++t] + n * 2 ** 24;
            return BigInt(i) + (BigInt(o) << BigInt(32));
          })),
          (l.prototype.readBigUInt64BE = K(function (t) {
            z((t >>>= 0), "offset");
            const e = this[t],
              n = this[t + 7];
            (void 0 !== e && void 0 !== n) || H(t, this.length - 8);
            const i =
                e * 2 ** 24 + 65536 * this[++t] + 256 * this[++t] + this[++t],
              o = this[++t] * 2 ** 24 + 65536 * this[++t] + 256 * this[++t] + n;
            return (BigInt(i) << BigInt(32)) + BigInt(o);
          })),
          (l.prototype.readIntLE = function (t, e, n) {
            (t >>>= 0), (e >>>= 0), n || k(t, e, this.length);
            let i = this[t],
              o = 1,
              r = 0;
            for (; ++r < e && (o *= 256); ) i += this[t + r] * o;
            return (o *= 128), i >= o && (i -= Math.pow(2, 8 * e)), i;
          }),
          (l.prototype.readIntBE = function (t, e, n) {
            (t >>>= 0), (e >>>= 0), n || k(t, e, this.length);
            let i = e,
              o = 1,
              r = this[t + --i];
            for (; i > 0 && (o *= 256); ) r += this[t + --i] * o;
            return (o *= 128), r >= o && (r -= Math.pow(2, 8 * e)), r;
          }),
          (l.prototype.readInt8 = function (t, e) {
            return (
              (t >>>= 0),
              e || k(t, 1, this.length),
              128 & this[t] ? -1 * (255 - this[t] + 1) : this[t]
            );
          }),
          (l.prototype.readInt16LE = function (t, e) {
            (t >>>= 0), e || k(t, 2, this.length);
            const n = this[t] | (this[t + 1] << 8);
            return 32768 & n ? 4294901760 | n : n;
          }),
          (l.prototype.readInt16BE = function (t, e) {
            (t >>>= 0), e || k(t, 2, this.length);
            const n = this[t + 1] | (this[t] << 8);
            return 32768 & n ? 4294901760 | n : n;
          }),
          (l.prototype.readInt32LE = function (t, e) {
            return (
              (t >>>= 0),
              e || k(t, 4, this.length),
              this[t] |
                (this[t + 1] << 8) |
                (this[t + 2] << 16) |
                (this[t + 3] << 24)
            );
          }),
          (l.prototype.readInt32BE = function (t, e) {
            return (
              (t >>>= 0),
              e || k(t, 4, this.length),
              (this[t] << 24) |
                (this[t + 1] << 16) |
                (this[t + 2] << 8) |
                this[t + 3]
            );
          }),
          (l.prototype.readBigInt64LE = K(function (t) {
            z((t >>>= 0), "offset");
            const e = this[t],
              n = this[t + 7];
            (void 0 !== e && void 0 !== n) || H(t, this.length - 8);
            const i =
              this[t + 4] + 256 * this[t + 5] + 65536 * this[t + 6] + (n << 24);
            return (
              (BigInt(i) << BigInt(32)) +
              BigInt(
                e + 256 * this[++t] + 65536 * this[++t] + this[++t] * 2 ** 24
              )
            );
          })),
          (l.prototype.readBigInt64BE = K(function (t) {
            z((t >>>= 0), "offset");
            const e = this[t],
              n = this[t + 7];
            (void 0 !== e && void 0 !== n) || H(t, this.length - 8);
            const i =
              (e << 24) + 65536 * this[++t] + 256 * this[++t] + this[++t];
            return (
              (BigInt(i) << BigInt(32)) +
              BigInt(
                this[++t] * 2 ** 24 + 65536 * this[++t] + 256 * this[++t] + n
              )
            );
          })),
          (l.prototype.readFloatLE = function (t, e) {
            return (
              (t >>>= 0), e || k(t, 4, this.length), o.read(this, t, !0, 23, 4)
            );
          }),
          (l.prototype.readFloatBE = function (t, e) {
            return (
              (t >>>= 0), e || k(t, 4, this.length), o.read(this, t, !1, 23, 4)
            );
          }),
          (l.prototype.readDoubleLE = function (t, e) {
            return (
              (t >>>= 0), e || k(t, 8, this.length), o.read(this, t, !0, 52, 8)
            );
          }),
          (l.prototype.readDoubleBE = function (t, e) {
            return (
              (t >>>= 0), e || k(t, 8, this.length), o.read(this, t, !1, 52, 8)
            );
          }),
          (l.prototype.writeUintLE = l.prototype.writeUIntLE =
            function (t, e, n, i) {
              (t = +t),
                (e >>>= 0),
                (n >>>= 0),
                i || R(this, t, e, n, Math.pow(2, 8 * n) - 1, 0);
              let o = 1,
                r = 0;
              for (this[e] = 255 & t; ++r < n && (o *= 256); )
                this[e + r] = (t / o) & 255;
              return e + n;
            }),
          (l.prototype.writeUintBE = l.prototype.writeUIntBE =
            function (t, e, n, i) {
              (t = +t),
                (e >>>= 0),
                (n >>>= 0),
                i || R(this, t, e, n, Math.pow(2, 8 * n) - 1, 0);
              let o = n - 1,
                r = 1;
              for (this[e + o] = 255 & t; --o >= 0 && (r *= 256); )
                this[e + o] = (t / r) & 255;
              return e + n;
            }),
          (l.prototype.writeUint8 = l.prototype.writeUInt8 =
            function (t, e, n) {
              return (
                (t = +t),
                (e >>>= 0),
                n || R(this, t, e, 1, 255, 0),
                (this[e] = 255 & t),
                e + 1
              );
            }),
          (l.prototype.writeUint16LE = l.prototype.writeUInt16LE =
            function (t, e, n) {
              return (
                (t = +t),
                (e >>>= 0),
                n || R(this, t, e, 2, 65535, 0),
                (this[e] = 255 & t),
                (this[e + 1] = t >>> 8),
                e + 2
              );
            }),
          (l.prototype.writeUint16BE = l.prototype.writeUInt16BE =
            function (t, e, n) {
              return (
                (t = +t),
                (e >>>= 0),
                n || R(this, t, e, 2, 65535, 0),
                (this[e] = t >>> 8),
                (this[e + 1] = 255 & t),
                e + 2
              );
            }),
          (l.prototype.writeUint32LE = l.prototype.writeUInt32LE =
            function (t, e, n) {
              return (
                (t = +t),
                (e >>>= 0),
                n || R(this, t, e, 4, 4294967295, 0),
                (this[e + 3] = t >>> 24),
                (this[e + 2] = t >>> 16),
                (this[e + 1] = t >>> 8),
                (this[e] = 255 & t),
                e + 4
              );
            }),
          (l.prototype.writeUint32BE = l.prototype.writeUInt32BE =
            function (t, e, n) {
              return (
                (t = +t),
                (e >>>= 0),
                n || R(this, t, e, 4, 4294967295, 0),
                (this[e] = t >>> 24),
                (this[e + 1] = t >>> 16),
                (this[e + 2] = t >>> 8),
                (this[e + 3] = 255 & t),
                e + 4
              );
            }),
          (l.prototype.writeBigUInt64LE = K(function (t, e = 0) {
            return A(this, t, e, BigInt(0), BigInt("0xffffffffffffffff"));
          })),
          (l.prototype.writeBigUInt64BE = K(function (t, e = 0) {
            return j(this, t, e, BigInt(0), BigInt("0xffffffffffffffff"));
          })),
          (l.prototype.writeIntLE = function (t, e, n, i) {
            if (((t = +t), (e >>>= 0), !i)) {
              const i = Math.pow(2, 8 * n - 1);
              R(this, t, e, n, i - 1, -i);
            }
            let o = 0,
              r = 1,
              s = 0;
            for (this[e] = 255 & t; ++o < n && (r *= 256); )
              t < 0 && 0 === s && 0 !== this[e + o - 1] && (s = 1),
                (this[e + o] = (((t / r) >> 0) - s) & 255);
            return e + n;
          }),
          (l.prototype.writeIntBE = function (t, e, n, i) {
            if (((t = +t), (e >>>= 0), !i)) {
              const i = Math.pow(2, 8 * n - 1);
              R(this, t, e, n, i - 1, -i);
            }
            let o = n - 1,
              r = 1,
              s = 0;
            for (this[e + o] = 255 & t; --o >= 0 && (r *= 256); )
              t < 0 && 0 === s && 0 !== this[e + o + 1] && (s = 1),
                (this[e + o] = (((t / r) >> 0) - s) & 255);
            return e + n;
          }),
          (l.prototype.writeInt8 = function (t, e, n) {
            return (
              (t = +t),
              (e >>>= 0),
              n || R(this, t, e, 1, 127, -128),
              t < 0 && (t = 255 + t + 1),
              (this[e] = 255 & t),
              e + 1
            );
          }),
          (l.prototype.writeInt16LE = function (t, e, n) {
            return (
              (t = +t),
              (e >>>= 0),
              n || R(this, t, e, 2, 32767, -32768),
              (this[e] = 255 & t),
              (this[e + 1] = t >>> 8),
              e + 2
            );
          }),
          (l.prototype.writeInt16BE = function (t, e, n) {
            return (
              (t = +t),
              (e >>>= 0),
              n || R(this, t, e, 2, 32767, -32768),
              (this[e] = t >>> 8),
              (this[e + 1] = 255 & t),
              e + 2
            );
          }),
          (l.prototype.writeInt32LE = function (t, e, n) {
            return (
              (t = +t),
              (e >>>= 0),
              n || R(this, t, e, 4, 2147483647, -2147483648),
              (this[e] = 255 & t),
              (this[e + 1] = t >>> 8),
              (this[e + 2] = t >>> 16),
              (this[e + 3] = t >>> 24),
              e + 4
            );
          }),
          (l.prototype.writeInt32BE = function (t, e, n) {
            return (
              (t = +t),
              (e >>>= 0),
              n || R(this, t, e, 4, 2147483647, -2147483648),
              t < 0 && (t = 4294967295 + t + 1),
              (this[e] = t >>> 24),
              (this[e + 1] = t >>> 16),
              (this[e + 2] = t >>> 8),
              (this[e + 3] = 255 & t),
              e + 4
            );
          }),
          (l.prototype.writeBigInt64LE = K(function (t, e = 0) {
            return A(
              this,
              t,
              e,
              -BigInt("0x8000000000000000"),
              BigInt("0x7fffffffffffffff")
            );
          })),
          (l.prototype.writeBigInt64BE = K(function (t, e = 0) {
            return j(
              this,
              t,
              e,
              -BigInt("0x8000000000000000"),
              BigInt("0x7fffffffffffffff")
            );
          })),
          (l.prototype.writeFloatLE = function (t, e, n) {
            return F(this, t, e, !0, n);
          }),
          (l.prototype.writeFloatBE = function (t, e, n) {
            return F(this, t, e, !1, n);
          }),
          (l.prototype.writeDoubleLE = function (t, e, n) {
            return V(this, t, e, !0, n);
          }),
          (l.prototype.writeDoubleBE = function (t, e, n) {
            return V(this, t, e, !1, n);
          }),
          (l.prototype.copy = function (t, e, n, i) {
            if (!l.isBuffer(t))
              throw new TypeError("argument should be a Buffer");
            if (
              (n || (n = 0),
              i || 0 === i || (i = this.length),
              e >= t.length && (e = t.length),
              e || (e = 0),
              i > 0 && i < n && (i = n),
              i === n)
            )
              return 0;
            if (0 === t.length || 0 === this.length) return 0;
            if (e < 0) throw new RangeError("targetStart out of bounds");
            if (n < 0 || n >= this.length)
              throw new RangeError("Index out of range");
            if (i < 0) throw new RangeError("sourceEnd out of bounds");
            i > this.length && (i = this.length),
              t.length - e < i - n && (i = t.length - e + n);
            const o = i - n;
            return (
              this === t && "function" == typeof Uint8Array.prototype.copyWithin
                ? this.copyWithin(e, n, i)
                : Uint8Array.prototype.set.call(t, this.subarray(n, i), e),
              o
            );
          }),
          (l.prototype.fill = function (t, e, n, i) {
            if ("string" == typeof t) {
              if (
                ("string" == typeof e
                  ? ((i = e), (e = 0), (n = this.length))
                  : "string" == typeof n && ((i = n), (n = this.length)),
                void 0 !== i && "string" != typeof i)
              )
                throw new TypeError("encoding must be a string");
              if ("string" == typeof i && !l.isEncoding(i))
                throw new TypeError("Unknown encoding: " + i);
              if (1 === t.length) {
                const e = t.charCodeAt(0);
                (("utf8" === i && e < 128) || "latin1" === i) && (t = e);
              }
            } else
              "number" == typeof t
                ? (t &= 255)
                : "boolean" == typeof t && (t = Number(t));
            if (e < 0 || this.length < e || this.length < n)
              throw new RangeError("Out of range index");
            if (n <= e) return this;
            let o;
            if (
              ((e >>>= 0),
              (n = void 0 === n ? this.length : n >>> 0),
              t || (t = 0),
              "number" == typeof t)
            )
              for (o = e; o < n; ++o) this[o] = t;
            else {
              const r = l.isBuffer(t) ? t : l.from(t, i),
                s = r.length;
              if (0 === s)
                throw new TypeError(
                  'The value "' + t + '" is invalid for argument "value"'
                );
              for (o = 0; o < n - e; ++o) this[o + e] = r[o % s];
            }
            return this;
          });
        const L = {};
        function U(t, e, n) {
          L[t] = class extends n {
            constructor() {
              super(),
                Object.defineProperty(this, "message", {
                  value: e.apply(this, arguments),
                  writable: !0,
                  configurable: !0,
                }),
                (this.name = `${this.name} [${t}]`),
                this.stack,
                delete this.name;
            }
            get code() {
              return t;
            }
            set code(t) {
              Object.defineProperty(this, "code", {
                configurable: !0,
                enumerable: !0,
                value: t,
                writable: !0,
              });
            }
            toString() {
              return `${this.name} [${t}]: ${this.message}`;
            }
          };
        }
        function B(t) {
          let e = "",
            n = t.length;
          const i = "-" === t[0] ? 1 : 0;
          for (; n >= i + 4; n -= 3) e = `_${t.slice(n - 3, n)}${e}`;
          return `${t.slice(0, n)}${e}`;
        }
        function W(t, e, n, i, o, r) {
          if (t > n || t < e) {
            const i = "bigint" == typeof e ? "n" : "";
            let o;
            throw (
              ((o =
                r > 3
                  ? 0 === e || e === BigInt(0)
                    ? `>= 0${i} and < 2${i} ** ${8 * (r + 1)}${i}`
                    : `>= -(2${i} ** ${8 * (r + 1) - 1}${i}) and < 2 ** ${
                        8 * (r + 1) - 1
                      }${i}`
                  : `>= ${e}${i} and <= ${n}${i}`),
              new L.ERR_OUT_OF_RANGE("value", o, t))
            );
          }
          !(function (t, e, n) {
            z(e, "offset"),
              (void 0 !== t[e] && void 0 !== t[e + n]) ||
                H(e, t.length - (n + 1));
          })(i, o, r);
        }
        function z(t, e) {
          if ("number" != typeof t)
            throw new L.ERR_INVALID_ARG_TYPE(e, "number", t);
        }
        function H(t, e, n) {
          if (Math.floor(t) !== t)
            throw (
              (z(t, n), new L.ERR_OUT_OF_RANGE(n || "offset", "an integer", t))
            );
          if (e < 0) throw new L.ERR_BUFFER_OUT_OF_BOUNDS();
          throw new L.ERR_OUT_OF_RANGE(
            n || "offset",
            `>= ${n ? 1 : 0} and <= ${e}`,
            t
          );
        }
        U(
          "ERR_BUFFER_OUT_OF_BOUNDS",
          function (t) {
            return t
              ? `${t} is outside of buffer bounds`
              : "Attempt to access memory outside buffer bounds";
          },
          RangeError
        ),
          U(
            "ERR_INVALID_ARG_TYPE",
            function (t, e) {
              return `The "${t}" argument must be of type number. Received type ${typeof e}`;
            },
            TypeError
          ),
          U(
            "ERR_OUT_OF_RANGE",
            function (t, e, n) {
              let i = `The value of "${t}" is out of range.`,
                o = n;
              return (
                Number.isInteger(n) && Math.abs(n) > 2 ** 32
                  ? (o = B(String(n)))
                  : "bigint" == typeof n &&
                    ((o = String(n)),
                    (n > BigInt(2) ** BigInt(32) ||
                      n < -(BigInt(2) ** BigInt(32))) &&
                      (o = B(o)),
                    (o += "n")),
                (i += ` It must be ${e}. Received ${o}`),
                i
              );
            },
            RangeError
          );
        const q = /[^+/0-9A-Za-z-_]/g;
        function $(t, e) {
          let n;
          e = e || 1 / 0;
          const i = t.length;
          let o = null;
          const r = [];
          for (let s = 0; s < i; ++s) {
            if (((n = t.charCodeAt(s)), n > 55295 && n < 57344)) {
              if (!o) {
                if (n > 56319) {
                  (e -= 3) > -1 && r.push(239, 191, 189);
                  continue;
                }
                if (s + 1 === i) {
                  (e -= 3) > -1 && r.push(239, 191, 189);
                  continue;
                }
                o = n;
                continue;
              }
              if (n < 56320) {
                (e -= 3) > -1 && r.push(239, 191, 189), (o = n);
                continue;
              }
              n = 65536 + (((o - 55296) << 10) | (n - 56320));
            } else o && (e -= 3) > -1 && r.push(239, 191, 189);
            if (((o = null), n < 128)) {
              if ((e -= 1) < 0) break;
              r.push(n);
            } else if (n < 2048) {
              if ((e -= 2) < 0) break;
              r.push((n >> 6) | 192, (63 & n) | 128);
            } else if (n < 65536) {
              if ((e -= 3) < 0) break;
              r.push((n >> 12) | 224, ((n >> 6) & 63) | 128, (63 & n) | 128);
            } else {
              if (!(n < 1114112)) throw new Error("Invalid code point");
              if ((e -= 4) < 0) break;
              r.push(
                (n >> 18) | 240,
                ((n >> 12) & 63) | 128,
                ((n >> 6) & 63) | 128,
                (63 & n) | 128
              );
            }
          }
          return r;
        }
        function Y(t) {
          return i.toByteArray(
            (function (t) {
              if ((t = (t = t.split("=")[0]).trim().replace(q, "")).length < 2)
                return "";
              for (; t.length % 4 != 0; ) t += "=";
              return t;
            })(t)
          );
        }
        function X(t, e, n, i) {
          let o;
          for (o = 0; o < i && !(o + n >= e.length || o >= t.length); ++o)
            e[o + n] = t[o];
          return o;
        }
        function G(t, e) {
          return (
            t instanceof e ||
            (null != t &&
              null != t.constructor &&
              null != t.constructor.name &&
              t.constructor.name === e.name)
          );
        }
        function J(t) {
          return t != t;
        }
        const Q = (function () {
          const t = "0123456789abcdef",
            e = new Array(256);
          for (let n = 0; n < 16; ++n) {
            const i = 16 * n;
            for (let o = 0; o < 16; ++o) e[i + o] = t[n] + t[o];
          }
          return e;
        })();
        function K(t) {
          return "undefined" == typeof BigInt ? Z : t;
        }
        function Z() {
          throw new Error("BigInt not supported");
        }
      },
      2254: (t, e, n) => {
        "use strict";
        n.d(e, { Z: () => r });
        var i = n(3645),
          o = n.n(i)()(function (t) {
            return t[1];
          });
        o.push([
          t.id,
          ".ndl-controls-pointer, .ndl-controls-pointer * {\n    cursor: pointer;\n}\n\n.ndl-controls-abs-center {\n    position: absolute;\n    transform: translate(-50%, -50%);\n    left: 50%;\n    top: 50%;\n}\n\n/** Button **/\n.ndl-controls-button {\n    outline: none;\n    border: none;\n    color: white;\n    background-color: black;\n    padding: 5px 20px 5px 20px;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n/** Deprecated checkbox **/\n.ndl-controls-checkbox {\n    margin: 0;\n    border: 1px solid #000000;\n    border-radius: 0;\n    background-color: transparent;\n    -webkit-appearance: none;\n    outline: none;\n    cursor: pointer;\n}\n\n.ndl-controls-checkbox:checked {\n    background-color: #000000;\n}\n\n/** Deprecated radio button **/\n.ndl-controls-radiobutton {\n    margin: 0;\n    border: 1px solid #000000;\n    border-radius: 16px;\n    background-color: transparent;\n    -webkit-appearance: none;\n    outline: none;\n    width:32px;\n    height:32px;\n    display: block;\n    cursor: pointer;\n}\n\n.ndl-controls-radiobutton:checked {\n    background-color: #000000;\n}\n\n/** New radio button **/\n.ndl-controls-radio-2 {\n    opacity: 0;\n    position: absolute;\n    margin: 0;\n}\n\n/** New checkbox **/\n.ndl-controls-checkbox-2 {\n    opacity: 0;\n    position: absolute;\n    margin: 0;\n}\n\n/** Options **/\n.ndl-controls-select {\n    -webkit-appearance: none;\n    appearance: none;\n    background-color: transparent;\n    border: 1px solid #000000;\n    border-radius:0;\n    padding: 0 1em 0 0;\n    margin: 0;\n    width: 100%;\n    font-family: inherit;\n    font-size: inherit;\n    cursor: inherit;\n    line-height: inherit;\n  \n    /* Stack above custom arrow */\n    z-index: 1;\n  \n    /* Remove dropdown arrow in IE10 & IE11\n      @link https://www.filamentgroup.com/lab/select-css.html */\n  /*  &::-ms-expand {\n      display: none;\n    }*/\n  \n    /* Remove focus outline, will add on alternate element */\n    outline: none; \n}\n\n/** Range **/\n.ndl-controls-range2 {\n    margin:0;\n    padding:0;\n    -webkit-appearance: none;\n    appearance: none;\n    outline: none;\n    border: none;\n    background: transparent;\n    cursor: pointer;\n}\n\n.ndl-controls-range2::-webkit-slider-thumb {    \n    height: 100%;\n    border: 0;\n    cursor: pointer;\n    -webkit-appearance: none;\n    appearance: none;\n}\n\n.ndl-controls-range2::-moz-range-thumb {\n    height: 100%;\n    border: 0;\n    cursor: pointer;\n    -webkit-appearance: none;\n    appearance: none;\n}\n\n.ndl-controls-range2::-webkit-slider-runnable-track {\n    border: none;\n    height: 100%;\n    cursor: pointer;\n}\n\n.ndl-controls-range2::-moz-range-track {\n    border: none;\n    height: 100%;\n    cursor: pointer;\n}\n\n// Old range\n\n.ndl-controls-range {\n    margin:0;\n    padding:0;\n    -webkit-appearance: none;\n    outline: none;\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n}\n\n.ndl-controls-range::-webkit-slider-thumb {\n    width: 16px;\n    height: 16px;\n    background: #000000;\n    border: 0;\n    border-radius: 8px;\n    cursor: pointer;\n    -webkit-appearance: none;\n    margin-top:-5px;\n}\n\n.ndl-controls-range::-moz-range-thumb {\n    width: 16px;\n    height: 16px;\n    background: #000000;\n    border: none;\n    border-radius: 8px;\n    cursor: pointer;\n}\n\n.ndl-controls-range::-ms-thumb {\n    width: 16px;\n    height: 16px;\n    background: #000000;\n    border: none;\n    border-radius: 8px;\n    cursor: pointer;\n    margin-top: 0px;\n    /*Needed to keep the Edge thumb centred*/\n}\n\n.ndl-controls-range::-webkit-slider-runnable-track {\n    background: #f0f0f0;\n    border: none;\n    width: 100%;\n    height: 6px;\n    cursor: pointer;\n    top:4px;\n    margin-top:5px;\n}\n\n.ndl-controls-range:focus::-webkit-slider-runnable-track {\n    background: #f0f0f0;\n}\n\n.ndl-controls-range::-moz-range-track {\n    background: #f0f0f0;\n    border: none;\n    width: 100%;\n    height: 6px;\n    cursor: pointer;\n}\n\n.ndl-controls-range::-ms-track {\n    background: transparent;\n    border-color: transparent;\n    border-width: 5px 0;\n    color: transparent;\n    width: 100%;\n    height: 6px;\n    cursor: pointer;\n}\n\n.ndl-controls-range::-ms-fill-lower {\n    background: #f0f0f0;\n    border: none;\n}\n.ndl-controls-range::-ms-fill-upper {\n    background: #f0f0f0;\n    border: none;\n}\n\n/** Field Set **/\n.ndl-controls-fieldset {\n    outline:none;\n    border:none;\n    margin: 0;\n    padding: 0;\n}\n\n/** Text Input **/\n.ndl-controls-textinput {\n    outline: none;\n    border-style: none;\n    background-color: transparent;\n}\n\n.ndl-controls-textinput::placeholder {\n    color: inherit;\n    opacity: 0.5;\n}",
          "",
        ]);
        const r = o;
      },
      3645: (t) => {
        "use strict";
        t.exports = function (t) {
          var e = [];
          return (
            (e.toString = function () {
              return this.map(function (e) {
                var n = t(e);
                return e[2] ? "@media ".concat(e[2], " {").concat(n, "}") : n;
              }).join("");
            }),
            (e.i = function (t, n, i) {
              "string" == typeof t && (t = [[null, t, ""]]);
              var o = {};
              if (i)
                for (var r = 0; r < this.length; r++) {
                  var s = this[r][0];
                  null != s && (o[s] = !0);
                }
              for (var a = 0; a < t.length; a++) {
                var l = [].concat(t[a]);
                (i && o[l[0]]) ||
                  (n &&
                    (l[2]
                      ? (l[2] = "".concat(n, " and ").concat(l[2]))
                      : (l[2] = n)),
                  e.push(l));
              }
            }),
            e
          );
        };
      },
      7187: (t) => {
        "use strict";
        var e,
          n = "object" == typeof Reflect ? Reflect : null,
          i =
            n && "function" == typeof n.apply
              ? n.apply
              : function (t, e, n) {
                  return Function.prototype.apply.call(t, e, n);
                };
        e =
          n && "function" == typeof n.ownKeys
            ? n.ownKeys
            : Object.getOwnPropertySymbols
            ? function (t) {
                return Object.getOwnPropertyNames(t).concat(
                  Object.getOwnPropertySymbols(t)
                );
              }
            : function (t) {
                return Object.getOwnPropertyNames(t);
              };
        var o =
          Number.isNaN ||
          function (t) {
            return t != t;
          };
        function r() {
          r.init.call(this);
        }
        (t.exports = r),
          (t.exports.once = function (t, e) {
            return new Promise(function (n, i) {
              function o(n) {
                t.removeListener(e, r), i(n);
              }
              function r() {
                "function" == typeof t.removeListener &&
                  t.removeListener("error", o),
                  n([].slice.call(arguments));
              }
              g(t, e, r, { once: !0 }),
                "error" !== e &&
                  (function (t, e, n) {
                    "function" == typeof t.on && g(t, "error", e, { once: !0 });
                  })(t, o);
            });
          }),
          (r.EventEmitter = r),
          (r.prototype._events = void 0),
          (r.prototype._eventsCount = 0),
          (r.prototype._maxListeners = void 0);
        var s = 10;
        function a(t) {
          if ("function" != typeof t)
            throw new TypeError(
              'The "listener" argument must be of type Function. Received type ' +
                typeof t
            );
        }
        function l(t) {
          return void 0 === t._maxListeners
            ? r.defaultMaxListeners
            : t._maxListeners;
        }
        function u(t, e, n, i) {
          var o, r, s, u;
          if (
            (a(n),
            void 0 === (r = t._events)
              ? ((r = t._events = Object.create(null)), (t._eventsCount = 0))
              : (void 0 !== r.newListener &&
                  (t.emit("newListener", e, n.listener ? n.listener : n),
                  (r = t._events)),
                (s = r[e])),
            void 0 === s)
          )
            (s = r[e] = n), ++t._eventsCount;
          else if (
            ("function" == typeof s
              ? (s = r[e] = i ? [n, s] : [s, n])
              : i
              ? s.unshift(n)
              : s.push(n),
            (o = l(t)) > 0 && s.length > o && !s.warned)
          ) {
            s.warned = !0;
            var p = new Error(
              "Possible EventEmitter memory leak detected. " +
                s.length +
                " " +
                String(e) +
                " listeners added. Use emitter.setMaxListeners() to increase limit"
            );
            (p.name = "MaxListenersExceededWarning"),
              (p.emitter = t),
              (p.type = e),
              (p.count = s.length),
              (u = p),
              console && console.warn && console.warn(u);
          }
          return t;
        }
        function p() {
          if (!this.fired)
            return (
              this.target.removeListener(this.type, this.wrapFn),
              (this.fired = !0),
              0 === arguments.length
                ? this.listener.call(this.target)
                : this.listener.apply(this.target, arguments)
            );
        }
        function c(t, e, n) {
          var i = {
              fired: !1,
              wrapFn: void 0,
              target: t,
              type: e,
              listener: n,
            },
            o = p.bind(i);
          return (o.listener = n), (i.wrapFn = o), o;
        }
        function d(t, e, n) {
          var i = t._events;
          if (void 0 === i) return [];
          var o = i[e];
          return void 0 === o
            ? []
            : "function" == typeof o
            ? n
              ? [o.listener || o]
              : [o]
            : n
            ? (function (t) {
                for (var e = new Array(t.length), n = 0; n < e.length; ++n)
                  e[n] = t[n].listener || t[n];
                return e;
              })(o)
            : f(o, o.length);
        }
        function h(t) {
          var e = this._events;
          if (void 0 !== e) {
            var n = e[t];
            if ("function" == typeof n) return 1;
            if (void 0 !== n) return n.length;
          }
          return 0;
        }
        function f(t, e) {
          for (var n = new Array(e), i = 0; i < e; ++i) n[i] = t[i];
          return n;
        }
        function g(t, e, n, i) {
          if ("function" == typeof t.on) i.once ? t.once(e, n) : t.on(e, n);
          else {
            if ("function" != typeof t.addEventListener)
              throw new TypeError(
                'The "emitter" argument must be of type EventEmitter. Received type ' +
                  typeof t
              );
            t.addEventListener(e, function o(r) {
              i.once && t.removeEventListener(e, o), n(r);
            });
          }
        }
        Object.defineProperty(r, "defaultMaxListeners", {
          enumerable: !0,
          get: function () {
            return s;
          },
          set: function (t) {
            if ("number" != typeof t || t < 0 || o(t))
              throw new RangeError(
                'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' +
                  t +
                  "."
              );
            s = t;
          },
        }),
          (r.init = function () {
            (void 0 !== this._events &&
              this._events !== Object.getPrototypeOf(this)._events) ||
              ((this._events = Object.create(null)), (this._eventsCount = 0)),
              (this._maxListeners = this._maxListeners || void 0);
          }),
          (r.prototype.setMaxListeners = function (t) {
            if ("number" != typeof t || t < 0 || o(t))
              throw new RangeError(
                'The value of "n" is out of range. It must be a non-negative number. Received ' +
                  t +
                  "."
              );
            return (this._maxListeners = t), this;
          }),
          (r.prototype.getMaxListeners = function () {
            return l(this);
          }),
          (r.prototype.emit = function (t) {
            for (var e = [], n = 1; n < arguments.length; n++)
              e.push(arguments[n]);
            var o = "error" === t,
              r = this._events;
            if (void 0 !== r) o = o && void 0 === r.error;
            else if (!o) return !1;
            if (o) {
              var s;
              if ((e.length > 0 && (s = e[0]), s instanceof Error)) throw s;
              var a = new Error(
                "Unhandled error." + (s ? " (" + s.message + ")" : "")
              );
              throw ((a.context = s), a);
            }
            var l = r[t];
            if (void 0 === l) return !1;
            if ("function" == typeof l) i(l, this, e);
            else {
              var u = l.length,
                p = f(l, u);
              for (n = 0; n < u; ++n) i(p[n], this, e);
            }
            return !0;
          }),
          (r.prototype.addListener = function (t, e) {
            return u(this, t, e, !1);
          }),
          (r.prototype.on = r.prototype.addListener),
          (r.prototype.prependListener = function (t, e) {
            return u(this, t, e, !0);
          }),
          (r.prototype.once = function (t, e) {
            return a(e), this.on(t, c(this, t, e)), this;
          }),
          (r.prototype.prependOnceListener = function (t, e) {
            return a(e), this.prependListener(t, c(this, t, e)), this;
          }),
          (r.prototype.removeListener = function (t, e) {
            var n, i, o, r, s;
            if ((a(e), void 0 === (i = this._events))) return this;
            if (void 0 === (n = i[t])) return this;
            if (n === e || n.listener === e)
              0 == --this._eventsCount
                ? (this._events = Object.create(null))
                : (delete i[t],
                  i.removeListener &&
                    this.emit("removeListener", t, n.listener || e));
            else if ("function" != typeof n) {
              for (o = -1, r = n.length - 1; r >= 0; r--)
                if (n[r] === e || n[r].listener === e) {
                  (s = n[r].listener), (o = r);
                  break;
                }
              if (o < 0) return this;
              0 === o
                ? n.shift()
                : (function (t, e) {
                    for (; e + 1 < t.length; e++) t[e] = t[e + 1];
                    t.pop();
                  })(n, o),
                1 === n.length && (i[t] = n[0]),
                void 0 !== i.removeListener &&
                  this.emit("removeListener", t, s || e);
            }
            return this;
          }),
          (r.prototype.off = r.prototype.removeListener),
          (r.prototype.removeAllListeners = function (t) {
            var e, n, i;
            if (void 0 === (n = this._events)) return this;
            if (void 0 === n.removeListener)
              return (
                0 === arguments.length
                  ? ((this._events = Object.create(null)),
                    (this._eventsCount = 0))
                  : void 0 !== n[t] &&
                    (0 == --this._eventsCount
                      ? (this._events = Object.create(null))
                      : delete n[t]),
                this
              );
            if (0 === arguments.length) {
              var o,
                r = Object.keys(n);
              for (i = 0; i < r.length; ++i)
                "removeListener" !== (o = r[i]) && this.removeAllListeners(o);
              return (
                this.removeAllListeners("removeListener"),
                (this._events = Object.create(null)),
                (this._eventsCount = 0),
                this
              );
            }
            if ("function" == typeof (e = n[t])) this.removeListener(t, e);
            else if (void 0 !== e)
              for (i = e.length - 1; i >= 0; i--) this.removeListener(t, e[i]);
            return this;
          }),
          (r.prototype.listeners = function (t) {
            return d(this, t, !0);
          }),
          (r.prototype.rawListeners = function (t) {
            return d(this, t, !1);
          }),
          (r.listenerCount = function (t, e) {
            return "function" == typeof t.listenerCount
              ? t.listenerCount(e)
              : h.call(t, e);
          }),
          (r.prototype.listenerCount = h),
          (r.prototype.eventNames = function () {
            return this._eventsCount > 0 ? e(this._events) : [];
          });
      },
      645: (t, e) => {
        (e.read = function (t, e, n, i, o) {
          var r,
            s,
            a = 8 * o - i - 1,
            l = (1 << a) - 1,
            u = l >> 1,
            p = -7,
            c = n ? o - 1 : 0,
            d = n ? -1 : 1,
            h = t[e + c];
          for (
            c += d, r = h & ((1 << -p) - 1), h >>= -p, p += a;
            p > 0;
            r = 256 * r + t[e + c], c += d, p -= 8
          );
          for (
            s = r & ((1 << -p) - 1), r >>= -p, p += i;
            p > 0;
            s = 256 * s + t[e + c], c += d, p -= 8
          );
          if (0 === r) r = 1 - u;
          else {
            if (r === l) return s ? NaN : (1 / 0) * (h ? -1 : 1);
            (s += Math.pow(2, i)), (r -= u);
          }
          return (h ? -1 : 1) * s * Math.pow(2, r - i);
        }),
          (e.write = function (t, e, n, i, o, r) {
            var s,
              a,
              l,
              u = 8 * r - o - 1,
              p = (1 << u) - 1,
              c = p >> 1,
              d = 23 === o ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
              h = i ? 0 : r - 1,
              f = i ? 1 : -1,
              g = e < 0 || (0 === e && 1 / e < 0) ? 1 : 0;
            for (
              e = Math.abs(e),
                isNaN(e) || e === 1 / 0
                  ? ((a = isNaN(e) ? 1 : 0), (s = p))
                  : ((s = Math.floor(Math.log(e) / Math.LN2)),
                    e * (l = Math.pow(2, -s)) < 1 && (s--, (l *= 2)),
                    (e += s + c >= 1 ? d / l : d * Math.pow(2, 1 - c)) * l >=
                      2 && (s++, (l /= 2)),
                    s + c >= p
                      ? ((a = 0), (s = p))
                      : s + c >= 1
                      ? ((a = (e * l - 1) * Math.pow(2, o)), (s += c))
                      : ((a = e * Math.pow(2, c - 1) * Math.pow(2, o)),
                        (s = 0)));
              o >= 8;
              t[n + h] = 255 & a, h += f, a /= 256, o -= 8
            );
            for (
              s = (s << o) | a, u += o;
              u > 0;
              t[n + h] = 255 & s, h += f, s /= 256, u -= 8
            );
            t[n + h - f] |= 128 * g;
          });
      },
      5717: (t) => {
        "function" == typeof Object.create
          ? (t.exports = function (t, e) {
              e &&
                ((t.super_ = e),
                (t.prototype = Object.create(e.prototype, {
                  constructor: {
                    value: t,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0,
                  },
                })));
            })
          : (t.exports = function (t, e) {
              if (e) {
                t.super_ = e;
                var n = function () {};
                (n.prototype = e.prototype),
                  (t.prototype = new n()),
                  (t.prototype.constructor = t);
              }
            });
      },
      1478: (t, e, n) => {
        var i = "__lodash_hash_undefined__",
          o = /^\[object .+?Constructor\]$/,
          r = "object" == typeof n.g && n.g && n.g.Object === Object && n.g,
          s = "object" == typeof self && self && self.Object === Object && self,
          a = r || s || Function("return this")();
        function l(t, e, n) {
          switch (n.length) {
            case 0:
              return t.call(e);
            case 1:
              return t.call(e, n[0]);
            case 2:
              return t.call(e, n[0], n[1]);
            case 3:
              return t.call(e, n[0], n[1], n[2]);
          }
          return t.apply(e, n);
        }
        function u(t, e) {
          return (
            !(!t || !t.length) &&
            (function (t, e, n) {
              if (e != e)
                return (function (t, e, n, i) {
                  for (var o = t.length, r = -1; ++r < o; )
                    if (e(t[r], r, t)) return r;
                  return -1;
                })(t, d);
              for (var i = -1, o = t.length; ++i < o; )
                if (t[i] === e) return i;
              return -1;
            })(t, e) > -1
          );
        }
        function p(t, e, n) {
          for (var i = -1, o = t ? t.length : 0; ++i < o; )
            if (n(e, t[i])) return !0;
          return !1;
        }
        function c(t, e) {
          for (var n = -1, i = e.length, o = t.length; ++n < i; )
            t[o + n] = e[n];
          return t;
        }
        function d(t) {
          return t != t;
        }
        function h(t, e) {
          return t.has(e);
        }
        var f,
          g = Array.prototype,
          m = Function.prototype,
          y = Object.prototype,
          v = a["__core-js_shared__"],
          b = (f = /[^.]+$/.exec((v && v.keys && v.keys.IE_PROTO) || ""))
            ? "Symbol(src)_1." + f
            : "",
          S = m.toString,
          w = y.hasOwnProperty,
          O = y.toString,
          _ = RegExp(
            "^" +
              S.call(w)
                .replace(/[\\^$.*+?()[\]{}|]/g, "\\$&")
                .replace(
                  /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                  "$1.*?"
                ) +
              "$"
          ),
          N = a.Symbol,
          C = y.propertyIsEnumerable,
          I = g.splice,
          x = N ? N.isConcatSpreadable : void 0,
          P = Math.max,
          E = V(a, "Map"),
          T = V(Object, "create");
        function D(t) {
          var e = -1,
            n = t ? t.length : 0;
          for (this.clear(); ++e < n; ) {
            var i = t[e];
            this.set(i[0], i[1]);
          }
        }
        function k(t) {
          var e = -1,
            n = t ? t.length : 0;
          for (this.clear(); ++e < n; ) {
            var i = t[e];
            this.set(i[0], i[1]);
          }
        }
        function R(t) {
          var e = -1,
            n = t ? t.length : 0;
          for (this.clear(); ++e < n; ) {
            var i = t[e];
            this.set(i[0], i[1]);
          }
        }
        function A(t) {
          var e = -1,
            n = t ? t.length : 0;
          for (this.__data__ = new R(); ++e < n; ) this.add(t[e]);
        }
        function j(t, e) {
          for (var n, i, o = t.length; o--; )
            if ((n = t[o][0]) === (i = e) || (n != n && i != i)) return o;
          return -1;
        }
        function M(t, e, n, i, o) {
          var r = -1,
            s = t.length;
          for (n || (n = L), o || (o = []); ++r < s; ) {
            var a = t[r];
            e > 0 && n(a)
              ? e > 1
                ? M(a, e - 1, n, i, o)
                : c(o, a)
              : i || (o[o.length] = a);
          }
          return o;
        }
        function F(t, e) {
          var n,
            i,
            o = t.__data__;
          return (
            "string" == (i = typeof (n = e)) ||
            "number" == i ||
            "symbol" == i ||
            "boolean" == i
              ? "__proto__" !== n
              : null === n
          )
            ? o["string" == typeof e ? "string" : "hash"]
            : o.map;
        }
        function V(t, e) {
          var n = (function (t, e) {
            return null == t ? void 0 : t[e];
          })(t, e);
          return (function (t) {
            return (
              !(!$(t) || ((e = t), b && b in e)) &&
              (q(t) ||
              (function (t) {
                var e = !1;
                if (null != t && "function" != typeof t.toString)
                  try {
                    e = !!(t + "");
                  } catch (t) {}
                return e;
              })(t)
                ? _
                : o
              ).test(
                (function (t) {
                  if (null != t) {
                    try {
                      return S.call(t);
                    } catch (t) {}
                    try {
                      return t + "";
                    } catch (t) {}
                  }
                  return "";
                })(t)
              )
            );
            var e;
          })(n)
            ? n
            : void 0;
        }
        function L(t) {
          return (
            z(t) ||
            (function (t) {
              return (
                H(t) &&
                w.call(t, "callee") &&
                (!C.call(t, "callee") || "[object Arguments]" == O.call(t))
              );
            })(t) ||
            !!(x && t && t[x])
          );
        }
        (D.prototype.clear = function () {
          this.__data__ = T ? T(null) : {};
        }),
          (D.prototype.delete = function (t) {
            return this.has(t) && delete this.__data__[t];
          }),
          (D.prototype.get = function (t) {
            var e = this.__data__;
            if (T) {
              var n = e[t];
              return n === i ? void 0 : n;
            }
            return w.call(e, t) ? e[t] : void 0;
          }),
          (D.prototype.has = function (t) {
            var e = this.__data__;
            return T ? void 0 !== e[t] : w.call(e, t);
          }),
          (D.prototype.set = function (t, e) {
            return (this.__data__[t] = T && void 0 === e ? i : e), this;
          }),
          (k.prototype.clear = function () {
            this.__data__ = [];
          }),
          (k.prototype.delete = function (t) {
            var e = this.__data__,
              n = j(e, t);
            return !(
              n < 0 || (n == e.length - 1 ? e.pop() : I.call(e, n, 1), 0)
            );
          }),
          (k.prototype.get = function (t) {
            var e = this.__data__,
              n = j(e, t);
            return n < 0 ? void 0 : e[n][1];
          }),
          (k.prototype.has = function (t) {
            return j(this.__data__, t) > -1;
          }),
          (k.prototype.set = function (t, e) {
            var n = this.__data__,
              i = j(n, t);
            return i < 0 ? n.push([t, e]) : (n[i][1] = e), this;
          }),
          (R.prototype.clear = function () {
            this.__data__ = {
              hash: new D(),
              map: new (E || k)(),
              string: new D(),
            };
          }),
          (R.prototype.delete = function (t) {
            return F(this, t).delete(t);
          }),
          (R.prototype.get = function (t) {
            return F(this, t).get(t);
          }),
          (R.prototype.has = function (t) {
            return F(this, t).has(t);
          }),
          (R.prototype.set = function (t, e) {
            return F(this, t).set(t, e), this;
          }),
          (A.prototype.add = A.prototype.push =
            function (t) {
              return this.__data__.set(t, i), this;
            }),
          (A.prototype.has = function (t) {
            return this.__data__.has(t);
          });
        var U,
          B,
          W =
            ((U = function (t, e) {
              return H(t)
                ? (function (t, e, n, i) {
                    var o,
                      r = -1,
                      s = u,
                      a = !0,
                      l = t.length,
                      c = [],
                      d = e.length;
                    if (!l) return c;
                    n &&
                      (e = (function (t, e) {
                        for (
                          var n = -1, i = t ? t.length : 0, o = Array(i);
                          ++n < i;

                        )
                          o[n] = e(t[n], n, t);
                        return o;
                      })(
                        e,
                        ((o = n),
                        function (t) {
                          return o(t);
                        })
                      )),
                      i
                        ? ((s = p), (a = !1))
                        : e.length >= 200 &&
                          ((s = h), (a = !1), (e = new A(e)));
                    t: for (; ++r < l; ) {
                      var f = t[r],
                        g = n ? n(f) : f;
                      if (((f = i || 0 !== f ? f : 0), a && g == g)) {
                        for (var m = d; m--; ) if (e[m] === g) continue t;
                        c.push(f);
                      } else s(e, g, i) || c.push(f);
                    }
                    return c;
                  })(t, M(e, 1, H, !0))
                : [];
            }),
            (B = P(void 0 === B ? U.length - 1 : B, 0)),
            function () {
              for (
                var t = arguments, e = -1, n = P(t.length - B, 0), i = Array(n);
                ++e < n;

              )
                i[e] = t[B + e];
              e = -1;
              for (var o = Array(B + 1); ++e < B; ) o[e] = t[e];
              return (o[B] = i), l(U, this, o);
            }),
          z = Array.isArray;
        function H(t) {
          return (
            (function (t) {
              return !!t && "object" == typeof t;
            })(t) &&
            (function (t) {
              return (
                null != t &&
                (function (t) {
                  return (
                    "number" == typeof t &&
                    t > -1 &&
                    t % 1 == 0 &&
                    t <= 9007199254740991
                  );
                })(t.length) &&
                !q(t)
              );
            })(t)
          );
        }
        function q(t) {
          var e = $(t) ? O.call(t) : "";
          return "[object Function]" == e || "[object GeneratorFunction]" == e;
        }
        function $(t) {
          var e = typeof t;
          return !!t && ("object" == e || "function" == e);
        }
        t.exports = W;
      },
      2307: (t, e, n) => {
        t = n.nmd(t);
        var i = "__lodash_hash_undefined__",
          o = 9007199254740991,
          r = "[object Arguments]",
          s = "[object Array]",
          a = "[object Boolean]",
          l = "[object Date]",
          u = "[object Error]",
          p = "[object Function]",
          c = "[object Map]",
          d = "[object Number]",
          h = "[object Object]",
          f = "[object Promise]",
          g = "[object RegExp]",
          m = "[object Set]",
          y = "[object String]",
          v = "[object WeakMap]",
          b = "[object ArrayBuffer]",
          S = "[object DataView]",
          w = /^\[object .+?Constructor\]$/,
          O = /^(?:0|[1-9]\d*)$/,
          _ = {};
        (_["[object Float32Array]"] =
          _["[object Float64Array]"] =
          _["[object Int8Array]"] =
          _["[object Int16Array]"] =
          _["[object Int32Array]"] =
          _["[object Uint8Array]"] =
          _["[object Uint8ClampedArray]"] =
          _["[object Uint16Array]"] =
          _["[object Uint32Array]"] =
            !0),
          (_[r] =
            _[s] =
            _[b] =
            _[a] =
            _[S] =
            _[l] =
            _[u] =
            _[p] =
            _[c] =
            _[d] =
            _[h] =
            _[g] =
            _[m] =
            _[y] =
            _[v] =
              !1);
        var N = "object" == typeof n.g && n.g && n.g.Object === Object && n.g,
          C = "object" == typeof self && self && self.Object === Object && self,
          I = N || C || Function("return this")(),
          x = e && !e.nodeType && e,
          P = x && t && !t.nodeType && t,
          E = P && P.exports === x,
          T = E && N.process,
          D = (function () {
            try {
              return T && T.binding && T.binding("util");
            } catch (t) {}
          })(),
          k = D && D.isTypedArray;
        function R(t, e) {
          for (var n = -1, i = null == t ? 0 : t.length; ++n < i; )
            if (e(t[n], n, t)) return !0;
          return !1;
        }
        function A(t) {
          var e = -1,
            n = Array(t.size);
          return (
            t.forEach(function (t, i) {
              n[++e] = [i, t];
            }),
            n
          );
        }
        function j(t) {
          var e = -1,
            n = Array(t.size);
          return (
            t.forEach(function (t) {
              n[++e] = t;
            }),
            n
          );
        }
        var M,
          F,
          V,
          L = Array.prototype,
          U = Function.prototype,
          B = Object.prototype,
          W = I["__core-js_shared__"],
          z = U.toString,
          H = B.hasOwnProperty,
          q = (M = /[^.]+$/.exec((W && W.keys && W.keys.IE_PROTO) || ""))
            ? "Symbol(src)_1." + M
            : "",
          $ = B.toString,
          Y = RegExp(
            "^" +
              z
                .call(H)
                .replace(/[\\^$.*+?()[\]{}|]/g, "\\$&")
                .replace(
                  /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                  "$1.*?"
                ) +
              "$"
          ),
          X = E ? I.Buffer : void 0,
          G = I.Symbol,
          J = I.Uint8Array,
          Q = B.propertyIsEnumerable,
          K = L.splice,
          Z = G ? G.toStringTag : void 0,
          tt = Object.getOwnPropertySymbols,
          et = X ? X.isBuffer : void 0,
          nt =
            ((F = Object.keys),
            (V = Object),
            function (t) {
              return F(V(t));
            }),
          it = Pt(I, "DataView"),
          ot = Pt(I, "Map"),
          rt = Pt(I, "Promise"),
          st = Pt(I, "Set"),
          at = Pt(I, "WeakMap"),
          lt = Pt(Object, "create"),
          ut = kt(it),
          pt = kt(ot),
          ct = kt(rt),
          dt = kt(st),
          ht = kt(at),
          ft = G ? G.prototype : void 0,
          gt = ft ? ft.valueOf : void 0;
        function mt(t) {
          var e = -1,
            n = null == t ? 0 : t.length;
          for (this.clear(); ++e < n; ) {
            var i = t[e];
            this.set(i[0], i[1]);
          }
        }
        function yt(t) {
          var e = -1,
            n = null == t ? 0 : t.length;
          for (this.clear(); ++e < n; ) {
            var i = t[e];
            this.set(i[0], i[1]);
          }
        }
        function vt(t) {
          var e = -1,
            n = null == t ? 0 : t.length;
          for (this.clear(); ++e < n; ) {
            var i = t[e];
            this.set(i[0], i[1]);
          }
        }
        function bt(t) {
          var e = -1,
            n = null == t ? 0 : t.length;
          for (this.__data__ = new vt(); ++e < n; ) this.add(t[e]);
        }
        function St(t) {
          var e = (this.__data__ = new yt(t));
          this.size = e.size;
        }
        function wt(t, e) {
          for (var n = t.length; n--; ) if (Rt(t[n][0], e)) return n;
          return -1;
        }
        function Ot(t) {
          return null == t
            ? void 0 === t
              ? "[object Undefined]"
              : "[object Null]"
            : Z && Z in Object(t)
            ? (function (t) {
                var e = H.call(t, Z),
                  n = t[Z];
                try {
                  t[Z] = void 0;
                  var i = !0;
                } catch (t) {}
                var o = $.call(t);
                return i && (e ? (t[Z] = n) : delete t[Z]), o;
              })(t)
            : (function (t) {
                return $.call(t);
              })(t);
        }
        function _t(t) {
          return Ut(t) && Ot(t) == r;
        }
        function Nt(t, e, n, i, o) {
          return (
            t === e ||
            (null == t || null == e || (!Ut(t) && !Ut(e))
              ? t != t && e != e
              : (function (t, e, n, i, o, p) {
                  var f = jt(t),
                    v = jt(e),
                    w = f ? s : Tt(t),
                    O = v ? s : Tt(e),
                    _ = (w = w == r ? h : w) == h,
                    N = (O = O == r ? h : O) == h,
                    C = w == O;
                  if (C && Mt(t)) {
                    if (!Mt(e)) return !1;
                    (f = !0), (_ = !1);
                  }
                  if (C && !_)
                    return (
                      p || (p = new St()),
                      f || Bt(t)
                        ? Ct(t, e, n, i, o, p)
                        : (function (t, e, n, i, o, r, s) {
                            switch (n) {
                              case S:
                                if (
                                  t.byteLength != e.byteLength ||
                                  t.byteOffset != e.byteOffset
                                )
                                  return !1;
                                (t = t.buffer), (e = e.buffer);
                              case b:
                                return !(
                                  t.byteLength != e.byteLength ||
                                  !r(new J(t), new J(e))
                                );
                              case a:
                              case l:
                              case d:
                                return Rt(+t, +e);
                              case u:
                                return (
                                  t.name == e.name && t.message == e.message
                                );
                              case g:
                              case y:
                                return t == e + "";
                              case c:
                                var p = A;
                              case m:
                                var h = 1 & i;
                                if ((p || (p = j), t.size != e.size && !h))
                                  return !1;
                                var f = s.get(t);
                                if (f) return f == e;
                                (i |= 2), s.set(t, e);
                                var v = Ct(p(t), p(e), i, o, r, s);
                                return s.delete(t), v;
                              case "[object Symbol]":
                                if (gt) return gt.call(t) == gt.call(e);
                            }
                            return !1;
                          })(t, e, w, n, i, o, p)
                    );
                  if (!(1 & n)) {
                    var I = _ && H.call(t, "__wrapped__"),
                      x = N && H.call(e, "__wrapped__");
                    if (I || x) {
                      var P = I ? t.value() : t,
                        E = x ? e.value() : e;
                      return p || (p = new St()), o(P, E, n, i, p);
                    }
                  }
                  return (
                    !!C &&
                    (p || (p = new St()),
                    (function (t, e, n, i, o, r) {
                      var s = 1 & n,
                        a = It(t),
                        l = a.length;
                      if (l != It(e).length && !s) return !1;
                      for (var u = l; u--; ) {
                        var p = a[u];
                        if (!(s ? p in e : H.call(e, p))) return !1;
                      }
                      var c = r.get(t);
                      if (c && r.get(e)) return c == e;
                      var d = !0;
                      r.set(t, e), r.set(e, t);
                      for (var h = s; ++u < l; ) {
                        var f = t[(p = a[u])],
                          g = e[p];
                        if (i)
                          var m = s ? i(g, f, p, e, t, r) : i(f, g, p, t, e, r);
                        if (!(void 0 === m ? f === g || o(f, g, n, i, r) : m)) {
                          d = !1;
                          break;
                        }
                        h || (h = "constructor" == p);
                      }
                      if (d && !h) {
                        var y = t.constructor,
                          v = e.constructor;
                        y == v ||
                          !("constructor" in t) ||
                          !("constructor" in e) ||
                          ("function" == typeof y &&
                            y instanceof y &&
                            "function" == typeof v &&
                            v instanceof v) ||
                          (d = !1);
                      }
                      return r.delete(t), r.delete(e), d;
                    })(t, e, n, i, o, p))
                  );
                })(t, e, n, i, Nt, o))
          );
        }
        function Ct(t, e, n, i, o, r) {
          var s = 1 & n,
            a = t.length,
            l = e.length;
          if (a != l && !(s && l > a)) return !1;
          var u = r.get(t);
          if (u && r.get(e)) return u == e;
          var p = -1,
            c = !0,
            d = 2 & n ? new bt() : void 0;
          for (r.set(t, e), r.set(e, t); ++p < a; ) {
            var h = t[p],
              f = e[p];
            if (i) var g = s ? i(f, h, p, e, t, r) : i(h, f, p, t, e, r);
            if (void 0 !== g) {
              if (g) continue;
              c = !1;
              break;
            }
            if (d) {
              if (
                !R(e, function (t, e) {
                  if (((s = e), !d.has(s) && (h === t || o(h, t, n, i, r))))
                    return d.push(e);
                  var s;
                })
              ) {
                c = !1;
                break;
              }
            } else if (h !== f && !o(h, f, n, i, r)) {
              c = !1;
              break;
            }
          }
          return r.delete(t), r.delete(e), c;
        }
        function It(t) {
          return (function (t, e, n) {
            var i = e(t);
            return jt(t)
              ? i
              : (function (t, e) {
                  for (var n = -1, i = e.length, o = t.length; ++n < i; )
                    t[o + n] = e[n];
                  return t;
                })(i, n(t));
          })(t, Wt, Et);
        }
        function xt(t, e) {
          var n,
            i,
            o = t.__data__;
          return (
            "string" == (i = typeof (n = e)) ||
            "number" == i ||
            "symbol" == i ||
            "boolean" == i
              ? "__proto__" !== n
              : null === n
          )
            ? o["string" == typeof e ? "string" : "hash"]
            : o.map;
        }
        function Pt(t, e) {
          var n = (function (t, e) {
            return null == t ? void 0 : t[e];
          })(t, e);
          return (function (t) {
            return (
              !(
                !Lt(t) ||
                (function (t) {
                  return !!q && q in t;
                })(t)
              ) && (Ft(t) ? Y : w).test(kt(t))
            );
          })(n)
            ? n
            : void 0;
        }
        (mt.prototype.clear = function () {
          (this.__data__ = lt ? lt(null) : {}), (this.size = 0);
        }),
          (mt.prototype.delete = function (t) {
            var e = this.has(t) && delete this.__data__[t];
            return (this.size -= e ? 1 : 0), e;
          }),
          (mt.prototype.get = function (t) {
            var e = this.__data__;
            if (lt) {
              var n = e[t];
              return n === i ? void 0 : n;
            }
            return H.call(e, t) ? e[t] : void 0;
          }),
          (mt.prototype.has = function (t) {
            var e = this.__data__;
            return lt ? void 0 !== e[t] : H.call(e, t);
          }),
          (mt.prototype.set = function (t, e) {
            var n = this.__data__;
            return (
              (this.size += this.has(t) ? 0 : 1),
              (n[t] = lt && void 0 === e ? i : e),
              this
            );
          }),
          (yt.prototype.clear = function () {
            (this.__data__ = []), (this.size = 0);
          }),
          (yt.prototype.delete = function (t) {
            var e = this.__data__,
              n = wt(e, t);
            return !(
              n < 0 ||
              (n == e.length - 1 ? e.pop() : K.call(e, n, 1), --this.size, 0)
            );
          }),
          (yt.prototype.get = function (t) {
            var e = this.__data__,
              n = wt(e, t);
            return n < 0 ? void 0 : e[n][1];
          }),
          (yt.prototype.has = function (t) {
            return wt(this.__data__, t) > -1;
          }),
          (yt.prototype.set = function (t, e) {
            var n = this.__data__,
              i = wt(n, t);
            return i < 0 ? (++this.size, n.push([t, e])) : (n[i][1] = e), this;
          }),
          (vt.prototype.clear = function () {
            (this.size = 0),
              (this.__data__ = {
                hash: new mt(),
                map: new (ot || yt)(),
                string: new mt(),
              });
          }),
          (vt.prototype.delete = function (t) {
            var e = xt(this, t).delete(t);
            return (this.size -= e ? 1 : 0), e;
          }),
          (vt.prototype.get = function (t) {
            return xt(this, t).get(t);
          }),
          (vt.prototype.has = function (t) {
            return xt(this, t).has(t);
          }),
          (vt.prototype.set = function (t, e) {
            var n = xt(this, t),
              i = n.size;
            return n.set(t, e), (this.size += n.size == i ? 0 : 1), this;
          }),
          (bt.prototype.add = bt.prototype.push =
            function (t) {
              return this.__data__.set(t, i), this;
            }),
          (bt.prototype.has = function (t) {
            return this.__data__.has(t);
          }),
          (St.prototype.clear = function () {
            (this.__data__ = new yt()), (this.size = 0);
          }),
          (St.prototype.delete = function (t) {
            var e = this.__data__,
              n = e.delete(t);
            return (this.size = e.size), n;
          }),
          (St.prototype.get = function (t) {
            return this.__data__.get(t);
          }),
          (St.prototype.has = function (t) {
            return this.__data__.has(t);
          }),
          (St.prototype.set = function (t, e) {
            var n = this.__data__;
            if (n instanceof yt) {
              var i = n.__data__;
              if (!ot || i.length < 199)
                return i.push([t, e]), (this.size = ++n.size), this;
              n = this.__data__ = new vt(i);
            }
            return n.set(t, e), (this.size = n.size), this;
          });
        var Et = tt
            ? function (t) {
                return null == t
                  ? []
                  : ((t = Object(t)),
                    (function (e, n) {
                      for (
                        var i = -1, o = null == e ? 0 : e.length, r = 0, s = [];
                        ++i < o;

                      ) {
                        var a = e[i];
                        (l = a), Q.call(t, l) && (s[r++] = a);
                      }
                      var l;
                      return s;
                    })(tt(t)));
              }
            : function () {
                return [];
              },
          Tt = Ot;
        function Dt(t, e) {
          return (
            !!(e = null == e ? o : e) &&
            ("number" == typeof t || O.test(t)) &&
            t > -1 &&
            t % 1 == 0 &&
            t < e
          );
        }
        function kt(t) {
          if (null != t) {
            try {
              return z.call(t);
            } catch (t) {}
            try {
              return t + "";
            } catch (t) {}
          }
          return "";
        }
        function Rt(t, e) {
          return t === e || (t != t && e != e);
        }
        ((it && Tt(new it(new ArrayBuffer(1))) != S) ||
          (ot && Tt(new ot()) != c) ||
          (rt && Tt(rt.resolve()) != f) ||
          (st && Tt(new st()) != m) ||
          (at && Tt(new at()) != v)) &&
          (Tt = function (t) {
            var e = Ot(t),
              n = e == h ? t.constructor : void 0,
              i = n ? kt(n) : "";
            if (i)
              switch (i) {
                case ut:
                  return S;
                case pt:
                  return c;
                case ct:
                  return f;
                case dt:
                  return m;
                case ht:
                  return v;
              }
            return e;
          });
        var At = _t(
            (function () {
              return arguments;
            })()
          )
            ? _t
            : function (t) {
                return Ut(t) && H.call(t, "callee") && !Q.call(t, "callee");
              },
          jt = Array.isArray,
          Mt =
            et ||
            function () {
              return !1;
            };
        function Ft(t) {
          if (!Lt(t)) return !1;
          var e = Ot(t);
          return (
            e == p ||
            "[object GeneratorFunction]" == e ||
            "[object AsyncFunction]" == e ||
            "[object Proxy]" == e
          );
        }
        function Vt(t) {
          return "number" == typeof t && t > -1 && t % 1 == 0 && t <= o;
        }
        function Lt(t) {
          var e = typeof t;
          return null != t && ("object" == e || "function" == e);
        }
        function Ut(t) {
          return null != t && "object" == typeof t;
        }
        var Bt = k
          ? (function (t) {
              return function (e) {
                return t(e);
              };
            })(k)
          : function (t) {
              return Ut(t) && Vt(t.length) && !!_[Ot(t)];
            };
        function Wt(t) {
          return null != (e = t) && Vt(e.length) && !Ft(e)
            ? (function (t, e) {
                var n = jt(t),
                  i = !n && At(t),
                  o = !n && !i && Mt(t),
                  r = !n && !i && !o && Bt(t),
                  s = n || i || o || r,
                  a = s
                    ? (function (t, e) {
                        for (var n = -1, i = Array(t); ++n < t; ) i[n] = e(n);
                        return i;
                      })(t.length, String)
                    : [],
                  l = a.length;
                for (var u in t)
                  (!e && !H.call(t, u)) ||
                    (s &&
                      ("length" == u ||
                        (o && ("offset" == u || "parent" == u)) ||
                        (r &&
                          ("buffer" == u ||
                            "byteLength" == u ||
                            "byteOffset" == u)) ||
                        Dt(u, l))) ||
                    a.push(u);
                return a;
              })(t)
            : (function (t) {
                if (
                  ((n = (e = t) && e.constructor),
                  e !== (("function" == typeof n && n.prototype) || B))
                )
                  return nt(t);
                var e,
                  n,
                  i = [];
                for (var o in Object(t))
                  H.call(t, o) && "constructor" != o && i.push(o);
                return i;
              })(t);
          var e;
        }
        t.exports = function (t, e) {
          return Nt(t, e);
        };
      },
      5294: function (t, e, n) {
        t.exports = (function (t, e) {
          "use strict";
          function n(t, e) {
            return t((e = { exports: {} }), e.exports), e.exports;
          }
          function i(t) {
            return function () {
              return t;
            };
          }
          (t = t && t.hasOwnProperty("default") ? t.default : t),
            (e = e && e.hasOwnProperty("default") ? e.default : e);
          var o = function () {};
          (o.thatReturns = i),
            (o.thatReturnsFalse = i(!1)),
            (o.thatReturnsTrue = i(!0)),
            (o.thatReturnsNull = i(null)),
            (o.thatReturnsThis = function () {
              return this;
            }),
            (o.thatReturnsArgument = function (t) {
              return t;
            });
          var r = o,
            s = function (t) {};
          s = function (t) {
            if (void 0 === t)
              throw new Error("invariant requires an error message argument");
          };
          var a = function (t, e, n, i, o, r, a, l) {
              if ((s(e), !t)) {
                var u;
                if (void 0 === e)
                  u = new Error(
                    "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
                  );
                else {
                  var p = [n, i, o, r, a, l],
                    c = 0;
                  (u = new Error(
                    e.replace(/%s/g, function () {
                      return p[c++];
                    })
                  )).name = "Invariant Violation";
                }
                throw ((u.framesToPop = 1), u);
              }
            },
            l = function (t) {
              for (
                var e = arguments.length, n = Array(e > 1 ? e - 1 : 0), i = 1;
                i < e;
                i++
              )
                n[i - 1] = arguments[i];
              var o = 0,
                r =
                  "Warning: " +
                  t.replace(/%s/g, function () {
                    return n[o++];
                  });
              "undefined" != typeof console && console.error(r);
              try {
                throw new Error(r);
              } catch (t) {}
            },
            u = function (t, e) {
              if (void 0 === e)
                throw new Error(
                  "`warning(condition, format, ...args)` requires a warning message argument"
                );
              if (0 !== e.indexOf("Failed Composite propType: ") && !t) {
                for (
                  var n = arguments.length, i = Array(n > 2 ? n - 2 : 0), o = 2;
                  o < n;
                  o++
                )
                  i[o - 2] = arguments[o];
                l.apply(void 0, [e].concat(i));
              }
            },
            p = Object.getOwnPropertySymbols,
            c = Object.prototype.hasOwnProperty,
            d = Object.prototype.propertyIsEnumerable;
          function h(t) {
            if (null == t)
              throw new TypeError(
                "Object.assign cannot be called with null or undefined"
              );
            return Object(t);
          }
          var f = (function () {
              try {
                if (!Object.assign) return !1;
                var t = new String("abc");
                if (((t[5] = "de"), "5" === Object.getOwnPropertyNames(t)[0]))
                  return !1;
                for (var e = {}, n = 0; n < 10; n++)
                  e["_" + String.fromCharCode(n)] = n;
                if (
                  "0123456789" !==
                  Object.getOwnPropertyNames(e)
                    .map(function (t) {
                      return e[t];
                    })
                    .join("")
                )
                  return !1;
                var i = {};
                return (
                  "abcdefghijklmnopqrst".split("").forEach(function (t) {
                    i[t] = t;
                  }),
                  "abcdefghijklmnopqrst" ===
                    Object.keys(Object.assign({}, i)).join("")
                );
              } catch (t) {
                return !1;
              }
            })()
              ? Object.assign
              : function (t, e) {
                  for (var n, i, o = h(t), r = 1; r < arguments.length; r++) {
                    for (var s in (n = Object(arguments[r])))
                      c.call(n, s) && (o[s] = n[s]);
                    if (p) {
                      i = p(n);
                      for (var a = 0; a < i.length; a++)
                        d.call(n, i[a]) && (o[i[a]] = n[i[a]]);
                    }
                  }
                  return o;
                },
            g = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED",
            m = a,
            y = u,
            v = {};
          var b = function (t, e, n, i, o) {
              for (var r in t)
                if (t.hasOwnProperty(r)) {
                  var s;
                  try {
                    m(
                      "function" == typeof t[r],
                      "%s: %s type `%s` is invalid; it must be a function, usually from the `prop-types` package, but received `%s`.",
                      i || "React class",
                      n,
                      r,
                      typeof t[r]
                    ),
                      (s = t[r](
                        e,
                        r,
                        i,
                        n,
                        null,
                        "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"
                      ));
                  } catch (t) {
                    s = t;
                  }
                  if (
                    (y(
                      !s || s instanceof Error,
                      "%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",
                      i || "React class",
                      n,
                      r,
                      typeof s
                    ),
                    s instanceof Error && !(s.message in v))
                  ) {
                    v[s.message] = !0;
                    var a = o ? o() : "";
                    y(
                      !1,
                      "Failed %s type: %s%s",
                      n,
                      s.message,
                      null != a ? a : ""
                    );
                  }
                }
            },
            S = function (t, e) {
              var n = "function" == typeof Symbol && Symbol.iterator;
              var i = "<<anonymous>>",
                o = {
                  array: p("array"),
                  bool: p("boolean"),
                  func: p("function"),
                  number: p("number"),
                  object: p("object"),
                  string: p("string"),
                  symbol: p("symbol"),
                  any: l(r.thatReturnsNull),
                  arrayOf: function (t) {
                    return l(function (e, n, i, o, r) {
                      if ("function" != typeof t)
                        return new s(
                          "Property `" +
                            r +
                            "` of component `" +
                            i +
                            "` has invalid PropType notation inside arrayOf."
                        );
                      var a = e[n];
                      if (!Array.isArray(a))
                        return new s(
                          "Invalid " +
                            o +
                            " `" +
                            r +
                            "` of type `" +
                            d(a) +
                            "` supplied to `" +
                            i +
                            "`, expected an array."
                        );
                      for (var l = 0; l < a.length; l++) {
                        var u = t(a, l, i, o, r + "[" + l + "]", g);
                        if (u instanceof Error) return u;
                      }
                      return null;
                    });
                  },
                  element: l(function (e, n, i, o, r) {
                    var a = e[n];
                    return t(a)
                      ? null
                      : new s(
                          "Invalid " +
                            o +
                            " `" +
                            r +
                            "` of type `" +
                            d(a) +
                            "` supplied to `" +
                            i +
                            "`, expected a single ReactElement."
                        );
                  }),
                  instanceOf: function (t) {
                    return l(function (e, n, o, r, a) {
                      if (!(e[n] instanceof t)) {
                        var l = t.name || i;
                        return new s(
                          "Invalid " +
                            r +
                            " `" +
                            a +
                            "` of type `" +
                            ((u = e[n]).constructor && u.constructor.name
                              ? u.constructor.name
                              : i) +
                            "` supplied to `" +
                            o +
                            "`, expected instance of `" +
                            l +
                            "`."
                        );
                      }
                      var u;
                      return null;
                    });
                  },
                  node: l(function (t, e, n, i, o) {
                    return c(t[e])
                      ? null
                      : new s(
                          "Invalid " +
                            i +
                            " `" +
                            o +
                            "` supplied to `" +
                            n +
                            "`, expected a ReactNode."
                        );
                  }),
                  objectOf: function (t) {
                    return l(function (e, n, i, o, r) {
                      if ("function" != typeof t)
                        return new s(
                          "Property `" +
                            r +
                            "` of component `" +
                            i +
                            "` has invalid PropType notation inside objectOf."
                        );
                      var a = e[n],
                        l = d(a);
                      if ("object" !== l)
                        return new s(
                          "Invalid " +
                            o +
                            " `" +
                            r +
                            "` of type `" +
                            l +
                            "` supplied to `" +
                            i +
                            "`, expected an object."
                        );
                      for (var u in a)
                        if (a.hasOwnProperty(u)) {
                          var p = t(a, u, i, o, r + "." + u, g);
                          if (p instanceof Error) return p;
                        }
                      return null;
                    });
                  },
                  oneOf: function (t) {
                    if (!Array.isArray(t))
                      return (
                        u(
                          !1,
                          "Invalid argument supplied to oneOf, expected an instance of array."
                        ),
                        r.thatReturnsNull
                      );
                    return l(function (e, n, i, o, r) {
                      for (var a = e[n], l = 0; l < t.length; l++)
                        if (
                          ((u = a),
                          (p = t[l]),
                          u === p
                            ? 0 !== u || 1 / u == 1 / p
                            : u != u && p != p)
                        )
                          return null;
                      var u, p;
                      return new s(
                        "Invalid " +
                          o +
                          " `" +
                          r +
                          "` of value `" +
                          a +
                          "` supplied to `" +
                          i +
                          "`, expected one of " +
                          JSON.stringify(t) +
                          "."
                      );
                    });
                  },
                  oneOfType: function (t) {
                    if (!Array.isArray(t))
                      return (
                        u(
                          !1,
                          "Invalid argument supplied to oneOfType, expected an instance of array."
                        ),
                        r.thatReturnsNull
                      );
                    for (var e = 0; e < t.length; e++) {
                      var n = t[e];
                      if ("function" != typeof n)
                        return (
                          u(
                            !1,
                            "Invalid argument supplied to oneOfType. Expected an array of check functions, but received %s at index %s.",
                            m(n),
                            e
                          ),
                          r.thatReturnsNull
                        );
                    }
                    return l(function (e, n, i, o, r) {
                      for (var a = 0; a < t.length; a++)
                        if (null == (0, t[a])(e, n, i, o, r, g)) return null;
                      return new s(
                        "Invalid " + o + " `" + r + "` supplied to `" + i + "`."
                      );
                    });
                  },
                  shape: function (t) {
                    return l(function (e, n, i, o, r) {
                      var a = e[n],
                        l = d(a);
                      if ("object" !== l)
                        return new s(
                          "Invalid " +
                            o +
                            " `" +
                            r +
                            "` of type `" +
                            l +
                            "` supplied to `" +
                            i +
                            "`, expected `object`."
                        );
                      for (var u in t) {
                        var p = t[u];
                        if (p) {
                          var c = p(a, u, i, o, r + "." + u, g);
                          if (c) return c;
                        }
                      }
                      return null;
                    });
                  },
                  exact: function (t) {
                    return l(function (e, n, i, o, r) {
                      var a = e[n],
                        l = d(a);
                      if ("object" !== l)
                        return new s(
                          "Invalid " +
                            o +
                            " `" +
                            r +
                            "` of type `" +
                            l +
                            "` supplied to `" +
                            i +
                            "`, expected `object`."
                        );
                      var u = f({}, e[n], t);
                      for (var p in u) {
                        var c = t[p];
                        if (!c)
                          return new s(
                            "Invalid " +
                              o +
                              " `" +
                              r +
                              "` key `" +
                              p +
                              "` supplied to `" +
                              i +
                              "`.\nBad object: " +
                              JSON.stringify(e[n], null, "  ") +
                              "\nValid keys: " +
                              JSON.stringify(Object.keys(t), null, "  ")
                          );
                        var h = c(a, p, i, o, r + "." + p, g);
                        if (h) return h;
                      }
                      return null;
                    });
                  },
                };
              function s(t) {
                (this.message = t), (this.stack = "");
              }
              function l(t) {
                var n = {},
                  o = 0;
                function r(r, l, p, c, d, h, f) {
                  if (((c = c || i), (h = h || p), f !== g))
                    if (e)
                      a(
                        !1,
                        "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                      );
                    else if ("undefined" != typeof console) {
                      var m = c + ":" + p;
                      !n[m] &&
                        o < 3 &&
                        (u(
                          !1,
                          "You are manually calling a React.PropTypes validation function for the `%s` prop on `%s`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.",
                          h,
                          c
                        ),
                        (n[m] = !0),
                        o++);
                    }
                  return null == l[p]
                    ? r
                      ? null === l[p]
                        ? new s(
                            "The " +
                              d +
                              " `" +
                              h +
                              "` is marked as required in `" +
                              c +
                              "`, but its value is `null`."
                          )
                        : new s(
                            "The " +
                              d +
                              " `" +
                              h +
                              "` is marked as required in `" +
                              c +
                              "`, but its value is `undefined`."
                          )
                      : null
                    : t(l, p, c, d, h);
                }
                var l = r.bind(null, !1);
                return (l.isRequired = r.bind(null, !0)), l;
              }
              function p(t) {
                return l(function (e, n, i, o, r, a) {
                  var l = e[n];
                  return d(l) !== t
                    ? new s(
                        "Invalid " +
                          o +
                          " `" +
                          r +
                          "` of type `" +
                          h(l) +
                          "` supplied to `" +
                          i +
                          "`, expected `" +
                          t +
                          "`."
                      )
                    : null;
                });
              }
              function c(e) {
                switch (typeof e) {
                  case "number":
                  case "string":
                  case "undefined":
                    return !0;
                  case "boolean":
                    return !e;
                  case "object":
                    if (Array.isArray(e)) return e.every(c);
                    if (null === e || t(e)) return !0;
                    var i = (function (t) {
                      var e = t && ((n && t[n]) || t["@@iterator"]);
                      if ("function" == typeof e) return e;
                    })(e);
                    if (!i) return !1;
                    var o,
                      r = i.call(e);
                    if (i !== e.entries) {
                      for (; !(o = r.next()).done; ) if (!c(o.value)) return !1;
                    } else
                      for (; !(o = r.next()).done; ) {
                        var s = o.value;
                        if (s && !c(s[1])) return !1;
                      }
                    return !0;
                  default:
                    return !1;
                }
              }
              function d(t) {
                var e = typeof t;
                return Array.isArray(t)
                  ? "array"
                  : t instanceof RegExp
                  ? "object"
                  : (function (t, e) {
                      return (
                        "symbol" === t ||
                        "Symbol" === e["@@toStringTag"] ||
                        ("function" == typeof Symbol && e instanceof Symbol)
                      );
                    })(e, t)
                  ? "symbol"
                  : e;
              }
              function h(t) {
                if (null == t) return "" + t;
                var e = d(t);
                if ("object" === e) {
                  if (t instanceof Date) return "date";
                  if (t instanceof RegExp) return "regexp";
                }
                return e;
              }
              function m(t) {
                var e = h(t);
                switch (e) {
                  case "array":
                  case "object":
                    return "an " + e;
                  case "boolean":
                  case "date":
                  case "regexp":
                    return "a " + e;
                  default:
                    return e;
                }
              }
              return (
                (s.prototype = Error.prototype),
                (o.checkPropTypes = b),
                (o.PropTypes = o),
                o
              );
            },
            w = n(function (t) {
              var e =
                ("function" == typeof Symbol &&
                  Symbol.for &&
                  Symbol.for("react.element")) ||
                60103;
              t.exports = S(function (t) {
                return "object" == typeof t && null !== t && t.$$typeof === e;
              }, !0);
            }),
            O = n(function (t) {
              !(function () {
                var e = {}.hasOwnProperty;
                function n() {
                  for (var t = [], i = 0; i < arguments.length; i++) {
                    var o = arguments[i];
                    if (o) {
                      var r = typeof o;
                      if ("string" === r || "number" === r) t.push(o);
                      else if (Array.isArray(o)) t.push(n.apply(null, o));
                      else if ("object" === r)
                        for (var s in o) e.call(o, s) && o[s] && t.push(s);
                    }
                  }
                  return t.join(" ");
                }
                t.exports ? (t.exports = n) : (window.classNames = n);
              })();
            });
          function _(t, e) {
            for (var n = 0, i = t.length; n < i; n++)
              if (e.apply(e, [t[n], n, t])) return t[n];
          }
          function N(t) {
            return (
              "function" == typeof t ||
              "[object Function]" === Object.prototype.toString.call(t)
            );
          }
          function C(t) {
            return "number" == typeof t && !isNaN(t);
          }
          function I(t) {
            return parseInt(t, 10);
          }
          function x(t, e, n) {
            if (t[e])
              return new Error(
                "Invalid prop " +
                  e +
                  " passed to " +
                  n +
                  " - do not set this, set it on the child."
              );
          }
          var P = ["Moz", "Webkit", "O", "ms"];
          function E(t, e) {
            return e
              ? "" +
                  e +
                  (function (t) {
                    for (var e = "", n = !0, i = 0; i < t.length; i++)
                      n
                        ? ((e += t[i].toUpperCase()), (n = !1))
                        : "-" === t[i]
                        ? (n = !0)
                        : (e += t[i]);
                    return e;
                  })(t)
              : t;
          }
          var T = (function () {
              var t =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : "transform";
              if ("undefined" == typeof window || void 0 === window.document)
                return "";
              var e = window.document.documentElement.style;
              if (t in e) return "";
              for (var n = 0; n < P.length; n++)
                if (E(t, P[n]) in e) return P[n];
              return "";
            })(),
            D = function (t, e) {
              if (!(t instanceof e))
                throw new TypeError("Cannot call a class as a function");
            },
            k = (function () {
              function t(t, e) {
                for (var n = 0; n < e.length; n++) {
                  var i = e[n];
                  (i.enumerable = i.enumerable || !1),
                    (i.configurable = !0),
                    "value" in i && (i.writable = !0),
                    Object.defineProperty(t, i.key, i);
                }
              }
              return function (e, n, i) {
                return n && t(e.prototype, n), i && t(e, i), e;
              };
            })(),
            R = function (t, e, n) {
              return (
                e in t
                  ? Object.defineProperty(t, e, {
                      value: n,
                      enumerable: !0,
                      configurable: !0,
                      writable: !0,
                    })
                  : (t[e] = n),
                t
              );
            },
            A =
              Object.assign ||
              function (t) {
                for (var e = 1; e < arguments.length; e++) {
                  var n = arguments[e];
                  for (var i in n)
                    Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
                }
                return t;
              },
            j = function (t, e) {
              if ("function" != typeof e && null !== e)
                throw new TypeError(
                  "Super expression must either be null or a function, not " +
                    typeof e
                );
              (t.prototype = Object.create(e && e.prototype, {
                constructor: {
                  value: t,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0,
                },
              })),
                e &&
                  (Object.setPrototypeOf
                    ? Object.setPrototypeOf(t, e)
                    : (t.__proto__ = e));
            },
            M = function (t, e) {
              if (!t)
                throw new ReferenceError(
                  "this hasn't been initialised - super() hasn't been called"
                );
              return !e || ("object" != typeof e && "function" != typeof e)
                ? t
                : e;
            },
            F = function (t, e) {
              if (Array.isArray(t)) return t;
              if (Symbol.iterator in Object(t))
                return (function (t, e) {
                  var n = [],
                    i = !0,
                    o = !1,
                    r = void 0;
                  try {
                    for (
                      var s, a = t[Symbol.iterator]();
                      !(i = (s = a.next()).done) &&
                      (n.push(s.value), !e || n.length !== e);
                      i = !0
                    );
                  } catch (t) {
                    (o = !0), (r = t);
                  } finally {
                    try {
                      !i && a.return && a.return();
                    } finally {
                      if (o) throw r;
                    }
                  }
                  return n;
                })(t, e);
              throw new TypeError(
                "Invalid attempt to destructure non-iterable instance"
              );
            },
            V = "";
          function L(t, e) {
            return (
              V ||
                (V = _(
                  [
                    "matches",
                    "webkitMatchesSelector",
                    "mozMatchesSelector",
                    "msMatchesSelector",
                    "oMatchesSelector",
                  ],
                  function (e) {
                    return N(t[e]);
                  }
                )),
              !!N(t[V]) && t[V](e)
            );
          }
          function U(t, e, n) {
            var i = t;
            do {
              if (L(i, e)) return !0;
              if (i === n) return !1;
              i = i.parentNode;
            } while (i);
            return !1;
          }
          function B(t, e, n) {
            t &&
              (t.attachEvent
                ? t.attachEvent("on" + e, n)
                : t.addEventListener
                ? t.addEventListener(e, n, !0)
                : (t["on" + e] = n));
          }
          function W(t, e, n) {
            t &&
              (t.detachEvent
                ? t.detachEvent("on" + e, n)
                : t.removeEventListener
                ? t.removeEventListener(e, n, !0)
                : (t["on" + e] = null));
          }
          function z(t) {
            var e = t.clientHeight,
              n = t.ownerDocument.defaultView.getComputedStyle(t);
            return (e += I(n.borderTopWidth)) + I(n.borderBottomWidth);
          }
          function H(t) {
            var e = t.clientWidth,
              n = t.ownerDocument.defaultView.getComputedStyle(t);
            return (e += I(n.borderLeftWidth)) + I(n.borderRightWidth);
          }
          function q(t) {
            var e = t.clientHeight,
              n = t.ownerDocument.defaultView.getComputedStyle(t);
            return (e -= I(n.paddingTop)) - I(n.paddingBottom);
          }
          function $(t) {
            var e = t.clientWidth,
              n = t.ownerDocument.defaultView.getComputedStyle(t);
            return (e -= I(n.paddingLeft)) - I(n.paddingRight);
          }
          function Y(t, e, n) {
            var i = "translate(" + t.x + n + "," + t.y + n + ")";
            return (
              e &&
                (i =
                  "translate(" +
                  ("string" == typeof e.x ? e.x : e.x + n) +
                  ", " +
                  ("string" == typeof e.y ? e.y : e.y + n) +
                  ")" +
                  i),
              i
            );
          }
          function X(t) {
            return t.targetTouches && t.targetTouches[0]
              ? t.targetTouches[0].identifier
              : t.changedTouches && t.changedTouches[0]
              ? t.changedTouches[0].identifier
              : void 0;
          }
          function G(t) {
            if (t) {
              var e = t.getElementById("react-draggable-style-el");
              e ||
                (((e = t.createElement("style")).type = "text/css"),
                (e.id = "react-draggable-style-el"),
                (e.innerHTML =
                  ".react-draggable-transparent-selection *::-moz-selection {background: transparent;}\n"),
                (e.innerHTML +=
                  ".react-draggable-transparent-selection *::selection {background: transparent;}\n"),
                t.getElementsByTagName("head")[0].appendChild(e)),
                t.body &&
                  ((n = t.body),
                  (i = "react-draggable-transparent-selection"),
                  n.classList
                    ? n.classList.add(i)
                    : n.className.match(
                        new RegExp("(?:^|\\s)" + i + "(?!\\S)")
                      ) || (n.className += " " + i));
            }
            var n, i;
          }
          function J(t) {
            try {
              t &&
                t.body &&
                ((e = t.body),
                (n = "react-draggable-transparent-selection"),
                e.classList
                  ? e.classList.remove(n)
                  : (e.className = e.className.replace(
                      new RegExp("(?:^|\\s)" + n + "(?!\\S)", "g"),
                      ""
                    ))),
                t.selection
                  ? t.selection.empty()
                  : window.getSelection().removeAllRanges();
            } catch (t) {}
            var e, n;
          }
          function Q() {
            return A(
              { touchAction: "none" },
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : {}
            );
          }
          function K(t, e, n) {
            return [Math.round(e / t[0]) * t[0], Math.round(n / t[1]) * t[1]];
          }
          function Z(t) {
            return "both" === t.props.axis || "x" === t.props.axis;
          }
          function tt(t) {
            return "both" === t.props.axis || "y" === t.props.axis;
          }
          function et(t, e, n) {
            var i =
              "number" == typeof e
                ? (function (t, e) {
                    return (
                      (t.targetTouches &&
                        _(t.targetTouches, function (t) {
                          return e === t.identifier;
                        })) ||
                      (t.changedTouches &&
                        _(t.changedTouches, function (t) {
                          return e === t.identifier;
                        }))
                    );
                  })(t, e)
                : null;
            if ("number" == typeof e && !i) return null;
            var o,
              r,
              s,
              a = ot(n);
            return (
              (o = i || t),
              (r =
                n.props.offsetParent || a.offsetParent || a.ownerDocument.body),
              (s =
                r === r.ownerDocument.body
                  ? { left: 0, top: 0 }
                  : r.getBoundingClientRect()),
              {
                x: o.clientX + r.scrollLeft - s.left,
                y: o.clientY + r.scrollTop - s.top,
              }
            );
          }
          function nt(t, e, n) {
            var i = t.state,
              o = !C(i.lastX),
              r = ot(t);
            return o
              ? {
                  node: r,
                  deltaX: 0,
                  deltaY: 0,
                  lastX: e,
                  lastY: n,
                  x: e,
                  y: n,
                }
              : {
                  node: r,
                  deltaX: e - i.lastX,
                  deltaY: n - i.lastY,
                  lastX: i.lastX,
                  lastY: i.lastY,
                  x: e,
                  y: n,
                };
          }
          function it(t, e) {
            var n = t.props.scale;
            return {
              node: e.node,
              x: t.state.x + e.deltaX / n,
              y: t.state.y + e.deltaY / n,
              deltaX: e.deltaX / n,
              deltaY: e.deltaY / n,
              lastX: t.state.x,
              lastY: t.state.y,
            };
          }
          function ot(e) {
            var n = t.findDOMNode(e);
            if (!n) throw new Error("<DraggableCore>: Unmounted during event!");
            return n;
          }
          var rt = { start: "touchstart", move: "touchmove", stop: "touchend" },
            st = { start: "mousedown", move: "mousemove", stop: "mouseup" },
            at = st,
            lt = (function (n) {
              function i() {
                var e, n, o;
                D(this, i);
                for (var r = arguments.length, s = Array(r), a = 0; a < r; a++)
                  s[a] = arguments[a];
                return (
                  (n = o =
                    M(
                      this,
                      (e = i.__proto__ || Object.getPrototypeOf(i)).call.apply(
                        e,
                        [this].concat(s)
                      )
                    )),
                  (o.state = {
                    dragging: !1,
                    lastX: NaN,
                    lastY: NaN,
                    touchIdentifier: null,
                  }),
                  (o.handleDragStart = function (e) {
                    if (
                      (o.props.onMouseDown(e),
                      !o.props.allowAnyClick &&
                        "number" == typeof e.button &&
                        0 !== e.button)
                    )
                      return !1;
                    var n = t.findDOMNode(o);
                    if (!n || !n.ownerDocument || !n.ownerDocument.body)
                      throw new Error(
                        "<DraggableCore> not mounted on DragStart!"
                      );
                    var i = n.ownerDocument;
                    if (
                      !(
                        o.props.disabled ||
                        !(e.target instanceof i.defaultView.Node) ||
                        (o.props.handle && !U(e.target, o.props.handle, n)) ||
                        (o.props.cancel && U(e.target, o.props.cancel, n))
                      )
                    ) {
                      var r = X(e);
                      o.setState({ touchIdentifier: r });
                      var s = et(e, r, o);
                      if (null != s) {
                        var a = s.x,
                          l = s.y,
                          u = nt(o, a, l);
                        o.props.onStart,
                          !1 !== o.props.onStart(e, u) &&
                            (o.props.enableUserSelectHack && G(i),
                            o.setState({ dragging: !0, lastX: a, lastY: l }),
                            B(i, at.move, o.handleDrag),
                            B(i, at.stop, o.handleDragStop));
                      }
                    }
                  }),
                  (o.handleDrag = function (t) {
                    "touchmove" === t.type && t.preventDefault();
                    var e = et(t, o.state.touchIdentifier, o);
                    if (null != e) {
                      var n = e.x,
                        i = e.y;
                      if (Array.isArray(o.props.grid)) {
                        var r = n - o.state.lastX,
                          s = i - o.state.lastY,
                          a = K(o.props.grid, r, s),
                          l = F(a, 2);
                        if (((r = l[0]), (s = l[1]), !r && !s)) return;
                        (n = o.state.lastX + r), (i = o.state.lastY + s);
                      }
                      var u = nt(o, n, i);
                      if (!1 !== o.props.onDrag(t, u))
                        o.setState({ lastX: n, lastY: i });
                      else
                        try {
                          o.handleDragStop(new MouseEvent("mouseup"));
                        } catch (t) {
                          var p = document.createEvent("MouseEvents");
                          p.initMouseEvent(
                            "mouseup",
                            !0,
                            !0,
                            window,
                            0,
                            0,
                            0,
                            0,
                            0,
                            !1,
                            !1,
                            !1,
                            !1,
                            0,
                            null
                          ),
                            o.handleDragStop(p);
                        }
                    }
                  }),
                  (o.handleDragStop = function (e) {
                    if (o.state.dragging) {
                      var n = et(e, o.state.touchIdentifier, o);
                      if (null != n) {
                        var i = n.x,
                          r = n.y,
                          s = nt(o, i, r),
                          a = t.findDOMNode(o);
                        a && o.props.enableUserSelectHack && J(a.ownerDocument),
                          o.setState({ dragging: !1, lastX: NaN, lastY: NaN }),
                          o.props.onStop(e, s),
                          a &&
                            (W(a.ownerDocument, at.move, o.handleDrag),
                            W(a.ownerDocument, at.stop, o.handleDragStop));
                      }
                    }
                  }),
                  (o.onMouseDown = function (t) {
                    return (at = st), o.handleDragStart(t);
                  }),
                  (o.onMouseUp = function (t) {
                    return (at = st), o.handleDragStop(t);
                  }),
                  (o.onTouchStart = function (t) {
                    return (at = rt), o.handleDragStart(t);
                  }),
                  (o.onTouchEnd = function (t) {
                    return (at = rt), o.handleDragStop(t);
                  }),
                  M(o, n)
                );
              }
              return (
                j(i, n),
                k(i, [
                  {
                    key: "componentWillUnmount",
                    value: function () {
                      var e = t.findDOMNode(this);
                      if (e) {
                        var n = e.ownerDocument;
                        W(n, st.move, this.handleDrag),
                          W(n, rt.move, this.handleDrag),
                          W(n, st.stop, this.handleDragStop),
                          W(n, rt.stop, this.handleDragStop),
                          this.props.enableUserSelectHack && J(n);
                      }
                    },
                  },
                  {
                    key: "render",
                    value: function () {
                      return e.cloneElement(
                        e.Children.only(this.props.children),
                        {
                          style: Q(this.props.children.props.style),
                          onMouseDown: this.onMouseDown,
                          onTouchStart: this.onTouchStart,
                          onMouseUp: this.onMouseUp,
                          onTouchEnd: this.onTouchEnd,
                        }
                      );
                    },
                  },
                ]),
                i
              );
            })(e.Component);
          (lt.displayName = "DraggableCore"),
            (lt.propTypes = {
              allowAnyClick: w.bool,
              disabled: w.bool,
              enableUserSelectHack: w.bool,
              offsetParent: function (t, e) {
                if (t[e] && 1 !== t[e].nodeType)
                  throw new Error(
                    "Draggable's offsetParent must be a DOM Node."
                  );
              },
              grid: w.arrayOf(w.number),
              scale: w.number,
              handle: w.string,
              cancel: w.string,
              onStart: w.func,
              onDrag: w.func,
              onStop: w.func,
              onMouseDown: w.func,
              className: x,
              style: x,
              transform: x,
            }),
            (lt.defaultProps = {
              allowAnyClick: !1,
              cancel: null,
              disabled: !1,
              enableUserSelectHack: !0,
              offsetParent: null,
              handle: null,
              grid: null,
              transform: null,
              onStart: function () {},
              onDrag: function () {},
              onStop: function () {},
              onMouseDown: function () {},
            });
          var ut = (function (n) {
            function i(t) {
              D(this, i);
              var e = M(
                this,
                (i.__proto__ || Object.getPrototypeOf(i)).call(this, t)
              );
              return (
                (e.onDragStart = function (t, n) {
                  if (!1 === e.props.onStart(t, it(e, n))) return !1;
                  e.setState({ dragging: !0, dragged: !0 });
                }),
                (e.onDrag = function (t, n) {
                  if (!e.state.dragging) return !1;
                  var i = it(e, n),
                    o = { x: i.x, y: i.y };
                  if (e.props.bounds) {
                    var r = o.x,
                      s = o.y;
                    (o.x += e.state.slackX), (o.y += e.state.slackY);
                    var a = (function (t, e, n) {
                        if (!t.props.bounds) return [e, n];
                        var i = t.props.bounds;
                        i =
                          "string" == typeof i
                            ? i
                            : (function (t) {
                                return {
                                  left: t.left,
                                  top: t.top,
                                  right: t.right,
                                  bottom: t.bottom,
                                };
                              })(i);
                        var o = ot(t);
                        if ("string" == typeof i) {
                          var r,
                            s = o.ownerDocument,
                            a = s.defaultView;
                          if (
                            !(
                              (r =
                                "parent" === i
                                  ? o.parentNode
                                  : s.querySelector(i)) instanceof a.HTMLElement
                            )
                          )
                            throw new Error(
                              'Bounds selector "' +
                                i +
                                '" could not find an element.'
                            );
                          var l = a.getComputedStyle(o),
                            u = a.getComputedStyle(r);
                          i = {
                            left:
                              -o.offsetLeft +
                              I(u.paddingLeft) +
                              I(l.marginLeft),
                            top:
                              -o.offsetTop + I(u.paddingTop) + I(l.marginTop),
                            right:
                              $(r) -
                              H(o) -
                              o.offsetLeft +
                              I(u.paddingRight) -
                              I(l.marginRight),
                            bottom:
                              q(r) -
                              z(o) -
                              o.offsetTop +
                              I(u.paddingBottom) -
                              I(l.marginBottom),
                          };
                        }
                        return (
                          C(i.right) && (e = Math.min(e, i.right)),
                          C(i.bottom) && (n = Math.min(n, i.bottom)),
                          C(i.left) && (e = Math.max(e, i.left)),
                          C(i.top) && (n = Math.max(n, i.top)),
                          [e, n]
                        );
                      })(e, o.x, o.y),
                      l = F(a, 2),
                      u = l[0],
                      p = l[1];
                    (o.x = u),
                      (o.y = p),
                      (o.slackX = e.state.slackX + (r - o.x)),
                      (o.slackY = e.state.slackY + (s - o.y)),
                      (i.x = o.x),
                      (i.y = o.y),
                      (i.deltaX = o.x - e.state.x),
                      (i.deltaY = o.y - e.state.y);
                  }
                  if (!1 === e.props.onDrag(t, i)) return !1;
                  e.setState(o);
                }),
                (e.onDragStop = function (t, n) {
                  if (!e.state.dragging) return !1;
                  if (!1 === e.props.onStop(t, it(e, n))) return !1;
                  var i = { dragging: !1, slackX: 0, slackY: 0 };
                  if (Boolean(e.props.position)) {
                    var o = e.props.position,
                      r = o.x,
                      s = o.y;
                    (i.x = r), (i.y = s);
                  }
                  e.setState(i);
                }),
                (e.state = {
                  dragging: !1,
                  dragged: !1,
                  x: t.position ? t.position.x : t.defaultPosition.x,
                  y: t.position ? t.position.y : t.defaultPosition.y,
                  slackX: 0,
                  slackY: 0,
                  isElementSVG: !1,
                }),
                e
              );
            }
            return (
              j(i, n),
              k(i, [
                {
                  key: "componentWillMount",
                  value: function () {
                    !this.props.position ||
                      this.props.onDrag ||
                      this.props.onStop ||
                      console.warn(
                        "A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element."
                      );
                  },
                },
                {
                  key: "componentDidMount",
                  value: function () {
                    void 0 !== window.SVGElement &&
                      t.findDOMNode(this) instanceof window.SVGElement &&
                      this.setState({ isElementSVG: !0 });
                  },
                },
                {
                  key: "componentWillReceiveProps",
                  value: function (t) {
                    !t.position ||
                      (this.props.position &&
                        t.position.x === this.props.position.x &&
                        t.position.y === this.props.position.y) ||
                      this.setState({ x: t.position.x, y: t.position.y });
                  },
                },
                {
                  key: "componentWillUnmount",
                  value: function () {
                    this.setState({ dragging: !1 });
                  },
                },
                {
                  key: "render",
                  value: function () {
                    var t,
                      n,
                      i,
                      o = {},
                      r = null,
                      s = !Boolean(this.props.position) || this.state.dragging,
                      a = this.props.position || this.props.defaultPosition,
                      l = {
                        x: Z(this) && s ? this.state.x : a.x,
                        y: tt(this) && s ? this.state.y : a.y,
                      };
                    this.state.isElementSVG
                      ? ((n = l),
                        (i = this.props.positionOffset),
                        (r = Y(n, i, "")))
                      : (o = (function (t, e) {
                          var n = Y(t, e, "px");
                          return R({}, E("transform", T), n);
                        })(l, this.props.positionOffset));
                    var u = this.props,
                      p = u.defaultClassName,
                      c = u.defaultClassNameDragging,
                      d = u.defaultClassNameDragged,
                      h = e.Children.only(this.props.children),
                      f = O(
                        h.props.className || "",
                        p,
                        (R((t = {}), c, this.state.dragging),
                        R(t, d, this.state.dragged),
                        t)
                      );
                    return e.createElement(
                      lt,
                      A({}, this.props, {
                        onStart: this.onDragStart,
                        onDrag: this.onDrag,
                        onStop: this.onDragStop,
                      }),
                      e.cloneElement(h, {
                        className: f,
                        style: A({}, h.props.style, o),
                        transform: r,
                      })
                    );
                  },
                },
              ]),
              i
            );
          })(e.Component);
          return (
            (ut.displayName = "Draggable"),
            (ut.propTypes = A({}, lt.propTypes, {
              axis: w.oneOf(["both", "x", "y", "none"]),
              bounds: w.oneOfType([
                w.shape({
                  left: w.number,
                  right: w.number,
                  top: w.number,
                  bottom: w.number,
                }),
                w.string,
                w.oneOf([!1]),
              ]),
              defaultClassName: w.string,
              defaultClassNameDragging: w.string,
              defaultClassNameDragged: w.string,
              defaultPosition: w.shape({ x: w.number, y: w.number }),
              positionOffset: w.shape({
                x: w.oneOfType([w.number, w.string]),
                y: w.oneOfType([w.number, w.string]),
              }),
              position: w.shape({ x: w.number, y: w.number }),
              className: x,
              style: x,
              transform: x,
            })),
            (ut.defaultProps = A({}, lt.defaultProps, {
              axis: "both",
              bounds: !1,
              defaultClassName: "react-draggable",
              defaultClassNameDragging: "react-draggable-dragging",
              defaultClassNameDragged: "react-draggable-dragged",
              defaultPosition: { x: 0, y: 0 },
              position: null,
              scale: 1,
            })),
            (ut.default = ut),
            (ut.DraggableCore = lt),
            ut
          );
        })(n(7196), n(3804));
      },
      9509: (t, e, n) => {
        var i = n(8764),
          o = i.Buffer;
        function r(t, e) {
          for (var n in t) e[n] = t[n];
        }
        function s(t, e, n) {
          return o(t, e, n);
        }
        o.from && o.alloc && o.allocUnsafe && o.allocUnsafeSlow
          ? (t.exports = i)
          : (r(i, e), (e.Buffer = s)),
          r(o, s),
          (s.from = function (t, e, n) {
            if ("number" == typeof t)
              throw new TypeError("Argument must not be a number");
            return o(t, e, n);
          }),
          (s.alloc = function (t, e, n) {
            if ("number" != typeof t)
              throw new TypeError("Argument must be a number");
            var i = o(t);
            return (
              void 0 !== e
                ? "string" == typeof n
                  ? i.fill(e, n)
                  : i.fill(e)
                : i.fill(0),
              i
            );
          }),
          (s.allocUnsafe = function (t) {
            if ("number" != typeof t)
              throw new TypeError("Argument must be a number");
            return o(t);
          }),
          (s.allocUnsafeSlow = function (t) {
            if ("number" != typeof t)
              throw new TypeError("Argument must be a number");
            return i.SlowBuffer(t);
          });
      },
      6099: (t, e, n) => {
        !(function (t) {
          (t.parser = function (t, e) {
            return new o(t, e);
          }),
            (t.SAXParser = o),
            (t.SAXStream = s),
            (t.createStream = function (t, e) {
              return new s(t, e);
            }),
            (t.MAX_BUFFER_LENGTH = 65536);
          var e,
            i = [
              "comment",
              "sgmlDecl",
              "textNode",
              "tagName",
              "doctype",
              "procInstName",
              "procInstBody",
              "entity",
              "attribName",
              "attribValue",
              "cdata",
              "script",
            ];
          function o(e, n) {
            if (!(this instanceof o)) return new o(e, n);
            var r = this;
            !(function (t) {
              for (var e = 0, n = i.length; e < n; e++) t[i[e]] = "";
            })(r),
              (r.q = r.c = ""),
              (r.bufferCheckPosition = t.MAX_BUFFER_LENGTH),
              (r.opt = n || {}),
              (r.opt.lowercase = r.opt.lowercase || r.opt.lowercasetags),
              (r.looseCase = r.opt.lowercase ? "toLowerCase" : "toUpperCase"),
              (r.tags = []),
              (r.closed = r.closedRoot = r.sawRoot = !1),
              (r.tag = r.error = null),
              (r.strict = !!e),
              (r.noscript = !(!e && !r.opt.noscript)),
              (r.state = O.BEGIN),
              (r.strictEntities = r.opt.strictEntities),
              (r.ENTITIES = r.strictEntities
                ? Object.create(t.XML_ENTITIES)
                : Object.create(t.ENTITIES)),
              (r.attribList = []),
              r.opt.xmlns && (r.ns = Object.create(u)),
              (r.trackPosition = !1 !== r.opt.position),
              r.trackPosition && (r.position = r.line = r.column = 0),
              N(r, "onready");
          }
          (t.EVENTS = [
            "text",
            "processinginstruction",
            "sgmldeclaration",
            "doctype",
            "comment",
            "opentagstart",
            "attribute",
            "opentag",
            "closetag",
            "opencdata",
            "cdata",
            "closecdata",
            "error",
            "end",
            "ready",
            "script",
            "opennamespace",
            "closenamespace",
          ]),
            Object.create ||
              (Object.create = function (t) {
                function e() {}
                return (e.prototype = t), new e();
              }),
            Object.keys ||
              (Object.keys = function (t) {
                var e = [];
                for (var n in t) t.hasOwnProperty(n) && e.push(n);
                return e;
              }),
            (o.prototype = {
              end: function () {
                E(this);
              },
              write: function (e) {
                var n = this;
                if (this.error) throw this.error;
                if (n.closed)
                  return P(
                    n,
                    "Cannot write after close. Assign an onready handler."
                  );
                if (null === e) return E(n);
                "object" == typeof e && (e = e.toString());
                for (var o = 0, r = ""; (r = V(e, o++)), (n.c = r), r; )
                  switch (
                    (n.trackPosition &&
                      (n.position++,
                      "\n" === r ? (n.line++, (n.column = 0)) : n.column++),
                    n.state)
                  ) {
                    case O.BEGIN:
                      if (((n.state = O.BEGIN_WHITESPACE), "\ufeff" === r))
                        continue;
                      F(n, r);
                      continue;
                    case O.BEGIN_WHITESPACE:
                      F(n, r);
                      continue;
                    case O.TEXT:
                      if (n.sawRoot && !n.closedRoot) {
                        for (var s = o - 1; r && "<" !== r && "&" !== r; )
                          (r = V(e, o++)) &&
                            n.trackPosition &&
                            (n.position++,
                            "\n" === r
                              ? (n.line++, (n.column = 0))
                              : n.column++);
                        n.textNode += e.substring(s, o - 1);
                      }
                      "<" !== r || (n.sawRoot && n.closedRoot && !n.strict)
                        ? (f(r) ||
                            (n.sawRoot && !n.closedRoot) ||
                            T(n, "Text data outside of root node."),
                          "&" === r
                            ? (n.state = O.TEXT_ENTITY)
                            : (n.textNode += r))
                        : ((n.state = O.OPEN_WAKA),
                          (n.startTagPosition = n.position));
                      continue;
                    case O.SCRIPT:
                      "<" === r ? (n.state = O.SCRIPT_ENDING) : (n.script += r);
                      continue;
                    case O.SCRIPT_ENDING:
                      "/" === r
                        ? (n.state = O.CLOSE_TAG)
                        : ((n.script += "<" + r), (n.state = O.SCRIPT));
                      continue;
                    case O.OPEN_WAKA:
                      if ("!" === r) (n.state = O.SGML_DECL), (n.sgmlDecl = "");
                      else if (f(r));
                      else if (y(p, r)) (n.state = O.OPEN_TAG), (n.tagName = r);
                      else if ("/" === r)
                        (n.state = O.CLOSE_TAG), (n.tagName = "");
                      else if ("?" === r)
                        (n.state = O.PROC_INST),
                          (n.procInstName = n.procInstBody = "");
                      else {
                        if (
                          (T(n, "Unencoded <"),
                          n.startTagPosition + 1 < n.position)
                        ) {
                          var a = n.position - n.startTagPosition;
                          r = new Array(a).join(" ") + r;
                        }
                        (n.textNode += "<" + r), (n.state = O.TEXT);
                      }
                      continue;
                    case O.SGML_DECL:
                      "[CDATA[" === (n.sgmlDecl + r).toUpperCase()
                        ? (C(n, "onopencdata"),
                          (n.state = O.CDATA),
                          (n.sgmlDecl = ""),
                          (n.cdata = ""))
                        : n.sgmlDecl + r === "--"
                        ? ((n.state = O.COMMENT),
                          (n.comment = ""),
                          (n.sgmlDecl = ""))
                        : "DOCTYPE" === (n.sgmlDecl + r).toUpperCase()
                        ? ((n.state = O.DOCTYPE),
                          (n.doctype || n.sawRoot) &&
                            T(n, "Inappropriately located doctype declaration"),
                          (n.doctype = ""),
                          (n.sgmlDecl = ""))
                        : ">" === r
                        ? (C(n, "onsgmldeclaration", n.sgmlDecl),
                          (n.sgmlDecl = ""),
                          (n.state = O.TEXT))
                        : g(r)
                        ? ((n.state = O.SGML_DECL_QUOTED), (n.sgmlDecl += r))
                        : (n.sgmlDecl += r);
                      continue;
                    case O.SGML_DECL_QUOTED:
                      r === n.q && ((n.state = O.SGML_DECL), (n.q = "")),
                        (n.sgmlDecl += r);
                      continue;
                    case O.DOCTYPE:
                      ">" === r
                        ? ((n.state = O.TEXT),
                          C(n, "ondoctype", n.doctype),
                          (n.doctype = !0))
                        : ((n.doctype += r),
                          "[" === r
                            ? (n.state = O.DOCTYPE_DTD)
                            : g(r) &&
                              ((n.state = O.DOCTYPE_QUOTED), (n.q = r)));
                      continue;
                    case O.DOCTYPE_QUOTED:
                      (n.doctype += r),
                        r === n.q && ((n.q = ""), (n.state = O.DOCTYPE));
                      continue;
                    case O.DOCTYPE_DTD:
                      (n.doctype += r),
                        "]" === r
                          ? (n.state = O.DOCTYPE)
                          : g(r) &&
                            ((n.state = O.DOCTYPE_DTD_QUOTED), (n.q = r));
                      continue;
                    case O.DOCTYPE_DTD_QUOTED:
                      (n.doctype += r),
                        r === n.q && ((n.state = O.DOCTYPE_DTD), (n.q = ""));
                      continue;
                    case O.COMMENT:
                      "-" === r
                        ? (n.state = O.COMMENT_ENDING)
                        : (n.comment += r);
                      continue;
                    case O.COMMENT_ENDING:
                      "-" === r
                        ? ((n.state = O.COMMENT_ENDED),
                          (n.comment = x(n.opt, n.comment)),
                          n.comment && C(n, "oncomment", n.comment),
                          (n.comment = ""))
                        : ((n.comment += "-" + r), (n.state = O.COMMENT));
                      continue;
                    case O.COMMENT_ENDED:
                      ">" !== r
                        ? (T(n, "Malformed comment"),
                          (n.comment += "--" + r),
                          (n.state = O.COMMENT))
                        : (n.state = O.TEXT);
                      continue;
                    case O.CDATA:
                      "]" === r ? (n.state = O.CDATA_ENDING) : (n.cdata += r);
                      continue;
                    case O.CDATA_ENDING:
                      "]" === r
                        ? (n.state = O.CDATA_ENDING_2)
                        : ((n.cdata += "]" + r), (n.state = O.CDATA));
                      continue;
                    case O.CDATA_ENDING_2:
                      ">" === r
                        ? (n.cdata && C(n, "oncdata", n.cdata),
                          C(n, "onclosecdata"),
                          (n.cdata = ""),
                          (n.state = O.TEXT))
                        : "]" === r
                        ? (n.cdata += "]")
                        : ((n.cdata += "]]" + r), (n.state = O.CDATA));
                      continue;
                    case O.PROC_INST:
                      "?" === r
                        ? (n.state = O.PROC_INST_ENDING)
                        : f(r)
                        ? (n.state = O.PROC_INST_BODY)
                        : (n.procInstName += r);
                      continue;
                    case O.PROC_INST_BODY:
                      if (!n.procInstBody && f(r)) continue;
                      "?" === r
                        ? (n.state = O.PROC_INST_ENDING)
                        : (n.procInstBody += r);
                      continue;
                    case O.PROC_INST_ENDING:
                      ">" === r
                        ? (C(n, "onprocessinginstruction", {
                            name: n.procInstName,
                            body: n.procInstBody,
                          }),
                          (n.procInstName = n.procInstBody = ""),
                          (n.state = O.TEXT))
                        : ((n.procInstBody += "?" + r),
                          (n.state = O.PROC_INST_BODY));
                      continue;
                    case O.OPEN_TAG:
                      y(c, r)
                        ? (n.tagName += r)
                        : (D(n),
                          ">" === r
                            ? A(n)
                            : "/" === r
                            ? (n.state = O.OPEN_TAG_SLASH)
                            : (f(r) || T(n, "Invalid character in tag name"),
                              (n.state = O.ATTRIB)));
                      continue;
                    case O.OPEN_TAG_SLASH:
                      ">" === r
                        ? (A(n, !0), j(n))
                        : (T(
                            n,
                            "Forward-slash in opening tag not followed by >"
                          ),
                          (n.state = O.ATTRIB));
                      continue;
                    case O.ATTRIB:
                      if (f(r)) continue;
                      ">" === r
                        ? A(n)
                        : "/" === r
                        ? (n.state = O.OPEN_TAG_SLASH)
                        : y(p, r)
                        ? ((n.attribName = r),
                          (n.attribValue = ""),
                          (n.state = O.ATTRIB_NAME))
                        : T(n, "Invalid attribute name");
                      continue;
                    case O.ATTRIB_NAME:
                      "=" === r
                        ? (n.state = O.ATTRIB_VALUE)
                        : ">" === r
                        ? (T(n, "Attribute without value"),
                          (n.attribValue = n.attribName),
                          R(n),
                          A(n))
                        : f(r)
                        ? (n.state = O.ATTRIB_NAME_SAW_WHITE)
                        : y(c, r)
                        ? (n.attribName += r)
                        : T(n, "Invalid attribute name");
                      continue;
                    case O.ATTRIB_NAME_SAW_WHITE:
                      if ("=" === r) n.state = O.ATTRIB_VALUE;
                      else {
                        if (f(r)) continue;
                        T(n, "Attribute without value"),
                          (n.tag.attributes[n.attribName] = ""),
                          (n.attribValue = ""),
                          C(n, "onattribute", {
                            name: n.attribName,
                            value: "",
                          }),
                          (n.attribName = ""),
                          ">" === r
                            ? A(n)
                            : y(p, r)
                            ? ((n.attribName = r), (n.state = O.ATTRIB_NAME))
                            : (T(n, "Invalid attribute name"),
                              (n.state = O.ATTRIB));
                      }
                      continue;
                    case O.ATTRIB_VALUE:
                      if (f(r)) continue;
                      g(r)
                        ? ((n.q = r), (n.state = O.ATTRIB_VALUE_QUOTED))
                        : (T(n, "Unquoted attribute value"),
                          (n.state = O.ATTRIB_VALUE_UNQUOTED),
                          (n.attribValue = r));
                      continue;
                    case O.ATTRIB_VALUE_QUOTED:
                      if (r !== n.q) {
                        "&" === r
                          ? (n.state = O.ATTRIB_VALUE_ENTITY_Q)
                          : (n.attribValue += r);
                        continue;
                      }
                      R(n), (n.q = ""), (n.state = O.ATTRIB_VALUE_CLOSED);
                      continue;
                    case O.ATTRIB_VALUE_CLOSED:
                      f(r)
                        ? (n.state = O.ATTRIB)
                        : ">" === r
                        ? A(n)
                        : "/" === r
                        ? (n.state = O.OPEN_TAG_SLASH)
                        : y(p, r)
                        ? (T(n, "No whitespace between attributes"),
                          (n.attribName = r),
                          (n.attribValue = ""),
                          (n.state = O.ATTRIB_NAME))
                        : T(n, "Invalid attribute name");
                      continue;
                    case O.ATTRIB_VALUE_UNQUOTED:
                      if (!m(r)) {
                        "&" === r
                          ? (n.state = O.ATTRIB_VALUE_ENTITY_U)
                          : (n.attribValue += r);
                        continue;
                      }
                      R(n), ">" === r ? A(n) : (n.state = O.ATTRIB);
                      continue;
                    case O.CLOSE_TAG:
                      if (n.tagName)
                        ">" === r
                          ? j(n)
                          : y(c, r)
                          ? (n.tagName += r)
                          : n.script
                          ? ((n.script += "</" + n.tagName),
                            (n.tagName = ""),
                            (n.state = O.SCRIPT))
                          : (f(r) || T(n, "Invalid tagname in closing tag"),
                            (n.state = O.CLOSE_TAG_SAW_WHITE));
                      else {
                        if (f(r)) continue;
                        v(p, r)
                          ? n.script
                            ? ((n.script += "</" + r), (n.state = O.SCRIPT))
                            : T(n, "Invalid tagname in closing tag.")
                          : (n.tagName = r);
                      }
                      continue;
                    case O.CLOSE_TAG_SAW_WHITE:
                      if (f(r)) continue;
                      ">" === r
                        ? j(n)
                        : T(n, "Invalid characters in closing tag");
                      continue;
                    case O.TEXT_ENTITY:
                    case O.ATTRIB_VALUE_ENTITY_Q:
                    case O.ATTRIB_VALUE_ENTITY_U:
                      var l, u;
                      switch (n.state) {
                        case O.TEXT_ENTITY:
                          (l = O.TEXT), (u = "textNode");
                          break;
                        case O.ATTRIB_VALUE_ENTITY_Q:
                          (l = O.ATTRIB_VALUE_QUOTED), (u = "attribValue");
                          break;
                        case O.ATTRIB_VALUE_ENTITY_U:
                          (l = O.ATTRIB_VALUE_UNQUOTED), (u = "attribValue");
                      }
                      ";" === r
                        ? ((n[u] += M(n)), (n.entity = ""), (n.state = l))
                        : y(n.entity.length ? h : d, r)
                        ? (n.entity += r)
                        : (T(n, "Invalid character in entity name"),
                          (n[u] += "&" + n.entity + r),
                          (n.entity = ""),
                          (n.state = l));
                      continue;
                    default:
                      throw new Error(n, "Unknown state: " + n.state);
                  }
                return (
                  n.position >= n.bufferCheckPosition &&
                    (function (e) {
                      for (
                        var n = Math.max(t.MAX_BUFFER_LENGTH, 10),
                          o = 0,
                          r = 0,
                          s = i.length;
                        r < s;
                        r++
                      ) {
                        var a = e[i[r]].length;
                        if (a > n)
                          switch (i[r]) {
                            case "textNode":
                              I(e);
                              break;
                            case "cdata":
                              C(e, "oncdata", e.cdata), (e.cdata = "");
                              break;
                            case "script":
                              C(e, "onscript", e.script), (e.script = "");
                              break;
                            default:
                              P(e, "Max buffer length exceeded: " + i[r]);
                          }
                        o = Math.max(o, a);
                      }
                      var l = t.MAX_BUFFER_LENGTH - o;
                      e.bufferCheckPosition = l + e.position;
                    })(n),
                  n
                );
              },
              resume: function () {
                return (this.error = null), this;
              },
              close: function () {
                return this.write(null);
              },
              flush: function () {
                var t;
                I((t = this)),
                  "" !== t.cdata && (C(t, "oncdata", t.cdata), (t.cdata = "")),
                  "" !== t.script &&
                    (C(t, "onscript", t.script), (t.script = ""));
              },
            });
          try {
            e = n(2830).Stream;
          } catch (t) {
            e = function () {};
          }
          var r = t.EVENTS.filter(function (t) {
            return "error" !== t && "end" !== t;
          });
          function s(t, n) {
            if (!(this instanceof s)) return new s(t, n);
            e.apply(this),
              (this._parser = new o(t, n)),
              (this.writable = !0),
              (this.readable = !0);
            var i = this;
            (this._parser.onend = function () {
              i.emit("end");
            }),
              (this._parser.onerror = function (t) {
                i.emit("error", t), (i._parser.error = null);
              }),
              (this._decoder = null),
              r.forEach(function (t) {
                Object.defineProperty(i, "on" + t, {
                  get: function () {
                    return i._parser["on" + t];
                  },
                  set: function (e) {
                    if (!e)
                      return (
                        i.removeAllListeners(t), (i._parser["on" + t] = e), e
                      );
                    i.on(t, e);
                  },
                  enumerable: !0,
                  configurable: !1,
                });
              });
          }
          (s.prototype = Object.create(e.prototype, {
            constructor: { value: s },
          })),
            (s.prototype.write = function (t) {
              if (
                "function" == typeof Buffer &&
                "function" == typeof Buffer.isBuffer &&
                Buffer.isBuffer(t)
              ) {
                if (!this._decoder) {
                  var e = n(2553).s;
                  this._decoder = new e("utf8");
                }
                t = this._decoder.write(t);
              }
              return this._parser.write(t.toString()), this.emit("data", t), !0;
            }),
            (s.prototype.end = function (t) {
              return t && t.length && this.write(t), this._parser.end(), !0;
            }),
            (s.prototype.on = function (t, n) {
              var i = this;
              return (
                i._parser["on" + t] ||
                  -1 === r.indexOf(t) ||
                  (i._parser["on" + t] = function () {
                    var e =
                      1 === arguments.length
                        ? [arguments[0]]
                        : Array.apply(null, arguments);
                    e.splice(0, 0, t), i.emit.apply(i, e);
                  }),
                e.prototype.on.call(i, t, n)
              );
            });
          var a = "http://www.w3.org/XML/1998/namespace",
            l = "http://www.w3.org/2000/xmlns/",
            u = { xml: a, xmlns: l },
            p =
              /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,
            c =
              /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,
            d =
              /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,
            h =
              /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
          function f(t) {
            return " " === t || "\n" === t || "\r" === t || "\t" === t;
          }
          function g(t) {
            return '"' === t || "'" === t;
          }
          function m(t) {
            return ">" === t || f(t);
          }
          function y(t, e) {
            return t.test(e);
          }
          function v(t, e) {
            return !y(t, e);
          }
          var b,
            S,
            w,
            O = 0;
          for (var _ in ((t.STATE = {
            BEGIN: O++,
            BEGIN_WHITESPACE: O++,
            TEXT: O++,
            TEXT_ENTITY: O++,
            OPEN_WAKA: O++,
            SGML_DECL: O++,
            SGML_DECL_QUOTED: O++,
            DOCTYPE: O++,
            DOCTYPE_QUOTED: O++,
            DOCTYPE_DTD: O++,
            DOCTYPE_DTD_QUOTED: O++,
            COMMENT_STARTING: O++,
            COMMENT: O++,
            COMMENT_ENDING: O++,
            COMMENT_ENDED: O++,
            CDATA: O++,
            CDATA_ENDING: O++,
            CDATA_ENDING_2: O++,
            PROC_INST: O++,
            PROC_INST_BODY: O++,
            PROC_INST_ENDING: O++,
            OPEN_TAG: O++,
            OPEN_TAG_SLASH: O++,
            ATTRIB: O++,
            ATTRIB_NAME: O++,
            ATTRIB_NAME_SAW_WHITE: O++,
            ATTRIB_VALUE: O++,
            ATTRIB_VALUE_QUOTED: O++,
            ATTRIB_VALUE_CLOSED: O++,
            ATTRIB_VALUE_UNQUOTED: O++,
            ATTRIB_VALUE_ENTITY_Q: O++,
            ATTRIB_VALUE_ENTITY_U: O++,
            CLOSE_TAG: O++,
            CLOSE_TAG_SAW_WHITE: O++,
            SCRIPT: O++,
            SCRIPT_ENDING: O++,
          }),
          (t.XML_ENTITIES = {
            amp: "&",
            gt: ">",
            lt: "<",
            quot: '"',
            apos: "'",
          }),
          (t.ENTITIES = {
            amp: "&",
            gt: ">",
            lt: "<",
            quot: '"',
            apos: "'",
            AElig: 198,
            Aacute: 193,
            Acirc: 194,
            Agrave: 192,
            Aring: 197,
            Atilde: 195,
            Auml: 196,
            Ccedil: 199,
            ETH: 208,
            Eacute: 201,
            Ecirc: 202,
            Egrave: 200,
            Euml: 203,
            Iacute: 205,
            Icirc: 206,
            Igrave: 204,
            Iuml: 207,
            Ntilde: 209,
            Oacute: 211,
            Ocirc: 212,
            Ograve: 210,
            Oslash: 216,
            Otilde: 213,
            Ouml: 214,
            THORN: 222,
            Uacute: 218,
            Ucirc: 219,
            Ugrave: 217,
            Uuml: 220,
            Yacute: 221,
            aacute: 225,
            acirc: 226,
            aelig: 230,
            agrave: 224,
            aring: 229,
            atilde: 227,
            auml: 228,
            ccedil: 231,
            eacute: 233,
            ecirc: 234,
            egrave: 232,
            eth: 240,
            euml: 235,
            iacute: 237,
            icirc: 238,
            igrave: 236,
            iuml: 239,
            ntilde: 241,
            oacute: 243,
            ocirc: 244,
            ograve: 242,
            oslash: 248,
            otilde: 245,
            ouml: 246,
            szlig: 223,
            thorn: 254,
            uacute: 250,
            ucirc: 251,
            ugrave: 249,
            uuml: 252,
            yacute: 253,
            yuml: 255,
            copy: 169,
            reg: 174,
            nbsp: 160,
            iexcl: 161,
            cent: 162,
            pound: 163,
            curren: 164,
            yen: 165,
            brvbar: 166,
            sect: 167,
            uml: 168,
            ordf: 170,
            laquo: 171,
            not: 172,
            shy: 173,
            macr: 175,
            deg: 176,
            plusmn: 177,
            sup1: 185,
            sup2: 178,
            sup3: 179,
            acute: 180,
            micro: 181,
            para: 182,
            middot: 183,
            cedil: 184,
            ordm: 186,
            raquo: 187,
            frac14: 188,
            frac12: 189,
            frac34: 190,
            iquest: 191,
            times: 215,
            divide: 247,
            OElig: 338,
            oelig: 339,
            Scaron: 352,
            scaron: 353,
            Yuml: 376,
            fnof: 402,
            circ: 710,
            tilde: 732,
            Alpha: 913,
            Beta: 914,
            Gamma: 915,
            Delta: 916,
            Epsilon: 917,
            Zeta: 918,
            Eta: 919,
            Theta: 920,
            Iota: 921,
            Kappa: 922,
            Lambda: 923,
            Mu: 924,
            Nu: 925,
            Xi: 926,
            Omicron: 927,
            Pi: 928,
            Rho: 929,
            Sigma: 931,
            Tau: 932,
            Upsilon: 933,
            Phi: 934,
            Chi: 935,
            Psi: 936,
            Omega: 937,
            alpha: 945,
            beta: 946,
            gamma: 947,
            delta: 948,
            epsilon: 949,
            zeta: 950,
            eta: 951,
            theta: 952,
            iota: 953,
            kappa: 954,
            lambda: 955,
            mu: 956,
            nu: 957,
            xi: 958,
            omicron: 959,
            pi: 960,
            rho: 961,
            sigmaf: 962,
            sigma: 963,
            tau: 964,
            upsilon: 965,
            phi: 966,
            chi: 967,
            psi: 968,
            omega: 969,
            thetasym: 977,
            upsih: 978,
            piv: 982,
            ensp: 8194,
            emsp: 8195,
            thinsp: 8201,
            zwnj: 8204,
            zwj: 8205,
            lrm: 8206,
            rlm: 8207,
            ndash: 8211,
            mdash: 8212,
            lsquo: 8216,
            rsquo: 8217,
            sbquo: 8218,
            ldquo: 8220,
            rdquo: 8221,
            bdquo: 8222,
            dagger: 8224,
            Dagger: 8225,
            bull: 8226,
            hellip: 8230,
            permil: 8240,
            prime: 8242,
            Prime: 8243,
            lsaquo: 8249,
            rsaquo: 8250,
            oline: 8254,
            frasl: 8260,
            euro: 8364,
            image: 8465,
            weierp: 8472,
            real: 8476,
            trade: 8482,
            alefsym: 8501,
            larr: 8592,
            uarr: 8593,
            rarr: 8594,
            darr: 8595,
            harr: 8596,
            crarr: 8629,
            lArr: 8656,
            uArr: 8657,
            rArr: 8658,
            dArr: 8659,
            hArr: 8660,
            forall: 8704,
            part: 8706,
            exist: 8707,
            empty: 8709,
            nabla: 8711,
            isin: 8712,
            notin: 8713,
            ni: 8715,
            prod: 8719,
            sum: 8721,
            minus: 8722,
            lowast: 8727,
            radic: 8730,
            prop: 8733,
            infin: 8734,
            ang: 8736,
            and: 8743,
            or: 8744,
            cap: 8745,
            cup: 8746,
            int: 8747,
            there4: 8756,
            sim: 8764,
            cong: 8773,
            asymp: 8776,
            ne: 8800,
            equiv: 8801,
            le: 8804,
            ge: 8805,
            sub: 8834,
            sup: 8835,
            nsub: 8836,
            sube: 8838,
            supe: 8839,
            oplus: 8853,
            otimes: 8855,
            perp: 8869,
            sdot: 8901,
            lceil: 8968,
            rceil: 8969,
            lfloor: 8970,
            rfloor: 8971,
            lang: 9001,
            rang: 9002,
            loz: 9674,
            spades: 9824,
            clubs: 9827,
            hearts: 9829,
            diams: 9830,
          }),
          Object.keys(t.ENTITIES).forEach(function (e) {
            var n = t.ENTITIES[e],
              i = "number" == typeof n ? String.fromCharCode(n) : n;
            t.ENTITIES[e] = i;
          }),
          t.STATE))
            t.STATE[t.STATE[_]] = _;
          function N(t, e, n) {
            t[e] && t[e](n);
          }
          function C(t, e, n) {
            t.textNode && I(t), N(t, e, n);
          }
          function I(t) {
            (t.textNode = x(t.opt, t.textNode)),
              t.textNode && N(t, "ontext", t.textNode),
              (t.textNode = "");
          }
          function x(t, e) {
            return (
              t.trim && (e = e.trim()),
              t.normalize && (e = e.replace(/\s+/g, " ")),
              e
            );
          }
          function P(t, e) {
            return (
              I(t),
              t.trackPosition &&
                (e +=
                  "\nLine: " +
                  t.line +
                  "\nColumn: " +
                  t.column +
                  "\nChar: " +
                  t.c),
              (e = new Error(e)),
              (t.error = e),
              N(t, "onerror", e),
              t
            );
          }
          function E(t) {
            return (
              t.sawRoot && !t.closedRoot && T(t, "Unclosed root tag"),
              t.state !== O.BEGIN &&
                t.state !== O.BEGIN_WHITESPACE &&
                t.state !== O.TEXT &&
                P(t, "Unexpected end"),
              I(t),
              (t.c = ""),
              (t.closed = !0),
              N(t, "onend"),
              o.call(t, t.strict, t.opt),
              t
            );
          }
          function T(t, e) {
            if ("object" != typeof t || !(t instanceof o))
              throw new Error("bad call to strictFail");
            t.strict && P(t, e);
          }
          function D(t) {
            t.strict || (t.tagName = t.tagName[t.looseCase]());
            var e = t.tags[t.tags.length - 1] || t,
              n = (t.tag = { name: t.tagName, attributes: {} });
            t.opt.xmlns && (n.ns = e.ns),
              (t.attribList.length = 0),
              C(t, "onopentagstart", n);
          }
          function k(t, e) {
            var n = t.indexOf(":") < 0 ? ["", t] : t.split(":"),
              i = n[0],
              o = n[1];
            return (
              e && "xmlns" === t && ((i = "xmlns"), (o = "")),
              { prefix: i, local: o }
            );
          }
          function R(t) {
            if (
              (t.strict || (t.attribName = t.attribName[t.looseCase]()),
              -1 !== t.attribList.indexOf(t.attribName) ||
                t.tag.attributes.hasOwnProperty(t.attribName))
            )
              t.attribName = t.attribValue = "";
            else {
              if (t.opt.xmlns) {
                var e = k(t.attribName, !0),
                  n = e.prefix,
                  i = e.local;
                if ("xmlns" === n)
                  if ("xml" === i && t.attribValue !== a)
                    T(
                      t,
                      "xml: prefix must be bound to " +
                        a +
                        "\nActual: " +
                        t.attribValue
                    );
                  else if ("xmlns" === i && t.attribValue !== l)
                    T(
                      t,
                      "xmlns: prefix must be bound to " +
                        l +
                        "\nActual: " +
                        t.attribValue
                    );
                  else {
                    var o = t.tag,
                      r = t.tags[t.tags.length - 1] || t;
                    o.ns === r.ns && (o.ns = Object.create(r.ns)),
                      (o.ns[i] = t.attribValue);
                  }
                t.attribList.push([t.attribName, t.attribValue]);
              } else
                (t.tag.attributes[t.attribName] = t.attribValue),
                  C(t, "onattribute", {
                    name: t.attribName,
                    value: t.attribValue,
                  });
              t.attribName = t.attribValue = "";
            }
          }
          function A(t, e) {
            if (t.opt.xmlns) {
              var n = t.tag,
                i = k(t.tagName);
              (n.prefix = i.prefix),
                (n.local = i.local),
                (n.uri = n.ns[i.prefix] || ""),
                n.prefix &&
                  !n.uri &&
                  (T(
                    t,
                    "Unbound namespace prefix: " + JSON.stringify(t.tagName)
                  ),
                  (n.uri = i.prefix));
              var o = t.tags[t.tags.length - 1] || t;
              n.ns &&
                o.ns !== n.ns &&
                Object.keys(n.ns).forEach(function (e) {
                  C(t, "onopennamespace", { prefix: e, uri: n.ns[e] });
                });
              for (var r = 0, s = t.attribList.length; r < s; r++) {
                var a = t.attribList[r],
                  l = a[0],
                  u = a[1],
                  p = k(l, !0),
                  c = p.prefix,
                  d = p.local,
                  h = "" === c ? "" : n.ns[c] || "",
                  f = { name: l, value: u, prefix: c, local: d, uri: h };
                c &&
                  "xmlns" !== c &&
                  !h &&
                  (T(t, "Unbound namespace prefix: " + JSON.stringify(c)),
                  (f.uri = c)),
                  (t.tag.attributes[l] = f),
                  C(t, "onattribute", f);
              }
              t.attribList.length = 0;
            }
            (t.tag.isSelfClosing = !!e),
              (t.sawRoot = !0),
              t.tags.push(t.tag),
              C(t, "onopentag", t.tag),
              e ||
                (t.noscript || "script" !== t.tagName.toLowerCase()
                  ? (t.state = O.TEXT)
                  : (t.state = O.SCRIPT),
                (t.tag = null),
                (t.tagName = "")),
              (t.attribName = t.attribValue = ""),
              (t.attribList.length = 0);
          }
          function j(t) {
            if (!t.tagName)
              return (
                T(t, "Weird empty close tag."),
                (t.textNode += "</>"),
                void (t.state = O.TEXT)
              );
            if (t.script) {
              if ("script" !== t.tagName)
                return (
                  (t.script += "</" + t.tagName + ">"),
                  (t.tagName = ""),
                  void (t.state = O.SCRIPT)
                );
              C(t, "onscript", t.script), (t.script = "");
            }
            var e = t.tags.length,
              n = t.tagName;
            t.strict || (n = n[t.looseCase]());
            for (var i = n; e-- && t.tags[e].name !== i; )
              T(t, "Unexpected close tag");
            if (e < 0)
              return (
                T(t, "Unmatched closing tag: " + t.tagName),
                (t.textNode += "</" + t.tagName + ">"),
                void (t.state = O.TEXT)
              );
            t.tagName = n;
            for (var o = t.tags.length; o-- > e; ) {
              var r = (t.tag = t.tags.pop());
              (t.tagName = t.tag.name), C(t, "onclosetag", t.tagName);
              var s = {};
              for (var a in r.ns) s[a] = r.ns[a];
              var l = t.tags[t.tags.length - 1] || t;
              t.opt.xmlns &&
                r.ns !== l.ns &&
                Object.keys(r.ns).forEach(function (e) {
                  var n = r.ns[e];
                  C(t, "onclosenamespace", { prefix: e, uri: n });
                });
            }
            0 === e && (t.closedRoot = !0),
              (t.tagName = t.attribValue = t.attribName = ""),
              (t.attribList.length = 0),
              (t.state = O.TEXT);
          }
          function M(t) {
            var e,
              n = t.entity,
              i = n.toLowerCase(),
              o = "";
            return t.ENTITIES[n]
              ? t.ENTITIES[n]
              : t.ENTITIES[i]
              ? t.ENTITIES[i]
              : ("#" === (n = i).charAt(0) &&
                  ("x" === n.charAt(1)
                    ? ((n = n.slice(2)),
                      (o = (e = parseInt(n, 16)).toString(16)))
                    : ((n = n.slice(1)),
                      (o = (e = parseInt(n, 10)).toString(10)))),
                (n = n.replace(/^0+/, "")),
                isNaN(e) || o.toLowerCase() !== n
                  ? (T(t, "Invalid character entity"), "&" + t.entity + ";")
                  : String.fromCodePoint(e));
          }
          function F(t, e) {
            "<" === e
              ? ((t.state = O.OPEN_WAKA), (t.startTagPosition = t.position))
              : f(e) ||
                (T(t, "Non-whitespace before first tag."),
                (t.textNode = e),
                (t.state = O.TEXT));
          }
          function V(t, e) {
            var n = "";
            return e < t.length && (n = t.charAt(e)), n;
          }
          (O = t.STATE),
            String.fromCodePoint ||
              ((b = String.fromCharCode),
              (S = Math.floor),
              (w = function () {
                var t,
                  e,
                  n = 16384,
                  i = [],
                  o = -1,
                  r = arguments.length;
                if (!r) return "";
                for (var s = ""; ++o < r; ) {
                  var a = Number(arguments[o]);
                  if (!isFinite(a) || a < 0 || a > 1114111 || S(a) !== a)
                    throw RangeError("Invalid code point: " + a);
                  a <= 65535
                    ? i.push(a)
                    : ((t = 55296 + ((a -= 65536) >> 10)),
                      (e = (a % 1024) + 56320),
                      i.push(t, e)),
                    (o + 1 === r || i.length > n) &&
                      ((s += b.apply(null, i)), (i.length = 0));
                }
                return s;
              }),
              Object.defineProperty
                ? Object.defineProperty(String, "fromCodePoint", {
                    value: w,
                    configurable: !0,
                    writable: !0,
                  })
                : (String.fromCodePoint = w));
        })(e);
      },
      4889: function (t, e, n) {
        !(function (t, e) {
          "use strict";
          if (!t.setImmediate) {
            var n,
              i,
              o,
              r,
              s,
              a = 1,
              l = {},
              u = !1,
              p = t.document,
              c = Object.getPrototypeOf && Object.getPrototypeOf(t);
            (c = c && c.setTimeout ? c : t),
              "[object process]" === {}.toString.call(t.process)
                ? (n = function (t) {
                    process.nextTick(function () {
                      h(t);
                    });
                  })
                : (function () {
                    if (t.postMessage && !t.importScripts) {
                      var e = !0,
                        n = t.onmessage;
                      return (
                        (t.onmessage = function () {
                          e = !1;
                        }),
                        t.postMessage("", "*"),
                        (t.onmessage = n),
                        e
                      );
                    }
                  })()
                ? ((r = "setImmediate$" + Math.random() + "$"),
                  (s = function (e) {
                    e.source === t &&
                      "string" == typeof e.data &&
                      0 === e.data.indexOf(r) &&
                      h(+e.data.slice(r.length));
                  }),
                  t.addEventListener
                    ? t.addEventListener("message", s, !1)
                    : t.attachEvent("onmessage", s),
                  (n = function (e) {
                    t.postMessage(r + e, "*");
                  }))
                : t.MessageChannel
                ? (((o = new MessageChannel()).port1.onmessage = function (t) {
                    h(t.data);
                  }),
                  (n = function (t) {
                    o.port2.postMessage(t);
                  }))
                : p && "onreadystatechange" in p.createElement("script")
                ? ((i = p.documentElement),
                  (n = function (t) {
                    var e = p.createElement("script");
                    (e.onreadystatechange = function () {
                      h(t),
                        (e.onreadystatechange = null),
                        i.removeChild(e),
                        (e = null);
                    }),
                      i.appendChild(e);
                  }))
                : (n = function (t) {
                    setTimeout(h, 0, t);
                  }),
              (c.setImmediate = function (t) {
                "function" != typeof t && (t = new Function("" + t));
                for (
                  var e = new Array(arguments.length - 1), i = 0;
                  i < e.length;
                  i++
                )
                  e[i] = arguments[i + 1];
                var o = { callback: t, args: e };
                return (l[a] = o), n(a), a++;
              }),
              (c.clearImmediate = d);
          }
          function d(t) {
            delete l[t];
          }
          function h(t) {
            if (u) setTimeout(h, 0, t);
            else {
              var e = l[t];
              if (e) {
                u = !0;
                try {
                  !(function (t) {
                    var e = t.callback,
                      n = t.args;
                    switch (n.length) {
                      case 0:
                        e();
                        break;
                      case 1:
                        e(n[0]);
                        break;
                      case 2:
                        e(n[0], n[1]);
                        break;
                      case 3:
                        e(n[0], n[1], n[2]);
                        break;
                      default:
                        e.apply(void 0, n);
                    }
                  })(e);
                } finally {
                  d(t), (u = !1);
                }
              }
            }
          }
        })("undefined" == typeof self ? (void 0 === n.g ? this : n.g) : self);
      },
      2830: (t, e, n) => {
        t.exports = o;
        var i = n(7187).EventEmitter;
        function o() {
          i.call(this);
        }
        n(5717)(o, i),
          (o.Readable = n(6577)),
          (o.Writable = n(323)),
          (o.Duplex = n(8656)),
          (o.Transform = n(4473)),
          (o.PassThrough = n(2366)),
          (o.finished = n(1086)),
          (o.pipeline = n(6472)),
          (o.Stream = o),
          (o.prototype.pipe = function (t, e) {
            var n = this;
            function o(e) {
              t.writable && !1 === t.write(e) && n.pause && n.pause();
            }
            function r() {
              n.readable && n.resume && n.resume();
            }
            n.on("data", o),
              t.on("drain", r),
              t._isStdio ||
                (e && !1 === e.end) ||
                (n.on("end", a), n.on("close", l));
            var s = !1;
            function a() {
              s || ((s = !0), t.end());
            }
            function l() {
              s || ((s = !0), "function" == typeof t.destroy && t.destroy());
            }
            function u(t) {
              if ((p(), 0 === i.listenerCount(this, "error"))) throw t;
            }
            function p() {
              n.removeListener("data", o),
                t.removeListener("drain", r),
                n.removeListener("end", a),
                n.removeListener("close", l),
                n.removeListener("error", u),
                t.removeListener("error", u),
                n.removeListener("end", p),
                n.removeListener("close", p),
                t.removeListener("close", p);
            }
            return (
              n.on("error", u),
              t.on("error", u),
              n.on("end", p),
              n.on("close", p),
              t.on("close", p),
              t.emit("pipe", n),
              t
            );
          });
      },
      8106: (t) => {
        "use strict";
        var e = {};
        function n(t, n, i) {
          i || (i = Error);
          var o = (function (t) {
            var e, i;
            function o(e, i, o) {
              return (
                t.call(
                  this,
                  (function (t, e, i) {
                    return "string" == typeof n ? n : n(t, e, i);
                  })(e, i, o)
                ) || this
              );
            }
            return (
              (i = t),
              ((e = o).prototype = Object.create(i.prototype)),
              (e.prototype.constructor = e),
              (e.__proto__ = i),
              o
            );
          })(i);
          (o.prototype.name = i.name), (o.prototype.code = t), (e[t] = o);
        }
        function i(t, e) {
          if (Array.isArray(t)) {
            var n = t.length;
            return (
              (t = t.map(function (t) {
                return String(t);
              })),
              n > 2
                ? "one of "
                    .concat(e, " ")
                    .concat(t.slice(0, n - 1).join(", "), ", or ") + t[n - 1]
                : 2 === n
                ? "one of ".concat(e, " ").concat(t[0], " or ").concat(t[1])
                : "of ".concat(e, " ").concat(t[0])
            );
          }
          return "of ".concat(e, " ").concat(String(t));
        }
        n(
          "ERR_INVALID_OPT_VALUE",
          function (t, e) {
            return 'The value "' + e + '" is invalid for option "' + t + '"';
          },
          TypeError
        ),
          n(
            "ERR_INVALID_ARG_TYPE",
            function (t, e, n) {
              var o, r, s, a, l;
              if (
                ("string" == typeof e &&
                ((r = "not "), e.substr(0, r.length) === r)
                  ? ((o = "must not be"), (e = e.replace(/^not /, "")))
                  : (o = "must be"),
                (function (t, e, n) {
                  return (
                    (void 0 === n || n > t.length) && (n = t.length),
                    t.substring(n - e.length, n) === e
                  );
                })(t, " argument"))
              )
                s = "The ".concat(t, " ").concat(o, " ").concat(i(e, "type"));
              else {
                var u =
                  ("number" != typeof l && (l = 0),
                  l + ".".length > (a = t).length || -1 === a.indexOf(".", l)
                    ? "argument"
                    : "property");
                s = 'The "'
                  .concat(t, '" ')
                  .concat(u, " ")
                  .concat(o, " ")
                  .concat(i(e, "type"));
              }
              return s + ". Received type ".concat(typeof n);
            },
            TypeError
          ),
          n("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"),
          n("ERR_METHOD_NOT_IMPLEMENTED", function (t) {
            return "The " + t + " method is not implemented";
          }),
          n("ERR_STREAM_PREMATURE_CLOSE", "Premature close"),
          n("ERR_STREAM_DESTROYED", function (t) {
            return "Cannot call " + t + " after a stream was destroyed";
          }),
          n("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"),
          n("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"),
          n("ERR_STREAM_WRITE_AFTER_END", "write after end"),
          n(
            "ERR_STREAM_NULL_VALUES",
            "May not write null values to stream",
            TypeError
          ),
          n(
            "ERR_UNKNOWN_ENCODING",
            function (t) {
              return "Unknown encoding: " + t;
            },
            TypeError
          ),
          n(
            "ERR_STREAM_UNSHIFT_AFTER_END_EVENT",
            "stream.unshift() after end event"
          ),
          (t.exports.q = e);
      },
      8656: (t, e, n) => {
        "use strict";
        var i =
          Object.keys ||
          function (t) {
            var e = [];
            for (var n in t) e.push(n);
            return e;
          };
        t.exports = u;
        var o = n(6577),
          r = n(323);
        n(5717)(u, o);
        for (var s = i(r.prototype), a = 0; a < s.length; a++) {
          var l = s[a];
          u.prototype[l] || (u.prototype[l] = r.prototype[l]);
        }
        function u(t) {
          if (!(this instanceof u)) return new u(t);
          o.call(this, t),
            r.call(this, t),
            (this.allowHalfOpen = !0),
            t &&
              (!1 === t.readable && (this.readable = !1),
              !1 === t.writable && (this.writable = !1),
              !1 === t.allowHalfOpen &&
                ((this.allowHalfOpen = !1), this.once("end", p)));
        }
        function p() {
          this._writableState.ended || process.nextTick(c, this);
        }
        function c(t) {
          t.end();
        }
        Object.defineProperty(u.prototype, "writableHighWaterMark", {
          enumerable: !1,
          get: function () {
            return this._writableState.highWaterMark;
          },
        }),
          Object.defineProperty(u.prototype, "writableBuffer", {
            enumerable: !1,
            get: function () {
              return this._writableState && this._writableState.getBuffer();
            },
          }),
          Object.defineProperty(u.prototype, "writableLength", {
            enumerable: !1,
            get: function () {
              return this._writableState.length;
            },
          }),
          Object.defineProperty(u.prototype, "destroyed", {
            enumerable: !1,
            get: function () {
              return (
                void 0 !== this._readableState &&
                void 0 !== this._writableState &&
                this._readableState.destroyed &&
                this._writableState.destroyed
              );
            },
            set: function (t) {
              void 0 !== this._readableState &&
                void 0 !== this._writableState &&
                ((this._readableState.destroyed = t),
                (this._writableState.destroyed = t));
            },
          });
      },
      2366: (t, e, n) => {
        "use strict";
        t.exports = o;
        var i = n(4473);
        function o(t) {
          if (!(this instanceof o)) return new o(t);
          i.call(this, t);
        }
        n(5717)(o, i),
          (o.prototype._transform = function (t, e, n) {
            n(null, t);
          });
      },
      6577: (t, e, n) => {
        "use strict";
        var i;
        (t.exports = N), (N.ReadableState = _), n(7187).EventEmitter;
        var o,
          r = function (t, e) {
            return t.listeners(e).length;
          },
          s = n(3194),
          a = n(8764).Buffer,
          l = n.g.Uint8Array || function () {},
          u = n(964);
        o = u && u.debuglog ? u.debuglog("stream") : function () {};
        var p,
          c,
          d,
          h = n(9686),
          f = n(1029),
          g = n(94).getHighWaterMark,
          m = n(8106).q,
          y = m.ERR_INVALID_ARG_TYPE,
          v = m.ERR_STREAM_PUSH_AFTER_EOF,
          b = m.ERR_METHOD_NOT_IMPLEMENTED,
          S = m.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
        n(5717)(N, s);
        var w = f.errorOrDestroy,
          O = ["error", "close", "destroy", "pause", "resume"];
        function _(t, e, o) {
          (i = i || n(8656)),
            (t = t || {}),
            "boolean" != typeof o && (o = e instanceof i),
            (this.objectMode = !!t.objectMode),
            o && (this.objectMode = this.objectMode || !!t.readableObjectMode),
            (this.highWaterMark = g(this, t, "readableHighWaterMark", o)),
            (this.buffer = new h()),
            (this.length = 0),
            (this.pipes = null),
            (this.pipesCount = 0),
            (this.flowing = null),
            (this.ended = !1),
            (this.endEmitted = !1),
            (this.reading = !1),
            (this.sync = !0),
            (this.needReadable = !1),
            (this.emittedReadable = !1),
            (this.readableListening = !1),
            (this.resumeScheduled = !1),
            (this.paused = !0),
            (this.emitClose = !1 !== t.emitClose),
            (this.autoDestroy = !!t.autoDestroy),
            (this.destroyed = !1),
            (this.defaultEncoding = t.defaultEncoding || "utf8"),
            (this.awaitDrain = 0),
            (this.readingMore = !1),
            (this.decoder = null),
            (this.encoding = null),
            t.encoding &&
              (p || (p = n(2553).s),
              (this.decoder = new p(t.encoding)),
              (this.encoding = t.encoding));
        }
        function N(t) {
          if (((i = i || n(8656)), !(this instanceof N))) return new N(t);
          var e = this instanceof i;
          (this._readableState = new _(t, this, e)),
            (this.readable = !0),
            t &&
              ("function" == typeof t.read && (this._read = t.read),
              "function" == typeof t.destroy && (this._destroy = t.destroy)),
            s.call(this);
        }
        function C(t, e, n, i, r) {
          o("readableAddChunk", e);
          var s,
            u = t._readableState;
          if (null === e)
            (u.reading = !1),
              (function (t, e) {
                if ((o("onEofChunk"), !e.ended)) {
                  if (e.decoder) {
                    var n = e.decoder.end();
                    n &&
                      n.length &&
                      (e.buffer.push(n),
                      (e.length += e.objectMode ? 1 : n.length));
                  }
                  (e.ended = !0),
                    e.sync
                      ? E(t)
                      : ((e.needReadable = !1),
                        e.emittedReadable || ((e.emittedReadable = !0), T(t)));
                }
              })(t, u);
          else if (
            (r ||
              (s = (function (t, e) {
                var n, i;
                return (
                  (i = e),
                  a.isBuffer(i) ||
                    i instanceof l ||
                    "string" == typeof e ||
                    void 0 === e ||
                    t.objectMode ||
                    (n = new y("chunk", ["string", "Buffer", "Uint8Array"], e)),
                  n
                );
              })(u, e)),
            s)
          )
            w(t, s);
          else if (u.objectMode || (e && e.length > 0))
            if (
              ("string" == typeof e ||
                u.objectMode ||
                Object.getPrototypeOf(e) === a.prototype ||
                (e = (function (t) {
                  return a.from(t);
                })(e)),
              i)
            )
              u.endEmitted ? w(t, new S()) : I(t, u, e, !0);
            else if (u.ended) w(t, new v());
            else {
              if (u.destroyed) return !1;
              (u.reading = !1),
                u.decoder && !n
                  ? ((e = u.decoder.write(e)),
                    u.objectMode || 0 !== e.length ? I(t, u, e, !1) : D(t, u))
                  : I(t, u, e, !1);
            }
          else i || ((u.reading = !1), D(t, u));
          return !u.ended && (u.length < u.highWaterMark || 0 === u.length);
        }
        function I(t, e, n, i) {
          e.flowing && 0 === e.length && !e.sync
            ? ((e.awaitDrain = 0), t.emit("data", n))
            : ((e.length += e.objectMode ? 1 : n.length),
              i ? e.buffer.unshift(n) : e.buffer.push(n),
              e.needReadable && E(t)),
            D(t, e);
        }
        Object.defineProperty(N.prototype, "destroyed", {
          enumerable: !1,
          get: function () {
            return (
              void 0 !== this._readableState && this._readableState.destroyed
            );
          },
          set: function (t) {
            this._readableState && (this._readableState.destroyed = t);
          },
        }),
          (N.prototype.destroy = f.destroy),
          (N.prototype._undestroy = f.undestroy),
          (N.prototype._destroy = function (t, e) {
            e(t);
          }),
          (N.prototype.push = function (t, e) {
            var n,
              i = this._readableState;
            return (
              i.objectMode
                ? (n = !0)
                : "string" == typeof t &&
                  ((e = e || i.defaultEncoding) !== i.encoding &&
                    ((t = a.from(t, e)), (e = "")),
                  (n = !0)),
              C(this, t, e, !1, n)
            );
          }),
          (N.prototype.unshift = function (t) {
            return C(this, t, null, !0, !1);
          }),
          (N.prototype.isPaused = function () {
            return !1 === this._readableState.flowing;
          }),
          (N.prototype.setEncoding = function (t) {
            p || (p = n(2553).s);
            var e = new p(t);
            (this._readableState.decoder = e),
              (this._readableState.encoding =
                this._readableState.decoder.encoding);
            for (var i = this._readableState.buffer.head, o = ""; null !== i; )
              (o += e.write(i.data)), (i = i.next);
            return (
              this._readableState.buffer.clear(),
              "" !== o && this._readableState.buffer.push(o),
              (this._readableState.length = o.length),
              this
            );
          });
        var x = 1073741824;
        function P(t, e) {
          return t <= 0 || (0 === e.length && e.ended)
            ? 0
            : e.objectMode
            ? 1
            : t != t
            ? e.flowing && e.length
              ? e.buffer.head.data.length
              : e.length
            : (t > e.highWaterMark &&
                (e.highWaterMark = (function (t) {
                  return (
                    t >= x
                      ? (t = x)
                      : (t--,
                        (t |= t >>> 1),
                        (t |= t >>> 2),
                        (t |= t >>> 4),
                        (t |= t >>> 8),
                        (t |= t >>> 16),
                        t++),
                    t
                  );
                })(t)),
              t <= e.length
                ? t
                : e.ended
                ? e.length
                : ((e.needReadable = !0), 0));
        }
        function E(t) {
          var e = t._readableState;
          o("emitReadable", e.needReadable, e.emittedReadable),
            (e.needReadable = !1),
            e.emittedReadable ||
              (o("emitReadable", e.flowing),
              (e.emittedReadable = !0),
              process.nextTick(T, t));
        }
        function T(t) {
          var e = t._readableState;
          o("emitReadable_", e.destroyed, e.length, e.ended),
            e.destroyed ||
              (!e.length && !e.ended) ||
              (t.emit("readable"), (e.emittedReadable = !1)),
            (e.needReadable =
              !e.flowing && !e.ended && e.length <= e.highWaterMark),
            M(t);
        }
        function D(t, e) {
          e.readingMore || ((e.readingMore = !0), process.nextTick(k, t, e));
        }
        function k(t, e) {
          for (
            ;
            !e.reading &&
            !e.ended &&
            (e.length < e.highWaterMark || (e.flowing && 0 === e.length));

          ) {
            var n = e.length;
            if ((o("maybeReadMore read 0"), t.read(0), n === e.length)) break;
          }
          e.readingMore = !1;
        }
        function R(t) {
          var e = t._readableState;
          (e.readableListening = t.listenerCount("readable") > 0),
            e.resumeScheduled && !e.paused
              ? (e.flowing = !0)
              : t.listenerCount("data") > 0 && t.resume();
        }
        function A(t) {
          o("readable nexttick read 0"), t.read(0);
        }
        function j(t, e) {
          o("resume", e.reading),
            e.reading || t.read(0),
            (e.resumeScheduled = !1),
            t.emit("resume"),
            M(t),
            e.flowing && !e.reading && t.read(0);
        }
        function M(t) {
          var e = t._readableState;
          for (o("flow", e.flowing); e.flowing && null !== t.read(); );
        }
        function F(t, e) {
          return 0 === e.length
            ? null
            : (e.objectMode
                ? (n = e.buffer.shift())
                : !t || t >= e.length
                ? ((n = e.decoder
                    ? e.buffer.join("")
                    : 1 === e.buffer.length
                    ? e.buffer.first()
                    : e.buffer.concat(e.length)),
                  e.buffer.clear())
                : (n = e.buffer.consume(t, e.decoder)),
              n);
          var n;
        }
        function V(t) {
          var e = t._readableState;
          o("endReadable", e.endEmitted),
            e.endEmitted || ((e.ended = !0), process.nextTick(L, e, t));
        }
        function L(t, e) {
          if (
            (o("endReadableNT", t.endEmitted, t.length),
            !t.endEmitted &&
              0 === t.length &&
              ((t.endEmitted = !0),
              (e.readable = !1),
              e.emit("end"),
              t.autoDestroy))
          ) {
            var n = e._writableState;
            (!n || (n.autoDestroy && n.finished)) && e.destroy();
          }
        }
        function U(t, e) {
          for (var n = 0, i = t.length; n < i; n++) if (t[n] === e) return n;
          return -1;
        }
        (N.prototype.read = function (t) {
          o("read", t), (t = parseInt(t, 10));
          var e = this._readableState,
            n = t;
          if (
            (0 !== t && (e.emittedReadable = !1),
            0 === t &&
              e.needReadable &&
              ((0 !== e.highWaterMark
                ? e.length >= e.highWaterMark
                : e.length > 0) ||
                e.ended))
          )
            return (
              o("read: emitReadable", e.length, e.ended),
              0 === e.length && e.ended ? V(this) : E(this),
              null
            );
          if (0 === (t = P(t, e)) && e.ended)
            return 0 === e.length && V(this), null;
          var i,
            r = e.needReadable;
          return (
            o("need readable", r),
            (0 === e.length || e.length - t < e.highWaterMark) &&
              o("length less than watermark", (r = !0)),
            e.ended || e.reading
              ? o("reading or ended", (r = !1))
              : r &&
                (o("do read"),
                (e.reading = !0),
                (e.sync = !0),
                0 === e.length && (e.needReadable = !0),
                this._read(e.highWaterMark),
                (e.sync = !1),
                e.reading || (t = P(n, e))),
            null === (i = t > 0 ? F(t, e) : null)
              ? ((e.needReadable = e.length <= e.highWaterMark), (t = 0))
              : ((e.length -= t), (e.awaitDrain = 0)),
            0 === e.length &&
              (e.ended || (e.needReadable = !0), n !== t && e.ended && V(this)),
            null !== i && this.emit("data", i),
            i
          );
        }),
          (N.prototype._read = function (t) {
            w(this, new b("_read()"));
          }),
          (N.prototype.pipe = function (t, e) {
            var n = this,
              i = this._readableState;
            switch (i.pipesCount) {
              case 0:
                i.pipes = t;
                break;
              case 1:
                i.pipes = [i.pipes, t];
                break;
              default:
                i.pipes.push(t);
            }
            (i.pipesCount += 1), o("pipe count=%d opts=%j", i.pipesCount, e);
            var s =
              (e && !1 === e.end) ||
              t === process.stdout ||
              t === process.stderr
                ? f
                : a;
            function a() {
              o("onend"), t.end();
            }
            i.endEmitted ? process.nextTick(s) : n.once("end", s),
              t.on("unpipe", function e(r, s) {
                o("onunpipe"),
                  r === n &&
                    s &&
                    !1 === s.hasUnpiped &&
                    ((s.hasUnpiped = !0),
                    o("cleanup"),
                    t.removeListener("close", d),
                    t.removeListener("finish", h),
                    t.removeListener("drain", l),
                    t.removeListener("error", c),
                    t.removeListener("unpipe", e),
                    n.removeListener("end", a),
                    n.removeListener("end", f),
                    n.removeListener("data", p),
                    (u = !0),
                    !i.awaitDrain ||
                      (t._writableState && !t._writableState.needDrain) ||
                      l());
              });
            var l = (function (t) {
              return function () {
                var e = t._readableState;
                o("pipeOnDrain", e.awaitDrain),
                  e.awaitDrain && e.awaitDrain--,
                  0 === e.awaitDrain &&
                    r(t, "data") &&
                    ((e.flowing = !0), M(t));
              };
            })(n);
            t.on("drain", l);
            var u = !1;
            function p(e) {
              o("ondata");
              var r = t.write(e);
              o("dest.write", r),
                !1 === r &&
                  (((1 === i.pipesCount && i.pipes === t) ||
                    (i.pipesCount > 1 && -1 !== U(i.pipes, t))) &&
                    !u &&
                    (o("false write response, pause", i.awaitDrain),
                    i.awaitDrain++),
                  n.pause());
            }
            function c(e) {
              o("onerror", e),
                f(),
                t.removeListener("error", c),
                0 === r(t, "error") && w(t, e);
            }
            function d() {
              t.removeListener("finish", h), f();
            }
            function h() {
              o("onfinish"), t.removeListener("close", d), f();
            }
            function f() {
              o("unpipe"), n.unpipe(t);
            }
            return (
              n.on("data", p),
              (function (t, e, n) {
                if ("function" == typeof t.prependListener)
                  return t.prependListener(e, n);
                t._events && t._events.error
                  ? Array.isArray(t._events.error)
                    ? t._events.error.unshift(n)
                    : (t._events.error = [n, t._events.error])
                  : t.on(e, n);
              })(t, "error", c),
              t.once("close", d),
              t.once("finish", h),
              t.emit("pipe", n),
              i.flowing || (o("pipe resume"), n.resume()),
              t
            );
          }),
          (N.prototype.unpipe = function (t) {
            var e = this._readableState,
              n = { hasUnpiped: !1 };
            if (0 === e.pipesCount) return this;
            if (1 === e.pipesCount)
              return (
                (t && t !== e.pipes) ||
                  (t || (t = e.pipes),
                  (e.pipes = null),
                  (e.pipesCount = 0),
                  (e.flowing = !1),
                  t && t.emit("unpipe", this, n)),
                this
              );
            if (!t) {
              var i = e.pipes,
                o = e.pipesCount;
              (e.pipes = null), (e.pipesCount = 0), (e.flowing = !1);
              for (var r = 0; r < o; r++)
                i[r].emit("unpipe", this, { hasUnpiped: !1 });
              return this;
            }
            var s = U(e.pipes, t);
            return (
              -1 === s ||
                (e.pipes.splice(s, 1),
                (e.pipesCount -= 1),
                1 === e.pipesCount && (e.pipes = e.pipes[0]),
                t.emit("unpipe", this, n)),
              this
            );
          }),
          (N.prototype.on = function (t, e) {
            var n = s.prototype.on.call(this, t, e),
              i = this._readableState;
            return (
              "data" === t
                ? ((i.readableListening = this.listenerCount("readable") > 0),
                  !1 !== i.flowing && this.resume())
                : "readable" === t &&
                  (i.endEmitted ||
                    i.readableListening ||
                    ((i.readableListening = i.needReadable = !0),
                    (i.flowing = !1),
                    (i.emittedReadable = !1),
                    o("on readable", i.length, i.reading),
                    i.length
                      ? E(this)
                      : i.reading || process.nextTick(A, this))),
              n
            );
          }),
          (N.prototype.addListener = N.prototype.on),
          (N.prototype.removeListener = function (t, e) {
            var n = s.prototype.removeListener.call(this, t, e);
            return "readable" === t && process.nextTick(R, this), n;
          }),
          (N.prototype.removeAllListeners = function (t) {
            var e = s.prototype.removeAllListeners.apply(this, arguments);
            return (
              ("readable" !== t && void 0 !== t) || process.nextTick(R, this), e
            );
          }),
          (N.prototype.resume = function () {
            var t = this._readableState;
            return (
              t.flowing ||
                (o("resume"),
                (t.flowing = !t.readableListening),
                (function (t, e) {
                  e.resumeScheduled ||
                    ((e.resumeScheduled = !0), process.nextTick(j, t, e));
                })(this, t)),
              (t.paused = !1),
              this
            );
          }),
          (N.prototype.pause = function () {
            return (
              o("call pause flowing=%j", this._readableState.flowing),
              !1 !== this._readableState.flowing &&
                (o("pause"),
                (this._readableState.flowing = !1),
                this.emit("pause")),
              (this._readableState.paused = !0),
              this
            );
          }),
          (N.prototype.wrap = function (t) {
            var e = this,
              n = this._readableState,
              i = !1;
            for (var r in (t.on("end", function () {
              if ((o("wrapped end"), n.decoder && !n.ended)) {
                var t = n.decoder.end();
                t && t.length && e.push(t);
              }
              e.push(null);
            }),
            t.on("data", function (r) {
              o("wrapped data"),
                n.decoder && (r = n.decoder.write(r)),
                (n.objectMode && null == r) ||
                  ((n.objectMode || (r && r.length)) &&
                    (e.push(r) || ((i = !0), t.pause())));
            }),
            t))
              void 0 === this[r] &&
                "function" == typeof t[r] &&
                (this[r] = (function (e) {
                  return function () {
                    return t[e].apply(t, arguments);
                  };
                })(r));
            for (var s = 0; s < O.length; s++)
              t.on(O[s], this.emit.bind(this, O[s]));
            return (
              (this._read = function (e) {
                o("wrapped _read", e), i && ((i = !1), t.resume());
              }),
              this
            );
          }),
          "function" == typeof Symbol &&
            (N.prototype[Symbol.asyncIterator] = function () {
              return void 0 === c && (c = n(828)), c(this);
            }),
          Object.defineProperty(N.prototype, "readableHighWaterMark", {
            enumerable: !1,
            get: function () {
              return this._readableState.highWaterMark;
            },
          }),
          Object.defineProperty(N.prototype, "readableBuffer", {
            enumerable: !1,
            get: function () {
              return this._readableState && this._readableState.buffer;
            },
          }),
          Object.defineProperty(N.prototype, "readableFlowing", {
            enumerable: !1,
            get: function () {
              return this._readableState.flowing;
            },
            set: function (t) {
              this._readableState && (this._readableState.flowing = t);
            },
          }),
          (N._fromList = F),
          Object.defineProperty(N.prototype, "readableLength", {
            enumerable: !1,
            get: function () {
              return this._readableState.length;
            },
          }),
          "function" == typeof Symbol &&
            (N.from = function (t, e) {
              return void 0 === d && (d = n(1265)), d(N, t, e);
            });
      },
      4473: (t, e, n) => {
        "use strict";
        t.exports = p;
        var i = n(8106).q,
          o = i.ERR_METHOD_NOT_IMPLEMENTED,
          r = i.ERR_MULTIPLE_CALLBACK,
          s = i.ERR_TRANSFORM_ALREADY_TRANSFORMING,
          a = i.ERR_TRANSFORM_WITH_LENGTH_0,
          l = n(8656);
        function u(t, e) {
          var n = this._transformState;
          n.transforming = !1;
          var i = n.writecb;
          if (null === i) return this.emit("error", new r());
          (n.writechunk = null),
            (n.writecb = null),
            null != e && this.push(e),
            i(t);
          var o = this._readableState;
          (o.reading = !1),
            (o.needReadable || o.length < o.highWaterMark) &&
              this._read(o.highWaterMark);
        }
        function p(t) {
          if (!(this instanceof p)) return new p(t);
          l.call(this, t),
            (this._transformState = {
              afterTransform: u.bind(this),
              needTransform: !1,
              transforming: !1,
              writecb: null,
              writechunk: null,
              writeencoding: null,
            }),
            (this._readableState.needReadable = !0),
            (this._readableState.sync = !1),
            t &&
              ("function" == typeof t.transform &&
                (this._transform = t.transform),
              "function" == typeof t.flush && (this._flush = t.flush)),
            this.on("prefinish", c);
        }
        function c() {
          var t = this;
          "function" != typeof this._flush || this._readableState.destroyed
            ? d(this, null, null)
            : this._flush(function (e, n) {
                d(t, e, n);
              });
        }
        function d(t, e, n) {
          if (e) return t.emit("error", e);
          if ((null != n && t.push(n), t._writableState.length)) throw new a();
          if (t._transformState.transforming) throw new s();
          return t.push(null);
        }
        n(5717)(p, l),
          (p.prototype.push = function (t, e) {
            return (
              (this._transformState.needTransform = !1),
              l.prototype.push.call(this, t, e)
            );
          }),
          (p.prototype._transform = function (t, e, n) {
            n(new o("_transform()"));
          }),
          (p.prototype._write = function (t, e, n) {
            var i = this._transformState;
            if (
              ((i.writecb = n),
              (i.writechunk = t),
              (i.writeencoding = e),
              !i.transforming)
            ) {
              var o = this._readableState;
              (i.needTransform ||
                o.needReadable ||
                o.length < o.highWaterMark) &&
                this._read(o.highWaterMark);
            }
          }),
          (p.prototype._read = function (t) {
            var e = this._transformState;
            null === e.writechunk || e.transforming
              ? (e.needTransform = !0)
              : ((e.transforming = !0),
                this._transform(
                  e.writechunk,
                  e.writeencoding,
                  e.afterTransform
                ));
          }),
          (p.prototype._destroy = function (t, e) {
            l.prototype._destroy.call(this, t, function (t) {
              e(t);
            });
          });
      },
      323: (t, e, n) => {
        "use strict";
        function i(t) {
          var e = this;
          (this.next = null),
            (this.entry = null),
            (this.finish = function () {
              !(function (t, e, n) {
                var i = t.entry;
                for (t.entry = null; i; ) {
                  var o = i.callback;
                  e.pendingcb--, o(undefined), (i = i.next);
                }
                e.corkedRequestsFree.next = t;
              })(e, t);
            });
        }
        var o;
        (t.exports = N), (N.WritableState = _);
        var r,
          s = { deprecate: n(4927) },
          a = n(3194),
          l = n(8764).Buffer,
          u = n.g.Uint8Array || function () {},
          p = n(1029),
          c = n(94).getHighWaterMark,
          d = n(8106).q,
          h = d.ERR_INVALID_ARG_TYPE,
          f = d.ERR_METHOD_NOT_IMPLEMENTED,
          g = d.ERR_MULTIPLE_CALLBACK,
          m = d.ERR_STREAM_CANNOT_PIPE,
          y = d.ERR_STREAM_DESTROYED,
          v = d.ERR_STREAM_NULL_VALUES,
          b = d.ERR_STREAM_WRITE_AFTER_END,
          S = d.ERR_UNKNOWN_ENCODING,
          w = p.errorOrDestroy;
        function O() {}
        function _(t, e, r) {
          (o = o || n(8656)),
            (t = t || {}),
            "boolean" != typeof r && (r = e instanceof o),
            (this.objectMode = !!t.objectMode),
            r && (this.objectMode = this.objectMode || !!t.writableObjectMode),
            (this.highWaterMark = c(this, t, "writableHighWaterMark", r)),
            (this.finalCalled = !1),
            (this.needDrain = !1),
            (this.ending = !1),
            (this.ended = !1),
            (this.finished = !1),
            (this.destroyed = !1);
          var s = !1 === t.decodeStrings;
          (this.decodeStrings = !s),
            (this.defaultEncoding = t.defaultEncoding || "utf8"),
            (this.length = 0),
            (this.writing = !1),
            (this.corked = 0),
            (this.sync = !0),
            (this.bufferProcessing = !1),
            (this.onwrite = function (t) {
              !(function (t, e) {
                var n = t._writableState,
                  i = n.sync,
                  o = n.writecb;
                if ("function" != typeof o) throw new g();
                if (
                  ((function (t) {
                    (t.writing = !1),
                      (t.writecb = null),
                      (t.length -= t.writelen),
                      (t.writelen = 0);
                  })(n),
                  e)
                )
                  !(function (t, e, n, i, o) {
                    --e.pendingcb,
                      n
                        ? (process.nextTick(o, i),
                          process.nextTick(T, t, e),
                          (t._writableState.errorEmitted = !0),
                          w(t, i))
                        : (o(i),
                          (t._writableState.errorEmitted = !0),
                          w(t, i),
                          T(t, e));
                  })(t, n, i, e, o);
                else {
                  var r = P(n) || t.destroyed;
                  r ||
                    n.corked ||
                    n.bufferProcessing ||
                    !n.bufferedRequest ||
                    x(t, n),
                    i ? process.nextTick(I, t, n, r, o) : I(t, n, r, o);
                }
              })(e, t);
            }),
            (this.writecb = null),
            (this.writelen = 0),
            (this.bufferedRequest = null),
            (this.lastBufferedRequest = null),
            (this.pendingcb = 0),
            (this.prefinished = !1),
            (this.errorEmitted = !1),
            (this.emitClose = !1 !== t.emitClose),
            (this.autoDestroy = !!t.autoDestroy),
            (this.bufferedRequestCount = 0),
            (this.corkedRequestsFree = new i(this));
        }
        function N(t) {
          var e = this instanceof (o = o || n(8656));
          if (!e && !r.call(N, this)) return new N(t);
          (this._writableState = new _(t, this, e)),
            (this.writable = !0),
            t &&
              ("function" == typeof t.write && (this._write = t.write),
              "function" == typeof t.writev && (this._writev = t.writev),
              "function" == typeof t.destroy && (this._destroy = t.destroy),
              "function" == typeof t.final && (this._final = t.final)),
            a.call(this);
        }
        function C(t, e, n, i, o, r, s) {
          (e.writelen = i),
            (e.writecb = s),
            (e.writing = !0),
            (e.sync = !0),
            e.destroyed
              ? e.onwrite(new y("write"))
              : n
              ? t._writev(o, e.onwrite)
              : t._write(o, r, e.onwrite),
            (e.sync = !1);
        }
        function I(t, e, n, i) {
          n ||
            (function (t, e) {
              0 === e.length &&
                e.needDrain &&
                ((e.needDrain = !1), t.emit("drain"));
            })(t, e),
            e.pendingcb--,
            i(),
            T(t, e);
        }
        function x(t, e) {
          e.bufferProcessing = !0;
          var n = e.bufferedRequest;
          if (t._writev && n && n.next) {
            var o = e.bufferedRequestCount,
              r = new Array(o),
              s = e.corkedRequestsFree;
            s.entry = n;
            for (var a = 0, l = !0; n; )
              (r[a] = n), n.isBuf || (l = !1), (n = n.next), (a += 1);
            (r.allBuffers = l),
              C(t, e, !0, e.length, r, "", s.finish),
              e.pendingcb++,
              (e.lastBufferedRequest = null),
              s.next
                ? ((e.corkedRequestsFree = s.next), (s.next = null))
                : (e.corkedRequestsFree = new i(e)),
              (e.bufferedRequestCount = 0);
          } else {
            for (; n; ) {
              var u = n.chunk,
                p = n.encoding,
                c = n.callback;
              if (
                (C(t, e, !1, e.objectMode ? 1 : u.length, u, p, c),
                (n = n.next),
                e.bufferedRequestCount--,
                e.writing)
              )
                break;
            }
            null === n && (e.lastBufferedRequest = null);
          }
          (e.bufferedRequest = n), (e.bufferProcessing = !1);
        }
        function P(t) {
          return (
            t.ending &&
            0 === t.length &&
            null === t.bufferedRequest &&
            !t.finished &&
            !t.writing
          );
        }
        function E(t, e) {
          t._final(function (n) {
            e.pendingcb--,
              n && w(t, n),
              (e.prefinished = !0),
              t.emit("prefinish"),
              T(t, e);
          });
        }
        function T(t, e) {
          var n = P(e);
          if (
            n &&
            ((function (t, e) {
              e.prefinished ||
                e.finalCalled ||
                ("function" != typeof t._final || e.destroyed
                  ? ((e.prefinished = !0), t.emit("prefinish"))
                  : (e.pendingcb++,
                    (e.finalCalled = !0),
                    process.nextTick(E, t, e)));
            })(t, e),
            0 === e.pendingcb &&
              ((e.finished = !0), t.emit("finish"), e.autoDestroy))
          ) {
            var i = t._readableState;
            (!i || (i.autoDestroy && i.endEmitted)) && t.destroy();
          }
          return n;
        }
        n(5717)(N, a),
          (_.prototype.getBuffer = function () {
            for (var t = this.bufferedRequest, e = []; t; )
              e.push(t), (t = t.next);
            return e;
          }),
          (function () {
            try {
              Object.defineProperty(_.prototype, "buffer", {
                get: s.deprecate(
                  function () {
                    return this.getBuffer();
                  },
                  "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.",
                  "DEP0003"
                ),
              });
            } catch (t) {}
          })(),
          "function" == typeof Symbol &&
          Symbol.hasInstance &&
          "function" == typeof Function.prototype[Symbol.hasInstance]
            ? ((r = Function.prototype[Symbol.hasInstance]),
              Object.defineProperty(N, Symbol.hasInstance, {
                value: function (t) {
                  return (
                    !!r.call(this, t) ||
                    (this === N && t && t._writableState instanceof _)
                  );
                },
              }))
            : (r = function (t) {
                return t instanceof this;
              }),
          (N.prototype.pipe = function () {
            w(this, new m());
          }),
          (N.prototype.write = function (t, e, n) {
            var i,
              o = this._writableState,
              r = !1,
              s = !o.objectMode && ((i = t), l.isBuffer(i) || i instanceof u);
            return (
              s &&
                !l.isBuffer(t) &&
                (t = (function (t) {
                  return l.from(t);
                })(t)),
              "function" == typeof e && ((n = e), (e = null)),
              s ? (e = "buffer") : e || (e = o.defaultEncoding),
              "function" != typeof n && (n = O),
              o.ending
                ? (function (t, e) {
                    var n = new b();
                    w(t, n), process.nextTick(e, n);
                  })(this, n)
                : (s ||
                    (function (t, e, n, i) {
                      var o;
                      return (
                        null === n
                          ? (o = new v())
                          : "string" == typeof n ||
                            e.objectMode ||
                            (o = new h("chunk", ["string", "Buffer"], n)),
                        !o || (w(t, o), process.nextTick(i, o), !1)
                      );
                    })(this, o, t, n)) &&
                  (o.pendingcb++,
                  (r = (function (t, e, n, i, o, r) {
                    if (!n) {
                      var s = (function (t, e, n) {
                        return (
                          t.objectMode ||
                            !1 === t.decodeStrings ||
                            "string" != typeof e ||
                            (e = l.from(e, n)),
                          e
                        );
                      })(e, i, o);
                      i !== s && ((n = !0), (o = "buffer"), (i = s));
                    }
                    var a = e.objectMode ? 1 : i.length;
                    e.length += a;
                    var u = e.length < e.highWaterMark;
                    if ((u || (e.needDrain = !0), e.writing || e.corked)) {
                      var p = e.lastBufferedRequest;
                      (e.lastBufferedRequest = {
                        chunk: i,
                        encoding: o,
                        isBuf: n,
                        callback: r,
                        next: null,
                      }),
                        p
                          ? (p.next = e.lastBufferedRequest)
                          : (e.bufferedRequest = e.lastBufferedRequest),
                        (e.bufferedRequestCount += 1);
                    } else C(t, e, !1, a, i, o, r);
                    return u;
                  })(this, o, s, t, e, n))),
              r
            );
          }),
          (N.prototype.cork = function () {
            this._writableState.corked++;
          }),
          (N.prototype.uncork = function () {
            var t = this._writableState;
            t.corked &&
              (t.corked--,
              t.writing ||
                t.corked ||
                t.bufferProcessing ||
                !t.bufferedRequest ||
                x(this, t));
          }),
          (N.prototype.setDefaultEncoding = function (t) {
            if (
              ("string" == typeof t && (t = t.toLowerCase()),
              !(
                [
                  "hex",
                  "utf8",
                  "utf-8",
                  "ascii",
                  "binary",
                  "base64",
                  "ucs2",
                  "ucs-2",
                  "utf16le",
                  "utf-16le",
                  "raw",
                ].indexOf((t + "").toLowerCase()) > -1
              ))
            )
              throw new S(t);
            return (this._writableState.defaultEncoding = t), this;
          }),
          Object.defineProperty(N.prototype, "writableBuffer", {
            enumerable: !1,
            get: function () {
              return this._writableState && this._writableState.getBuffer();
            },
          }),
          Object.defineProperty(N.prototype, "writableHighWaterMark", {
            enumerable: !1,
            get: function () {
              return this._writableState.highWaterMark;
            },
          }),
          (N.prototype._write = function (t, e, n) {
            n(new f("_write()"));
          }),
          (N.prototype._writev = null),
          (N.prototype.end = function (t, e, n) {
            var i = this._writableState;
            return (
              "function" == typeof t
                ? ((n = t), (t = null), (e = null))
                : "function" == typeof e && ((n = e), (e = null)),
              null != t && this.write(t, e),
              i.corked && ((i.corked = 1), this.uncork()),
              i.ending ||
                (function (t, e, n) {
                  (e.ending = !0),
                    T(t, e),
                    n &&
                      (e.finished ? process.nextTick(n) : t.once("finish", n)),
                    (e.ended = !0),
                    (t.writable = !1);
                })(this, i, n),
              this
            );
          }),
          Object.defineProperty(N.prototype, "writableLength", {
            enumerable: !1,
            get: function () {
              return this._writableState.length;
            },
          }),
          Object.defineProperty(N.prototype, "destroyed", {
            enumerable: !1,
            get: function () {
              return (
                void 0 !== this._writableState && this._writableState.destroyed
              );
            },
            set: function (t) {
              this._writableState && (this._writableState.destroyed = t);
            },
          }),
          (N.prototype.destroy = p.destroy),
          (N.prototype._undestroy = p.undestroy),
          (N.prototype._destroy = function (t, e) {
            e(t);
          });
      },
      828: (t, e, n) => {
        "use strict";
        var i;
        function o(t, e, n) {
          return (
            e in t
              ? Object.defineProperty(t, e, {
                  value: n,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (t[e] = n),
            t
          );
        }
        var r = n(1086),
          s = Symbol("lastResolve"),
          a = Symbol("lastReject"),
          l = Symbol("error"),
          u = Symbol("ended"),
          p = Symbol("lastPromise"),
          c = Symbol("handlePromise"),
          d = Symbol("stream");
        function h(t, e) {
          return { value: t, done: e };
        }
        function f(t) {
          var e = t[s];
          if (null !== e) {
            var n = t[d].read();
            null !== n &&
              ((t[p] = null), (t[s] = null), (t[a] = null), e(h(n, !1)));
          }
        }
        function g(t) {
          process.nextTick(f, t);
        }
        var m = Object.getPrototypeOf(function () {}),
          y = Object.setPrototypeOf(
            (o(
              (i = {
                get stream() {
                  return this[d];
                },
                next: function () {
                  var t = this,
                    e = this[l];
                  if (null !== e) return Promise.reject(e);
                  if (this[u]) return Promise.resolve(h(void 0, !0));
                  if (this[d].destroyed)
                    return new Promise(function (e, n) {
                      process.nextTick(function () {
                        t[l] ? n(t[l]) : e(h(void 0, !0));
                      });
                    });
                  var n,
                    i = this[p];
                  if (i)
                    n = new Promise(
                      (function (t, e) {
                        return function (n, i) {
                          t.then(function () {
                            e[u] ? n(h(void 0, !0)) : e[c](n, i);
                          }, i);
                        };
                      })(i, this)
                    );
                  else {
                    var o = this[d].read();
                    if (null !== o) return Promise.resolve(h(o, !1));
                    n = new Promise(this[c]);
                  }
                  return (this[p] = n), n;
                },
              }),
              Symbol.asyncIterator,
              function () {
                return this;
              }
            ),
            o(i, "return", function () {
              var t = this;
              return new Promise(function (e, n) {
                t[d].destroy(null, function (t) {
                  t ? n(t) : e(h(void 0, !0));
                });
              });
            }),
            i),
            m
          );
        t.exports = function (t) {
          var e,
            n = Object.create(
              y,
              (o((e = {}), d, { value: t, writable: !0 }),
              o(e, s, { value: null, writable: !0 }),
              o(e, a, { value: null, writable: !0 }),
              o(e, l, { value: null, writable: !0 }),
              o(e, u, { value: t._readableState.endEmitted, writable: !0 }),
              o(e, c, {
                value: function (t, e) {
                  var i = n[d].read();
                  i
                    ? ((n[p] = null), (n[s] = null), (n[a] = null), t(h(i, !1)))
                    : ((n[s] = t), (n[a] = e));
                },
                writable: !0,
              }),
              e)
            );
          return (
            (n[p] = null),
            r(t, function (t) {
              if (t && "ERR_STREAM_PREMATURE_CLOSE" !== t.code) {
                var e = n[a];
                return (
                  null !== e &&
                    ((n[p] = null), (n[s] = null), (n[a] = null), e(t)),
                  void (n[l] = t)
                );
              }
              var i = n[s];
              null !== i &&
                ((n[p] = null), (n[s] = null), (n[a] = null), i(h(void 0, !0))),
                (n[u] = !0);
            }),
            t.on("readable", g.bind(null, n)),
            n
          );
        };
      },
      9686: (t, e, n) => {
        "use strict";
        function i(t, e) {
          var n = Object.keys(t);
          if (Object.getOwnPropertySymbols) {
            var i = Object.getOwnPropertySymbols(t);
            e &&
              (i = i.filter(function (e) {
                return Object.getOwnPropertyDescriptor(t, e).enumerable;
              })),
              n.push.apply(n, i);
          }
          return n;
        }
        function o(t, e, n) {
          return (
            e in t
              ? Object.defineProperty(t, e, {
                  value: n,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (t[e] = n),
            t
          );
        }
        function r(t, e) {
          for (var n = 0; n < e.length; n++) {
            var i = e[n];
            (i.enumerable = i.enumerable || !1),
              (i.configurable = !0),
              "value" in i && (i.writable = !0),
              Object.defineProperty(t, i.key, i);
          }
        }
        var s = n(8764).Buffer,
          a = n(9862).inspect,
          l = (a && a.custom) || "inspect";
        t.exports = (function () {
          function t() {
            !(function (t, e) {
              if (!(t instanceof e))
                throw new TypeError("Cannot call a class as a function");
            })(this, t),
              (this.head = null),
              (this.tail = null),
              (this.length = 0);
          }
          var e, n;
          return (
            (e = t),
            (n = [
              {
                key: "push",
                value: function (t) {
                  var e = { data: t, next: null };
                  this.length > 0 ? (this.tail.next = e) : (this.head = e),
                    (this.tail = e),
                    ++this.length;
                },
              },
              {
                key: "unshift",
                value: function (t) {
                  var e = { data: t, next: this.head };
                  0 === this.length && (this.tail = e),
                    (this.head = e),
                    ++this.length;
                },
              },
              {
                key: "shift",
                value: function () {
                  if (0 !== this.length) {
                    var t = this.head.data;
                    return (
                      1 === this.length
                        ? (this.head = this.tail = null)
                        : (this.head = this.head.next),
                      --this.length,
                      t
                    );
                  }
                },
              },
              {
                key: "clear",
                value: function () {
                  (this.head = this.tail = null), (this.length = 0);
                },
              },
              {
                key: "join",
                value: function (t) {
                  if (0 === this.length) return "";
                  for (var e = this.head, n = "" + e.data; (e = e.next); )
                    n += t + e.data;
                  return n;
                },
              },
              {
                key: "concat",
                value: function (t) {
                  if (0 === this.length) return s.alloc(0);
                  for (
                    var e,
                      n,
                      i,
                      o = s.allocUnsafe(t >>> 0),
                      r = this.head,
                      a = 0;
                    r;

                  )
                    (e = r.data),
                      (n = o),
                      (i = a),
                      s.prototype.copy.call(e, n, i),
                      (a += r.data.length),
                      (r = r.next);
                  return o;
                },
              },
              {
                key: "consume",
                value: function (t, e) {
                  var n;
                  return (
                    t < this.head.data.length
                      ? ((n = this.head.data.slice(0, t)),
                        (this.head.data = this.head.data.slice(t)))
                      : (n =
                          t === this.head.data.length
                            ? this.shift()
                            : e
                            ? this._getString(t)
                            : this._getBuffer(t)),
                    n
                  );
                },
              },
              {
                key: "first",
                value: function () {
                  return this.head.data;
                },
              },
              {
                key: "_getString",
                value: function (t) {
                  var e = this.head,
                    n = 1,
                    i = e.data;
                  for (t -= i.length; (e = e.next); ) {
                    var o = e.data,
                      r = t > o.length ? o.length : t;
                    if (
                      (r === o.length ? (i += o) : (i += o.slice(0, t)),
                      0 == (t -= r))
                    ) {
                      r === o.length
                        ? (++n,
                          e.next
                            ? (this.head = e.next)
                            : (this.head = this.tail = null))
                        : ((this.head = e), (e.data = o.slice(r)));
                      break;
                    }
                    ++n;
                  }
                  return (this.length -= n), i;
                },
              },
              {
                key: "_getBuffer",
                value: function (t) {
                  var e = s.allocUnsafe(t),
                    n = this.head,
                    i = 1;
                  for (n.data.copy(e), t -= n.data.length; (n = n.next); ) {
                    var o = n.data,
                      r = t > o.length ? o.length : t;
                    if ((o.copy(e, e.length - t, 0, r), 0 == (t -= r))) {
                      r === o.length
                        ? (++i,
                          n.next
                            ? (this.head = n.next)
                            : (this.head = this.tail = null))
                        : ((this.head = n), (n.data = o.slice(r)));
                      break;
                    }
                    ++i;
                  }
                  return (this.length -= i), e;
                },
              },
              {
                key: l,
                value: function (t, e) {
                  return a(
                    this,
                    (function (t) {
                      for (var e = 1; e < arguments.length; e++) {
                        var n = null != arguments[e] ? arguments[e] : {};
                        e % 2
                          ? i(Object(n), !0).forEach(function (e) {
                              o(t, e, n[e]);
                            })
                          : Object.getOwnPropertyDescriptors
                          ? Object.defineProperties(
                              t,
                              Object.getOwnPropertyDescriptors(n)
                            )
                          : i(Object(n)).forEach(function (e) {
                              Object.defineProperty(
                                t,
                                e,
                                Object.getOwnPropertyDescriptor(n, e)
                              );
                            });
                      }
                      return t;
                    })({}, e, { depth: 0, customInspect: !1 })
                  );
                },
              },
            ]) && r(e.prototype, n),
            t
          );
        })();
      },
      1029: (t) => {
        "use strict";
        function e(t, e) {
          i(t, e), n(t);
        }
        function n(t) {
          (t._writableState && !t._writableState.emitClose) ||
            (t._readableState && !t._readableState.emitClose) ||
            t.emit("close");
        }
        function i(t, e) {
          t.emit("error", e);
        }
        t.exports = {
          destroy: function (t, o) {
            var r = this,
              s = this._readableState && this._readableState.destroyed,
              a = this._writableState && this._writableState.destroyed;
            return s || a
              ? (o
                  ? o(t)
                  : t &&
                    (this._writableState
                      ? this._writableState.errorEmitted ||
                        ((this._writableState.errorEmitted = !0),
                        process.nextTick(i, this, t))
                      : process.nextTick(i, this, t)),
                this)
              : (this._readableState && (this._readableState.destroyed = !0),
                this._writableState && (this._writableState.destroyed = !0),
                this._destroy(t || null, function (t) {
                  !o && t
                    ? r._writableState
                      ? r._writableState.errorEmitted
                        ? process.nextTick(n, r)
                        : ((r._writableState.errorEmitted = !0),
                          process.nextTick(e, r, t))
                      : process.nextTick(e, r, t)
                    : o
                    ? (process.nextTick(n, r), o(t))
                    : process.nextTick(n, r);
                }),
                this);
          },
          undestroy: function () {
            this._readableState &&
              ((this._readableState.destroyed = !1),
              (this._readableState.reading = !1),
              (this._readableState.ended = !1),
              (this._readableState.endEmitted = !1)),
              this._writableState &&
                ((this._writableState.destroyed = !1),
                (this._writableState.ended = !1),
                (this._writableState.ending = !1),
                (this._writableState.finalCalled = !1),
                (this._writableState.prefinished = !1),
                (this._writableState.finished = !1),
                (this._writableState.errorEmitted = !1));
          },
          errorOrDestroy: function (t, e) {
            var n = t._readableState,
              i = t._writableState;
            (n && n.autoDestroy) || (i && i.autoDestroy)
              ? t.destroy(e)
              : t.emit("error", e);
          },
        };
      },
      1086: (t, e, n) => {
        "use strict";
        var i = n(8106).q.ERR_STREAM_PREMATURE_CLOSE;
        function o() {}
        t.exports = function t(e, n, r) {
          if ("function" == typeof n) return t(e, null, n);
          n || (n = {}),
            (r = (function (t) {
              var e = !1;
              return function () {
                if (!e) {
                  e = !0;
                  for (
                    var n = arguments.length, i = new Array(n), o = 0;
                    o < n;
                    o++
                  )
                    i[o] = arguments[o];
                  t.apply(this, i);
                }
              };
            })(r || o));
          var s = n.readable || (!1 !== n.readable && e.readable),
            a = n.writable || (!1 !== n.writable && e.writable),
            l = function () {
              e.writable || p();
            },
            u = e._writableState && e._writableState.finished,
            p = function () {
              (a = !1), (u = !0), s || r.call(e);
            },
            c = e._readableState && e._readableState.endEmitted,
            d = function () {
              (s = !1), (c = !0), a || r.call(e);
            },
            h = function (t) {
              r.call(e, t);
            },
            f = function () {
              var t;
              return s && !c
                ? ((e._readableState && e._readableState.ended) ||
                    (t = new i()),
                  r.call(e, t))
                : a && !u
                ? ((e._writableState && e._writableState.ended) ||
                    (t = new i()),
                  r.call(e, t))
                : void 0;
            },
            g = function () {
              e.req.on("finish", p);
            };
          return (
            (function (t) {
              return t.setHeader && "function" == typeof t.abort;
            })(e)
              ? (e.on("complete", p),
                e.on("abort", f),
                e.req ? g() : e.on("request", g))
              : a && !e._writableState && (e.on("end", l), e.on("close", l)),
            e.on("end", d),
            e.on("finish", p),
            !1 !== n.error && e.on("error", h),
            e.on("close", f),
            function () {
              e.removeListener("complete", p),
                e.removeListener("abort", f),
                e.removeListener("request", g),
                e.req && e.req.removeListener("finish", p),
                e.removeListener("end", l),
                e.removeListener("close", l),
                e.removeListener("finish", p),
                e.removeListener("end", d),
                e.removeListener("error", h),
                e.removeListener("close", f);
            }
          );
        };
      },
      1265: (t) => {
        t.exports = function () {
          throw new Error("Readable.from is not available in the browser");
        };
      },
      6472: (t, e, n) => {
        "use strict";
        var i,
          o = n(8106).q,
          r = o.ERR_MISSING_ARGS,
          s = o.ERR_STREAM_DESTROYED;
        function a(t) {
          if (t) throw t;
        }
        function l(t, e, o, r) {
          r = (function (t) {
            var e = !1;
            return function () {
              e || ((e = !0), t.apply(void 0, arguments));
            };
          })(r);
          var a = !1;
          t.on("close", function () {
            a = !0;
          }),
            void 0 === i && (i = n(1086)),
            i(t, { readable: e, writable: o }, function (t) {
              if (t) return r(t);
              (a = !0), r();
            });
          var l = !1;
          return function (e) {
            if (!a && !l)
              return (
                (l = !0),
                (function (t) {
                  return t.setHeader && "function" == typeof t.abort;
                })(t)
                  ? t.abort()
                  : "function" == typeof t.destroy
                  ? t.destroy()
                  : void r(e || new s("pipe"))
              );
          };
        }
        function u(t) {
          t();
        }
        function p(t, e) {
          return t.pipe(e);
        }
        function c(t) {
          return t.length
            ? "function" != typeof t[t.length - 1]
              ? a
              : t.pop()
            : a;
        }
        t.exports = function () {
          for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++)
            e[n] = arguments[n];
          var i,
            o = c(e);
          if ((Array.isArray(e[0]) && (e = e[0]), e.length < 2))
            throw new r("streams");
          var s = e.map(function (t, n) {
            var r = n < e.length - 1;
            return l(t, r, n > 0, function (t) {
              i || (i = t), t && s.forEach(u), r || (s.forEach(u), o(i));
            });
          });
          return e.reduce(p);
        };
      },
      94: (t, e, n) => {
        "use strict";
        var i = n(8106).q.ERR_INVALID_OPT_VALUE;
        t.exports = {
          getHighWaterMark: function (t, e, n, o) {
            var r = (function (t, e, n) {
              return null != t.highWaterMark
                ? t.highWaterMark
                : e
                ? t[n]
                : null;
            })(e, o, n);
            if (null != r) {
              if (!isFinite(r) || Math.floor(r) !== r || r < 0)
                throw new i(o ? n : "highWaterMark", r);
              return Math.floor(r);
            }
            return t.objectMode ? 16 : 16384;
          },
        };
      },
      3194: (t, e, n) => {
        t.exports = n(7187).EventEmitter;
      },
      2553: (t, e, n) => {
        "use strict";
        var i = n(9509).Buffer,
          o =
            i.isEncoding ||
            function (t) {
              switch ((t = "" + t) && t.toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "binary":
                case "base64":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                case "raw":
                  return !0;
                default:
                  return !1;
              }
            };
        function r(t) {
          var e;
          switch (
            ((this.encoding = (function (t) {
              var e = (function (t) {
                if (!t) return "utf8";
                for (var e; ; )
                  switch (t) {
                    case "utf8":
                    case "utf-8":
                      return "utf8";
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                      return "utf16le";
                    case "latin1":
                    case "binary":
                      return "latin1";
                    case "base64":
                    case "ascii":
                    case "hex":
                      return t;
                    default:
                      if (e) return;
                      (t = ("" + t).toLowerCase()), (e = !0);
                  }
              })(t);
              if ("string" != typeof e && (i.isEncoding === o || !o(t)))
                throw new Error("Unknown encoding: " + t);
              return e || t;
            })(t)),
            this.encoding)
          ) {
            case "utf16le":
              (this.text = l), (this.end = u), (e = 4);
              break;
            case "utf8":
              (this.fillLast = a), (e = 4);
              break;
            case "base64":
              (this.text = p), (this.end = c), (e = 3);
              break;
            default:
              return (this.write = d), void (this.end = h);
          }
          (this.lastNeed = 0),
            (this.lastTotal = 0),
            (this.lastChar = i.allocUnsafe(e));
        }
        function s(t) {
          return t <= 127
            ? 0
            : t >> 5 == 6
            ? 2
            : t >> 4 == 14
            ? 3
            : t >> 3 == 30
            ? 4
            : t >> 6 == 2
            ? -1
            : -2;
        }
        function a(t) {
          var e = this.lastTotal - this.lastNeed,
            n = (function (t, e, n) {
              if (128 != (192 & e[0])) return (t.lastNeed = 0), "�";
              if (t.lastNeed > 1 && e.length > 1) {
                if (128 != (192 & e[1])) return (t.lastNeed = 1), "�";
                if (t.lastNeed > 2 && e.length > 2 && 128 != (192 & e[2]))
                  return (t.lastNeed = 2), "�";
              }
            })(this, t);
          return void 0 !== n
            ? n
            : this.lastNeed <= t.length
            ? (t.copy(this.lastChar, e, 0, this.lastNeed),
              this.lastChar.toString(this.encoding, 0, this.lastTotal))
            : (t.copy(this.lastChar, e, 0, t.length),
              void (this.lastNeed -= t.length));
        }
        function l(t, e) {
          if ((t.length - e) % 2 == 0) {
            var n = t.toString("utf16le", e);
            if (n) {
              var i = n.charCodeAt(n.length - 1);
              if (i >= 55296 && i <= 56319)
                return (
                  (this.lastNeed = 2),
                  (this.lastTotal = 4),
                  (this.lastChar[0] = t[t.length - 2]),
                  (this.lastChar[1] = t[t.length - 1]),
                  n.slice(0, -1)
                );
            }
            return n;
          }
          return (
            (this.lastNeed = 1),
            (this.lastTotal = 2),
            (this.lastChar[0] = t[t.length - 1]),
            t.toString("utf16le", e, t.length - 1)
          );
        }
        function u(t) {
          var e = t && t.length ? this.write(t) : "";
          if (this.lastNeed) {
            var n = this.lastTotal - this.lastNeed;
            return e + this.lastChar.toString("utf16le", 0, n);
          }
          return e;
        }
        function p(t, e) {
          var n = (t.length - e) % 3;
          return 0 === n
            ? t.toString("base64", e)
            : ((this.lastNeed = 3 - n),
              (this.lastTotal = 3),
              1 === n
                ? (this.lastChar[0] = t[t.length - 1])
                : ((this.lastChar[0] = t[t.length - 2]),
                  (this.lastChar[1] = t[t.length - 1])),
              t.toString("base64", e, t.length - n));
        }
        function c(t) {
          var e = t && t.length ? this.write(t) : "";
          return this.lastNeed
            ? e + this.lastChar.toString("base64", 0, 3 - this.lastNeed)
            : e;
        }
        function d(t) {
          return t.toString(this.encoding);
        }
        function h(t) {
          return t && t.length ? this.write(t) : "";
        }
        (e.s = r),
          (r.prototype.write = function (t) {
            if (0 === t.length) return "";
            var e, n;
            if (this.lastNeed) {
              if (void 0 === (e = this.fillLast(t))) return "";
              (n = this.lastNeed), (this.lastNeed = 0);
            } else n = 0;
            return n < t.length
              ? e
                ? e + this.text(t, n)
                : this.text(t, n)
              : e || "";
          }),
          (r.prototype.end = function (t) {
            var e = t && t.length ? this.write(t) : "";
            return this.lastNeed ? e + "�" : e;
          }),
          (r.prototype.text = function (t, e) {
            var n = (function (t, e, n) {
              var i = e.length - 1;
              if (i < n) return 0;
              var o = s(e[i]);
              return o >= 0
                ? (o > 0 && (t.lastNeed = o - 1), o)
                : --i < n || -2 === o
                ? 0
                : (o = s(e[i])) >= 0
                ? (o > 0 && (t.lastNeed = o - 2), o)
                : --i < n || -2 === o
                ? 0
                : (o = s(e[i])) >= 0
                ? (o > 0 && (2 === o ? (o = 0) : (t.lastNeed = o - 3)), o)
                : 0;
            })(this, t, e);
            if (!this.lastNeed) return t.toString("utf8", e);
            this.lastTotal = n;
            var i = t.length - (n - this.lastNeed);
            return t.copy(this.lastChar, 0, i), t.toString("utf8", e, i);
          }),
          (r.prototype.fillLast = function (t) {
            if (this.lastNeed <= t.length)
              return (
                t.copy(
                  this.lastChar,
                  this.lastTotal - this.lastNeed,
                  0,
                  this.lastNeed
                ),
                this.lastChar.toString(this.encoding, 0, this.lastTotal)
              );
            t.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, t.length),
              (this.lastNeed -= t.length);
          });
      },
      3379: (t, e, n) => {
        "use strict";
        var i,
          o = (function () {
            var t = {};
            return function (e) {
              if (void 0 === t[e]) {
                var n = document.querySelector(e);
                if (
                  window.HTMLIFrameElement &&
                  n instanceof window.HTMLIFrameElement
                )
                  try {
                    n = n.contentDocument.head;
                  } catch (t) {
                    n = null;
                  }
                t[e] = n;
              }
              return t[e];
            };
          })(),
          r = [];
        function s(t) {
          for (var e = -1, n = 0; n < r.length; n++)
            if (r[n].identifier === t) {
              e = n;
              break;
            }
          return e;
        }
        function a(t, e) {
          for (var n = {}, i = [], o = 0; o < t.length; o++) {
            var a = t[o],
              l = e.base ? a[0] + e.base : a[0],
              u = n[l] || 0,
              p = "".concat(l, " ").concat(u);
            n[l] = u + 1;
            var c = s(p),
              d = { css: a[1], media: a[2], sourceMap: a[3] };
            -1 !== c
              ? (r[c].references++, r[c].updater(d))
              : r.push({ identifier: p, updater: g(d, e), references: 1 }),
              i.push(p);
          }
          return i;
        }
        function l(t) {
          var e = document.createElement("style"),
            i = t.attributes || {};
          if (void 0 === i.nonce) {
            var r = n.nc;
            r && (i.nonce = r);
          }
          if (
            (Object.keys(i).forEach(function (t) {
              e.setAttribute(t, i[t]);
            }),
            "function" == typeof t.insert)
          )
            t.insert(e);
          else {
            var s = o(t.insert || "head");
            if (!s)
              throw new Error(
                "Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid."
              );
            s.appendChild(e);
          }
          return e;
        }
        var u,
          p =
            ((u = []),
            function (t, e) {
              return (u[t] = e), u.filter(Boolean).join("\n");
            });
        function c(t, e, n, i) {
          var o = n
            ? ""
            : i.media
            ? "@media ".concat(i.media, " {").concat(i.css, "}")
            : i.css;
          if (t.styleSheet) t.styleSheet.cssText = p(e, o);
          else {
            var r = document.createTextNode(o),
              s = t.childNodes;
            s[e] && t.removeChild(s[e]),
              s.length ? t.insertBefore(r, s[e]) : t.appendChild(r);
          }
        }
        function d(t, e, n) {
          var i = n.css,
            o = n.media,
            r = n.sourceMap;
          if (
            (o ? t.setAttribute("media", o) : t.removeAttribute("media"),
            r &&
              "undefined" != typeof btoa &&
              (i +=
                "\n/*# sourceMappingURL=data:application/json;base64,".concat(
                  btoa(unescape(encodeURIComponent(JSON.stringify(r)))),
                  " */"
                )),
            t.styleSheet)
          )
            t.styleSheet.cssText = i;
          else {
            for (; t.firstChild; ) t.removeChild(t.firstChild);
            t.appendChild(document.createTextNode(i));
          }
        }
        var h = null,
          f = 0;
        function g(t, e) {
          var n, i, o;
          if (e.singleton) {
            var r = f++;
            (n = h || (h = l(e))),
              (i = c.bind(null, n, r, !1)),
              (o = c.bind(null, n, r, !0));
          } else
            (n = l(e)),
              (i = d.bind(null, n, e)),
              (o = function () {
                !(function (t) {
                  if (null === t.parentNode) return !1;
                  t.parentNode.removeChild(t);
                })(n);
              });
          return (
            i(t),
            function (e) {
              if (e) {
                if (
                  e.css === t.css &&
                  e.media === t.media &&
                  e.sourceMap === t.sourceMap
                )
                  return;
                i((t = e));
              } else o();
            }
          );
        }
        t.exports = function (t, e) {
          (e = e || {}).singleton ||
            "boolean" == typeof e.singleton ||
            (e.singleton =
              (void 0 === i &&
                (i = Boolean(
                  window && document && document.all && !window.atob
                )),
              i));
          var n = a((t = t || []), e);
          return function (t) {
            if (
              ((t = t || []),
              "[object Array]" === Object.prototype.toString.call(t))
            ) {
              for (var i = 0; i < n.length; i++) {
                var o = s(n[i]);
                r[o].references--;
              }
              for (var l = a(t, e), u = 0; u < n.length; u++) {
                var p = s(n[u]);
                0 === r[p].references && (r[p].updater(), r.splice(p, 1));
              }
              n = l;
            }
          };
        };
      },
      5475: function (t, e, n) {
        var i =
            (void 0 !== n.g && n.g) ||
            ("undefined" != typeof self && self) ||
            window,
          o = Function.prototype.apply;
        function r(t, e) {
          (this._id = t), (this._clearFn = e);
        }
        (e.setTimeout = function () {
          return new r(o.call(setTimeout, i, arguments), clearTimeout);
        }),
          (e.setInterval = function () {
            return new r(o.call(setInterval, i, arguments), clearInterval);
          }),
          (e.clearTimeout = e.clearInterval =
            function (t) {
              t && t.close();
            }),
          (r.prototype.unref = r.prototype.ref = function () {}),
          (r.prototype.close = function () {
            this._clearFn.call(i, this._id);
          }),
          (e.enroll = function (t, e) {
            clearTimeout(t._idleTimeoutId), (t._idleTimeout = e);
          }),
          (e.unenroll = function (t) {
            clearTimeout(t._idleTimeoutId), (t._idleTimeout = -1);
          }),
          (e._unrefActive = e.active =
            function (t) {
              clearTimeout(t._idleTimeoutId);
              var e = t._idleTimeout;
              e >= 0 &&
                (t._idleTimeoutId = setTimeout(function () {
                  t._onTimeout && t._onTimeout();
                }, e));
            }),
          n(4889),
          (e.setImmediate =
            ("undefined" != typeof self && self.setImmediate) ||
            (void 0 !== n.g && n.g.setImmediate) ||
            (this && this.setImmediate)),
          (e.clearImmediate =
            ("undefined" != typeof self && self.clearImmediate) ||
            (void 0 !== n.g && n.g.clearImmediate) ||
            (this && this.clearImmediate));
      },
      4927: (t, e, n) => {
        function i(t) {
          try {
            if (!n.g.localStorage) return !1;
          } catch (t) {
            return !1;
          }
          var e = n.g.localStorage[t];
          return null != e && "true" === String(e).toLowerCase();
        }
        t.exports = function (t, e) {
          if (i("noDeprecation")) return t;
          var n = !1;
          return function () {
            if (!n) {
              if (i("throwDeprecation")) throw new Error(e);
              i("traceDeprecation") ? console.trace(e) : console.warn(e),
                (n = !0);
            }
            return t.apply(this, arguments);
          };
        };
      },
      5933: (t, e, n) => {
        var i;
        !(function () {
          function o(t, e, n) {
            return t.call.apply(t.bind, arguments);
          }
          function r(t, e, n) {
            if (!t) throw Error();
            if (2 < arguments.length) {
              var i = Array.prototype.slice.call(arguments, 2);
              return function () {
                var n = Array.prototype.slice.call(arguments);
                return Array.prototype.unshift.apply(n, i), t.apply(e, n);
              };
            }
            return function () {
              return t.apply(e, arguments);
            };
          }
          function s(t, e, n) {
            return (s =
              Function.prototype.bind &&
              -1 != Function.prototype.bind.toString().indexOf("native code")
                ? o
                : r).apply(null, arguments);
          }
          var a =
            Date.now ||
            function () {
              return +new Date();
            };
          function l(t, e) {
            (this.a = t), (this.o = e || t), (this.c = this.o.document);
          }
          var u = !!window.FontFace;
          function p(t, e, n, i) {
            if (((e = t.c.createElement(e)), n))
              for (var o in n)
                n.hasOwnProperty(o) &&
                  ("style" == o
                    ? (e.style.cssText = n[o])
                    : e.setAttribute(o, n[o]));
            return i && e.appendChild(t.c.createTextNode(i)), e;
          }
          function c(t, e, n) {
            (t = t.c.getElementsByTagName(e)[0]) ||
              (t = document.documentElement),
              t.insertBefore(n, t.lastChild);
          }
          function d(t) {
            t.parentNode && t.parentNode.removeChild(t);
          }
          function h(t, e, n) {
            (e = e || []), (n = n || []);
            for (
              var i = t.className.split(/\s+/), o = 0;
              o < e.length;
              o += 1
            ) {
              for (var r = !1, s = 0; s < i.length; s += 1)
                if (e[o] === i[s]) {
                  r = !0;
                  break;
                }
              r || i.push(e[o]);
            }
            for (e = [], o = 0; o < i.length; o += 1) {
              for (r = !1, s = 0; s < n.length; s += 1)
                if (i[o] === n[s]) {
                  r = !0;
                  break;
                }
              r || e.push(i[o]);
            }
            t.className = e
              .join(" ")
              .replace(/\s+/g, " ")
              .replace(/^\s+|\s+$/, "");
          }
          function f(t, e) {
            for (
              var n = t.className.split(/\s+/), i = 0, o = n.length;
              i < o;
              i++
            )
              if (n[i] == e) return !0;
            return !1;
          }
          function g(t, e, n) {
            function i() {
              a && o && r && (a(s), (a = null));
            }
            e = p(t, "link", { rel: "stylesheet", href: e, media: "all" });
            var o = !1,
              r = !0,
              s = null,
              a = n || null;
            u
              ? ((e.onload = function () {
                  (o = !0), i();
                }),
                (e.onerror = function () {
                  (o = !0), (s = Error("Stylesheet failed to load")), i();
                }))
              : setTimeout(function () {
                  (o = !0), i();
                }, 0),
              c(t, "head", e);
          }
          function m(t, e, n, i) {
            var o = t.c.getElementsByTagName("head")[0];
            if (o) {
              var r = p(t, "script", { src: e }),
                s = !1;
              return (
                (r.onload = r.onreadystatechange =
                  function () {
                    s ||
                      (this.readyState &&
                        "loaded" != this.readyState &&
                        "complete" != this.readyState) ||
                      ((s = !0),
                      n && n(null),
                      (r.onload = r.onreadystatechange = null),
                      "HEAD" == r.parentNode.tagName && o.removeChild(r));
                  }),
                o.appendChild(r),
                setTimeout(function () {
                  s || ((s = !0), n && n(Error("Script load timeout")));
                }, i || 5e3),
                r
              );
            }
            return null;
          }
          function y() {
            (this.a = 0), (this.c = null);
          }
          function v(t) {
            return (
              t.a++,
              function () {
                t.a--, S(t);
              }
            );
          }
          function b(t, e) {
            (t.c = e), S(t);
          }
          function S(t) {
            0 == t.a && t.c && (t.c(), (t.c = null));
          }
          function w(t) {
            this.a = t || "-";
          }
          function O(t, e) {
            (this.c = t), (this.f = 4), (this.a = "n");
            var n = (e || "n4").match(/^([nio])([1-9])$/i);
            n && ((this.a = n[1]), (this.f = parseInt(n[2], 10)));
          }
          function _(t) {
            var e = [];
            t = t.split(/,\s*/);
            for (var n = 0; n < t.length; n++) {
              var i = t[n].replace(/['"]/g, "");
              -1 != i.indexOf(" ") || /^\d/.test(i)
                ? e.push("'" + i + "'")
                : e.push(i);
            }
            return e.join(",");
          }
          function N(t) {
            return t.a + t.f;
          }
          function C(t) {
            var e = "normal";
            return (
              "o" === t.a ? (e = "oblique") : "i" === t.a && (e = "italic"), e
            );
          }
          function I(t) {
            var e = 4,
              n = "n",
              i = null;
            return (
              t &&
                ((i = t.match(/(normal|oblique|italic)/i)) &&
                  i[1] &&
                  (n = i[1].substr(0, 1).toLowerCase()),
                (i = t.match(/([1-9]00|normal|bold)/i)) &&
                  i[1] &&
                  (/bold/i.test(i[1])
                    ? (e = 7)
                    : /[1-9]00/.test(i[1]) &&
                      (e = parseInt(i[1].substr(0, 1), 10)))),
              n + e
            );
          }
          function x(t, e) {
            (this.c = t),
              (this.f = t.o.document.documentElement),
              (this.h = e),
              (this.a = new w("-")),
              (this.j = !1 !== e.events),
              (this.g = !1 !== e.classes);
          }
          function P(t) {
            if (t.g) {
              var e = f(t.f, t.a.c("wf", "active")),
                n = [],
                i = [t.a.c("wf", "loading")];
              e || n.push(t.a.c("wf", "inactive")), h(t.f, n, i);
            }
            E(t, "inactive");
          }
          function E(t, e, n) {
            t.j && t.h[e] && (n ? t.h[e](n.c, N(n)) : t.h[e]());
          }
          function T() {
            this.c = {};
          }
          function D(t, e) {
            (this.c = t),
              (this.f = e),
              (this.a = p(this.c, "span", { "aria-hidden": "true" }, this.f));
          }
          function k(t) {
            c(t.c, "body", t.a);
          }
          function R(t) {
            return (
              "display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:" +
              _(t.c) +
              ";font-style:" +
              C(t) +
              ";font-weight:" +
              t.f +
              "00;"
            );
          }
          function A(t, e, n, i, o, r) {
            (this.g = t),
              (this.j = e),
              (this.a = i),
              (this.c = n),
              (this.f = o || 3e3),
              (this.h = r || void 0);
          }
          function j(t, e, n, i, o, r, s) {
            (this.v = t),
              (this.B = e),
              (this.c = n),
              (this.a = i),
              (this.s = s || "BESbswy"),
              (this.f = {}),
              (this.w = o || 3e3),
              (this.u = r || null),
              (this.m = this.j = this.h = this.g = null),
              (this.g = new D(this.c, this.s)),
              (this.h = new D(this.c, this.s)),
              (this.j = new D(this.c, this.s)),
              (this.m = new D(this.c, this.s)),
              (t = R((t = new O(this.a.c + ",serif", N(this.a))))),
              (this.g.a.style.cssText = t),
              (t = R((t = new O(this.a.c + ",sans-serif", N(this.a))))),
              (this.h.a.style.cssText = t),
              (t = R((t = new O("serif", N(this.a))))),
              (this.j.a.style.cssText = t),
              (t = R((t = new O("sans-serif", N(this.a))))),
              (this.m.a.style.cssText = t),
              k(this.g),
              k(this.h),
              k(this.j),
              k(this.m);
          }
          (w.prototype.c = function (t) {
            for (var e = [], n = 0; n < arguments.length; n++)
              e.push(arguments[n].replace(/[\W_]+/g, "").toLowerCase());
            return e.join(this.a);
          }),
            (A.prototype.start = function () {
              var t = this.c.o.document,
                e = this,
                n = a(),
                i = new Promise(function (i, o) {
                  !(function r() {
                    a() - n >= e.f
                      ? o()
                      : t.fonts
                          .load(
                            (function (t) {
                              return C(t) + " " + t.f + "00 300px " + _(t.c);
                            })(e.a),
                            e.h
                          )
                          .then(
                            function (t) {
                              1 <= t.length ? i() : setTimeout(r, 25);
                            },
                            function () {
                              o();
                            }
                          );
                  })();
                }),
                o = null,
                r = new Promise(function (t, n) {
                  o = setTimeout(n, e.f);
                });
              Promise.race([r, i]).then(
                function () {
                  o && (clearTimeout(o), (o = null)), e.g(e.a);
                },
                function () {
                  e.j(e.a);
                }
              );
            });
          var M = { D: "serif", C: "sans-serif" },
            F = null;
          function V() {
            if (null === F) {
              var t = /AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(
                window.navigator.userAgent
              );
              F =
                !!t &&
                (536 > parseInt(t[1], 10) ||
                  (536 === parseInt(t[1], 10) && 11 >= parseInt(t[2], 10)));
            }
            return F;
          }
          function L(t, e, n) {
            for (var i in M)
              if (M.hasOwnProperty(i) && e === t.f[M[i]] && n === t.f[M[i]])
                return !0;
            return !1;
          }
          function U(t) {
            var e,
              n = t.g.a.offsetWidth,
              i = t.h.a.offsetWidth;
            (e = n === t.f.serif && i === t.f["sans-serif"]) ||
              (e = V() && L(t, n, i)),
              e
                ? a() - t.A >= t.w
                  ? V() &&
                    L(t, n, i) &&
                    (null === t.u || t.u.hasOwnProperty(t.a.c))
                    ? B(t, t.v)
                    : B(t, t.B)
                  : (function (t) {
                      setTimeout(
                        s(function () {
                          U(this);
                        }, t),
                        50
                      );
                    })(t)
                : B(t, t.v);
          }
          function B(t, e) {
            setTimeout(
              s(function () {
                d(this.g.a), d(this.h.a), d(this.j.a), d(this.m.a), e(this.a);
              }, t),
              0
            );
          }
          function W(t, e, n) {
            (this.c = t),
              (this.a = e),
              (this.f = 0),
              (this.m = this.j = !1),
              (this.s = n);
          }
          j.prototype.start = function () {
            (this.f.serif = this.j.a.offsetWidth),
              (this.f["sans-serif"] = this.m.a.offsetWidth),
              (this.A = a()),
              U(this);
          };
          var z = null;
          function H(t) {
            0 == --t.f &&
              t.j &&
              (t.m
                ? ((t = t.a).g &&
                    h(
                      t.f,
                      [t.a.c("wf", "active")],
                      [t.a.c("wf", "loading"), t.a.c("wf", "inactive")]
                    ),
                  E(t, "active"))
                : P(t.a));
          }
          function q(t) {
            (this.j = t),
              (this.a = new T()),
              (this.h = 0),
              (this.f = this.g = !0);
          }
          function $(t, e, n, i, o) {
            var r = 0 == --t.h;
            (t.f || t.g) &&
              setTimeout(function () {
                var t = o || null,
                  a = i || {};
                if (0 === n.length && r) P(e.a);
                else {
                  (e.f += n.length), r && (e.j = r);
                  var l,
                    u = [];
                  for (l = 0; l < n.length; l++) {
                    var p = n[l],
                      c = a[p.c],
                      d = e.a,
                      f = p;
                    if (
                      (d.g &&
                        h(d.f, [d.a.c("wf", f.c, N(f).toString(), "loading")]),
                      E(d, "fontloading", f),
                      (d = null),
                      null === z)
                    )
                      if (window.FontFace) {
                        f = /Gecko.*Firefox\/(\d+)/.exec(
                          window.navigator.userAgent
                        );
                        var g =
                          /OS X.*Version\/10\..*Safari/.exec(
                            window.navigator.userAgent
                          ) && /Apple/.exec(window.navigator.vendor);
                        z = f ? 42 < parseInt(f[1], 10) : !g;
                      } else z = !1;
                    (d = z
                      ? new A(s(e.g, e), s(e.h, e), e.c, p, e.s, c)
                      : new j(s(e.g, e), s(e.h, e), e.c, p, e.s, t, c)),
                      u.push(d);
                  }
                  for (l = 0; l < u.length; l++) u[l].start();
                }
              }, 0);
          }
          function Y(t, e) {
            (this.c = t), (this.a = e);
          }
          function X(t, e) {
            (this.c = t), (this.a = e);
          }
          function G(t, e) {
            (this.c = t || J), (this.a = []), (this.f = []), (this.g = e || "");
          }
          (W.prototype.g = function (t) {
            var e = this.a;
            e.g &&
              h(
                e.f,
                [e.a.c("wf", t.c, N(t).toString(), "active")],
                [
                  e.a.c("wf", t.c, N(t).toString(), "loading"),
                  e.a.c("wf", t.c, N(t).toString(), "inactive"),
                ]
              ),
              E(e, "fontactive", t),
              (this.m = !0),
              H(this);
          }),
            (W.prototype.h = function (t) {
              var e = this.a;
              if (e.g) {
                var n = f(e.f, e.a.c("wf", t.c, N(t).toString(), "active")),
                  i = [],
                  o = [e.a.c("wf", t.c, N(t).toString(), "loading")];
                n || i.push(e.a.c("wf", t.c, N(t).toString(), "inactive")),
                  h(e.f, i, o);
              }
              E(e, "fontinactive", t), H(this);
            }),
            (q.prototype.load = function (t) {
              (this.c = new l(this.j, t.context || this.j)),
                (this.g = !1 !== t.events),
                (this.f = !1 !== t.classes),
                (function (t, e, n) {
                  var i = [],
                    o = n.timeout;
                  !(function (t) {
                    t.g && h(t.f, [t.a.c("wf", "loading")]), E(t, "loading");
                  })(e),
                    (i = (function (t, e, n) {
                      var i,
                        o = [];
                      for (i in e)
                        if (e.hasOwnProperty(i)) {
                          var r = t.c[i];
                          r && o.push(r(e[i], n));
                        }
                      return o;
                    })(t.a, n, t.c));
                  var r = new W(t.c, e, o);
                  for (t.h = i.length, e = 0, n = i.length; e < n; e++)
                    i[e].load(function (e, n, i) {
                      $(t, r, e, n, i);
                    });
                })(this, new x(this.c, t), t);
            }),
            (Y.prototype.load = function (t) {
              function e() {
                if (r["__mti_fntLst" + i]) {
                  var n,
                    o = r["__mti_fntLst" + i](),
                    s = [];
                  if (o)
                    for (var a = 0; a < o.length; a++) {
                      var l = o[a].fontfamily;
                      null != o[a].fontStyle && null != o[a].fontWeight
                        ? ((n = o[a].fontStyle + o[a].fontWeight),
                          s.push(new O(l, n)))
                        : s.push(new O(l));
                    }
                  t(s);
                } else
                  setTimeout(function () {
                    e();
                  }, 50);
              }
              var n = this,
                i = n.a.projectId,
                o = n.a.version;
              if (i) {
                var r = n.c.o;
                m(
                  this.c,
                  (n.a.api || "https://fast.fonts.net/jsapi") +
                    "/" +
                    i +
                    ".js" +
                    (o ? "?v=" + o : ""),
                  function (o) {
                    o
                      ? t([])
                      : ((r["__MonotypeConfiguration__" + i] = function () {
                          return n.a;
                        }),
                        e());
                  }
                ).id = "__MonotypeAPIScript__" + i;
              } else t([]);
            }),
            (X.prototype.load = function (t) {
              var e,
                n,
                i = this.a.urls || [],
                o = this.a.families || [],
                r = this.a.testStrings || {},
                s = new y();
              for (e = 0, n = i.length; e < n; e++) g(this.c, i[e], v(s));
              var a = [];
              for (e = 0, n = o.length; e < n; e++)
                if ((i = o[e].split(":"))[1])
                  for (var l = i[1].split(","), u = 0; u < l.length; u += 1)
                    a.push(new O(i[0], l[u]));
                else a.push(new O(i[0]));
              b(s, function () {
                t(a, r);
              });
            });
          var J = "https://fonts.googleapis.com/css";
          function Q(t) {
            (this.f = t), (this.a = []), (this.c = {});
          }
          var K = {
              latin: "BESbswy",
              "latin-ext": "çöüğş",
              cyrillic: "йяЖ",
              greek: "αβΣ",
              khmer: "កខគ",
              Hanuman: "កខគ",
            },
            Z = {
              thin: "1",
              extralight: "2",
              "extra-light": "2",
              ultralight: "2",
              "ultra-light": "2",
              light: "3",
              regular: "4",
              book: "4",
              medium: "5",
              "semi-bold": "6",
              semibold: "6",
              "demi-bold": "6",
              demibold: "6",
              bold: "7",
              "extra-bold": "8",
              extrabold: "8",
              "ultra-bold": "8",
              ultrabold: "8",
              black: "9",
              heavy: "9",
              l: "3",
              r: "4",
              b: "7",
            },
            tt = { i: "i", italic: "i", n: "n", normal: "n" },
            et =
              /^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;
          function nt(t, e) {
            (this.c = t), (this.a = e);
          }
          var it = { Arimo: !0, Cousine: !0, Tinos: !0 };
          function ot(t, e) {
            (this.c = t), (this.a = e);
          }
          function rt(t, e) {
            (this.c = t), (this.f = e), (this.a = []);
          }
          (nt.prototype.load = function (t) {
            var e = new y(),
              n = this.c,
              i = new G(this.a.api, this.a.text),
              o = this.a.families;
            !(function (t, e) {
              for (var n = e.length, i = 0; i < n; i++) {
                var o = e[i].split(":");
                3 == o.length && t.f.push(o.pop());
                var r = "";
                2 == o.length && "" != o[1] && (r = ":"), t.a.push(o.join(r));
              }
            })(i, o);
            var r = new Q(o);
            !(function (t) {
              for (var e = t.f.length, n = 0; n < e; n++) {
                var i = t.f[n].split(":"),
                  o = i[0].replace(/\+/g, " "),
                  r = ["n4"];
                if (2 <= i.length) {
                  var s;
                  if (((s = []), (a = i[1])))
                    for (
                      var a, l = (a = a.split(",")).length, u = 0;
                      u < l;
                      u++
                    ) {
                      var p;
                      if ((p = a[u]).match(/^[\w-]+$/))
                        if (null == (c = et.exec(p.toLowerCase()))) p = "";
                        else {
                          if (
                            ((p = null == (p = c[2]) || "" == p ? "n" : tt[p]),
                            null == (c = c[1]) || "" == c)
                          )
                            c = "4";
                          else
                            var c = Z[c] || (isNaN(c) ? "4" : c.substr(0, 1));
                          p = [p, c].join("");
                        }
                      else p = "";
                      p && s.push(p);
                    }
                  0 < s.length && (r = s),
                    3 == i.length &&
                      ((s = []),
                      0 < (i = (i = i[2]) ? i.split(",") : s).length &&
                        (i = K[i[0]]) &&
                        (t.c[o] = i));
                }
                for (
                  t.c[o] || ((i = K[o]) && (t.c[o] = i)), i = 0;
                  i < r.length;
                  i += 1
                )
                  t.a.push(new O(o, r[i]));
              }
            })(r),
              g(
                n,
                (function (t) {
                  if (0 == t.a.length) throw Error("No fonts to load!");
                  if (-1 != t.c.indexOf("kit=")) return t.c;
                  for (var e = t.a.length, n = [], i = 0; i < e; i++)
                    n.push(t.a[i].replace(/ /g, "+"));
                  return (
                    (e = t.c + "?family=" + n.join("%7C")),
                    0 < t.f.length && (e += "&subset=" + t.f.join(",")),
                    0 < t.g.length && (e += "&text=" + encodeURIComponent(t.g)),
                    e
                  );
                })(i),
                v(e)
              ),
              b(e, function () {
                t(r.a, r.c, it);
              });
          }),
            (ot.prototype.load = function (t) {
              var e = this.a.id,
                n = this.c.o;
              e
                ? m(
                    this.c,
                    (this.a.api || "https://use.typekit.net") + "/" + e + ".js",
                    function (e) {
                      if (e) t([]);
                      else if (
                        n.Typekit &&
                        n.Typekit.config &&
                        n.Typekit.config.fn
                      ) {
                        e = n.Typekit.config.fn;
                        for (var i = [], o = 0; o < e.length; o += 2)
                          for (
                            var r = e[o], s = e[o + 1], a = 0;
                            a < s.length;
                            a++
                          )
                            i.push(new O(r, s[a]));
                        try {
                          n.Typekit.load({
                            events: !1,
                            classes: !1,
                            async: !0,
                          });
                        } catch (t) {}
                        t(i);
                      }
                    },
                    2e3
                  )
                : t([]);
            }),
            (rt.prototype.load = function (t) {
              var e = this.f.id,
                n = this.c.o,
                i = this;
              e
                ? (n.__webfontfontdeckmodule__ ||
                    (n.__webfontfontdeckmodule__ = {}),
                  (n.__webfontfontdeckmodule__[e] = function (e, n) {
                    for (var o = 0, r = n.fonts.length; o < r; ++o) {
                      var s = n.fonts[o];
                      i.a.push(
                        new O(
                          s.name,
                          I(
                            "font-weight:" + s.weight + ";font-style:" + s.style
                          )
                        )
                      );
                    }
                    t(i.a);
                  }),
                  m(
                    this.c,
                    (this.f.api || "https://f.fontdeck.com/s/css/js/") +
                      (function (t) {
                        return t.o.location.hostname || t.a.location.hostname;
                      })(this.c) +
                      "/" +
                      e +
                      ".js",
                    function (e) {
                      e && t([]);
                    }
                  ))
                : t([]);
            });
          var st = new q(window);
          (st.a.c.custom = function (t, e) {
            return new X(e, t);
          }),
            (st.a.c.fontdeck = function (t, e) {
              return new rt(e, t);
            }),
            (st.a.c.monotype = function (t, e) {
              return new Y(e, t);
            }),
            (st.a.c.typekit = function (t, e) {
              return new ot(e, t);
            }),
            (st.a.c.google = function (t, e) {
              return new nt(e, t);
            });
          var at = { load: s(st.load, st) };
          void 0 ===
            (i = function () {
              return at;
            }.call(e, n, e, t)) || (t.exports = i);
        })();
      },
      306: function (t, e) {
        (function () {
          "use strict";
          e.stripBOM = function (t) {
            return "\ufeff" === t[0] ? t.substring(1) : t;
          };
        }.call(this));
      },
      4096: function (t, e, n) {
        (function () {
          "use strict";
          var t,
            i,
            o,
            r,
            s,
            a = {}.hasOwnProperty;
          (t = n(5532)),
            (i = n(8381).defaults),
            (r = function (t) {
              return (
                "string" == typeof t &&
                (t.indexOf("&") >= 0 ||
                  t.indexOf(">") >= 0 ||
                  t.indexOf("<") >= 0)
              );
            }),
            (s = function (t) {
              return "<![CDATA[" + o(t) + "]]>";
            }),
            (o = function (t) {
              return t.replace("]]>", "]]]]><![CDATA[>");
            }),
            (e.Builder = (function () {
              function e(t) {
                var e, n, o;
                for (e in ((this.options = {}), (n = i[0.2])))
                  a.call(n, e) && ((o = n[e]), (this.options[e] = o));
                for (e in t)
                  a.call(t, e) && ((o = t[e]), (this.options[e] = o));
              }
              return (
                (e.prototype.buildObject = function (e) {
                  var n, o, l, u, p, c;
                  return (
                    (n = this.options.attrkey),
                    (o = this.options.charkey),
                    1 === Object.keys(e).length &&
                    this.options.rootName === i[0.2].rootName
                      ? (e = e[(p = Object.keys(e)[0])])
                      : (p = this.options.rootName),
                    (c = this),
                    (l = function (t, e) {
                      var i, u, p, d, h, f;
                      if ("object" != typeof e)
                        c.options.cdata && r(e) ? t.raw(s(e)) : t.txt(e);
                      else if (Array.isArray(e)) {
                        for (d in e)
                          if (a.call(e, d))
                            for (h in (u = e[d]))
                              (p = u[h]), (t = l(t.ele(h), p).up());
                      } else
                        for (h in e)
                          if (a.call(e, h))
                            if (((u = e[h]), h === n)) {
                              if ("object" == typeof u)
                                for (i in u) (f = u[i]), (t = t.att(i, f));
                            } else if (h === o)
                              t =
                                c.options.cdata && r(u)
                                  ? t.raw(s(u))
                                  : t.txt(u);
                            else if (Array.isArray(u))
                              for (d in u)
                                a.call(u, d) &&
                                  (t =
                                    "string" == typeof (p = u[d])
                                      ? c.options.cdata && r(p)
                                        ? t.ele(h).raw(s(p)).up()
                                        : t.ele(h, p).up()
                                      : l(t.ele(h), p).up());
                            else
                              "object" == typeof u
                                ? (t = l(t.ele(h), u).up())
                                : "string" == typeof u &&
                                  c.options.cdata &&
                                  r(u)
                                ? (t = t.ele(h).raw(s(u)).up())
                                : (null == u && (u = ""),
                                  (t = t.ele(h, u.toString()).up()));
                      return t;
                    }),
                    (u = t.create(
                      p,
                      this.options.xmldec,
                      this.options.doctype,
                      {
                        headless: this.options.headless,
                        allowSurrogateChars: this.options.allowSurrogateChars,
                      }
                    )),
                    l(u, e).end(this.options.renderOpts)
                  );
                }),
                e
              );
            })());
        }.call(this));
      },
      8381: function (t, e) {
        (function () {
          e.defaults = {
            0.1: {
              explicitCharkey: !1,
              trim: !0,
              normalize: !0,
              normalizeTags: !1,
              attrkey: "@",
              charkey: "#",
              explicitArray: !1,
              ignoreAttrs: !1,
              mergeAttrs: !1,
              explicitRoot: !1,
              validator: null,
              xmlns: !1,
              explicitChildren: !1,
              childkey: "@@",
              charsAsChildren: !1,
              includeWhiteChars: !1,
              async: !1,
              strict: !0,
              attrNameProcessors: null,
              attrValueProcessors: null,
              tagNameProcessors: null,
              valueProcessors: null,
              emptyTag: "",
            },
            0.2: {
              explicitCharkey: !1,
              trim: !1,
              normalize: !1,
              normalizeTags: !1,
              attrkey: "$",
              charkey: "_",
              explicitArray: !0,
              ignoreAttrs: !1,
              mergeAttrs: !1,
              explicitRoot: !0,
              validator: null,
              xmlns: !1,
              explicitChildren: !1,
              preserveChildrenOrder: !1,
              childkey: "$$",
              charsAsChildren: !1,
              includeWhiteChars: !1,
              async: !1,
              strict: !0,
              attrNameProcessors: null,
              attrValueProcessors: null,
              tagNameProcessors: null,
              valueProcessors: null,
              rootName: "root",
              xmldec: { version: "1.0", encoding: "UTF-8", standalone: !0 },
              doctype: null,
              renderOpts: { pretty: !0, indent: "  ", newline: "\n" },
              headless: !1,
              chunkSize: 1e4,
              emptyTag: "",
              cdata: !1,
            },
          };
        }.call(this));
      },
      9082: function (t, e, n) {
        (function () {
          "use strict";
          var t,
            i,
            o,
            r,
            s,
            a,
            l,
            u,
            p = function (t, e) {
              return function () {
                return t.apply(e, arguments);
              };
            },
            c = {}.hasOwnProperty;
          (l = n(6099)),
            (o = n(7187)),
            (t = n(306)),
            (a = n(7526)),
            (u = n(5475).setImmediate),
            (i = n(8381).defaults),
            (r = function (t) {
              return (
                "object" == typeof t && null != t && 0 === Object.keys(t).length
              );
            }),
            (s = function (t, e, n) {
              var i, o;
              for (i = 0, o = t.length; i < o; i++) e = (0, t[i])(e, n);
              return e;
            }),
            (e.Parser = (function (n) {
              function o(t) {
                var n, o, r;
                if (
                  ((this.parseStringPromise = p(this.parseStringPromise, this)),
                  (this.parseString = p(this.parseString, this)),
                  (this.reset = p(this.reset, this)),
                  (this.assignOrPush = p(this.assignOrPush, this)),
                  (this.processAsync = p(this.processAsync, this)),
                  !(this instanceof e.Parser))
                )
                  return new e.Parser(t);
                for (n in ((this.options = {}), (o = i[0.2])))
                  c.call(o, n) && ((r = o[n]), (this.options[n] = r));
                for (n in t)
                  c.call(t, n) && ((r = t[n]), (this.options[n] = r));
                this.options.xmlns &&
                  (this.options.xmlnskey = this.options.attrkey + "ns"),
                  this.options.normalizeTags &&
                    (this.options.tagNameProcessors ||
                      (this.options.tagNameProcessors = []),
                    this.options.tagNameProcessors.unshift(a.normalize)),
                  this.reset();
              }
              return (
                (function (t, e) {
                  for (var n in e) c.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(o, n),
                (o.prototype.processAsync = function () {
                  var t, e;
                  try {
                    return this.remaining.length <= this.options.chunkSize
                      ? ((t = this.remaining),
                        (this.remaining = ""),
                        (this.saxParser = this.saxParser.write(t)),
                        this.saxParser.close())
                      : ((t = this.remaining.substr(0, this.options.chunkSize)),
                        (this.remaining = this.remaining.substr(
                          this.options.chunkSize,
                          this.remaining.length
                        )),
                        (this.saxParser = this.saxParser.write(t)),
                        u(this.processAsync));
                  } catch (t) {
                    if (((e = t), !this.saxParser.errThrown))
                      return (this.saxParser.errThrown = !0), this.emit(e);
                  }
                }),
                (o.prototype.assignOrPush = function (t, e, n) {
                  return e in t
                    ? (t[e] instanceof Array || (t[e] = [t[e]]), t[e].push(n))
                    : this.options.explicitArray
                    ? (t[e] = [n])
                    : (t[e] = n);
                }),
                (o.prototype.reset = function () {
                  var t, e, n, i, o;
                  return (
                    this.removeAllListeners(),
                    (this.saxParser = l.parser(this.options.strict, {
                      trim: !1,
                      normalize: !1,
                      xmlns: this.options.xmlns,
                    })),
                    (this.saxParser.errThrown = !1),
                    (this.saxParser.onerror =
                      ((o = this),
                      function (t) {
                        if ((o.saxParser.resume(), !o.saxParser.errThrown))
                          return (
                            (o.saxParser.errThrown = !0), o.emit("error", t)
                          );
                      })),
                    (this.saxParser.onend = (function (t) {
                      return function () {
                        if (!t.saxParser.ended)
                          return (
                            (t.saxParser.ended = !0),
                            t.emit("end", t.resultObject)
                          );
                      };
                    })(this)),
                    (this.saxParser.ended = !1),
                    (this.EXPLICIT_CHARKEY = this.options.explicitCharkey),
                    (this.resultObject = null),
                    (i = []),
                    (t = this.options.attrkey),
                    (e = this.options.charkey),
                    (this.saxParser.onopentag = (function (n) {
                      return function (o) {
                        var r, a, l, u, p;
                        if ((((l = {})[e] = ""), !n.options.ignoreAttrs))
                          for (r in (p = o.attributes))
                            c.call(p, r) &&
                              (t in l || n.options.mergeAttrs || (l[t] = {}),
                              (a = n.options.attrValueProcessors
                                ? s(
                                    n.options.attrValueProcessors,
                                    o.attributes[r],
                                    r
                                  )
                                : o.attributes[r]),
                              (u = n.options.attrNameProcessors
                                ? s(n.options.attrNameProcessors, r)
                                : r),
                              n.options.mergeAttrs
                                ? n.assignOrPush(l, u, a)
                                : (l[t][u] = a));
                        return (
                          (l["#name"] = n.options.tagNameProcessors
                            ? s(n.options.tagNameProcessors, o.name)
                            : o.name),
                          n.options.xmlns &&
                            (l[n.options.xmlnskey] = {
                              uri: o.uri,
                              local: o.local,
                            }),
                          i.push(l)
                        );
                      };
                    })(this)),
                    (this.saxParser.onclosetag = (function (t) {
                      return function () {
                        var n, o, a, l, u, p, d, h, f, g;
                        if (
                          ((p = i.pop()),
                          (u = p["#name"]),
                          (t.options.explicitChildren &&
                            t.options.preserveChildrenOrder) ||
                            delete p["#name"],
                          !0 === p.cdata && ((n = p.cdata), delete p.cdata),
                          (f = i[i.length - 1]),
                          p[e].match(/^\s*$/) && !n
                            ? ((o = p[e]), delete p[e])
                            : (t.options.trim && (p[e] = p[e].trim()),
                              t.options.normalize &&
                                (p[e] = p[e].replace(/\s{2,}/g, " ").trim()),
                              (p[e] = t.options.valueProcessors
                                ? s(t.options.valueProcessors, p[e], u)
                                : p[e]),
                              1 === Object.keys(p).length &&
                                e in p &&
                                !t.EXPLICIT_CHARKEY &&
                                (p = p[e])),
                          r(p) &&
                            (p =
                              "" !== t.options.emptyTag
                                ? t.options.emptyTag
                                : o),
                          null != t.options.validator &&
                            ((g =
                              "/" +
                              (function () {
                                var t, e, n;
                                for (n = [], t = 0, e = i.length; t < e; t++)
                                  (l = i[t]), n.push(l["#name"]);
                                return n;
                              })()
                                .concat(u)
                                .join("/")),
                            (function () {
                              var e;
                              try {
                                p = t.options.validator(g, f && f[u], p);
                              } catch (n) {
                                return (e = n), t.emit("error", e);
                              }
                            })()),
                          t.options.explicitChildren &&
                            !t.options.mergeAttrs &&
                            "object" == typeof p)
                        )
                          if (t.options.preserveChildrenOrder) {
                            if (f) {
                              for (a in ((f[t.options.childkey] =
                                f[t.options.childkey] || []),
                              (d = {}),
                              p))
                                c.call(p, a) && (d[a] = p[a]);
                              f[t.options.childkey].push(d),
                                delete p["#name"],
                                1 === Object.keys(p).length &&
                                  e in p &&
                                  !t.EXPLICIT_CHARKEY &&
                                  (p = p[e]);
                            }
                          } else
                            (l = {}),
                              t.options.attrkey in p &&
                                ((l[t.options.attrkey] = p[t.options.attrkey]),
                                delete p[t.options.attrkey]),
                              !t.options.charsAsChildren &&
                                t.options.charkey in p &&
                                ((l[t.options.charkey] = p[t.options.charkey]),
                                delete p[t.options.charkey]),
                              Object.getOwnPropertyNames(p).length > 0 &&
                                (l[t.options.childkey] = p),
                              (p = l);
                        return i.length > 0
                          ? t.assignOrPush(f, u, p)
                          : (t.options.explicitRoot &&
                              ((h = p), ((p = {})[u] = h)),
                            (t.resultObject = p),
                            (t.saxParser.ended = !0),
                            t.emit("end", t.resultObject));
                      };
                    })(this)),
                    (n = (function (t) {
                      return function (n) {
                        var o, r;
                        if ((r = i[i.length - 1]))
                          return (
                            (r[e] += n),
                            t.options.explicitChildren &&
                              t.options.preserveChildrenOrder &&
                              t.options.charsAsChildren &&
                              (t.options.includeWhiteChars ||
                                "" !== n.replace(/\\n/g, "").trim()) &&
                              ((r[t.options.childkey] =
                                r[t.options.childkey] || []),
                              ((o = { "#name": "__text__" })[e] = n),
                              t.options.normalize &&
                                (o[e] = o[e].replace(/\s{2,}/g, " ").trim()),
                              r[t.options.childkey].push(o)),
                            r
                          );
                      };
                    })(this)),
                    (this.saxParser.ontext = n),
                    (this.saxParser.oncdata = function (t) {
                      var e;
                      if ((e = n(t))) return (e.cdata = !0);
                    })
                  );
                }),
                (o.prototype.parseString = function (e, n) {
                  var i;
                  null != n &&
                    "function" == typeof n &&
                    (this.on("end", function (t) {
                      return this.reset(), n(null, t);
                    }),
                    this.on("error", function (t) {
                      return this.reset(), n(t);
                    }));
                  try {
                    return "" === (e = e.toString()).trim()
                      ? (this.emit("end", null), !0)
                      : ((e = t.stripBOM(e)),
                        this.options.async
                          ? ((this.remaining = e),
                            u(this.processAsync),
                            this.saxParser)
                          : this.saxParser.write(e).close());
                  } catch (t) {
                    if (
                      ((i = t),
                      !this.saxParser.errThrown && !this.saxParser.ended)
                    )
                      return (
                        this.emit("error", i), (this.saxParser.errThrown = !0)
                      );
                    if (this.saxParser.ended) throw i;
                  }
                }),
                (o.prototype.parseStringPromise = function (t) {
                  return new Promise(
                    ((e = this),
                    function (n, i) {
                      return e.parseString(t, function (t, e) {
                        return t ? i(t) : n(e);
                      });
                    })
                  );
                  var e;
                }),
                o
              );
            })(o)),
            (e.parseString = function (t, n, i) {
              var o, r;
              return (
                null != i
                  ? ("function" == typeof i && (o = i),
                    "object" == typeof n && (r = n))
                  : ("function" == typeof n && (o = n), (r = {})),
                new e.Parser(r).parseString(t, o)
              );
            }),
            (e.parseStringPromise = function (t, n) {
              var i;
              return (
                "object" == typeof n && (i = n),
                new e.Parser(i).parseStringPromise(t)
              );
            });
        }.call(this));
      },
      7526: function (t, e) {
        (function () {
          "use strict";
          var t;
          (t = new RegExp(/(?!xmlns)^.*:/)),
            (e.normalize = function (t) {
              return t.toLowerCase();
            }),
            (e.firstCharLowerCase = function (t) {
              return t.charAt(0).toLowerCase() + t.slice(1);
            }),
            (e.stripPrefix = function (e) {
              return e.replace(t, "");
            }),
            (e.parseNumbers = function (t) {
              return (
                isNaN(t) || (t = t % 1 == 0 ? parseInt(t, 10) : parseFloat(t)),
                t
              );
            }),
            (e.parseBooleans = function (t) {
              return (
                /^(?:true|false)$/i.test(t) && (t = "true" === t.toLowerCase()),
                t
              );
            });
        }.call(this));
      },
      5055: function (t, e, n) {
        (function () {
          "use strict";
          var t,
            i,
            o,
            r,
            s = {}.hasOwnProperty;
          (i = n(8381)),
            (t = n(4096)),
            (o = n(9082)),
            (r = n(7526)),
            (e.defaults = i.defaults),
            (e.processors = r),
            (e.ValidationError = (function (t) {
              function e(t) {
                this.message = t;
              }
              return (
                (function (t, e) {
                  for (var n in e) s.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(e, Error),
                e
              );
            })()),
            (e.Builder = t.Builder),
            (e.Parser = o.Parser),
            (e.parseString = o.parseString),
            (e.parseStringPromise = o.parseStringPromise);
        }.call(this));
      },
      7557: function (t) {
        (function () {
          t.exports = {
            Disconnected: 1,
            Preceding: 2,
            Following: 4,
            Contains: 8,
            ContainedBy: 16,
            ImplementationSpecific: 32,
          };
        }.call(this));
      },
      9335: function (t) {
        (function () {
          t.exports = {
            Element: 1,
            Attribute: 2,
            Text: 3,
            CData: 4,
            EntityReference: 5,
            EntityDeclaration: 6,
            ProcessingInstruction: 7,
            Comment: 8,
            Document: 9,
            DocType: 10,
            DocumentFragment: 11,
            NotationDeclaration: 12,
            Declaration: 201,
            Raw: 202,
            AttributeDeclaration: 203,
            ElementDeclaration: 204,
            Dummy: 205,
          };
        }.call(this));
      },
      8369: function (t) {
        (function () {
          var e,
            n,
            i,
            o,
            r,
            s,
            a,
            l = [].slice,
            u = {}.hasOwnProperty;
          (e = function () {
            var t, e, n, i, o, s;
            if (
              ((s = arguments[0]),
              (o = 2 <= arguments.length ? l.call(arguments, 1) : []),
              r(Object.assign))
            )
              Object.assign.apply(null, arguments);
            else
              for (t = 0, n = o.length; t < n; t++)
                if (null != (i = o[t]))
                  for (e in i) u.call(i, e) && (s[e] = i[e]);
            return s;
          }),
            (r = function (t) {
              return (
                !!t && "[object Function]" === Object.prototype.toString.call(t)
              );
            }),
            (s = function (t) {
              var e;
              return !!t && ("function" == (e = typeof t) || "object" === e);
            }),
            (i = function (t) {
              return r(Array.isArray)
                ? Array.isArray(t)
                : "[object Array]" === Object.prototype.toString.call(t);
            }),
            (o = function (t) {
              var e;
              if (i(t)) return !t.length;
              for (e in t) if (u.call(t, e)) return !1;
              return !0;
            }),
            (a = function (t) {
              var e, n;
              return (
                s(t) &&
                (n = Object.getPrototypeOf(t)) &&
                (e = n.constructor) &&
                "function" == typeof e &&
                e instanceof e &&
                Function.prototype.toString.call(e) ===
                  Function.prototype.toString.call(Object)
              );
            }),
            (n = function (t) {
              return r(t.valueOf) ? t.valueOf() : t;
            }),
            (t.exports.assign = e),
            (t.exports.isFunction = r),
            (t.exports.isObject = s),
            (t.exports.isArray = i),
            (t.exports.isEmpty = o),
            (t.exports.isPlainObject = a),
            (t.exports.getValue = n);
        }.call(this));
      },
      594: function (t) {
        (function () {
          t.exports = { None: 0, OpenTag: 1, InsideTag: 2, CloseTag: 3 };
        }.call(this));
      },
      2750: function (t, e, n) {
        (function () {
          var e;
          (e = n(9335)),
            n(2026),
            (t.exports = (function () {
              function t(t, n, i) {
                if (
                  ((this.parent = t),
                  this.parent &&
                    ((this.options = this.parent.options),
                    (this.stringify = this.parent.stringify)),
                  null == n)
                )
                  throw new Error(
                    "Missing attribute name. " + this.debugInfo(n)
                  );
                (this.name = this.stringify.name(n)),
                  (this.value = this.stringify.attValue(i)),
                  (this.type = e.Attribute),
                  (this.isId = !1),
                  (this.schemaTypeInfo = null);
              }
              return (
                Object.defineProperty(t.prototype, "nodeType", {
                  get: function () {
                    return this.type;
                  },
                }),
                Object.defineProperty(t.prototype, "ownerElement", {
                  get: function () {
                    return this.parent;
                  },
                }),
                Object.defineProperty(t.prototype, "textContent", {
                  get: function () {
                    return this.value;
                  },
                  set: function (t) {
                    return (this.value = t || "");
                  },
                }),
                Object.defineProperty(t.prototype, "namespaceURI", {
                  get: function () {
                    return "";
                  },
                }),
                Object.defineProperty(t.prototype, "prefix", {
                  get: function () {
                    return "";
                  },
                }),
                Object.defineProperty(t.prototype, "localName", {
                  get: function () {
                    return this.name;
                  },
                }),
                Object.defineProperty(t.prototype, "specified", {
                  get: function () {
                    return !0;
                  },
                }),
                (t.prototype.clone = function () {
                  return Object.create(this);
                }),
                (t.prototype.toString = function (t) {
                  return this.options.writer.attribute(
                    this,
                    this.options.writer.filterOptions(t)
                  );
                }),
                (t.prototype.debugInfo = function (t) {
                  return null == (t = t || this.name)
                    ? "parent: <" + this.parent.name + ">"
                    : "attribute: {" +
                        t +
                        "}, parent: <" +
                        this.parent.name +
                        ">";
                }),
                (t.prototype.isEqualNode = function (t) {
                  return (
                    t.namespaceURI === this.namespaceURI &&
                    t.prefix === this.prefix &&
                    t.localName === this.localName &&
                    t.value === this.value
                  );
                }),
                t
              );
            })());
        }.call(this));
      },
      6170: function (t, e, n) {
        (function () {
          var e,
            i,
            o = {}.hasOwnProperty;
          (e = n(9335)),
            (i = n(6488)),
            (t.exports = (function (t) {
              function n(t, i) {
                if ((n.__super__.constructor.call(this, t), null == i))
                  throw new Error("Missing CDATA text. " + this.debugInfo());
                (this.name = "#cdata-section"),
                  (this.type = e.CData),
                  (this.value = this.stringify.cdata(i));
              }
              return (
                (function (t, e) {
                  for (var n in e) o.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(n, t),
                (n.prototype.clone = function () {
                  return Object.create(this);
                }),
                (n.prototype.toString = function (t) {
                  return this.options.writer.cdata(
                    this,
                    this.options.writer.filterOptions(t)
                  );
                }),
                n
              );
            })(i));
        }.call(this));
      },
      6488: function (t, e, n) {
        (function () {
          var e,
            i = {}.hasOwnProperty;
          (e = n(2026)),
            (t.exports = (function (t) {
              function e(t) {
                e.__super__.constructor.call(this, t), (this.value = "");
              }
              return (
                (function (t, e) {
                  for (var n in e) i.call(e, n) && (t[n] = e[n]);
                  function o() {
                    this.constructor = t;
                  }
                  (o.prototype = e.prototype),
                    (t.prototype = new o()),
                    (t.__super__ = e.prototype);
                })(e, t),
                Object.defineProperty(e.prototype, "data", {
                  get: function () {
                    return this.value;
                  },
                  set: function (t) {
                    return (this.value = t || "");
                  },
                }),
                Object.defineProperty(e.prototype, "length", {
                  get: function () {
                    return this.value.length;
                  },
                }),
                Object.defineProperty(e.prototype, "textContent", {
                  get: function () {
                    return this.value;
                  },
                  set: function (t) {
                    return (this.value = t || "");
                  },
                }),
                (e.prototype.clone = function () {
                  return Object.create(this);
                }),
                (e.prototype.substringData = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (e.prototype.appendData = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (e.prototype.insertData = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (e.prototype.deleteData = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (e.prototype.replaceData = function (t, e, n) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (e.prototype.isEqualNode = function (t) {
                  return (
                    !!e.__super__.isEqualNode
                      .apply(this, arguments)
                      .isEqualNode(t) && t.data === this.data
                  );
                }),
                e
              );
            })(e));
        }.call(this));
      },
      2096: function (t, e, n) {
        (function () {
          var e,
            i,
            o = {}.hasOwnProperty;
          (e = n(9335)),
            (i = n(6488)),
            (t.exports = (function (t) {
              function n(t, i) {
                if ((n.__super__.constructor.call(this, t), null == i))
                  throw new Error("Missing comment text. " + this.debugInfo());
                (this.name = "#comment"),
                  (this.type = e.Comment),
                  (this.value = this.stringify.comment(i));
              }
              return (
                (function (t, e) {
                  for (var n in e) o.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(n, t),
                (n.prototype.clone = function () {
                  return Object.create(this);
                }),
                (n.prototype.toString = function (t) {
                  return this.options.writer.comment(
                    this,
                    this.options.writer.filterOptions(t)
                  );
                }),
                n
              );
            })(i));
        }.call(this));
      },
      383: function (t, e, n) {
        (function () {
          var e, i;
          (e = n(3933)),
            (i = n(6210)),
            (t.exports = (function () {
              function t() {
                (this.defaultParams = {
                  "canonical-form": !1,
                  "cdata-sections": !1,
                  comments: !1,
                  "datatype-normalization": !1,
                  "element-content-whitespace": !0,
                  entities: !0,
                  "error-handler": new e(),
                  infoset: !0,
                  "validate-if-schema": !1,
                  namespaces: !0,
                  "namespace-declarations": !0,
                  "normalize-characters": !1,
                  "schema-location": "",
                  "schema-type": "",
                  "split-cdata-sections": !0,
                  validate: !1,
                  "well-formed": !0,
                }),
                  (this.params = Object.create(this.defaultParams));
              }
              return (
                Object.defineProperty(t.prototype, "parameterNames", {
                  get: function () {
                    return new i(Object.keys(this.defaultParams));
                  },
                }),
                (t.prototype.getParameter = function (t) {
                  return this.params.hasOwnProperty(t) ? this.params[t] : null;
                }),
                (t.prototype.canSetParameter = function (t, e) {
                  return !0;
                }),
                (t.prototype.setParameter = function (t, e) {
                  return null != e
                    ? (this.params[t] = e)
                    : delete this.params[t];
                }),
                t
              );
            })());
        }.call(this));
      },
      3933: function (t) {
        (function () {
          t.exports = (function () {
            function t() {}
            return (
              (t.prototype.handleError = function (t) {
                throw new Error(t);
              }),
              t
            );
          })();
        }.call(this));
      },
      1770: function (t) {
        (function () {
          t.exports = (function () {
            function t() {}
            return (
              (t.prototype.hasFeature = function (t, e) {
                return !0;
              }),
              (t.prototype.createDocumentType = function (t, e, n) {
                throw new Error("This DOM method is not implemented.");
              }),
              (t.prototype.createDocument = function (t, e, n) {
                throw new Error("This DOM method is not implemented.");
              }),
              (t.prototype.createHTMLDocument = function (t) {
                throw new Error("This DOM method is not implemented.");
              }),
              (t.prototype.getFeature = function (t, e) {
                throw new Error("This DOM method is not implemented.");
              }),
              t
            );
          })();
        }.call(this));
      },
      6210: function (t) {
        (function () {
          t.exports = (function () {
            function t(t) {
              this.arr = t || [];
            }
            return (
              Object.defineProperty(t.prototype, "length", {
                get: function () {
                  return this.arr.length;
                },
              }),
              (t.prototype.item = function (t) {
                return this.arr[t] || null;
              }),
              (t.prototype.contains = function (t) {
                return -1 !== this.arr.indexOf(t);
              }),
              t
            );
          })();
        }.call(this));
      },
      1179: function (t, e, n) {
        (function () {
          var e,
            i,
            o = {}.hasOwnProperty;
          (i = n(2026)),
            (e = n(9335)),
            (t.exports = (function (t) {
              function n(t, i, o, r, s, a) {
                if ((n.__super__.constructor.call(this, t), null == i))
                  throw new Error(
                    "Missing DTD element name. " + this.debugInfo()
                  );
                if (null == o)
                  throw new Error(
                    "Missing DTD attribute name. " + this.debugInfo(i)
                  );
                if (!r)
                  throw new Error(
                    "Missing DTD attribute type. " + this.debugInfo(i)
                  );
                if (!s)
                  throw new Error(
                    "Missing DTD attribute default. " + this.debugInfo(i)
                  );
                if (
                  (0 !== s.indexOf("#") && (s = "#" + s),
                  !s.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/))
                )
                  throw new Error(
                    "Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. " +
                      this.debugInfo(i)
                  );
                if (a && !s.match(/^(#FIXED|#DEFAULT)$/))
                  throw new Error(
                    "Default value only applies to #FIXED or #DEFAULT. " +
                      this.debugInfo(i)
                  );
                (this.elementName = this.stringify.name(i)),
                  (this.type = e.AttributeDeclaration),
                  (this.attributeName = this.stringify.name(o)),
                  (this.attributeType = this.stringify.dtdAttType(r)),
                  a && (this.defaultValue = this.stringify.dtdAttDefault(a)),
                  (this.defaultValueType = s);
              }
              return (
                (function (t, e) {
                  for (var n in e) o.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(n, t),
                (n.prototype.toString = function (t) {
                  return this.options.writer.dtdAttList(
                    this,
                    this.options.writer.filterOptions(t)
                  );
                }),
                n
              );
            })(i));
        }.call(this));
      },
      6347: function (t, e, n) {
        (function () {
          var e,
            i,
            o = {}.hasOwnProperty;
          (i = n(2026)),
            (e = n(9335)),
            (t.exports = (function (t) {
              function n(t, i, o) {
                if ((n.__super__.constructor.call(this, t), null == i))
                  throw new Error(
                    "Missing DTD element name. " + this.debugInfo()
                  );
                o || (o = "(#PCDATA)"),
                  Array.isArray(o) && (o = "(" + o.join(",") + ")"),
                  (this.name = this.stringify.name(i)),
                  (this.type = e.ElementDeclaration),
                  (this.value = this.stringify.dtdElementValue(o));
              }
              return (
                (function (t, e) {
                  for (var n in e) o.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(n, t),
                (n.prototype.toString = function (t) {
                  return this.options.writer.dtdElement(
                    this,
                    this.options.writer.filterOptions(t)
                  );
                }),
                n
              );
            })(i));
        }.call(this));
      },
      9078: function (t, e, n) {
        (function () {
          var e,
            i,
            o,
            r = {}.hasOwnProperty;
          (o = n(8369).isObject),
            (i = n(2026)),
            (e = n(9335)),
            (t.exports = (function (t) {
              function n(t, i, r, s) {
                if ((n.__super__.constructor.call(this, t), null == r))
                  throw new Error(
                    "Missing DTD entity name. " + this.debugInfo(r)
                  );
                if (null == s)
                  throw new Error(
                    "Missing DTD entity value. " + this.debugInfo(r)
                  );
                if (
                  ((this.pe = !!i),
                  (this.name = this.stringify.name(r)),
                  (this.type = e.EntityDeclaration),
                  o(s))
                ) {
                  if (!s.pubID && !s.sysID)
                    throw new Error(
                      "Public and/or system identifiers are required for an external entity. " +
                        this.debugInfo(r)
                    );
                  if (s.pubID && !s.sysID)
                    throw new Error(
                      "System identifier is required for a public external entity. " +
                        this.debugInfo(r)
                    );
                  if (
                    ((this.internal = !1),
                    null != s.pubID &&
                      (this.pubID = this.stringify.dtdPubID(s.pubID)),
                    null != s.sysID &&
                      (this.sysID = this.stringify.dtdSysID(s.sysID)),
                    null != s.nData &&
                      (this.nData = this.stringify.dtdNData(s.nData)),
                    this.pe && this.nData)
                  )
                    throw new Error(
                      "Notation declaration is not allowed in a parameter entity. " +
                        this.debugInfo(r)
                    );
                } else
                  (this.value = this.stringify.dtdEntityValue(s)),
                    (this.internal = !0);
              }
              return (
                (function (t, e) {
                  for (var n in e) r.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(n, t),
                Object.defineProperty(n.prototype, "publicId", {
                  get: function () {
                    return this.pubID;
                  },
                }),
                Object.defineProperty(n.prototype, "systemId", {
                  get: function () {
                    return this.sysID;
                  },
                }),
                Object.defineProperty(n.prototype, "notationName", {
                  get: function () {
                    return this.nData || null;
                  },
                }),
                Object.defineProperty(n.prototype, "inputEncoding", {
                  get: function () {
                    return null;
                  },
                }),
                Object.defineProperty(n.prototype, "xmlEncoding", {
                  get: function () {
                    return null;
                  },
                }),
                Object.defineProperty(n.prototype, "xmlVersion", {
                  get: function () {
                    return null;
                  },
                }),
                (n.prototype.toString = function (t) {
                  return this.options.writer.dtdEntity(
                    this,
                    this.options.writer.filterOptions(t)
                  );
                }),
                n
              );
            })(i));
        }.call(this));
      },
      4777: function (t, e, n) {
        (function () {
          var e,
            i,
            o = {}.hasOwnProperty;
          (i = n(2026)),
            (e = n(9335)),
            (t.exports = (function (t) {
              function n(t, i, o) {
                if ((n.__super__.constructor.call(this, t), null == i))
                  throw new Error(
                    "Missing DTD notation name. " + this.debugInfo(i)
                  );
                if (!o.pubID && !o.sysID)
                  throw new Error(
                    "Public or system identifiers are required for an external entity. " +
                      this.debugInfo(i)
                  );
                (this.name = this.stringify.name(i)),
                  (this.type = e.NotationDeclaration),
                  null != o.pubID &&
                    (this.pubID = this.stringify.dtdPubID(o.pubID)),
                  null != o.sysID &&
                    (this.sysID = this.stringify.dtdSysID(o.sysID));
              }
              return (
                (function (t, e) {
                  for (var n in e) o.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(n, t),
                Object.defineProperty(n.prototype, "publicId", {
                  get: function () {
                    return this.pubID;
                  },
                }),
                Object.defineProperty(n.prototype, "systemId", {
                  get: function () {
                    return this.sysID;
                  },
                }),
                (n.prototype.toString = function (t) {
                  return this.options.writer.dtdNotation(
                    this,
                    this.options.writer.filterOptions(t)
                  );
                }),
                n
              );
            })(i));
        }.call(this));
      },
      9077: function (t, e, n) {
        (function () {
          var e,
            i,
            o,
            r = {}.hasOwnProperty;
          (o = n(8369).isObject),
            (i = n(2026)),
            (e = n(9335)),
            (t.exports = (function (t) {
              function n(t, i, r, s) {
                var a;
                n.__super__.constructor.call(this, t),
                  o(i) &&
                    ((i = (a = i).version),
                    (r = a.encoding),
                    (s = a.standalone)),
                  i || (i = "1.0"),
                  (this.type = e.Declaration),
                  (this.version = this.stringify.xmlVersion(i)),
                  null != r && (this.encoding = this.stringify.xmlEncoding(r)),
                  null != s &&
                    (this.standalone = this.stringify.xmlStandalone(s));
              }
              return (
                (function (t, e) {
                  for (var n in e) r.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(n, t),
                (n.prototype.toString = function (t) {
                  return this.options.writer.declaration(
                    this,
                    this.options.writer.filterOptions(t)
                  );
                }),
                n
              );
            })(i));
        }.call(this));
      },
      6544: function (t, e, n) {
        (function () {
          var e,
            i,
            o,
            r,
            s,
            a,
            l,
            u,
            p = {}.hasOwnProperty;
          (u = n(8369).isObject),
            (l = n(2026)),
            (e = n(9335)),
            (i = n(1179)),
            (r = n(9078)),
            (o = n(6347)),
            (s = n(4777)),
            (a = n(663)),
            (t.exports = (function (t) {
              function n(t, i, o) {
                var r, s, a, l, p, c;
                if (
                  (n.__super__.constructor.call(this, t),
                  (this.type = e.DocType),
                  t.children)
                )
                  for (s = 0, a = (l = t.children).length; s < a; s++)
                    if ((r = l[s]).type === e.Element) {
                      this.name = r.name;
                      break;
                    }
                (this.documentObject = t),
                  u(i) && ((i = (p = i).pubID), (o = p.sysID)),
                  null == o && ((o = (c = [i, o])[0]), (i = c[1])),
                  null != i && (this.pubID = this.stringify.dtdPubID(i)),
                  null != o && (this.sysID = this.stringify.dtdSysID(o));
              }
              return (
                (function (t, e) {
                  for (var n in e) p.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(n, t),
                Object.defineProperty(n.prototype, "entities", {
                  get: function () {
                    var t, n, i, o, r;
                    for (
                      o = {}, n = 0, i = (r = this.children).length;
                      n < i;
                      n++
                    )
                      (t = r[n]).type !== e.EntityDeclaration ||
                        t.pe ||
                        (o[t.name] = t);
                    return new a(o);
                  },
                }),
                Object.defineProperty(n.prototype, "notations", {
                  get: function () {
                    var t, n, i, o, r;
                    for (
                      o = {}, n = 0, i = (r = this.children).length;
                      n < i;
                      n++
                    )
                      (t = r[n]).type === e.NotationDeclaration &&
                        (o[t.name] = t);
                    return new a(o);
                  },
                }),
                Object.defineProperty(n.prototype, "publicId", {
                  get: function () {
                    return this.pubID;
                  },
                }),
                Object.defineProperty(n.prototype, "systemId", {
                  get: function () {
                    return this.sysID;
                  },
                }),
                Object.defineProperty(n.prototype, "internalSubset", {
                  get: function () {
                    throw new Error(
                      "This DOM method is not implemented." + this.debugInfo()
                    );
                  },
                }),
                (n.prototype.element = function (t, e) {
                  var n;
                  return (n = new o(this, t, e)), this.children.push(n), this;
                }),
                (n.prototype.attList = function (t, e, n, o, r) {
                  var s;
                  return (
                    (s = new i(this, t, e, n, o, r)),
                    this.children.push(s),
                    this
                  );
                }),
                (n.prototype.entity = function (t, e) {
                  var n;
                  return (
                    (n = new r(this, !1, t, e)), this.children.push(n), this
                  );
                }),
                (n.prototype.pEntity = function (t, e) {
                  var n;
                  return (
                    (n = new r(this, !0, t, e)), this.children.push(n), this
                  );
                }),
                (n.prototype.notation = function (t, e) {
                  var n;
                  return (n = new s(this, t, e)), this.children.push(n), this;
                }),
                (n.prototype.toString = function (t) {
                  return this.options.writer.docType(
                    this,
                    this.options.writer.filterOptions(t)
                  );
                }),
                (n.prototype.ele = function (t, e) {
                  return this.element(t, e);
                }),
                (n.prototype.att = function (t, e, n, i, o) {
                  return this.attList(t, e, n, i, o);
                }),
                (n.prototype.ent = function (t, e) {
                  return this.entity(t, e);
                }),
                (n.prototype.pent = function (t, e) {
                  return this.pEntity(t, e);
                }),
                (n.prototype.not = function (t, e) {
                  return this.notation(t, e);
                }),
                (n.prototype.up = function () {
                  return this.root() || this.documentObject;
                }),
                (n.prototype.isEqualNode = function (t) {
                  return (
                    !!n.__super__.isEqualNode
                      .apply(this, arguments)
                      .isEqualNode(t) &&
                    t.name === this.name &&
                    t.publicId === this.publicId &&
                    t.systemId === this.systemId
                  );
                }),
                n
              );
            })(l));
        }.call(this));
      },
      6934: function (t, e, n) {
        (function () {
          var e,
            i,
            o,
            r,
            s,
            a,
            l,
            u = {}.hasOwnProperty;
          (l = n(8369).isPlainObject),
            (o = n(1770)),
            (i = n(383)),
            (r = n(2026)),
            (e = n(9335)),
            (a = n(5549)),
            (s = n(6434)),
            (t.exports = (function (t) {
              function n(t) {
                n.__super__.constructor.call(this, null),
                  (this.name = "#document"),
                  (this.type = e.Document),
                  (this.documentURI = null),
                  (this.domConfig = new i()),
                  t || (t = {}),
                  t.writer || (t.writer = new s()),
                  (this.options = t),
                  (this.stringify = new a(t));
              }
              return (
                (function (t, e) {
                  for (var n in e) u.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(n, t),
                Object.defineProperty(n.prototype, "implementation", {
                  value: new o(),
                }),
                Object.defineProperty(n.prototype, "doctype", {
                  get: function () {
                    var t, n, i, o;
                    for (n = 0, i = (o = this.children).length; n < i; n++)
                      if ((t = o[n]).type === e.DocType) return t;
                    return null;
                  },
                }),
                Object.defineProperty(n.prototype, "documentElement", {
                  get: function () {
                    return this.rootObject || null;
                  },
                }),
                Object.defineProperty(n.prototype, "inputEncoding", {
                  get: function () {
                    return null;
                  },
                }),
                Object.defineProperty(n.prototype, "strictErrorChecking", {
                  get: function () {
                    return !1;
                  },
                }),
                Object.defineProperty(n.prototype, "xmlEncoding", {
                  get: function () {
                    return 0 !== this.children.length &&
                      this.children[0].type === e.Declaration
                      ? this.children[0].encoding
                      : null;
                  },
                }),
                Object.defineProperty(n.prototype, "xmlStandalone", {
                  get: function () {
                    return (
                      0 !== this.children.length &&
                      this.children[0].type === e.Declaration &&
                      "yes" === this.children[0].standalone
                    );
                  },
                }),
                Object.defineProperty(n.prototype, "xmlVersion", {
                  get: function () {
                    return 0 !== this.children.length &&
                      this.children[0].type === e.Declaration
                      ? this.children[0].version
                      : "1.0";
                  },
                }),
                Object.defineProperty(n.prototype, "URL", {
                  get: function () {
                    return this.documentURI;
                  },
                }),
                Object.defineProperty(n.prototype, "origin", {
                  get: function () {
                    return null;
                  },
                }),
                Object.defineProperty(n.prototype, "compatMode", {
                  get: function () {
                    return null;
                  },
                }),
                Object.defineProperty(n.prototype, "characterSet", {
                  get: function () {
                    return null;
                  },
                }),
                Object.defineProperty(n.prototype, "contentType", {
                  get: function () {
                    return null;
                  },
                }),
                (n.prototype.end = function (t) {
                  var e;
                  return (
                    (e = {}),
                    t
                      ? l(t) && ((e = t), (t = this.options.writer))
                      : (t = this.options.writer),
                    t.document(this, t.filterOptions(e))
                  );
                }),
                (n.prototype.toString = function (t) {
                  return this.options.writer.document(
                    this,
                    this.options.writer.filterOptions(t)
                  );
                }),
                (n.prototype.createElement = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.createDocumentFragment = function () {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.createTextNode = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.createComment = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.createCDATASection = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.createProcessingInstruction = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.createAttribute = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.createEntityReference = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.getElementsByTagName = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.importNode = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.createElementNS = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.createAttributeNS = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.getElementsByTagNameNS = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.getElementById = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.adoptNode = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.normalizeDocument = function () {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.renameNode = function (t, e, n) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.getElementsByClassName = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.createEvent = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.createRange = function () {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.createNodeIterator = function (t, e, n) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.createTreeWalker = function (t, e, n) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                n
              );
            })(r));
        }.call(this));
      },
      9227: function (t, e, n) {
        (function () {
          var e,
            i,
            o,
            r,
            s,
            a,
            l,
            u,
            p,
            c,
            d,
            h,
            f,
            g,
            m,
            y,
            v,
            b,
            S,
            w,
            O,
            _,
            N,
            C = {}.hasOwnProperty;
          (N = n(8369)),
            (O = N.isObject),
            (w = N.isFunction),
            (_ = N.isPlainObject),
            (S = N.getValue),
            (e = n(9335)),
            (h = n(6934)),
            (f = n(2161)),
            (r = n(6170)),
            (s = n(2096)),
            (m = n(9529)),
            (b = n(3595)),
            (g = n(9181)),
            (c = n(9077)),
            (d = n(6544)),
            (a = n(1179)),
            (u = n(9078)),
            (l = n(6347)),
            (p = n(4777)),
            (o = n(2750)),
            (v = n(5549)),
            (y = n(6434)),
            (i = n(594)),
            (t.exports = (function () {
              function t(t, n, i) {
                var o;
                (this.name = "?xml"),
                  (this.type = e.Document),
                  t || (t = {}),
                  (o = {}),
                  t.writer
                    ? _(t.writer) && ((o = t.writer), (t.writer = new y()))
                    : (t.writer = new y()),
                  (this.options = t),
                  (this.writer = t.writer),
                  (this.writerOptions = this.writer.filterOptions(o)),
                  (this.stringify = new v(t)),
                  (this.onDataCallback = n || function () {}),
                  (this.onEndCallback = i || function () {}),
                  (this.currentNode = null),
                  (this.currentLevel = -1),
                  (this.openTags = {}),
                  (this.documentStarted = !1),
                  (this.documentCompleted = !1),
                  (this.root = null);
              }
              return (
                (t.prototype.createChildNode = function (t) {
                  var n, i, o, r, s, a, l, u;
                  switch (t.type) {
                    case e.CData:
                      this.cdata(t.value);
                      break;
                    case e.Comment:
                      this.comment(t.value);
                      break;
                    case e.Element:
                      for (i in ((o = {}), (l = t.attribs)))
                        C.call(l, i) && ((n = l[i]), (o[i] = n.value));
                      this.node(t.name, o);
                      break;
                    case e.Dummy:
                      this.dummy();
                      break;
                    case e.Raw:
                      this.raw(t.value);
                      break;
                    case e.Text:
                      this.text(t.value);
                      break;
                    case e.ProcessingInstruction:
                      this.instruction(t.target, t.value);
                      break;
                    default:
                      throw new Error(
                        "This XML node type is not supported in a JS object: " +
                          t.constructor.name
                      );
                  }
                  for (s = 0, a = (u = t.children).length; s < a; s++)
                    (r = u[s]),
                      this.createChildNode(r),
                      r.type === e.Element && this.up();
                  return this;
                }),
                (t.prototype.dummy = function () {
                  return this;
                }),
                (t.prototype.node = function (t, e, n) {
                  var i;
                  if (null == t) throw new Error("Missing node name.");
                  if (this.root && -1 === this.currentLevel)
                    throw new Error(
                      "Document can only have one root node. " +
                        this.debugInfo(t)
                    );
                  return (
                    this.openCurrent(),
                    (t = S(t)),
                    null == e && (e = {}),
                    (e = S(e)),
                    O(e) || ((n = (i = [e, n])[0]), (e = i[1])),
                    (this.currentNode = new f(this, t, e)),
                    (this.currentNode.children = !1),
                    this.currentLevel++,
                    (this.openTags[this.currentLevel] = this.currentNode),
                    null != n && this.text(n),
                    this
                  );
                }),
                (t.prototype.element = function (t, n, i) {
                  var o, r, s, a, l, u;
                  if (this.currentNode && this.currentNode.type === e.DocType)
                    this.dtdElement.apply(this, arguments);
                  else if (Array.isArray(t) || O(t) || w(t))
                    for (
                      a = this.options.noValidation,
                        this.options.noValidation = !0,
                        (u = new h(this.options).element("TEMP_ROOT")).element(
                          t
                        ),
                        this.options.noValidation = a,
                        r = 0,
                        s = (l = u.children).length;
                      r < s;
                      r++
                    )
                      (o = l[r]),
                        this.createChildNode(o),
                        o.type === e.Element && this.up();
                  else this.node(t, n, i);
                  return this;
                }),
                (t.prototype.attribute = function (t, e) {
                  var n, i;
                  if (!this.currentNode || this.currentNode.children)
                    throw new Error(
                      "att() can only be used immediately after an ele() call in callback mode. " +
                        this.debugInfo(t)
                    );
                  if ((null != t && (t = S(t)), O(t)))
                    for (n in t)
                      C.call(t, n) && ((i = t[n]), this.attribute(n, i));
                  else
                    w(e) && (e = e.apply()),
                      this.options.keepNullAttributes && null == e
                        ? (this.currentNode.attribs[t] = new o(this, t, ""))
                        : null != e &&
                          (this.currentNode.attribs[t] = new o(this, t, e));
                  return this;
                }),
                (t.prototype.text = function (t) {
                  var e;
                  return (
                    this.openCurrent(),
                    (e = new b(this, t)),
                    this.onData(
                      this.writer.text(
                        e,
                        this.writerOptions,
                        this.currentLevel + 1
                      ),
                      this.currentLevel + 1
                    ),
                    this
                  );
                }),
                (t.prototype.cdata = function (t) {
                  var e;
                  return (
                    this.openCurrent(),
                    (e = new r(this, t)),
                    this.onData(
                      this.writer.cdata(
                        e,
                        this.writerOptions,
                        this.currentLevel + 1
                      ),
                      this.currentLevel + 1
                    ),
                    this
                  );
                }),
                (t.prototype.comment = function (t) {
                  var e;
                  return (
                    this.openCurrent(),
                    (e = new s(this, t)),
                    this.onData(
                      this.writer.comment(
                        e,
                        this.writerOptions,
                        this.currentLevel + 1
                      ),
                      this.currentLevel + 1
                    ),
                    this
                  );
                }),
                (t.prototype.raw = function (t) {
                  var e;
                  return (
                    this.openCurrent(),
                    (e = new m(this, t)),
                    this.onData(
                      this.writer.raw(
                        e,
                        this.writerOptions,
                        this.currentLevel + 1
                      ),
                      this.currentLevel + 1
                    ),
                    this
                  );
                }),
                (t.prototype.instruction = function (t, e) {
                  var n, i, o, r, s;
                  if (
                    (this.openCurrent(),
                    null != t && (t = S(t)),
                    null != e && (e = S(e)),
                    Array.isArray(t))
                  )
                    for (n = 0, r = t.length; n < r; n++)
                      (i = t[n]), this.instruction(i);
                  else if (O(t))
                    for (i in t)
                      C.call(t, i) && ((o = t[i]), this.instruction(i, o));
                  else
                    w(e) && (e = e.apply()),
                      (s = new g(this, t, e)),
                      this.onData(
                        this.writer.processingInstruction(
                          s,
                          this.writerOptions,
                          this.currentLevel + 1
                        ),
                        this.currentLevel + 1
                      );
                  return this;
                }),
                (t.prototype.declaration = function (t, e, n) {
                  var i;
                  if ((this.openCurrent(), this.documentStarted))
                    throw new Error("declaration() must be the first node.");
                  return (
                    (i = new c(this, t, e, n)),
                    this.onData(
                      this.writer.declaration(
                        i,
                        this.writerOptions,
                        this.currentLevel + 1
                      ),
                      this.currentLevel + 1
                    ),
                    this
                  );
                }),
                (t.prototype.doctype = function (t, e, n) {
                  if ((this.openCurrent(), null == t))
                    throw new Error("Missing root node name.");
                  if (this.root)
                    throw new Error("dtd() must come before the root node.");
                  return (
                    (this.currentNode = new d(this, e, n)),
                    (this.currentNode.rootNodeName = t),
                    (this.currentNode.children = !1),
                    this.currentLevel++,
                    (this.openTags[this.currentLevel] = this.currentNode),
                    this
                  );
                }),
                (t.prototype.dtdElement = function (t, e) {
                  var n;
                  return (
                    this.openCurrent(),
                    (n = new l(this, t, e)),
                    this.onData(
                      this.writer.dtdElement(
                        n,
                        this.writerOptions,
                        this.currentLevel + 1
                      ),
                      this.currentLevel + 1
                    ),
                    this
                  );
                }),
                (t.prototype.attList = function (t, e, n, i, o) {
                  var r;
                  return (
                    this.openCurrent(),
                    (r = new a(this, t, e, n, i, o)),
                    this.onData(
                      this.writer.dtdAttList(
                        r,
                        this.writerOptions,
                        this.currentLevel + 1
                      ),
                      this.currentLevel + 1
                    ),
                    this
                  );
                }),
                (t.prototype.entity = function (t, e) {
                  var n;
                  return (
                    this.openCurrent(),
                    (n = new u(this, !1, t, e)),
                    this.onData(
                      this.writer.dtdEntity(
                        n,
                        this.writerOptions,
                        this.currentLevel + 1
                      ),
                      this.currentLevel + 1
                    ),
                    this
                  );
                }),
                (t.prototype.pEntity = function (t, e) {
                  var n;
                  return (
                    this.openCurrent(),
                    (n = new u(this, !0, t, e)),
                    this.onData(
                      this.writer.dtdEntity(
                        n,
                        this.writerOptions,
                        this.currentLevel + 1
                      ),
                      this.currentLevel + 1
                    ),
                    this
                  );
                }),
                (t.prototype.notation = function (t, e) {
                  var n;
                  return (
                    this.openCurrent(),
                    (n = new p(this, t, e)),
                    this.onData(
                      this.writer.dtdNotation(
                        n,
                        this.writerOptions,
                        this.currentLevel + 1
                      ),
                      this.currentLevel + 1
                    ),
                    this
                  );
                }),
                (t.prototype.up = function () {
                  if (this.currentLevel < 0)
                    throw new Error("The document node has no parent.");
                  return (
                    this.currentNode
                      ? (this.currentNode.children
                          ? this.closeNode(this.currentNode)
                          : this.openNode(this.currentNode),
                        (this.currentNode = null))
                      : this.closeNode(this.openTags[this.currentLevel]),
                    delete this.openTags[this.currentLevel],
                    this.currentLevel--,
                    this
                  );
                }),
                (t.prototype.end = function () {
                  for (; this.currentLevel >= 0; ) this.up();
                  return this.onEnd();
                }),
                (t.prototype.openCurrent = function () {
                  if (this.currentNode)
                    return (
                      (this.currentNode.children = !0),
                      this.openNode(this.currentNode)
                    );
                }),
                (t.prototype.openNode = function (t) {
                  var n, o, r, s;
                  if (!t.isOpen) {
                    if (
                      (this.root ||
                        0 !== this.currentLevel ||
                        t.type !== e.Element ||
                        (this.root = t),
                      (o = ""),
                      t.type === e.Element)
                    ) {
                      for (r in ((this.writerOptions.state = i.OpenTag),
                      (o =
                        this.writer.indent(
                          t,
                          this.writerOptions,
                          this.currentLevel
                        ) +
                        "<" +
                        t.name),
                      (s = t.attribs)))
                        C.call(s, r) &&
                          ((n = s[r]),
                          (o += this.writer.attribute(
                            n,
                            this.writerOptions,
                            this.currentLevel
                          )));
                      (o +=
                        (t.children ? ">" : "/>") +
                        this.writer.endline(
                          t,
                          this.writerOptions,
                          this.currentLevel
                        )),
                        (this.writerOptions.state = i.InsideTag);
                    } else
                      (this.writerOptions.state = i.OpenTag),
                        (o =
                          this.writer.indent(
                            t,
                            this.writerOptions,
                            this.currentLevel
                          ) +
                          "<!DOCTYPE " +
                          t.rootNodeName),
                        t.pubID && t.sysID
                          ? (o += ' PUBLIC "' + t.pubID + '" "' + t.sysID + '"')
                          : t.sysID && (o += ' SYSTEM "' + t.sysID + '"'),
                        t.children
                          ? ((o += " ["),
                            (this.writerOptions.state = i.InsideTag))
                          : ((this.writerOptions.state = i.CloseTag),
                            (o += ">")),
                        (o += this.writer.endline(
                          t,
                          this.writerOptions,
                          this.currentLevel
                        ));
                    return this.onData(o, this.currentLevel), (t.isOpen = !0);
                  }
                }),
                (t.prototype.closeNode = function (t) {
                  var n;
                  if (!t.isClosed)
                    return (
                      "",
                      (this.writerOptions.state = i.CloseTag),
                      (n =
                        t.type === e.Element
                          ? this.writer.indent(
                              t,
                              this.writerOptions,
                              this.currentLevel
                            ) +
                            "</" +
                            t.name +
                            ">" +
                            this.writer.endline(
                              t,
                              this.writerOptions,
                              this.currentLevel
                            )
                          : this.writer.indent(
                              t,
                              this.writerOptions,
                              this.currentLevel
                            ) +
                            "]>" +
                            this.writer.endline(
                              t,
                              this.writerOptions,
                              this.currentLevel
                            )),
                      (this.writerOptions.state = i.None),
                      this.onData(n, this.currentLevel),
                      (t.isClosed = !0)
                    );
                }),
                (t.prototype.onData = function (t, e) {
                  return (
                    (this.documentStarted = !0), this.onDataCallback(t, e + 1)
                  );
                }),
                (t.prototype.onEnd = function () {
                  return (this.documentCompleted = !0), this.onEndCallback();
                }),
                (t.prototype.debugInfo = function (t) {
                  return null == t ? "" : "node: <" + t + ">";
                }),
                (t.prototype.ele = function () {
                  return this.element.apply(this, arguments);
                }),
                (t.prototype.nod = function (t, e, n) {
                  return this.node(t, e, n);
                }),
                (t.prototype.txt = function (t) {
                  return this.text(t);
                }),
                (t.prototype.dat = function (t) {
                  return this.cdata(t);
                }),
                (t.prototype.com = function (t) {
                  return this.comment(t);
                }),
                (t.prototype.ins = function (t, e) {
                  return this.instruction(t, e);
                }),
                (t.prototype.dec = function (t, e, n) {
                  return this.declaration(t, e, n);
                }),
                (t.prototype.dtd = function (t, e, n) {
                  return this.doctype(t, e, n);
                }),
                (t.prototype.e = function (t, e, n) {
                  return this.element(t, e, n);
                }),
                (t.prototype.n = function (t, e, n) {
                  return this.node(t, e, n);
                }),
                (t.prototype.t = function (t) {
                  return this.text(t);
                }),
                (t.prototype.d = function (t) {
                  return this.cdata(t);
                }),
                (t.prototype.c = function (t) {
                  return this.comment(t);
                }),
                (t.prototype.r = function (t) {
                  return this.raw(t);
                }),
                (t.prototype.i = function (t, e) {
                  return this.instruction(t, e);
                }),
                (t.prototype.att = function () {
                  return this.currentNode && this.currentNode.type === e.DocType
                    ? this.attList.apply(this, arguments)
                    : this.attribute.apply(this, arguments);
                }),
                (t.prototype.a = function () {
                  return this.currentNode && this.currentNode.type === e.DocType
                    ? this.attList.apply(this, arguments)
                    : this.attribute.apply(this, arguments);
                }),
                (t.prototype.ent = function (t, e) {
                  return this.entity(t, e);
                }),
                (t.prototype.pent = function (t, e) {
                  return this.pEntity(t, e);
                }),
                (t.prototype.not = function (t, e) {
                  return this.notation(t, e);
                }),
                t
              );
            })());
        }.call(this));
      },
      8833: function (t, e, n) {
        (function () {
          var e,
            i,
            o = {}.hasOwnProperty;
          (i = n(2026)),
            (e = n(9335)),
            (t.exports = (function (t) {
              function n(t) {
                n.__super__.constructor.call(this, t), (this.type = e.Dummy);
              }
              return (
                (function (t, e) {
                  for (var n in e) o.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(n, t),
                (n.prototype.clone = function () {
                  return Object.create(this);
                }),
                (n.prototype.toString = function (t) {
                  return "";
                }),
                n
              );
            })(i));
        }.call(this));
      },
      2161: function (t, e, n) {
        (function () {
          var e,
            i,
            o,
            r,
            s,
            a,
            l,
            u,
            p = {}.hasOwnProperty;
          (u = n(8369)),
            (l = u.isObject),
            (a = u.isFunction),
            (s = u.getValue),
            (r = n(2026)),
            (e = n(9335)),
            (i = n(2750)),
            (o = n(663)),
            (t.exports = (function (t) {
              function n(t, i, o) {
                var r, s, a, l;
                if ((n.__super__.constructor.call(this, t), null == i))
                  throw new Error("Missing element name. " + this.debugInfo());
                if (
                  ((this.name = this.stringify.name(i)),
                  (this.type = e.Element),
                  (this.attribs = {}),
                  (this.schemaTypeInfo = null),
                  null != o && this.attribute(o),
                  t.type === e.Document &&
                    ((this.isRoot = !0),
                    (this.documentObject = t),
                    (t.rootObject = this),
                    t.children))
                )
                  for (s = 0, a = (l = t.children).length; s < a; s++)
                    if ((r = l[s]).type === e.DocType) {
                      r.name = this.name;
                      break;
                    }
              }
              return (
                (function (t, e) {
                  for (var n in e) p.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(n, t),
                Object.defineProperty(n.prototype, "tagName", {
                  get: function () {
                    return this.name;
                  },
                }),
                Object.defineProperty(n.prototype, "namespaceURI", {
                  get: function () {
                    return "";
                  },
                }),
                Object.defineProperty(n.prototype, "prefix", {
                  get: function () {
                    return "";
                  },
                }),
                Object.defineProperty(n.prototype, "localName", {
                  get: function () {
                    return this.name;
                  },
                }),
                Object.defineProperty(n.prototype, "id", {
                  get: function () {
                    throw new Error(
                      "This DOM method is not implemented." + this.debugInfo()
                    );
                  },
                }),
                Object.defineProperty(n.prototype, "className", {
                  get: function () {
                    throw new Error(
                      "This DOM method is not implemented." + this.debugInfo()
                    );
                  },
                }),
                Object.defineProperty(n.prototype, "classList", {
                  get: function () {
                    throw new Error(
                      "This DOM method is not implemented." + this.debugInfo()
                    );
                  },
                }),
                Object.defineProperty(n.prototype, "attributes", {
                  get: function () {
                    return (
                      (this.attributeMap && this.attributeMap.nodes) ||
                        (this.attributeMap = new o(this.attribs)),
                      this.attributeMap
                    );
                  },
                }),
                (n.prototype.clone = function () {
                  var t, e, n, i;
                  for (e in ((n = Object.create(this)).isRoot &&
                    (n.documentObject = null),
                  (n.attribs = {}),
                  (i = this.attribs)))
                    p.call(i, e) && ((t = i[e]), (n.attribs[e] = t.clone()));
                  return (
                    (n.children = []),
                    this.children.forEach(function (t) {
                      var e;
                      return ((e = t.clone()).parent = n), n.children.push(e);
                    }),
                    n
                  );
                }),
                (n.prototype.attribute = function (t, e) {
                  var n, o;
                  if ((null != t && (t = s(t)), l(t)))
                    for (n in t)
                      p.call(t, n) && ((o = t[n]), this.attribute(n, o));
                  else
                    a(e) && (e = e.apply()),
                      this.options.keepNullAttributes && null == e
                        ? (this.attribs[t] = new i(this, t, ""))
                        : null != e && (this.attribs[t] = new i(this, t, e));
                  return this;
                }),
                (n.prototype.removeAttribute = function (t) {
                  var e, n, i;
                  if (null == t)
                    throw new Error(
                      "Missing attribute name. " + this.debugInfo()
                    );
                  if (((t = s(t)), Array.isArray(t)))
                    for (n = 0, i = t.length; n < i; n++)
                      (e = t[n]), delete this.attribs[e];
                  else delete this.attribs[t];
                  return this;
                }),
                (n.prototype.toString = function (t) {
                  return this.options.writer.element(
                    this,
                    this.options.writer.filterOptions(t)
                  );
                }),
                (n.prototype.att = function (t, e) {
                  return this.attribute(t, e);
                }),
                (n.prototype.a = function (t, e) {
                  return this.attribute(t, e);
                }),
                (n.prototype.getAttribute = function (t) {
                  return this.attribs.hasOwnProperty(t)
                    ? this.attribs[t].value
                    : null;
                }),
                (n.prototype.setAttribute = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.getAttributeNode = function (t) {
                  return this.attribs.hasOwnProperty(t)
                    ? this.attribs[t]
                    : null;
                }),
                (n.prototype.setAttributeNode = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.removeAttributeNode = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.getElementsByTagName = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.getAttributeNS = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.setAttributeNS = function (t, e, n) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.removeAttributeNS = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.getAttributeNodeNS = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.setAttributeNodeNS = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.getElementsByTagNameNS = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.hasAttribute = function (t) {
                  return this.attribs.hasOwnProperty(t);
                }),
                (n.prototype.hasAttributeNS = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.setIdAttribute = function (t, e) {
                  return this.attribs.hasOwnProperty(t)
                    ? this.attribs[t].isId
                    : e;
                }),
                (n.prototype.setIdAttributeNS = function (t, e, n) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.setIdAttributeNode = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.getElementsByTagName = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.getElementsByTagNameNS = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.getElementsByClassName = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.isEqualNode = function (t) {
                  var e, i, o;
                  if (
                    !n.__super__.isEqualNode
                      .apply(this, arguments)
                      .isEqualNode(t)
                  )
                    return !1;
                  if (t.namespaceURI !== this.namespaceURI) return !1;
                  if (t.prefix !== this.prefix) return !1;
                  if (t.localName !== this.localName) return !1;
                  if (t.attribs.length !== this.attribs.length) return !1;
                  for (
                    e = i = 0, o = this.attribs.length - 1;
                    0 <= o ? i <= o : i >= o;
                    e = 0 <= o ? ++i : --i
                  )
                    if (!this.attribs[e].isEqualNode(t.attribs[e])) return !1;
                  return !0;
                }),
                n
              );
            })(r));
        }.call(this));
      },
      663: function (t) {
        (function () {
          t.exports = (function () {
            function t(t) {
              this.nodes = t;
            }
            return (
              Object.defineProperty(t.prototype, "length", {
                get: function () {
                  return Object.keys(this.nodes).length || 0;
                },
              }),
              (t.prototype.clone = function () {
                return (this.nodes = null);
              }),
              (t.prototype.getNamedItem = function (t) {
                return this.nodes[t];
              }),
              (t.prototype.setNamedItem = function (t) {
                var e;
                return (
                  (e = this.nodes[t.nodeName]),
                  (this.nodes[t.nodeName] = t),
                  e || null
                );
              }),
              (t.prototype.removeNamedItem = function (t) {
                var e;
                return (e = this.nodes[t]), delete this.nodes[t], e || null;
              }),
              (t.prototype.item = function (t) {
                return this.nodes[Object.keys(this.nodes)[t]] || null;
              }),
              (t.prototype.getNamedItemNS = function (t, e) {
                throw new Error("This DOM method is not implemented.");
              }),
              (t.prototype.setNamedItemNS = function (t) {
                throw new Error("This DOM method is not implemented.");
              }),
              (t.prototype.removeNamedItemNS = function (t, e) {
                throw new Error("This DOM method is not implemented.");
              }),
              t
            );
          })();
        }.call(this));
      },
      2026: function (t, e, n) {
        (function () {
          var e,
            i,
            o,
            r,
            s,
            a,
            l,
            u,
            p,
            c,
            d,
            h,
            f,
            g,
            m,
            y,
            v,
            b = {}.hasOwnProperty;
          (v = n(8369)),
            (y = v.isObject),
            (m = v.isFunction),
            (g = v.isEmpty),
            (f = v.getValue),
            (u = null),
            (o = null),
            (r = null),
            (s = null),
            (a = null),
            (d = null),
            (h = null),
            (c = null),
            (l = null),
            (i = null),
            (p = null),
            (e = null),
            (t.exports = (function () {
              function t(t) {
                (this.parent = t),
                  this.parent &&
                    ((this.options = this.parent.options),
                    (this.stringify = this.parent.stringify)),
                  (this.value = null),
                  (this.children = []),
                  (this.baseURI = null),
                  u ||
                    ((u = n(2161)),
                    (o = n(6170)),
                    (r = n(2096)),
                    (s = n(9077)),
                    (a = n(6544)),
                    (d = n(9529)),
                    (h = n(3595)),
                    (c = n(9181)),
                    (l = n(8833)),
                    (i = n(9335)),
                    (p = n(2390)),
                    n(663),
                    (e = n(7557)));
              }
              return (
                Object.defineProperty(t.prototype, "nodeName", {
                  get: function () {
                    return this.name;
                  },
                }),
                Object.defineProperty(t.prototype, "nodeType", {
                  get: function () {
                    return this.type;
                  },
                }),
                Object.defineProperty(t.prototype, "nodeValue", {
                  get: function () {
                    return this.value;
                  },
                }),
                Object.defineProperty(t.prototype, "parentNode", {
                  get: function () {
                    return this.parent;
                  },
                }),
                Object.defineProperty(t.prototype, "childNodes", {
                  get: function () {
                    return (
                      (this.childNodeList && this.childNodeList.nodes) ||
                        (this.childNodeList = new p(this.children)),
                      this.childNodeList
                    );
                  },
                }),
                Object.defineProperty(t.prototype, "firstChild", {
                  get: function () {
                    return this.children[0] || null;
                  },
                }),
                Object.defineProperty(t.prototype, "lastChild", {
                  get: function () {
                    return this.children[this.children.length - 1] || null;
                  },
                }),
                Object.defineProperty(t.prototype, "previousSibling", {
                  get: function () {
                    var t;
                    return (
                      (t = this.parent.children.indexOf(this)),
                      this.parent.children[t - 1] || null
                    );
                  },
                }),
                Object.defineProperty(t.prototype, "nextSibling", {
                  get: function () {
                    var t;
                    return (
                      (t = this.parent.children.indexOf(this)),
                      this.parent.children[t + 1] || null
                    );
                  },
                }),
                Object.defineProperty(t.prototype, "ownerDocument", {
                  get: function () {
                    return this.document() || null;
                  },
                }),
                Object.defineProperty(t.prototype, "textContent", {
                  get: function () {
                    var t, e, n, o, r;
                    if (
                      this.nodeType === i.Element ||
                      this.nodeType === i.DocumentFragment
                    ) {
                      for (
                        r = "", e = 0, n = (o = this.children).length;
                        e < n;
                        e++
                      )
                        (t = o[e]).textContent && (r += t.textContent);
                      return r;
                    }
                    return null;
                  },
                  set: function (t) {
                    throw new Error(
                      "This DOM method is not implemented." + this.debugInfo()
                    );
                  },
                }),
                (t.prototype.setParent = function (t) {
                  var e, n, i, o, r;
                  for (
                    this.parent = t,
                      t &&
                        ((this.options = t.options),
                        (this.stringify = t.stringify)),
                      r = [],
                      n = 0,
                      i = (o = this.children).length;
                    n < i;
                    n++
                  )
                    (e = o[n]), r.push(e.setParent(this));
                  return r;
                }),
                (t.prototype.element = function (t, e, n) {
                  var i, o, r, s, a, l, u, p, c, d, h;
                  if (
                    ((l = null),
                    null === e &&
                      null == n &&
                      ((e = (c = [{}, null])[0]), (n = c[1])),
                    null == e && (e = {}),
                    (e = f(e)),
                    y(e) || ((n = (d = [e, n])[0]), (e = d[1])),
                    null != t && (t = f(t)),
                    Array.isArray(t))
                  )
                    for (r = 0, u = t.length; r < u; r++)
                      (o = t[r]), (l = this.element(o));
                  else if (m(t)) l = this.element(t.apply());
                  else if (y(t)) {
                    for (a in t)
                      if (b.call(t, a))
                        if (
                          ((h = t[a]),
                          m(h) && (h = h.apply()),
                          !this.options.ignoreDecorators &&
                            this.stringify.convertAttKey &&
                            0 === a.indexOf(this.stringify.convertAttKey))
                        )
                          l = this.attribute(
                            a.substr(this.stringify.convertAttKey.length),
                            h
                          );
                        else if (
                          !this.options.separateArrayItems &&
                          Array.isArray(h) &&
                          g(h)
                        )
                          l = this.dummy();
                        else if (y(h) && g(h)) l = this.element(a);
                        else if (this.options.keepNullNodes || null != h)
                          if (
                            !this.options.separateArrayItems &&
                            Array.isArray(h)
                          )
                            for (s = 0, p = h.length; s < p; s++)
                              (o = h[s]),
                                ((i = {})[a] = o),
                                (l = this.element(i));
                          else
                            y(h)
                              ? !this.options.ignoreDecorators &&
                                this.stringify.convertTextKey &&
                                0 === a.indexOf(this.stringify.convertTextKey)
                                ? (l = this.element(h))
                                : (l = this.element(a)).element(h)
                              : (l = this.element(a, h));
                        else l = this.dummy();
                  } else
                    l =
                      this.options.keepNullNodes || null !== n
                        ? !this.options.ignoreDecorators &&
                          this.stringify.convertTextKey &&
                          0 === t.indexOf(this.stringify.convertTextKey)
                          ? this.text(n)
                          : !this.options.ignoreDecorators &&
                            this.stringify.convertCDataKey &&
                            0 === t.indexOf(this.stringify.convertCDataKey)
                          ? this.cdata(n)
                          : !this.options.ignoreDecorators &&
                            this.stringify.convertCommentKey &&
                            0 === t.indexOf(this.stringify.convertCommentKey)
                          ? this.comment(n)
                          : !this.options.ignoreDecorators &&
                            this.stringify.convertRawKey &&
                            0 === t.indexOf(this.stringify.convertRawKey)
                          ? this.raw(n)
                          : !this.options.ignoreDecorators &&
                            this.stringify.convertPIKey &&
                            0 === t.indexOf(this.stringify.convertPIKey)
                          ? this.instruction(
                              t.substr(this.stringify.convertPIKey.length),
                              n
                            )
                          : this.node(t, e, n)
                        : this.dummy();
                  if (null == l)
                    throw new Error(
                      "Could not create any elements with: " +
                        t +
                        ". " +
                        this.debugInfo()
                    );
                  return l;
                }),
                (t.prototype.insertBefore = function (t, e, n) {
                  var i, o, r, s, a;
                  if (null != t ? t.type : void 0)
                    return (
                      (s = e),
                      (r = t).setParent(this),
                      s
                        ? ((o = children.indexOf(s)),
                          (a = children.splice(o)),
                          children.push(r),
                          Array.prototype.push.apply(children, a))
                        : children.push(r),
                      r
                    );
                  if (this.isRoot)
                    throw new Error(
                      "Cannot insert elements at root level. " +
                        this.debugInfo(t)
                    );
                  return (
                    (o = this.parent.children.indexOf(this)),
                    (a = this.parent.children.splice(o)),
                    (i = this.parent.element(t, e, n)),
                    Array.prototype.push.apply(this.parent.children, a),
                    i
                  );
                }),
                (t.prototype.insertAfter = function (t, e, n) {
                  var i, o, r;
                  if (this.isRoot)
                    throw new Error(
                      "Cannot insert elements at root level. " +
                        this.debugInfo(t)
                    );
                  return (
                    (o = this.parent.children.indexOf(this)),
                    (r = this.parent.children.splice(o + 1)),
                    (i = this.parent.element(t, e, n)),
                    Array.prototype.push.apply(this.parent.children, r),
                    i
                  );
                }),
                (t.prototype.remove = function () {
                  var t;
                  if (this.isRoot)
                    throw new Error(
                      "Cannot remove the root element. " + this.debugInfo()
                    );
                  return (
                    (t = this.parent.children.indexOf(this)),
                    [].splice.apply(
                      this.parent.children,
                      [t, t - t + 1].concat([])
                    ),
                    this.parent
                  );
                }),
                (t.prototype.node = function (t, e, n) {
                  var i, o;
                  return (
                    null != t && (t = f(t)),
                    e || (e = {}),
                    (e = f(e)),
                    y(e) || ((n = (o = [e, n])[0]), (e = o[1])),
                    (i = new u(this, t, e)),
                    null != n && i.text(n),
                    this.children.push(i),
                    i
                  );
                }),
                (t.prototype.text = function (t) {
                  var e;
                  return (
                    y(t) && this.element(t),
                    (e = new h(this, t)),
                    this.children.push(e),
                    this
                  );
                }),
                (t.prototype.cdata = function (t) {
                  var e;
                  return (e = new o(this, t)), this.children.push(e), this;
                }),
                (t.prototype.comment = function (t) {
                  var e;
                  return (e = new r(this, t)), this.children.push(e), this;
                }),
                (t.prototype.commentBefore = function (t) {
                  var e, n;
                  return (
                    (e = this.parent.children.indexOf(this)),
                    (n = this.parent.children.splice(e)),
                    this.parent.comment(t),
                    Array.prototype.push.apply(this.parent.children, n),
                    this
                  );
                }),
                (t.prototype.commentAfter = function (t) {
                  var e, n;
                  return (
                    (e = this.parent.children.indexOf(this)),
                    (n = this.parent.children.splice(e + 1)),
                    this.parent.comment(t),
                    Array.prototype.push.apply(this.parent.children, n),
                    this
                  );
                }),
                (t.prototype.raw = function (t) {
                  var e;
                  return (e = new d(this, t)), this.children.push(e), this;
                }),
                (t.prototype.dummy = function () {
                  return new l(this);
                }),
                (t.prototype.instruction = function (t, e) {
                  var n, i, o, r, s;
                  if (
                    (null != t && (t = f(t)),
                    null != e && (e = f(e)),
                    Array.isArray(t))
                  )
                    for (r = 0, s = t.length; r < s; r++)
                      (n = t[r]), this.instruction(n);
                  else if (y(t))
                    for (n in t)
                      b.call(t, n) && ((i = t[n]), this.instruction(n, i));
                  else
                    m(e) && (e = e.apply()),
                      (o = new c(this, t, e)),
                      this.children.push(o);
                  return this;
                }),
                (t.prototype.instructionBefore = function (t, e) {
                  var n, i;
                  return (
                    (n = this.parent.children.indexOf(this)),
                    (i = this.parent.children.splice(n)),
                    this.parent.instruction(t, e),
                    Array.prototype.push.apply(this.parent.children, i),
                    this
                  );
                }),
                (t.prototype.instructionAfter = function (t, e) {
                  var n, i;
                  return (
                    (n = this.parent.children.indexOf(this)),
                    (i = this.parent.children.splice(n + 1)),
                    this.parent.instruction(t, e),
                    Array.prototype.push.apply(this.parent.children, i),
                    this
                  );
                }),
                (t.prototype.declaration = function (t, e, n) {
                  var o, r;
                  return (
                    (o = this.document()),
                    (r = new s(o, t, e, n)),
                    0 === o.children.length
                      ? o.children.unshift(r)
                      : o.children[0].type === i.Declaration
                      ? (o.children[0] = r)
                      : o.children.unshift(r),
                    o.root() || o
                  );
                }),
                (t.prototype.dtd = function (t, e) {
                  var n, o, r, s, l, u, p, c, d;
                  for (
                    n = this.document(),
                      o = new a(n, t, e),
                      r = s = 0,
                      u = (c = n.children).length;
                    s < u;
                    r = ++s
                  )
                    if (c[r].type === i.DocType) return (n.children[r] = o), o;
                  for (r = l = 0, p = (d = n.children).length; l < p; r = ++l)
                    if (d[r].isRoot) return n.children.splice(r, 0, o), o;
                  return n.children.push(o), o;
                }),
                (t.prototype.up = function () {
                  if (this.isRoot)
                    throw new Error(
                      "The root node has no parent. Use doc() if you need to get the document object."
                    );
                  return this.parent;
                }),
                (t.prototype.root = function () {
                  var t;
                  for (t = this; t; ) {
                    if (t.type === i.Document) return t.rootObject;
                    if (t.isRoot) return t;
                    t = t.parent;
                  }
                }),
                (t.prototype.document = function () {
                  var t;
                  for (t = this; t; ) {
                    if (t.type === i.Document) return t;
                    t = t.parent;
                  }
                }),
                (t.prototype.end = function (t) {
                  return this.document().end(t);
                }),
                (t.prototype.prev = function () {
                  var t;
                  if ((t = this.parent.children.indexOf(this)) < 1)
                    throw new Error(
                      "Already at the first node. " + this.debugInfo()
                    );
                  return this.parent.children[t - 1];
                }),
                (t.prototype.next = function () {
                  var t;
                  if (
                    -1 === (t = this.parent.children.indexOf(this)) ||
                    t === this.parent.children.length - 1
                  )
                    throw new Error(
                      "Already at the last node. " + this.debugInfo()
                    );
                  return this.parent.children[t + 1];
                }),
                (t.prototype.importDocument = function (t) {
                  var e;
                  return (
                    ((e = t.root().clone()).parent = this),
                    (e.isRoot = !1),
                    this.children.push(e),
                    this
                  );
                }),
                (t.prototype.debugInfo = function (t) {
                  var e, n;
                  return null != (t = t || this.name) ||
                    (null != (e = this.parent) ? e.name : void 0)
                    ? null == t
                      ? "parent: <" + this.parent.name + ">"
                      : (null != (n = this.parent) ? n.name : void 0)
                      ? "node: <" + t + ">, parent: <" + this.parent.name + ">"
                      : "node: <" + t + ">"
                    : "";
                }),
                (t.prototype.ele = function (t, e, n) {
                  return this.element(t, e, n);
                }),
                (t.prototype.nod = function (t, e, n) {
                  return this.node(t, e, n);
                }),
                (t.prototype.txt = function (t) {
                  return this.text(t);
                }),
                (t.prototype.dat = function (t) {
                  return this.cdata(t);
                }),
                (t.prototype.com = function (t) {
                  return this.comment(t);
                }),
                (t.prototype.ins = function (t, e) {
                  return this.instruction(t, e);
                }),
                (t.prototype.doc = function () {
                  return this.document();
                }),
                (t.prototype.dec = function (t, e, n) {
                  return this.declaration(t, e, n);
                }),
                (t.prototype.e = function (t, e, n) {
                  return this.element(t, e, n);
                }),
                (t.prototype.n = function (t, e, n) {
                  return this.node(t, e, n);
                }),
                (t.prototype.t = function (t) {
                  return this.text(t);
                }),
                (t.prototype.d = function (t) {
                  return this.cdata(t);
                }),
                (t.prototype.c = function (t) {
                  return this.comment(t);
                }),
                (t.prototype.r = function (t) {
                  return this.raw(t);
                }),
                (t.prototype.i = function (t, e) {
                  return this.instruction(t, e);
                }),
                (t.prototype.u = function () {
                  return this.up();
                }),
                (t.prototype.importXMLBuilder = function (t) {
                  return this.importDocument(t);
                }),
                (t.prototype.replaceChild = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (t.prototype.removeChild = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (t.prototype.appendChild = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (t.prototype.hasChildNodes = function () {
                  return 0 !== this.children.length;
                }),
                (t.prototype.cloneNode = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (t.prototype.normalize = function () {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (t.prototype.isSupported = function (t, e) {
                  return !0;
                }),
                (t.prototype.hasAttributes = function () {
                  return 0 !== this.attribs.length;
                }),
                (t.prototype.compareDocumentPosition = function (t) {
                  var n, i;
                  return (n = this) === t
                    ? 0
                    : this.document() !== t.document()
                    ? ((i = e.Disconnected | e.ImplementationSpecific),
                      Math.random() < 0.5
                        ? (i |= e.Preceding)
                        : (i |= e.Following),
                      i)
                    : n.isAncestor(t)
                    ? e.Contains | e.Preceding
                    : n.isDescendant(t)
                    ? e.Contains | e.Following
                    : n.isPreceding(t)
                    ? e.Preceding
                    : e.Following;
                }),
                (t.prototype.isSameNode = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (t.prototype.lookupPrefix = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (t.prototype.isDefaultNamespace = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (t.prototype.lookupNamespaceURI = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (t.prototype.isEqualNode = function (t) {
                  var e, n, i;
                  if (t.nodeType !== this.nodeType) return !1;
                  if (t.children.length !== this.children.length) return !1;
                  for (
                    e = n = 0, i = this.children.length - 1;
                    0 <= i ? n <= i : n >= i;
                    e = 0 <= i ? ++n : --n
                  )
                    if (!this.children[e].isEqualNode(t.children[e])) return !1;
                  return !0;
                }),
                (t.prototype.getFeature = function (t, e) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (t.prototype.setUserData = function (t, e, n) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (t.prototype.getUserData = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (t.prototype.contains = function (t) {
                  return !!t && (t === this || this.isDescendant(t));
                }),
                (t.prototype.isDescendant = function (t) {
                  var e, n, i, o;
                  for (n = 0, i = (o = this.children).length; n < i; n++) {
                    if (t === (e = o[n])) return !0;
                    if (e.isDescendant(t)) return !0;
                  }
                  return !1;
                }),
                (t.prototype.isAncestor = function (t) {
                  return t.isDescendant(this);
                }),
                (t.prototype.isPreceding = function (t) {
                  var e, n;
                  return (
                    (e = this.treePosition(t)),
                    (n = this.treePosition(this)),
                    -1 !== e && -1 !== n && e < n
                  );
                }),
                (t.prototype.isFollowing = function (t) {
                  var e, n;
                  return (
                    (e = this.treePosition(t)),
                    (n = this.treePosition(this)),
                    -1 !== e && -1 !== n && e > n
                  );
                }),
                (t.prototype.treePosition = function (t) {
                  var e, n;
                  return (
                    (n = 0),
                    (e = !1),
                    this.foreachTreeNode(this.document(), function (i) {
                      if ((n++, !e && i === t)) return (e = !0);
                    }),
                    e ? n : -1
                  );
                }),
                (t.prototype.foreachTreeNode = function (t, e) {
                  var n, i, o, r, s;
                  for (
                    t || (t = this.document()),
                      i = 0,
                      o = (r = t.children).length;
                    i < o;
                    i++
                  ) {
                    if ((s = e((n = r[i])))) return s;
                    if ((s = this.foreachTreeNode(n, e))) return s;
                  }
                }),
                t
              );
            })());
        }.call(this));
      },
      2390: function (t) {
        (function () {
          t.exports = (function () {
            function t(t) {
              this.nodes = t;
            }
            return (
              Object.defineProperty(t.prototype, "length", {
                get: function () {
                  return this.nodes.length || 0;
                },
              }),
              (t.prototype.clone = function () {
                return (this.nodes = null);
              }),
              (t.prototype.item = function (t) {
                return this.nodes[t] || null;
              }),
              t
            );
          })();
        }.call(this));
      },
      9181: function (t, e, n) {
        (function () {
          var e,
            i,
            o = {}.hasOwnProperty;
          (e = n(9335)),
            (i = n(6488)),
            (t.exports = (function (t) {
              function n(t, i, o) {
                if ((n.__super__.constructor.call(this, t), null == i))
                  throw new Error(
                    "Missing instruction target. " + this.debugInfo()
                  );
                (this.type = e.ProcessingInstruction),
                  (this.target = this.stringify.insTarget(i)),
                  (this.name = this.target),
                  o && (this.value = this.stringify.insValue(o));
              }
              return (
                (function (t, e) {
                  for (var n in e) o.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(n, t),
                (n.prototype.clone = function () {
                  return Object.create(this);
                }),
                (n.prototype.toString = function (t) {
                  return this.options.writer.processingInstruction(
                    this,
                    this.options.writer.filterOptions(t)
                  );
                }),
                (n.prototype.isEqualNode = function (t) {
                  return (
                    !!n.__super__.isEqualNode
                      .apply(this, arguments)
                      .isEqualNode(t) && t.target === this.target
                  );
                }),
                n
              );
            })(i));
        }.call(this));
      },
      9529: function (t, e, n) {
        (function () {
          var e,
            i,
            o = {}.hasOwnProperty;
          (e = n(9335)),
            (i = n(2026)),
            (t.exports = (function (t) {
              function n(t, i) {
                if ((n.__super__.constructor.call(this, t), null == i))
                  throw new Error("Missing raw text. " + this.debugInfo());
                (this.type = e.Raw), (this.value = this.stringify.raw(i));
              }
              return (
                (function (t, e) {
                  for (var n in e) o.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(n, t),
                (n.prototype.clone = function () {
                  return Object.create(this);
                }),
                (n.prototype.toString = function (t) {
                  return this.options.writer.raw(
                    this,
                    this.options.writer.filterOptions(t)
                  );
                }),
                n
              );
            })(i));
        }.call(this));
      },
      1996: function (t, e, n) {
        (function () {
          var e,
            i,
            o,
            r = {}.hasOwnProperty;
          (e = n(9335)),
            (o = n(751)),
            (i = n(594)),
            (t.exports = (function (t) {
              function n(t, e) {
                (this.stream = t), n.__super__.constructor.call(this, e);
              }
              return (
                (function (t, e) {
                  for (var n in e) r.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(n, t),
                (n.prototype.endline = function (t, e, o) {
                  return t.isLastRootNode && e.state === i.CloseTag
                    ? ""
                    : n.__super__.endline.call(this, t, e, o);
                }),
                (n.prototype.document = function (t, e) {
                  var n, i, o, r, s, a, l, u, p;
                  for (i = o = 0, s = (l = t.children).length; o < s; i = ++o)
                    (n = l[i]).isLastRootNode = i === t.children.length - 1;
                  for (
                    e = this.filterOptions(e),
                      p = [],
                      r = 0,
                      a = (u = t.children).length;
                    r < a;
                    r++
                  )
                    (n = u[r]), p.push(this.writeChildNode(n, e, 0));
                  return p;
                }),
                (n.prototype.attribute = function (t, e, i) {
                  return this.stream.write(
                    n.__super__.attribute.call(this, t, e, i)
                  );
                }),
                (n.prototype.cdata = function (t, e, i) {
                  return this.stream.write(
                    n.__super__.cdata.call(this, t, e, i)
                  );
                }),
                (n.prototype.comment = function (t, e, i) {
                  return this.stream.write(
                    n.__super__.comment.call(this, t, e, i)
                  );
                }),
                (n.prototype.declaration = function (t, e, i) {
                  return this.stream.write(
                    n.__super__.declaration.call(this, t, e, i)
                  );
                }),
                (n.prototype.docType = function (t, e, n) {
                  var o, r, s, a;
                  if (
                    (n || (n = 0),
                    this.openNode(t, e, n),
                    (e.state = i.OpenTag),
                    this.stream.write(this.indent(t, e, n)),
                    this.stream.write("<!DOCTYPE " + t.root().name),
                    t.pubID && t.sysID
                      ? this.stream.write(
                          ' PUBLIC "' + t.pubID + '" "' + t.sysID + '"'
                        )
                      : t.sysID &&
                        this.stream.write(' SYSTEM "' + t.sysID + '"'),
                    t.children.length > 0)
                  ) {
                    for (
                      this.stream.write(" ["),
                        this.stream.write(this.endline(t, e, n)),
                        e.state = i.InsideTag,
                        r = 0,
                        s = (a = t.children).length;
                      r < s;
                      r++
                    )
                      (o = a[r]), this.writeChildNode(o, e, n + 1);
                    (e.state = i.CloseTag), this.stream.write("]");
                  }
                  return (
                    (e.state = i.CloseTag),
                    this.stream.write(e.spaceBeforeSlash + ">"),
                    this.stream.write(this.endline(t, e, n)),
                    (e.state = i.None),
                    this.closeNode(t, e, n)
                  );
                }),
                (n.prototype.element = function (t, n, o) {
                  var s, a, l, u, p, c, d, h, f;
                  for (d in (o || (o = 0),
                  this.openNode(t, n, o),
                  (n.state = i.OpenTag),
                  this.stream.write(this.indent(t, n, o) + "<" + t.name),
                  (h = t.attribs)))
                    r.call(h, d) && ((s = h[d]), this.attribute(s, n, o));
                  if (
                    ((u = 0 === (l = t.children.length) ? null : t.children[0]),
                    0 === l ||
                      t.children.every(function (t) {
                        return (
                          (t.type === e.Text || t.type === e.Raw) &&
                          "" === t.value
                        );
                      }))
                  )
                    n.allowEmpty
                      ? (this.stream.write(">"),
                        (n.state = i.CloseTag),
                        this.stream.write("</" + t.name + ">"))
                      : ((n.state = i.CloseTag),
                        this.stream.write(n.spaceBeforeSlash + "/>"));
                  else if (
                    !n.pretty ||
                    1 !== l ||
                    (u.type !== e.Text && u.type !== e.Raw) ||
                    null == u.value
                  ) {
                    for (
                      this.stream.write(">" + this.endline(t, n, o)),
                        n.state = i.InsideTag,
                        p = 0,
                        c = (f = t.children).length;
                      p < c;
                      p++
                    )
                      (a = f[p]), this.writeChildNode(a, n, o + 1);
                    (n.state = i.CloseTag),
                      this.stream.write(
                        this.indent(t, n, o) + "</" + t.name + ">"
                      );
                  } else
                    this.stream.write(">"),
                      (n.state = i.InsideTag),
                      n.suppressPrettyCount++,
                      this.writeChildNode(u, n, o + 1),
                      n.suppressPrettyCount--,
                      (n.state = i.CloseTag),
                      this.stream.write("</" + t.name + ">");
                  return (
                    this.stream.write(this.endline(t, n, o)),
                    (n.state = i.None),
                    this.closeNode(t, n, o)
                  );
                }),
                (n.prototype.processingInstruction = function (t, e, i) {
                  return this.stream.write(
                    n.__super__.processingInstruction.call(this, t, e, i)
                  );
                }),
                (n.prototype.raw = function (t, e, i) {
                  return this.stream.write(n.__super__.raw.call(this, t, e, i));
                }),
                (n.prototype.text = function (t, e, i) {
                  return this.stream.write(
                    n.__super__.text.call(this, t, e, i)
                  );
                }),
                (n.prototype.dtdAttList = function (t, e, i) {
                  return this.stream.write(
                    n.__super__.dtdAttList.call(this, t, e, i)
                  );
                }),
                (n.prototype.dtdElement = function (t, e, i) {
                  return this.stream.write(
                    n.__super__.dtdElement.call(this, t, e, i)
                  );
                }),
                (n.prototype.dtdEntity = function (t, e, i) {
                  return this.stream.write(
                    n.__super__.dtdEntity.call(this, t, e, i)
                  );
                }),
                (n.prototype.dtdNotation = function (t, e, i) {
                  return this.stream.write(
                    n.__super__.dtdNotation.call(this, t, e, i)
                  );
                }),
                n
              );
            })(o));
        }.call(this));
      },
      6434: function (t, e, n) {
        (function () {
          var e,
            i = {}.hasOwnProperty;
          (e = n(751)),
            (t.exports = (function (t) {
              function e(t) {
                e.__super__.constructor.call(this, t);
              }
              return (
                (function (t, e) {
                  for (var n in e) i.call(e, n) && (t[n] = e[n]);
                  function o() {
                    this.constructor = t;
                  }
                  (o.prototype = e.prototype),
                    (t.prototype = new o()),
                    (t.__super__ = e.prototype);
                })(e, t),
                (e.prototype.document = function (t, e) {
                  var n, i, o, r, s;
                  for (
                    e = this.filterOptions(e),
                      r = "",
                      i = 0,
                      o = (s = t.children).length;
                    i < o;
                    i++
                  )
                    (n = s[i]), (r += this.writeChildNode(n, e, 0));
                  return (
                    e.pretty &&
                      r.slice(-e.newline.length) === e.newline &&
                      (r = r.slice(0, -e.newline.length)),
                    r
                  );
                }),
                e
              );
            })(e));
        }.call(this));
      },
      5549: function (t) {
        (function () {
          var e = function (t, e) {
              return function () {
                return t.apply(e, arguments);
              };
            },
            n = {}.hasOwnProperty;
          t.exports = (function () {
            function t(t) {
              var i, o, r;
              for (i in ((this.assertLegalName = e(this.assertLegalName, this)),
              (this.assertLegalChar = e(this.assertLegalChar, this)),
              t || (t = {}),
              (this.options = t),
              this.options.version || (this.options.version = "1.0"),
              (o = t.stringify || {})))
                n.call(o, i) && ((r = o[i]), (this[i] = r));
            }
            return (
              (t.prototype.name = function (t) {
                return this.options.noValidation
                  ? t
                  : this.assertLegalName("" + t || "");
              }),
              (t.prototype.text = function (t) {
                return this.options.noValidation
                  ? t
                  : this.assertLegalChar(this.textEscape("" + t || ""));
              }),
              (t.prototype.cdata = function (t) {
                return this.options.noValidation
                  ? t
                  : ((t = (t = "" + t || "").replace("]]>", "]]]]><![CDATA[>")),
                    this.assertLegalChar(t));
              }),
              (t.prototype.comment = function (t) {
                if (this.options.noValidation) return t;
                if ((t = "" + t || "").match(/--/))
                  throw new Error(
                    "Comment text cannot contain double-hypen: " + t
                  );
                return this.assertLegalChar(t);
              }),
              (t.prototype.raw = function (t) {
                return this.options.noValidation ? t : "" + t || "";
              }),
              (t.prototype.attValue = function (t) {
                return this.options.noValidation
                  ? t
                  : this.assertLegalChar(this.attEscape((t = "" + t || "")));
              }),
              (t.prototype.insTarget = function (t) {
                return this.options.noValidation
                  ? t
                  : this.assertLegalChar("" + t || "");
              }),
              (t.prototype.insValue = function (t) {
                if (this.options.noValidation) return t;
                if ((t = "" + t || "").match(/\?>/))
                  throw new Error("Invalid processing instruction value: " + t);
                return this.assertLegalChar(t);
              }),
              (t.prototype.xmlVersion = function (t) {
                if (this.options.noValidation) return t;
                if (!(t = "" + t || "").match(/1\.[0-9]+/))
                  throw new Error("Invalid version number: " + t);
                return t;
              }),
              (t.prototype.xmlEncoding = function (t) {
                if (this.options.noValidation) return t;
                if (!(t = "" + t || "").match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/))
                  throw new Error("Invalid encoding: " + t);
                return this.assertLegalChar(t);
              }),
              (t.prototype.xmlStandalone = function (t) {
                return this.options.noValidation ? t : t ? "yes" : "no";
              }),
              (t.prototype.dtdPubID = function (t) {
                return this.options.noValidation
                  ? t
                  : this.assertLegalChar("" + t || "");
              }),
              (t.prototype.dtdSysID = function (t) {
                return this.options.noValidation
                  ? t
                  : this.assertLegalChar("" + t || "");
              }),
              (t.prototype.dtdElementValue = function (t) {
                return this.options.noValidation
                  ? t
                  : this.assertLegalChar("" + t || "");
              }),
              (t.prototype.dtdAttType = function (t) {
                return this.options.noValidation
                  ? t
                  : this.assertLegalChar("" + t || "");
              }),
              (t.prototype.dtdAttDefault = function (t) {
                return this.options.noValidation
                  ? t
                  : this.assertLegalChar("" + t || "");
              }),
              (t.prototype.dtdEntityValue = function (t) {
                return this.options.noValidation
                  ? t
                  : this.assertLegalChar("" + t || "");
              }),
              (t.prototype.dtdNData = function (t) {
                return this.options.noValidation
                  ? t
                  : this.assertLegalChar("" + t || "");
              }),
              (t.prototype.convertAttKey = "@"),
              (t.prototype.convertPIKey = "?"),
              (t.prototype.convertTextKey = "#text"),
              (t.prototype.convertCDataKey = "#cdata"),
              (t.prototype.convertCommentKey = "#comment"),
              (t.prototype.convertRawKey = "#raw"),
              (t.prototype.assertLegalChar = function (t) {
                var e, n;
                if (this.options.noValidation) return t;
                if (((e = ""), "1.0" === this.options.version)) {
                  if (
                    ((e =
                      /[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/),
                    (n = t.match(e)))
                  )
                    throw new Error(
                      "Invalid character in string: " +
                        t +
                        " at index " +
                        n.index
                    );
                } else if (
                  "1.1" === this.options.version &&
                  ((e =
                    /[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/),
                  (n = t.match(e)))
                )
                  throw new Error(
                    "Invalid character in string: " + t + " at index " + n.index
                  );
                return t;
              }),
              (t.prototype.assertLegalName = function (t) {
                var e;
                if (this.options.noValidation) return t;
                if (
                  (this.assertLegalChar(t),
                  (e =
                    /^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/),
                  !t.match(e))
                )
                  throw new Error("Invalid character in name");
                return t;
              }),
              (t.prototype.textEscape = function (t) {
                var e;
                return this.options.noValidation
                  ? t
                  : ((e = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g),
                    t
                      .replace(e, "&amp;")
                      .replace(/</g, "&lt;")
                      .replace(/>/g, "&gt;")
                      .replace(/\r/g, "&#xD;"));
              }),
              (t.prototype.attEscape = function (t) {
                var e;
                return this.options.noValidation
                  ? t
                  : ((e = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g),
                    t
                      .replace(e, "&amp;")
                      .replace(/</g, "&lt;")
                      .replace(/"/g, "&quot;")
                      .replace(/\t/g, "&#x9;")
                      .replace(/\n/g, "&#xA;")
                      .replace(/\r/g, "&#xD;"));
              }),
              t
            );
          })();
        }.call(this));
      },
      3595: function (t, e, n) {
        (function () {
          var e,
            i,
            o = {}.hasOwnProperty;
          (e = n(9335)),
            (i = n(6488)),
            (t.exports = (function (t) {
              function n(t, i) {
                if ((n.__super__.constructor.call(this, t), null == i))
                  throw new Error("Missing element text. " + this.debugInfo());
                (this.name = "#text"),
                  (this.type = e.Text),
                  (this.value = this.stringify.text(i));
              }
              return (
                (function (t, e) {
                  for (var n in e) o.call(e, n) && (t[n] = e[n]);
                  function i() {
                    this.constructor = t;
                  }
                  (i.prototype = e.prototype),
                    (t.prototype = new i()),
                    (t.__super__ = e.prototype);
                })(n, t),
                Object.defineProperty(
                  n.prototype,
                  "isElementContentWhitespace",
                  {
                    get: function () {
                      throw new Error(
                        "This DOM method is not implemented." + this.debugInfo()
                      );
                    },
                  }
                ),
                Object.defineProperty(n.prototype, "wholeText", {
                  get: function () {
                    var t, e, n;
                    for (n = "", e = this.previousSibling; e; )
                      (n = e.data + n), (e = e.previousSibling);
                    for (n += this.data, t = this.nextSibling; t; )
                      (n += t.data), (t = t.nextSibling);
                    return n;
                  },
                }),
                (n.prototype.clone = function () {
                  return Object.create(this);
                }),
                (n.prototype.toString = function (t) {
                  return this.options.writer.text(
                    this,
                    this.options.writer.filterOptions(t)
                  );
                }),
                (n.prototype.splitText = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                (n.prototype.replaceWholeText = function (t) {
                  throw new Error(
                    "This DOM method is not implemented." + this.debugInfo()
                  );
                }),
                n
              );
            })(i));
        }.call(this));
      },
      751: function (t, e, n) {
        (function () {
          var e,
            i,
            o,
            r = {}.hasOwnProperty;
          (o = n(8369).assign),
            (e = n(9335)),
            n(9077),
            n(6544),
            n(6170),
            n(2096),
            n(2161),
            n(9529),
            n(3595),
            n(9181),
            n(8833),
            n(1179),
            n(6347),
            n(9078),
            n(4777),
            (i = n(594)),
            (t.exports = (function () {
              function t(t) {
                var e, n, i;
                for (e in (t || (t = {}),
                (this.options = t),
                (n = t.writer || {})))
                  r.call(n, e) &&
                    ((i = n[e]), (this["_" + e] = this[e]), (this[e] = i));
              }
              return (
                (t.prototype.filterOptions = function (t) {
                  var e, n, r, s, a, l, u, p;
                  return (
                    t || (t = {}),
                    (t = o({}, this.options, t)),
                    ((e = { writer: this }).pretty = t.pretty || !1),
                    (e.allowEmpty = t.allowEmpty || !1),
                    (e.indent = null != (n = t.indent) ? n : "  "),
                    (e.newline = null != (r = t.newline) ? r : "\n"),
                    (e.offset = null != (s = t.offset) ? s : 0),
                    (e.dontPrettyTextNodes =
                      null !=
                      (a =
                        null != (l = t.dontPrettyTextNodes)
                          ? l
                          : t.dontprettytextnodes)
                        ? a
                        : 0),
                    (e.spaceBeforeSlash =
                      null !=
                      (u =
                        null != (p = t.spaceBeforeSlash)
                          ? p
                          : t.spacebeforeslash)
                        ? u
                        : ""),
                    !0 === e.spaceBeforeSlash && (e.spaceBeforeSlash = " "),
                    (e.suppressPrettyCount = 0),
                    (e.user = {}),
                    (e.state = i.None),
                    e
                  );
                }),
                (t.prototype.indent = function (t, e, n) {
                  var i;
                  return !e.pretty || e.suppressPrettyCount
                    ? ""
                    : e.pretty && (i = (n || 0) + e.offset + 1) > 0
                    ? new Array(i).join(e.indent)
                    : "";
                }),
                (t.prototype.endline = function (t, e, n) {
                  return !e.pretty || e.suppressPrettyCount ? "" : e.newline;
                }),
                (t.prototype.attribute = function (t, e, n) {
                  var i;
                  return (
                    this.openAttribute(t, e, n),
                    (i = " " + t.name + '="' + t.value + '"'),
                    this.closeAttribute(t, e, n),
                    i
                  );
                }),
                (t.prototype.cdata = function (t, e, n) {
                  var o;
                  return (
                    this.openNode(t, e, n),
                    (e.state = i.OpenTag),
                    (o = this.indent(t, e, n) + "<![CDATA["),
                    (e.state = i.InsideTag),
                    (o += t.value),
                    (e.state = i.CloseTag),
                    (o += "]]>" + this.endline(t, e, n)),
                    (e.state = i.None),
                    this.closeNode(t, e, n),
                    o
                  );
                }),
                (t.prototype.comment = function (t, e, n) {
                  var o;
                  return (
                    this.openNode(t, e, n),
                    (e.state = i.OpenTag),
                    (o = this.indent(t, e, n) + "\x3c!-- "),
                    (e.state = i.InsideTag),
                    (o += t.value),
                    (e.state = i.CloseTag),
                    (o += " --\x3e" + this.endline(t, e, n)),
                    (e.state = i.None),
                    this.closeNode(t, e, n),
                    o
                  );
                }),
                (t.prototype.declaration = function (t, e, n) {
                  var o;
                  return (
                    this.openNode(t, e, n),
                    (e.state = i.OpenTag),
                    (o = this.indent(t, e, n) + "<?xml"),
                    (e.state = i.InsideTag),
                    (o += ' version="' + t.version + '"'),
                    null != t.encoding &&
                      (o += ' encoding="' + t.encoding + '"'),
                    null != t.standalone &&
                      (o += ' standalone="' + t.standalone + '"'),
                    (e.state = i.CloseTag),
                    (o += e.spaceBeforeSlash + "?>"),
                    (o += this.endline(t, e, n)),
                    (e.state = i.None),
                    this.closeNode(t, e, n),
                    o
                  );
                }),
                (t.prototype.docType = function (t, e, n) {
                  var o, r, s, a, l;
                  if (
                    (n || (n = 0),
                    this.openNode(t, e, n),
                    (e.state = i.OpenTag),
                    (a = this.indent(t, e, n)),
                    (a += "<!DOCTYPE " + t.root().name),
                    t.pubID && t.sysID
                      ? (a += ' PUBLIC "' + t.pubID + '" "' + t.sysID + '"')
                      : t.sysID && (a += ' SYSTEM "' + t.sysID + '"'),
                    t.children.length > 0)
                  ) {
                    for (
                      a += " [",
                        a += this.endline(t, e, n),
                        e.state = i.InsideTag,
                        r = 0,
                        s = (l = t.children).length;
                      r < s;
                      r++
                    )
                      (o = l[r]), (a += this.writeChildNode(o, e, n + 1));
                    (e.state = i.CloseTag), (a += "]");
                  }
                  return (
                    (e.state = i.CloseTag),
                    (a += e.spaceBeforeSlash + ">"),
                    (a += this.endline(t, e, n)),
                    (e.state = i.None),
                    this.closeNode(t, e, n),
                    a
                  );
                }),
                (t.prototype.element = function (t, n, o) {
                  var s, a, l, u, p, c, d, h, f, g, m, y, v, b;
                  for (f in (o || (o = 0),
                  (g = !1),
                  (m = ""),
                  this.openNode(t, n, o),
                  (n.state = i.OpenTag),
                  (m += this.indent(t, n, o) + "<" + t.name),
                  (y = t.attribs)))
                    r.call(y, f) &&
                      ((s = y[f]), (m += this.attribute(s, n, o)));
                  if (
                    ((u = 0 === (l = t.children.length) ? null : t.children[0]),
                    0 === l ||
                      t.children.every(function (t) {
                        return (
                          (t.type === e.Text || t.type === e.Raw) &&
                          "" === t.value
                        );
                      }))
                  )
                    n.allowEmpty
                      ? ((m += ">"),
                        (n.state = i.CloseTag),
                        (m += "</" + t.name + ">" + this.endline(t, n, o)))
                      : ((n.state = i.CloseTag),
                        (m +=
                          n.spaceBeforeSlash + "/>" + this.endline(t, n, o)));
                  else if (
                    !n.pretty ||
                    1 !== l ||
                    (u.type !== e.Text && u.type !== e.Raw) ||
                    null == u.value
                  ) {
                    if (n.dontPrettyTextNodes)
                      for (p = 0, d = (v = t.children).length; p < d; p++)
                        if (
                          ((a = v[p]).type === e.Text || a.type === e.Raw) &&
                          null != a.value
                        ) {
                          n.suppressPrettyCount++, (g = !0);
                          break;
                        }
                    for (
                      m += ">" + this.endline(t, n, o),
                        n.state = i.InsideTag,
                        c = 0,
                        h = (b = t.children).length;
                      c < h;
                      c++
                    )
                      (a = b[c]), (m += this.writeChildNode(a, n, o + 1));
                    (n.state = i.CloseTag),
                      (m += this.indent(t, n, o) + "</" + t.name + ">"),
                      g && n.suppressPrettyCount--,
                      (m += this.endline(t, n, o)),
                      (n.state = i.None);
                  } else
                    (m += ">"),
                      (n.state = i.InsideTag),
                      n.suppressPrettyCount++,
                      (g = !0),
                      (m += this.writeChildNode(u, n, o + 1)),
                      n.suppressPrettyCount--,
                      (g = !1),
                      (n.state = i.CloseTag),
                      (m += "</" + t.name + ">" + this.endline(t, n, o));
                  return this.closeNode(t, n, o), m;
                }),
                (t.prototype.writeChildNode = function (t, n, i) {
                  switch (t.type) {
                    case e.CData:
                      return this.cdata(t, n, i);
                    case e.Comment:
                      return this.comment(t, n, i);
                    case e.Element:
                      return this.element(t, n, i);
                    case e.Raw:
                      return this.raw(t, n, i);
                    case e.Text:
                      return this.text(t, n, i);
                    case e.ProcessingInstruction:
                      return this.processingInstruction(t, n, i);
                    case e.Dummy:
                      return "";
                    case e.Declaration:
                      return this.declaration(t, n, i);
                    case e.DocType:
                      return this.docType(t, n, i);
                    case e.AttributeDeclaration:
                      return this.dtdAttList(t, n, i);
                    case e.ElementDeclaration:
                      return this.dtdElement(t, n, i);
                    case e.EntityDeclaration:
                      return this.dtdEntity(t, n, i);
                    case e.NotationDeclaration:
                      return this.dtdNotation(t, n, i);
                    default:
                      throw new Error(
                        "Unknown XML node type: " + t.constructor.name
                      );
                  }
                }),
                (t.prototype.processingInstruction = function (t, e, n) {
                  var o;
                  return (
                    this.openNode(t, e, n),
                    (e.state = i.OpenTag),
                    (o = this.indent(t, e, n) + "<?"),
                    (e.state = i.InsideTag),
                    (o += t.target),
                    t.value && (o += " " + t.value),
                    (e.state = i.CloseTag),
                    (o += e.spaceBeforeSlash + "?>"),
                    (o += this.endline(t, e, n)),
                    (e.state = i.None),
                    this.closeNode(t, e, n),
                    o
                  );
                }),
                (t.prototype.raw = function (t, e, n) {
                  var o;
                  return (
                    this.openNode(t, e, n),
                    (e.state = i.OpenTag),
                    (o = this.indent(t, e, n)),
                    (e.state = i.InsideTag),
                    (o += t.value),
                    (e.state = i.CloseTag),
                    (o += this.endline(t, e, n)),
                    (e.state = i.None),
                    this.closeNode(t, e, n),
                    o
                  );
                }),
                (t.prototype.text = function (t, e, n) {
                  var o;
                  return (
                    this.openNode(t, e, n),
                    (e.state = i.OpenTag),
                    (o = this.indent(t, e, n)),
                    (e.state = i.InsideTag),
                    (o += t.value),
                    (e.state = i.CloseTag),
                    (o += this.endline(t, e, n)),
                    (e.state = i.None),
                    this.closeNode(t, e, n),
                    o
                  );
                }),
                (t.prototype.dtdAttList = function (t, e, n) {
                  var o;
                  return (
                    this.openNode(t, e, n),
                    (e.state = i.OpenTag),
                    (o = this.indent(t, e, n) + "<!ATTLIST"),
                    (e.state = i.InsideTag),
                    (o +=
                      " " +
                      t.elementName +
                      " " +
                      t.attributeName +
                      " " +
                      t.attributeType),
                    "#DEFAULT" !== t.defaultValueType &&
                      (o += " " + t.defaultValueType),
                    t.defaultValue && (o += ' "' + t.defaultValue + '"'),
                    (e.state = i.CloseTag),
                    (o += e.spaceBeforeSlash + ">" + this.endline(t, e, n)),
                    (e.state = i.None),
                    this.closeNode(t, e, n),
                    o
                  );
                }),
                (t.prototype.dtdElement = function (t, e, n) {
                  var o;
                  return (
                    this.openNode(t, e, n),
                    (e.state = i.OpenTag),
                    (o = this.indent(t, e, n) + "<!ELEMENT"),
                    (e.state = i.InsideTag),
                    (o += " " + t.name + " " + t.value),
                    (e.state = i.CloseTag),
                    (o += e.spaceBeforeSlash + ">" + this.endline(t, e, n)),
                    (e.state = i.None),
                    this.closeNode(t, e, n),
                    o
                  );
                }),
                (t.prototype.dtdEntity = function (t, e, n) {
                  var o;
                  return (
                    this.openNode(t, e, n),
                    (e.state = i.OpenTag),
                    (o = this.indent(t, e, n) + "<!ENTITY"),
                    (e.state = i.InsideTag),
                    t.pe && (o += " %"),
                    (o += " " + t.name),
                    t.value
                      ? (o += ' "' + t.value + '"')
                      : (t.pubID && t.sysID
                          ? (o += ' PUBLIC "' + t.pubID + '" "' + t.sysID + '"')
                          : t.sysID && (o += ' SYSTEM "' + t.sysID + '"'),
                        t.nData && (o += " NDATA " + t.nData)),
                    (e.state = i.CloseTag),
                    (o += e.spaceBeforeSlash + ">" + this.endline(t, e, n)),
                    (e.state = i.None),
                    this.closeNode(t, e, n),
                    o
                  );
                }),
                (t.prototype.dtdNotation = function (t, e, n) {
                  var o;
                  return (
                    this.openNode(t, e, n),
                    (e.state = i.OpenTag),
                    (o = this.indent(t, e, n) + "<!NOTATION"),
                    (e.state = i.InsideTag),
                    (o += " " + t.name),
                    t.pubID && t.sysID
                      ? (o += ' PUBLIC "' + t.pubID + '" "' + t.sysID + '"')
                      : t.pubID
                      ? (o += ' PUBLIC "' + t.pubID + '"')
                      : t.sysID && (o += ' SYSTEM "' + t.sysID + '"'),
                    (e.state = i.CloseTag),
                    (o += e.spaceBeforeSlash + ">" + this.endline(t, e, n)),
                    (e.state = i.None),
                    this.closeNode(t, e, n),
                    o
                  );
                }),
                (t.prototype.openNode = function (t, e, n) {}),
                (t.prototype.closeNode = function (t, e, n) {}),
                (t.prototype.openAttribute = function (t, e, n) {}),
                (t.prototype.closeAttribute = function (t, e, n) {}),
                t
              );
            })());
        }.call(this));
      },
      5532: function (t, e, n) {
        (function () {
          var e, i, o, r, s, a, l, u, p, c;
          (c = n(8369)),
            (u = c.assign),
            (p = c.isFunction),
            (o = n(1770)),
            (r = n(6934)),
            (s = n(9227)),
            (l = n(6434)),
            (a = n(1996)),
            (e = n(9335)),
            (i = n(594)),
            (t.exports.create = function (t, e, n, i) {
              var o, s;
              if (null == t) throw new Error("Root element needs a name.");
              return (
                (i = u({}, e, n, i)),
                (s = (o = new r(i)).element(t)),
                i.headless ||
                  (o.declaration(i),
                  (null == i.pubID && null == i.sysID) || o.dtd(i)),
                s
              );
            }),
            (t.exports.begin = function (t, e, n) {
              var i;
              return (
                p(t) && ((e = (i = [t, e])[0]), (n = i[1]), (t = {})),
                e ? new s(t, e, n) : new r(t)
              );
            }),
            (t.exports.stringWriter = function (t) {
              return new l(t);
            }),
            (t.exports.streamWriter = function (t, e) {
              return new a(t, e);
            }),
            (t.exports.implementation = new o()),
            (t.exports.nodeType = e),
            (t.exports.writerState = i);
        }.call(this));
      },
      4195: (t, e, n) => {
        const i = n(266),
          o = {
            name: "CollectionClear",
            docs: "https://docs.noodl.net/nodes/data/array/clear-array",
            displayNodeName: "Clear Array",
            category: "Data",
            usePortAsLabel: "collectionId",
            color: "data",
            inputs: {
              collectionId: {
                type: {
                  name: "string",
                  identifierOf: "CollectionName",
                  identifierDisplayName: "Array Ids",
                },
                displayName: "Array Id",
                group: "General",
                set: function (t) {
                  t instanceof i && (t = t.getId()), this.setCollectionID(t);
                },
              },
              clear: {
                displayName: "Do",
                group: "Actions",
                valueChangedToTrue() {
                  this.scheduleAfterInputsHaveUpdated(() => {
                    this._internal.collection.set([]),
                      this.sendSignalOnOutput("modified");
                  });
                },
              },
            },
            outputs: {
              modified: {
                group: "Events",
                type: "signal",
                displayName: "Done",
              },
            },
            methods: {
              setCollectionID: function (t) {
                this.setCollection(i.get(t));
              },
              setCollection: function (t) {
                this._internal.collection = t;
              },
            },
          };
        t.exports = { node: o };
      },
      3804: (t) => {
        "use strict";
        t.exports = React;
      },
      7196: (t) => {
        "use strict";
        t.exports = ReactDOM;
      },
      9862: () => {},
      964: () => {},
    },
    e = {};
  function n(i) {
    var o = e[i];
    if (void 0 !== o) return o.exports;
    var r = (e[i] = { id: i, loaded: !1, exports: {} });
    return t[i].call(r.exports, r, r.exports, n), (r.loaded = !0), r.exports;
  }
  (n.n = (t) => {
    var e = t && t.__esModule ? () => t.default : () => t;
    return n.d(e, { a: e }), e;
  }),
    (n.d = (t, e) => {
      for (var i in e)
        n.o(e, i) &&
          !n.o(t, i) &&
          Object.defineProperty(t, i, { enumerable: !0, get: e[i] });
    }),
    (n.g = (function () {
      if ("object" == typeof globalThis) return globalThis;
      try {
        return this || new Function("return this")();
      } catch (t) {
        if ("object" == typeof window) return window;
      }
    })()),
    (n.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e)),
    (n.r = (t) => {
      "undefined" != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }),
        Object.defineProperty(t, "__esModule", { value: !0 });
    }),
    (n.nmd = (t) => ((t.paths = []), t.children || (t.children = []), t)),
    (() => {
      "use strict";
      var t = n(3804),
        e = n.n(t),
        i = n(7196),
        o = n.n(i);
      class r {
        constructor(t, e) {
          (this.isRunning = !1),
            (this.numBoundingBoxObservers = 0),
            (this.callback = t),
            (this.pollDelay = e);
        }
        addObserver() {
          this.numBoundingBoxObservers++,
            this.isRunning || this._startObserver();
        }
        removeObserver() {
          this.numBoundingBoxObservers--,
            0 === this.numBoundingBoxObservers && this._stopObserver();
        }
        setTarget(t) {
          (this.target = t),
            this.numBoundingBoxObservers > 0 &&
              !this.isRunning &&
              this._startObserver();
        }
        _startObserver() {
          if (this.isRunning) return;
          if (!this.target) return;
          this.isRunning = !0;
          let t = {};
          const e = () => {
            if (!this.target) return void (this.isRunning = !1);
            const n = this.target.getBoundingClientRect();
            t.x !== n.x && this.callback("x", n),
              t.y !== n.y && this.callback("y", n),
              t.width !== n.width && this.callback("width", n),
              t.height !== n.height && this.callback("height", n),
              (t = n),
              this.isRunning &&
                (this.pollDelay
                  ? setTimeout(e, this.pollDelay)
                  : window.requestAnimationFrame(e));
          };
          window.requestAnimationFrame(e);
        }
        _stopObserver() {
          this.isRunning = !1;
        }
      }
      function s({ title: t, body: e, images: n }) {
        let i = `<h3>${t}</h3>`;
        if (
          (e &&
            (i += (e = Array.isArray(e) ? e : [e])
              .map((t) => `<p>${t}</p>`)
              .join("")),
          n)
        ) {
          let t = "";
          n.forEach((e) => {
            (t += '<div class="popup-layer-image-item">'),
              (t += `<img src="../assets/images/tooltips/${e.src}">`),
              e.label && (t += `<h3>${e.label}</h3>`),
              e.body && (t += `<p>${e.body}</p>`),
              (t += "</div>");
          }),
            (i += `<div class="popup-layer-image-row">${t}</div>`);
        }
        return i;
      }
      var a = n(114),
        l = n.n(a),
        u = n(4648);
      function p(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function c(t) {
        for (var e = 1; e < arguments.length; e++) {
          var n = null != arguments[e] ? arguments[e] : {};
          e % 2
            ? p(Object(n), !0).forEach(function (e) {
                d(t, e, n[e]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
            : p(Object(n)).forEach(function (e) {
                Object.defineProperty(
                  t,
                  e,
                  Object.getOwnPropertyDescriptor(n, e)
                );
              });
        }
        return t;
      }
      function d(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function h(t, e) {
        t.inputCss || (t.inputCss = {}), t.defaultCss || (t.defaultCss = {});
        for (const n in e) t.inputCss[n] = e[n];
      }
      function f(t, e, n) {
        t[e] || (t[e] = {});
        for (const i in n) t[e][i] = n[i];
      }
      function g(t, e) {
        f(t, "inputs", e);
      }
      function m(t, e) {
        f(t, "inputProps", e);
      }
      function y(t, e, n) {
        t.dynamicports || (t.dynamicports = []),
          t.dynamicports.push({ condition: e, inputs: n });
      }
      const v = {
        addInputProps: m,
        addInputs: g,
        addDynamicInputPorts: y,
        addInputCss: h,
        addSharedVisualInputs(t) {
          h(t, {
            opacity: {
              index: 200,
              group: "Style",
              displayName: "Opacity",
              type: "number",
              default: 1,
              allowVisualStates: !0,
            },
            mixBlendMode: {
              index: 201,
              group: "Style",
              displayName: "Blend Mode",
              type: {
                name: "enum",
                enums: [
                  { label: "Normal", value: "normal" },
                  { label: "Multiply", value: "multiply" },
                  { label: "Screen", value: "screen" },
                  { label: "Overlay", value: "overlay" },
                  { label: "Darken", value: "darken" },
                  { label: "Lighten", value: "lighten" },
                  { label: "Color Dodge", value: "color-dodge" },
                  { label: "Color Burn", value: "color-burn" },
                  { label: "Hard Light", value: "hard-light" },
                  { label: "Soft Light", value: "soft-light" },
                  { label: "Difference", value: "difference" },
                  { label: "Exclusion", value: "exclusion" },
                  { label: "Hue", value: "hue" },
                  { label: "Saturation", value: "saturation" },
                  { label: "Color", value: "color" },
                  { label: "Luminosity", value: "luminosity" },
                ],
              },
              default: "normal",
              applyDefault: !1,
              allowVisualStates: !0,
            },
          }),
            g(t, {
              visible: {
                index: 210,
                displayName: "Visible",
                group: "Style",
                default: !0,
                type: "boolean",
                set(t) {
                  t
                    ? this.removeStyle(["visibility"])
                    : this.setStyle({ visibility: "hidden" });
                },
              },
              zIndex: {
                index: 211,
                displayName: "zIndex",
                group: "Style",
                type: "number",
                allowVisualStates: !0,
                set(t) {
                  void 0 === t
                    ? this.removeStyle(["zIndex"])
                    : this.setStyle({ zIndex: Number(t) });
                },
              },
            });
        },
        addMarginInputs(t) {
          h(t, {
            marginLeft: {
              index: 1,
              group: "Margin and padding",
              displayName: "Margin Left",
              type: {
                name: "number",
                units: ["px", "%"],
                defaultUnit: "px",
                marginPaddingComp: "margin-left",
              },
              allowVisualStates: !0,
            },
            marginRight: {
              index: 2,
              group: "Margin and padding",
              displayName: "Margin Right",
              type: {
                name: "number",
                units: ["px", "%"],
                defaultUnit: "px",
                marginPaddingComp: "margin-right",
              },
              allowVisualStates: !0,
            },
            marginTop: {
              index: 3,
              group: "Margin and padding",
              displayName: "Margin Top",
              type: {
                name: "number",
                units: ["px", "%"],
                defaultUnit: "px",
                marginPaddingComp: "margin-top",
              },
              allowVisualStates: !0,
            },
            marginBottom: {
              index: 4,
              group: "Margin and padding",
              displayName: "Margin Bottom",
              type: {
                name: "number",
                units: ["px", "%"],
                defaultUnit: "px",
                marginPaddingComp: "margin-bottom",
              },
              allowVisualStates: !0,
            },
          });
        },
        addPaddingInputs(t, e) {
          const n = (e = e || {}).defaults ? e.defaults : {},
            i = e.styleTag;
          h(t, {
            paddingLeft: {
              index: 64,
              group: "Margin and padding",
              default: n.paddingLeft || 0,
              applyDefault: !1,
              displayName: "Pad Left",
              type: {
                name: "number",
                units: ["px"],
                defaultUnit: "px",
                marginPaddingComp: "padding-left",
              },
              allowVisualStates: !0,
              styleTag: i,
            },
            paddingRight: {
              index: 65,
              group: "Margin and padding",
              default: n.paddingRight || 0,
              applyDefault: !1,
              displayName: "Pad Right",
              type: {
                name: "number",
                units: ["px"],
                defaultUnit: "px",
                marginPaddingComp: "padding-right",
              },
              allowVisualStates: !0,
              styleTag: i,
            },
            paddingTop: {
              index: 66,
              group: "Margin and padding",
              displayName: "Pad Top",
              default: n.paddingTop || 0,
              applyDefault: !1,
              type: {
                name: "number",
                units: ["px"],
                defaultUnit: "px",
                marginPaddingComp: "padding-top",
              },
              allowVisualStates: !0,
              styleTag: i,
            },
            paddingBottom: {
              index: 67,
              group: "Margin and padding",
              displayName: "Pad Bottom",
              default: n.paddingBottom || 0,
              applyDefault: !1,
              type: {
                name: "number",
                units: ["px"],
                defaultUnit: "px",
                marginPaddingComp: "padding-bottom",
              },
              allowVisualStates: !0,
              styleTag: i,
            },
          });
        },
        addTransformInputs(t) {
          g(t, {
            transformX: {
              group: "Placement",
              displayName: "Pos X",
              default: 0,
              index: 300,
              allowVisualStates: !0,
              type: { name: "number", units: ["px", "%"], defaultUnit: "px" },
              set(t) {
                this.transforms || (this.transforms = {}),
                  (this.transforms.x = t.value + t.unit),
                  this.updateTransform();
              },
            },
            transformY: {
              group: "Placement",
              displayName: "Pos Y",
              default: 0,
              index: 301,
              allowVisualStates: !0,
              type: { name: "number", units: ["px", "%"], defaultUnit: "px" },
              set(t) {
                this.transforms || (this.transforms = {}),
                  (this.transforms.y = t.value + t.unit),
                  this.updateTransform();
              },
            },
            transformRotation: {
              index: 302,
              group: "Placement",
              displayName: "Rotation",
              default: 0,
              allowVisualStates: !0,
              type: { name: "number", units: ["deg"], defaultUnit: "deg" },
              set(t) {
                this.transforms || (this.transforms = {}),
                  (this.transforms.rotation = t.value + t.unit),
                  this.updateTransform();
              },
            },
            transformScale: {
              index: 303,
              group: "Placement",
              displayName: "Scale",
              default: 1,
              allowVisualStates: !0,
              type: { name: "number" },
              set(t) {
                this.transforms || (this.transforms = {}),
                  (this.transforms.scale = t),
                  this.updateTransform();
              },
            },
            transformOriginX: {
              index: 304,
              group: "Placement",
              displayName: "Transform Origin X",
              allowVisualStates: !0,
              type: { name: "number", units: ["px", "%"], defaultUnit: "%" },
              default: "50",
              set(t) {
                (this.transformOriginX = t.value + t.unit),
                  this.updateTransformOrigin();
              },
            },
            transformOriginY: {
              index: 305,
              group: "Placement",
              displayName: "Transform Origin Y",
              allowVisualStates: !0,
              type: { name: "number", units: ["px", "%"], defaultUnit: "%" },
              default: "50",
              set(t) {
                (this.transformOriginY = t.value + t.unit),
                  this.updateTransformOrigin();
              },
            },
          }),
            t.methods || (t.methods = {}),
            (t.methods.updateTransform = function () {
              let t = "";
              const { x: e, y: n, rotation: i, scale: o } = this.transforms;
              e && (t += `translateX(${e}) `),
                n && (t += `translateY(${n}) `),
                i && (t += `rotate(${i}) `),
                void 0 !== o && (t += `scale(${o},${o})`),
                this.setStyle({ transform: t });
            }),
            (t.methods.updateTransformOrigin = function () {
              const t =
                  void 0 !== this.transformOriginX
                    ? this.transformOriginX
                    : "50%",
                e =
                  void 0 !== this.transformOriginY
                    ? this.transformOriginY
                    : "50%";
              this.setStyle({ transformOrigin: `${t} ${e}` });
            });
        },
        addAlignInputs(t) {
          h(t, {
            position: {
              index: 11,
              displayName: "Position",
              group: "Layout",
              type: {
                name: "enum",
                enums: [
                  { label: "In Layout", value: "relative" },
                  { label: "Absolute", value: "absolute" },
                  { label: "Sticky", value: "sticky" },
                  { label: "Fixed", value: "fixed" },
                ],
              },
              default: "relative",
            },
          }),
            m(t, {
              alignX: {
                index: 5,
                group: "Alignment",
                displayName: "Align X",
                type: {
                  name: "enum",
                  enums: [
                    { label: "Left", value: "left" },
                    { label: "Center", value: "center" },
                    { label: "Right", value: "right" },
                  ],
                  alignComp: "horizontal",
                },
              },
              alignY: {
                index: 6,
                group: "Alignment",
                displayName: "Align Y",
                type: {
                  name: "enum",
                  enums: [
                    { label: "Top", value: "top" },
                    { label: "Center", value: "center" },
                    { label: "Bottom", value: "bottom" },
                  ],
                  alignComp: "vertical",
                },
              },
            }),
            (function (t) {
              t.inputCss.position.tooltip = s({
                title: "Position",
                images: [
                  {
                    label: "Relative",
                    body: "Relative to its siblings",
                    src: "position-relative.svg",
                  },
                  {
                    label: "Absolute",
                    body: "Not affected by siblings or parent's layout",
                    src: "position-absolute.svg",
                  },
                  {
                    label: "Sticky",
                    body: "Stick to parent's edge on overflow",
                    src: "position-sticky.svg",
                  },
                  {
                    label: "Fixed",
                    body: "Always stay in the same place and take no space in the layout",
                    src: "position-sticky.svg",
                  },
                ],
              });
            })(t);
        },
        addPointerEventOutputs(t) {
          g(t, {
            pointerEventsMode: {
              index: 403,
              displayName: "Pointer Events Mode",
              type: {
                name: "enum",
                enums: [
                  { label: "Inherit", value: "inherit" },
                  { label: "Explicit", value: "explicit" },
                ],
              },
              default: "inherit",
              group: "Pointer Events",
              set(t) {
                if ("inherit" === t) this.removeStyle(["pointerEvents"]);
                else {
                  let t = "auto";
                  void 0 !== this._internal.pointerEventsEnabled &&
                    (t = this._internal.pointerEventsEnabled ? "auto" : "none"),
                    this.setStyle({ pointerEvents: t });
                }
              },
            },
            pointerEventsEnabled: {
              index: 404,
              displayName: "Pointer Events Enabled",
              type: "boolean",
              group: "Pointer Events",
              default: !0,
              set(t) {
                (this._internal.pointerEventsEnabled = !!t),
                  this.setStyle({
                    pointerEvents: this._internal.pointerEventsEnabled
                      ? "auto"
                      : "none",
                  });
              },
            },
          }),
            m(t, {
              blockTouch: {
                index: 450,
                displayName: "Block Pointer Events",
                group: "Pointer Events",
                type: "boolean",
              },
            }),
            y(t, "pointerEventsMode = explicit", ["pointerEventsEnabled"]),
            (function (t, e) {
              f(t, "outputProps", {
                onClick: {
                  displayName: "Click",
                  group: "Events",
                  type: "signal",
                  propPath: "pointer",
                },
                pointerDown: {
                  displayName: "Pointer Down",
                  group: "Pointer Events",
                  type: "signal",
                  propPath: "pointer",
                  props: {
                    onMouseDown() {
                      this.sendSignalOnOutput("pointerDown");
                    },
                    onTouchStart() {
                      this.sendSignalOnOutput("pointerDown");
                    },
                  },
                },
                pointerUp: {
                  displayName: "Pointer Up",
                  group: "Pointer Events",
                  type: "signal",
                  propPath: "pointer",
                  props: {
                    onMouseUp() {
                      this.sendSignalOnOutput("pointerUp");
                    },
                    onTouchEnd() {
                      this.sendSignalOnOutput("pointerUp");
                    },
                    onTouchCancel() {
                      this.sendSignalOnOutput("pointerUp");
                    },
                  },
                },
                pointerEnter: {
                  displayName: "Pointer Enter",
                  group: "Pointer Events",
                  type: "signal",
                  propPath: "pointer",
                  props: {
                    onMouseEnter() {
                      this.sendSignalOnOutput("pointerEnter");
                    },
                  },
                },
                hoverStart: {
                  displayName: "Hover Start",
                  group: "Hover Events",
                  type: "signal",
                  propPath: "pointer",
                  props: {
                    onMouseOver() {
                      this.sendSignalOnOutput("hoverStart"),
                        this.setVisualStates(["hover"]);
                    },
                  },
                },
                hoverEnd: {
                  displayName: "Hover End",
                  group: "Hover Events",
                  type: "signal",
                  propPath: "pointer",
                  props: {
                    onMouseLeave() {
                      this.sendSignalOnOutput("hoverEnd"),
                        this.setVisualStates([""]);
                    },
                  },
                },
              });
            })(t),
            (function (t) {
              (t.inputs.pointerEventsMode.tooltip = s({
                title: "Pointer events mode",
                body: [
                  "Control if mouse and touch events are enabled on this node",
                  "- Inherit: Same settings as parent",
                  "- Explicit: Enable control on this element",
                ],
              })),
                (t.inputs.pointerEventsEnabled.tooltip = s({
                  title: "Pointer events enabled",
                  body: [
                    "- Enabled: This element will receive mouse and touch events",
                    "- Disabled: No mouse or touch events will be captured by this element and the element below will receive it instead",
                  ],
                }));
            })(t);
        },
        addDimensions(
          t,
          {
            defaultSizeMode: e = "explicit",
            contentLabel: n = "Content",
            useDimensionConstraints: i = !0,
          } = {}
        ) {
          let o = "sizeMode = explicit OR sizeMode = contentHeight",
            r = "sizeMode = explicit OR sizeMode = contentWidth";
          ("explicit" !== e && "contentHeight" !== e) ||
            (o += " OR sizeMode NOT SET"),
            ("explicit" !== e && "contentWidth" !== e) ||
              (r += " OR sizeMode NOT SET"),
            y(t, o, ["width"]),
            y(t, r, ["height"]),
            m(t, {
              sizeMode: {
                index: 10,
                type: {
                  name: "enum",
                  enums: [
                    { value: "explicit", label: "Explicit" },
                    { value: "contentWidth", label: "Content Width" },
                    { value: "contentHeight", label: "Content Height" },
                    { value: "contentSize", label: "Content Size" },
                  ],
                  allowEditOnly: !0,
                  sizeComp: "mode",
                },
                group: "Dimensions",
                displayName: "Size Mode",
                default: e,
                allowVisualStates: !0,
              },
              width: {
                index: 11,
                group: "Dimensions",
                displayName: "Width",
                type: {
                  name: "dimension",
                  units: ["%", "px", "vw", "vh"],
                  defaultUnit: "%",
                },
                default: 100,
                allowVisualStates: !0,
                onChange(t) {
                  this.props.fixedWidth = t.isFixed;
                },
              },
              height: {
                index: 13,
                group: "Dimensions",
                displayName: "Height",
                type: {
                  name: "dimension",
                  units: ["%", "px", "vw", "vh"],
                  defaultUnit: "%",
                },
                default: 100,
                allowVisualStates: !0,
                onChange(t) {
                  this.props.fixedHeight = t.isFixed;
                },
              },
            }),
            Noodl.deployed ||
              (function (t, e) {
                t.inputProps.sizeMode.tooltip = {
                  explicit: {
                    standard: "Explicit width & height",
                    extended: s({
                      title: "Explicit width & height",
                      body: "Set width & height explicitly in pixels(px), percentage(%) or viewport size(vh/vw).",
                      images: [{ src: "size-mode-explicit.svg" }],
                    }),
                  },
                  contentWidth: {
                    standard: `${e} width & explicit height`,
                    extended: s({
                      title: `${e} width & explicit height`,
                      body: `The width will match the width of the ${e.toLowerCase()}. Height is set explicitly.`,
                      images: [{ src: "size-mode-content-width.svg" }],
                    }),
                  },
                  contentHeight: {
                    standard: `Explicit width & ${e.toLowerCase()} height`,
                    extended: s({
                      title: `Explicit width & ${e.toLowerCase()} height`,
                      body: `The width is set explicitly. The height will match the height of the ${e.toLowerCase()}`,
                      images: [{ src: "size-mode-content-height.svg" }],
                    }),
                  },
                  contentSize: {
                    standard: `${e} width & height`,
                    extended: s({
                      title: `${e} width & height`,
                      body: `The width and height will match the size of the ${e.toLowerCase()}`,
                      images: [{ src: "size-mode-content-size.svg" }],
                    }),
                  },
                };
                const n = [
                    "- %: Relative to parents size. If 'fixed' is false this element will resize to share space with siblings. If 'Clip Content' is disabled, it'll also expand to fit the boundaries of all its content",
                    "- px: Pixels",
                    "- vw: Relative to viewport width. 100 makes the element the same width as the screen",
                    "- vh: Relative to viewport height. 100 makes the element the same height as the screen",
                  ],
                  i = s({
                    title: "Fixed",
                    body: [
                      "- Enabled: Elements will be the exact size set",
                      "- Disabled: Element will resize to fill up empty space, or shrink to make space for siblings. Use the dimension constraints, min and max size, to control the boundaries",
                    ],
                  });
                (t.inputProps.width.tooltip = {
                  dimension: s({ title: "Width", body: n }),
                  fixed: i,
                }),
                  (t.inputProps.height.tooltip = {
                    dimension: s({ title: "Height", body: n }),
                    fixed: i,
                  });
              })(t, n),
            i &&
              (h(t, {
                minWidth: {
                  index: 400,
                  group: "Dimension Constraints",
                  displayName: "Min Width",
                  allowVisualStates: !0,
                  type: {
                    name: "number",
                    units: ["%", "px", "vw", "vh"],
                    defaultUnit: "%",
                  },
                },
                maxWidth: {
                  index: 401,
                  group: "Dimension Constraints",
                  displayName: "Max Width",
                  allowVisualStates: !0,
                  type: {
                    name: "number",
                    units: ["%", "px", "vw", "vh"],
                    defaultUnit: "%",
                  },
                },
                minHeight: {
                  index: 402,
                  group: "Dimension Constraints",
                  displayName: "Min Height",
                  allowVisualStates: !0,
                  type: {
                    name: "number",
                    units: ["%", "px", "vw", "vh"],
                    defaultUnit: "%",
                  },
                },
                maxHeight: {
                  index: 403,
                  group: "Dimension Constraints",
                  displayName: "Max Height",
                  allowVisualStates: !0,
                  type: {
                    name: "number",
                    units: ["%", "px", "vw", "vh"],
                    defaultUnit: "%",
                  },
                },
              }),
              Noodl.deployed ||
                (function (t) {
                  (t.inputCss.minWidth.tooltip = s({
                    title: "Minimum width",
                    body: "This is prioritized over other properties, so the element won't shrink below this size",
                  })),
                    (t.inputCss.minHeight.tooltip = s({
                      title: "Minimum height",
                      body: "This is prioritized over other properties, so the element won't shrink below this size",
                    })),
                    (t.inputCss.maxWidth.tooltip = s({
                      title: "Maximum width",
                      body: "This is prioritized over other properties, so the element won't grow beyond this size",
                    })),
                    (t.inputCss.maxHeight.tooltip = s({
                      title: "Maximum height",
                      body: "This is prioritized over other properties, so the element won't grow beyond this size",
                    }));
                })(t));
        },
        _addCornerRadius(t, e) {
          const n = (e = e || {}).defaults || {},
            i = e.styleTag;
          function o(t, e, i, o) {
            const r = { group: "corners", tab: i, label: e },
              s = `border${e}Radius`;
            g(t, {
              [s]: {
                index: 240 + o,
                displayName: "Corner Radius",
                editorName:
                  ("Corner Radius",
                  "Corner Radius " + (e ? "(" + e + ")" : "")),
                group: "Corner Radius",
                type: { name: "number", units: ["px", "%"], defaultUnit: "px" },
                allowVisualStates: !0,
                default: n[s],
                tab: r,
                set(t) {
                  (this._internal.borderRadius[s] =
                    void 0 === t.value ? void 0 : t.value + t.unit),
                    this._updateCornerRadii();
                },
              },
            });
          }
          n.borderRadius || (n.borderRadius = 0),
            o(t, "", "corners-all", 0),
            o(t, "TopLeft", "corners-top-left", 1),
            o(t, "TopRight", "corners-top-right", 2),
            o(t, "BottomRight", "corners-bottom-right", 3),
            o(t, "BottomLeft", "corners-bottom-left", 4),
            (t.methods._updateCornerRadii = function () {
              const t = this._internal.borderRadius;
              function e(e, n) {
                const i = `border${n}Radius`;
                e[i] = t[i] || t.borderRadius;
              }
              const n = {};
              e(n, "TopLeft"),
                e(n, "TopRight"),
                e(n, "BottomRight"),
                e(n, "BottomLeft"),
                this.setStyle(n, i);
            });
          const r = t.initialize;
          t.initialize = function () {
            r && r.call(this),
              (this._internal.borderRadius = c({}, n)),
              n.borderRadius && this._updateCornerRadii();
          };
        },
        addBorderInputs(t, e) {
          const n = (e = e || {}).defaults || {},
            i = e.styleTag;
          function o(t, e, i, o) {
            const r = `border${e}Style`,
              s = `border${e}Width`,
              a = `border${e}Color`;
            let l = "none" !== n.borderStyle ? "OR borderStyle NOT SET" : "";
            e
              ? (n[r] && "none" !== n[r] && (l += `OR ${r} NOT SET`),
                y(
                  t,
                  `${r} = solid OR ${r} = dashed OR ${r} = dotted OR borderStyle = solid OR borderStyle = dashed OR borderStyle = dotted ${l}`,
                  [`${s}`, `${a}`]
                ))
              : y(t, `${r} = solid OR ${r} = dashed OR ${r} = dotted ${l}`, [
                  `${s}`,
                  `${a}`,
                ]);
            const u = { group: "border-styles", tab: i, label: e },
              p = (t) => `${t} ${e ? "(" + e + ")" : ""}`,
              c = 202 + 4 * o;
            g(t, {
              [r]: {
                index: c + 1,
                displayName: "Border Style",
                editorName: p("Border Style"),
                group: "Border Style",
                allowVisualStates: !0,
                type: {
                  name: "enum",
                  enums: [
                    { label: "None", value: "none" },
                    { label: "Solid", value: "solid" },
                    { label: "Dotted", value: "dotted" },
                    { label: "Dashed", value: "dashed" },
                  ],
                },
                default: n[r],
                tab: u,
                set(t) {
                  (this._internal.borders[r] = t), this._updateBorders();
                },
              },
              [s]: {
                index: c + 2,
                displayName: "Border Width",
                editorName: p("Border Width"),
                group: "Border Style",
                allowVisualStates: !0,
                type: { name: "number", units: ["px"], defaultUnit: "px" },
                default: n[s],
                tab: u,
                set(t) {
                  (this._internal.borders[s] =
                    void 0 === t.value ? void 0 : t.value + t.unit),
                    this._updateBorders();
                },
              },
              [a]: {
                index: c + 3,
                displayName: "Border Color",
                editorName: p("Border Color"),
                group: "Border Style",
                type: "color",
                default: n[a],
                allowVisualStates: !0,
                tab: u,
                set(t) {
                  (this._internal.borders[a] = t), this._updateBorders();
                },
              },
            });
          }
          void 0 === n.borderStyle && (n.borderStyle = "none"),
            void 0 === n.borderWidth && (n.borderWidth = 2),
            void 0 === n.borderColor && (n.borderColor = "#000000"),
            o(t, "", "borders-all", 0),
            o(t, "Left", "borders-left", 1),
            o(t, "Top", "borders-top", 2),
            o(t, "Right", "borders-right", 3),
            o(t, "Bottom", "borders-bottom", 4),
            (t.methods._updateBorders = function () {
              const t = this._internal.borders;
              function e(e, n) {
                const i = `border${n}Width`,
                  o = `border${n}Color`,
                  r = `border${n}Style`;
                (e[i] = t[i] || t.borderWidth),
                  (e[o] = t[o] || t.borderColor),
                  (e[r] = t[r] || t.borderStyle);
              }
              const n = {};
              e(n, "Top"),
                e(n, "Right"),
                e(n, "Bottom"),
                e(n, "Left"),
                this.setStyle(n, i);
            });
          const r = t.initialize;
          (t.initialize = function () {
            r && r.call(this),
              (this._internal.borders = c({}, n)),
              ("none" !== n.borderStyle ||
                (n.borderTopStyle && "none" !== n.borderTopStyle) ||
                (n.borderRightStyle && "none" !== n.borderRightStyle) ||
                (n.borderBottomStyle && "none" !== n.borderBottomStyle) ||
                (n.borderRightStyle && "none" !== n.borderRightStyle)) &&
                this._updateBorders();
          }),
            this._addCornerRadius(t, { defaults: n, styleTag: i });
        },
        addShadowInputs(t, e) {
          const n = (e = e || {}).styleTag;
          y(t, "boxShadowEnabled = true", [
            "boxShadowOffsetX",
            "boxShadowOffsetY",
            "boxShadowInset",
            "boxShadowBlurRadius",
            "boxShadowSpreadRadius",
            "boxShadowColor",
          ]),
            g(t, {
              boxShadowEnabled: {
                index: 250,
                group: "Box Shadow",
                displayName: "Shadow Enabled",
                type: "boolean",
                default: !1,
                allowVisualStates: !0,
                set(t) {
                  (this._internal.boxShadowEnabled = t),
                    this._updateBoxShadow();
                },
              },
              boxShadowOffsetX: {
                index: 251,
                group: "Box Shadow",
                displayName: "Offset X",
                default: 0,
                type: { name: "number", units: ["px"], defaultUnit: "px" },
                allowVisualStates: !0,
                set(t) {
                  (this._internal.boxShadowOffsetX = t.value + t.unit),
                    this._updateBoxShadow();
                },
              },
              boxShadowOffsetY: {
                index: 252,
                group: "Box Shadow",
                displayName: "Offset Y",
                default: 0,
                type: { name: "number", units: ["px"], defaultUnit: "px" },
                allowVisualStates: !0,
                set(t) {
                  (this._internal.boxShadowOffsetY = t.value + t.unit),
                    this._updateBoxShadow();
                },
              },
              boxShadowBlurRadius: {
                index: 253,
                group: "Box Shadow",
                displayName: "Blur Radius",
                default: 5,
                type: { name: "number", units: ["px"], defaultUnit: "px" },
                allowVisualStates: !0,
                set(t) {
                  (this._internal.boxShadowBlurRadius = t.value + t.unit),
                    this._updateBoxShadow();
                },
              },
              boxShadowSpreadRadius: {
                index: 254,
                group: "Box Shadow",
                displayName: "Spread Radius",
                default: 2,
                type: { name: "number", units: ["px"], defaultUnit: "px" },
                allowVisualStates: !0,
                set(t) {
                  (this._internal.boxShadowSpreadRadius = t.value + t.unit),
                    this._updateBoxShadow();
                },
              },
              boxShadowInset: {
                index: 255,
                group: "Box Shadow",
                displayName: "Inset",
                type: "boolean",
                default: !1,
                allowVisualStates: !0,
                set(t) {
                  (this._internal.boxShadowInset = t), this._updateBoxShadow();
                },
              },
              boxShadowColor: {
                index: 256,
                group: "Box Shadow",
                displayName: "Shadow Color",
                type: "color",
                default: "#00000033",
                allowVisualStates: !0,
                set(t) {
                  (this._internal.boxShadowColor = t), this._updateBoxShadow();
                },
              },
            }),
            (t.methods._updateBoxShadow = function () {
              const t = this._internal;
              t.boxShadowEnabled
                ? this.setStyle(
                    {
                      boxShadow: `${t.boxShadowInset ? "inset " : ""}${
                        t.boxShadowOffsetX
                      } ${t.boxShadowOffsetY} ${t.boxShadowBlurRadius} ${
                        t.boxShadowSpreadRadius
                      } ${t.boxShadowColor}`,
                    },
                    n
                  )
                : this.removeStyle(["boxShadow"], n);
            });
          const i = t.initialize;
          t.initialize = function () {
            i && i.call(this),
              (this._internal.boxShadowOffsetX = 0),
              (this._internal.boxShadowOffsetY = 0),
              (this._internal.boxShadowBlurRadius = "5px"),
              (this._internal.boxShadowSpreadRadius = "2px"),
              (this._internal.boxShadowColor = "#00000033");
          };
        },
        addIconInputs(t, e) {
          const n = { useIcon: !0, iconColor: "#FFFFFF" };
          (e = e || {}).defaults && Object.assign(n, e.defaults);
          let i = "useIcon = true";
          n.useIcon && (i += " OR useIcon NOT SET");
          const o = ["iconSourceType", "iconSize"];
          e.enableIconPlacement &&
            (o.push("iconPlacement"), o.push("iconSpacing")),
            y(t, i, o),
            n.useIcon
              ? (y(
                  t,
                  "#js (params.useIcon===true || params.useIcon===undefined) && params.iconSourceType === 'image'",
                  ["iconImageSource"]
                ),
                y(
                  t,
                  "#js (params.useIcon===true || params.useIcon===undefined) && params.iconSourceType === 'icon'",
                  ["iconIconSource", "iconColor"]
                ))
              : (y(t, "useIcon = true AND iconSourceType = image", [
                  "iconImageSource",
                ]),
                y(t, "useIcon = true AND iconSourceType = icon", [
                  "iconIconSource",
                  "iconColor",
                ])),
            e.hideEnableIconInput ||
              m(t, {
                useIcon: {
                  type: "boolean",
                  group: "Icon",
                  displayName: "Enable Icon",
                  default: n.useIcon,
                  allowVisualStates: !0,
                  index: 20,
                },
              }),
            m(t, {
              iconSourceType: {
                type: {
                  name: "enum",
                  enums: [
                    { label: "Image", value: "image" },
                    { label: "Icon", value: "icon" },
                  ],
                },
                group: "Icon",
                displayName: "Type",
                default: "icon",
                allowVisualStates: !0,
                index: 21,
              },
              iconIconSource: {
                type: "icon",
                displayName: "Icon Source",
                group: "Icon",
                allowVisualStates: !0,
                index: 23,
              },
            }),
            g(t, {
              iconImageSource: {
                type: "image",
                displayName: "Image Source",
                group: "Icon",
                allowVisualStates: !0,
                index: 22,
                set(t) {
                  this.props.iconImageSource = (0, u.getAbsoluteUrl)(t);
                },
              },
            }),
            e.enableIconPlacement &&
              m(t, {
                iconSpacing: {
                  group: "Icon",
                  displayName: "Spacing",
                  default: 10,
                  type: { name: "number", units: ["px"], defaultUnit: "px" },
                  allowVisualStates: !0,
                  index: 24,
                },
                iconPlacement: {
                  type: {
                    name: "enum",
                    enums: [
                      { label: "Left", value: "left" },
                      { label: "Right", value: "right" },
                    ],
                  },
                  group: "Icon",
                  displayName: "Placement",
                  default: "left",
                  allowVisualStates: !0,
                  index: 25,
                },
              }),
            m(t, {
              iconSize: {
                group: "Icon",
                displayName: "Size",
                default: 16,
                type: { name: "number", units: ["px"], defaultUnit: "px" },
                allowVisualStates: !0,
                index: 26,
              },
              iconColor: {
                group: "Icon",
                displayName: "Color",
                default: n.iconColor,
                type: "color",
                allowVisualStates: !0,
                index: 27,
              },
            });
        },
        addLabelInputs(t, e) {
          const n = { useLabel: !1 };
          (e = e || {}).defaults && Object.assign(n, e.defaults);
          const i = n.useLabel
              ? "useLabel = true OR useLabel NOT SET"
              : "useLabel = true",
            o = e.styleTag || "",
            r = ["label"].concat(
              [
                "textStyle",
                "fontFamily",
                "fontSize",
                "color",
                "letterSpacing",
                "lineHeight",
                "textTransform",
              ].map((t) => o + t)
            );
          e.enableSpacing && r.push("labelSpacing"),
            y(t, i, r),
            m(t, {
              useLabel: {
                index: 18,
                type: "boolean",
                displayName: "Enable Label",
                group: "Label",
                default: n.useLabel,
              },
              label: {
                type: "string",
                displayName: "Label",
                group: "Label",
                default: "Label",
              },
            }),
            e.enableSpacing &&
              m(t, {
                labelSpacing: {
                  displayName: "Spacing",
                  group: "Label",
                  type: { name: "number", units: ["px"], defaultUnit: "px" },
                  default: 10,
                },
              }),
            this.addTextStyleInputs(
              t,
              c(
                c({}, e),
                {},
                {
                  group: "Label Text Style",
                  popout: {
                    group: "label-text-style",
                    label: "Text Style",
                    parentGroup: "Label",
                  },
                }
              )
            );
        },
        addTextStyleInputs(t, e) {
          const n = (e = e || {}).group || "Text Style",
            i = e.styleTag,
            o = e.hasOwnProperty("portPrefix")
              ? e.portPrefix
              : e.styleTag || "",
            r = o + "textStyle",
            s = void 0 !== e.portIndex ? e.portIndex : 19;
          g(t, {
            [r]: {
              index: s,
              type: {
                name: "textStyle",
                childPorts: [
                  "fontFamily",
                  "fontSize",
                  "color",
                  "letterSpacing",
                  "lineHeight",
                  "textTransform",
                ],
                childPortPrefix: o,
              },
              group: n,
              displayName: "Text Style",
              default: "None",
              set(t) {
                (this.props[r] = this.context.styles.getTextStyle(t)),
                  this.forceUpdate();
              },
              allowVisualStates: !0,
              popout: e.popout,
            },
            [o + "fontFamily"]: {
              index: s + 1,
              type: { name: "font", parentPort: r },
              group: n,
              displayName: "Font Family",
              set(t) {
                if (t) {
                  let e = t;
                  e.split(".").length > 1 &&
                    (l().instance.loadFont(e),
                    (e = e.replace(/\.[^/.]+$/, "")),
                    (e = e.split("/").pop())),
                    this.setStyle({ fontFamily: e }, i);
                } else this.removeStyle(["fontFamily"], i);
                this.props[r] && this.forceUpdate();
              },
              allowVisualStates: !0,
              popout: e.popout,
            },
          }),
            h(t, {
              [o + "fontSize"]: {
                index: s + 2,
                group: n,
                displayName: "Font Size",
                targetStyleProperty: "fontSize",
                type: {
                  name: "number",
                  units: ["px"],
                  defaultUnit: "px",
                  parentPort: r,
                },
                onChange() {
                  this.props[r] && this.forceUpdate();
                },
                allowVisualStates: !0,
                popout: e.popout,
                styleTag: i,
              },
              [o + "color"]: {
                index: s + 3,
                type: { name: "color", parentPort: r },
                displayName: "Color",
                group: n,
                targetStyleProperty: "color",
                allowVisualStates: !0,
                popout: e.popout,
                styleTag: i,
                onChange() {
                  this.props[r] && this.forceUpdate();
                },
              },
              [o + "letterSpacing"]: {
                index: s + 4,
                group: n,
                displayName: "Letter Spacing",
                targetStyleProperty: "letterSpacing",
                type: { name: "number", parentPort: r },
                type: {
                  name: "number",
                  units: ["px", "em"],
                  defaultUnit: "px",
                },
                allowVisualStates: !0,
                popout: e.popout,
                styleTag: i,
                default: "Auto",
                applyDefault: !1,
                onChange() {
                  this.props[r] && this.forceUpdate();
                },
              },
              [o + "lineHeight"]: {
                index: s + 5,
                group: n,
                displayName: "Line Height",
                targetStyleProperty: "lineHeight",
                type: {
                  name: "number",
                  units: ["", "px", "%"],
                  defaultUnit: "",
                  parentPort: r,
                },
                allowVisualStates: !0,
                onChange() {
                  this.props[r] && this.forceUpdate();
                },
                popout: e.popout,
                styleTag: i,
                default: "Auto",
                applyDefault: !1,
              },
              [o + "textTransform"]: {
                index: s + 6,
                group: n,
                displayName: "Case",
                applyDefault: !1,
                targetStyleProperty: "textTransform",
                type: {
                  name: "enum",
                  enums: [
                    { label: "None", value: "none" },
                    { label: "Uppercase", value: "uppercase" },
                    { label: "Lowercase", value: "lowercase" },
                    { label: "Capitalize", value: "capitalize" },
                  ],
                  parentPort: r,
                },
                default: "none",
                popout: e.popout,
                styleTag: i,
                allowVisualStates: !0,
                onChange() {
                  this.props[r] && this.forceUpdate();
                },
              },
            });
          const a = o + "fontFamily";
          t.setup = function (e, n) {
            n.on("nodeAdded." + t.name, function (t) {
              t.parameters[a] &&
                t.parameters[a].split(".").length > 1 &&
                l().instance.loadFont(t.parameters[a]),
                t.on("parameterUpdated", function (t) {
                  t.name === a &&
                    t.value &&
                    t.value.split(".").length > 1 &&
                    l().instance.loadFont(t.value);
                });
            });
          };
        },
      };
      function b(t) {
        return t && "%" === t[t.length - 1];
      }
      function S(t) {
        return Number(t.slice(0, -1));
      }
      function w(t, e, n) {
        if (!e && !n) return t;
        let i = `calc(${t}`;
        return e && (i += ` - ${e}`), n && (i += ` - ${n}`), (i += ")"), i;
      }
      const O = {
        size(t, e) {
          "none" === e.parentLayout && (t.position = "absolute"),
            "explicit" === e.sizeMode
              ? ((t.width = e.width), (t.height = e.height))
              : "contentHeight" === e.sizeMode
              ? (t.width = e.width)
              : "contentWidth" === e.sizeMode && (t.height = e.height),
            (t.flexShrink = 0),
            "row" === e.parentLayout && "relative" === t.position
              ? (b(t.width) &&
                  !e.fixedWidth &&
                  ((t.flexGrow = S(t.width)), (t.flexShrink = 1)),
                b(t.height) &&
                  !e.fixedHeight &&
                  (t.height = w(t.height, t.marginTop, t.marginBottom)))
              : "column" === e.parentLayout && "relative" === t.position
              ? (b(t.width) &&
                  !e.fixedWidth &&
                  (t.width = w(t.width, t.marginLeft, t.marginRight)),
                b(t.height) &&
                  !e.fixedHeight &&
                  ((t.flexGrow = S(t.height)), (t.flexShrink = 1)))
              : "relative" !== t.position &&
                (b(t.width) &&
                  (t.width = w(t.width, t.marginLeft, t.marginRight)),
                b(t.height) &&
                  (t.height = w(t.height, t.marginTop, t.marginBottom)));
        },
        align(t, e) {
          const { position: n } = t;
          let { alignX: i, alignY: o } = e;
          "relative" !== n && ((i = i || "left"), (o = o || "top"));
          let r = "";
          const s = e.parentLayout || "column";
          if (i)
            if ("relative" !== n)
              "left" === i
                ? (t.left = 0)
                : "center" === i
                ? ((t.left = "50%"), (r += "translateX(-50%) "))
                : (t.right = 0);
            else if ("relative" === n && "row" === s)
              switch (i) {
                case "left":
                  t.marginRight = t.marginRight ? t.marginRight : "auto";
                  break;
                case "center":
                  (t.marginRight = t.marginRight ? t.marginRight : "auto"),
                    (t.marginLeft = t.marginLeft ? t.marginLeft : "auto");
                  break;
                case "right":
                  t.marginLeft = t.marginLeft ? t.marginLeft : "auto";
              }
            else if ("relative" === n && "column" === s)
              switch (i) {
                case "left":
                  t.alignSelf = "flex-start";
                  break;
                case "center":
                  t.alignSelf = "center";
                  break;
                case "right":
                  t.alignSelf = "flex-end";
              }
          if (o)
            if ("relative" !== n)
              "top" === o
                ? (t.top = 0)
                : "center" === o
                ? ((t.top = "50%"), (r += "translateY(-50%)"))
                : (t.bottom = 0);
            else if ("relative" === n && "column" === s)
              switch (o) {
                case "top":
                  t.marginBottom = t.marginBottom ? t.marginBottom : "auto";
                  break;
                case "center":
                  (t.marginTop = t.marginTop ? t.marginTop : "auto"),
                    (t.marginBottom = t.marginBottom ? t.marginBottom : "auto");
                  break;
                case "bottom":
                  t.marginTop = t.marginTop ? t.marginTop : "auto";
              }
            else if ("relative" === n && "row" === s)
              switch (o) {
                case "top":
                  t.alignSelf = "flex-start";
                  break;
                case "center":
                  t.alignSelf = "center";
                  break;
                case "bottom":
                  t.alignSelf = "flex-end";
              }
          r && (t.transform = r + (t.transform || ""));
        },
      };
      var _ = n(9932),
        N = n.n(_);
      const C = n(5936);
      function I(t, e, n, i) {
        t._transitions &&
          t._transitions[e] &&
          (t._transitions[e].stop(), delete t._transitions[e]);
        const o = t.getInputValue(e),
          r = t.getInput(e);
        let s;
        if (
          (r && "color" === r.type
            ? (s = (function (t, e) {
                const n = [0, 0, 0, 255];
                P(n, t);
                const i = [0, 0, 0, 255];
                P(i, e),
                  (t && "transparent" !== t) ||
                    ((n[0] = i[0]), (n[1] = i[1]), (n[2] = i[2])),
                  (e && "transparent" !== e) ||
                    ((i[0] = n[0]), (i[1] = n[1]), (i[2] = n[2]));
                const o = [0, 0, 0, 0];
                return (t) => (
                  (o[0] = Math.floor(C.linear(n[0], i[0], t))),
                  (o[1] = Math.floor(C.linear(n[1], i[1], t))),
                  (o[2] = Math.floor(C.linear(n[2], i[2], t))),
                  (o[3] = Math.floor(C.linear(n[3], i[3], t))),
                  (function (t) {
                    return "#" + E(t[0]) + E(t[1]) + E(t[2]) + E(t[3]);
                  })(o)
                );
              })(
                t.context.styles.resolveColor(o),
                t.context.styles.resolveColor(n)
              ))
            : "number" == typeof o && "number" == typeof n
            ? (s = x(o, n))
            : "object" == typeof o &&
              o.hasOwnProperty("value") &&
              "object" == typeof n &&
              n.hasOwnProperty("value") &&
              (s = x(o.value, n.value)),
          s)
        ) {
          t._transitions || (t._transitions = {});
          const n = N()(i.curve);
          (t._transitions[e] = t.context.timerScheduler.createTimer({
            duration: i.dur,
            onRunning: (i) => {
              const o = s(n.get(i));
              t.queueInput(e, o);
            },
            onFinish: () => {
              delete t._transitions[e];
            },
          })),
            t._transitions[e].start();
        } else t.queueInput(e, n);
      }
      function x(t, e) {
        return (n) => C.linear(t, e, n);
      }
      function P(t, e) {
        if ("transparent" === e || !e) return void (t[3] = 0);
        const n = (e.length - 1) / 2;
        for (let i = 0; i < n; ++i) {
          const n = 1 + 2 * i;
          t[i] = parseInt(e.substring(n, n + 2), 16);
        }
      }
      function E(t) {
        var e = t.toString(16);
        return 1 == e.length ? "0" + e : e;
      }
      function T(t) {
        return t && "object" == typeof t && !Array.isArray(t);
      }
      function D(t, ...e) {
        if (!e.length) return t;
        const n = e.shift();
        if (T(t) && T(n))
          for (const e in n)
            T(n[e])
              ? (t[e] || Object.assign(t, { [e]: {} }), D(t[e], n[e]))
              : Object.assign(t, { [e]: n[e] });
        return D(t, ...e);
      }
      function k(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function R(t) {
        for (var e = 1; e < arguments.length; e++) {
          var n = null != arguments[e] ? arguments[e] : {};
          e % 2
            ? k(Object(n), !0).forEach(function (e) {
                A(t, e, n[e]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
            : k(Object(n)).forEach(function (e) {
                Object.defineProperty(
                  t,
                  e,
                  Object.getOwnPropertyDescriptor(n, e)
                );
              });
        }
        return t;
      }
      function A(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function j(t, e, n) {
        const i = n ? t.props[n] : t.props;
        for (const n in e)
          if (i[n]) {
            const o = i[n];
            i[n] = () => {
              o(), e[n].call(t);
            };
          } else i[n] = e[n].bind(t);
        t.forceUpdate();
      }
      function M(t, e, n) {
        let i;
        (i =
          "signal" === n.type
            ? () => {
                t.sendSignalOnOutput(e);
              }
            : (...i) => {
                (t.outputPropValues[e] = n.getValue
                  ? n.getValue.call(t, ...i)
                  : i[0]),
                  t.flagOutputDirty(e),
                  n.onChange && n.onChange.call(t, t.outputPropValues[e]);
              }),
          j(t, { [e]: i }, n.propPath);
      }
      function F(t, e) {
        if (!t.type) throw new Error(`input ${e} is missing a type`);
        t.type.units
          ? (t.set = function (n) {
              const i = t.propPath ? this.props[t.propPath] : this.props;
              n && void 0 !== n.value ? (i[e] = n.value + n.unit) : delete i[e],
                t.onChange && t.onChange.call(this, n),
                this.forceUpdate();
            })
          : (t.set = function (n) {
              const i = t.propPath ? this.props[t.propPath] : this.props;
              void 0 !== n ? (i[e] = n) : delete i[e],
                t.onChange && t.onChange.call(this, n),
                this.forceUpdate();
            });
      }
      function V(t, e) {
        for (const n of e)
          Array.isArray(n) ? V(t, n) : void 0 !== n && t.push(n);
      }
      class L extends e().Component {
        componentDidMount() {
          this.props.noodlNode.sendSignalOnOutput("didMount");
        }
        componentWillUnmount() {
          this.props.noodlNode.sendSignalOnOutput("willUnmount");
        }
        render() {
          const t = this.props,
            { noodlNode: n, style: i } = t,
            o = (function (t, e) {
              if (null == t) return {};
              var n,
                i,
                o = (function (t, e) {
                  if (null == t) return {};
                  var n,
                    i,
                    o = {},
                    r = Object.keys(t);
                  for (i = 0; i < r.length; i++)
                    (n = r[i]), e.indexOf(n) >= 0 || (o[n] = t[n]);
                  return o;
                })(t, e);
              if (Object.getOwnPropertySymbols) {
                var r = Object.getOwnPropertySymbols(t);
                for (i = 0; i < r.length; i++)
                  (n = r[i]),
                    e.indexOf(n) >= 0 ||
                      (Object.prototype.propertyIsEnumerable.call(t, n) &&
                        (o[n] = t[n]));
              }
              return o;
            })(t, ["noodlNode", "style"]);
          let r = n.style;
          i && (r = R(R({}, n.style), i));
          const s = R(
            R(
              {
                ref: (t) => {
                  n.innerReactComponentRef = t;
                },
                style: r,
              },
              n.props
            ),
            o
          );
          if (n.noodlNodeAsProp) {
            s.noodlNode = n;
            const t = n.getVisualParentNode();
            t && t.props.layout && (s.parentLayout = t.props.layout);
          }
          return (
            (n.renderedAtFrame = n.context.frameNumber),
            n.useFrame &&
              (void 0 !== s.textStyle &&
                (s.style = r = Object.assign({}, s.textStyle, r)),
              O.size(r, s),
              O.align(r, s)),
            e().createElement(n.reactComponent, s, n.renderChildren())
          );
        }
      }
      function U(t, e, n) {
        let i = t;
        if ((n && (i = t.querySelector(`[noodl-style-tag=${n}]`)), i))
          for (const t in e) i.style[t] = e[t];
      }
      let B = 0;
      function W(t) {
        const { frame: n } = t;
        void 0 !== n &&
          (n.dimensions &&
            v.addDimensions(
              t,
              "object" == typeof n.dimensions ? n.dimensions : void 0
            ),
          n.position && v.addTransformInputs(t),
          n.margins && v.addMarginInputs(t),
          n.padding && v.addPaddingInputs(t),
          n.align && v.addAlignInputs(t));
        const {
            initialize: i,
            inputs: s,
            inputProps: a,
            inputCss: l,
            outputs: u,
            outputProps: p,
            dynamicports: c,
            defaultCss: d = {},
            methods: h,
          } = t,
          f = Object.assign({}, d),
          g = {};
        for (const t in l) {
          const e = l[t],
            n = e.hasOwnProperty("default") && !1 !== e.applyDefault;
          if (
            (e.styleTag &&
              !g.hasOwnProperty(e.styleTag) &&
              (g[e.styleTag] = {}),
            n)
          ) {
            const n = e.type.units ? e.default + e.type.defaultUnit : e.default;
            e.styleTag ? (g[e.styleTag][t] = n) : (f[t] = n);
          }
        }
        function m(t, e) {
          (this.clientBoundingRect = e),
            "x" === t
              ? this.flagOutputDirty("screenPositionX")
              : "y" === t
              ? this.flagOutputDirty("screenPositionY")
              : "width" === t
              ? this.flagOutputDirty("boundingWidth")
              : "height" === t && this.flagOutputDirty("boundingHeight");
        }
        const y = void 0 === t.useVariants || t.useVariants,
          b = {
            name: t.name,
            docs: t.docs,
            displayNodeName: t.displayNodeName || t.displayName,
            shortDesc: "",
            category: "Visual",
            allowChildren: void 0 === t.allowChildren || t.allowChildren,
            visualStates: t.visualStates,
            allowAsExportRoot: t.allowAsExportRoot,
            singleton: t.singleton,
            useVariants: y,
            connectionPanel: t.connectionPanel,
            initialize() {
              (this.reactKey = "key" + B),
                B++,
                (this.children = []),
                (this.props = { styles: {} }),
                (this.outputPropValues = {}),
                (this.style = Object.assign({}, f));
              for (const t in g) this.props.styles[t] = Object.assign({}, g[t]);
              (this.childIndex = 0),
                (this.clientBoundingRect = {}),
                (this.noodlNodeAsProp = !!t.noodlNodeAsProp);
              const e = this.context && this.context.runningInCanvas ? 300 : 0;
              (this.boundingBoxObserver = new r(m.bind(this), e)),
                (this.wantsToBeMounted = !0),
                (this.useFrame = !!n);
              for (const t in a) {
                const e = a[t];
                e.propPath &&
                  !this.props.hasOwnProperty(e.propPath) &&
                  (this.props[e.propPath] = {});
                const n = e.propPath ? this.props[e.propPath] : this.props;
                e.hasOwnProperty("default") &&
                  (e.type.defaultUnit && void 0 !== e.default
                    ? (n[t] = e.default + e.type.defaultUnit)
                    : (n[t] = e.default));
              }
              for (const t in p) {
                const e = p[t];
                e.propPath &&
                  !this.props.hasOwnProperty(e.propPath) &&
                  (this.props[e.propPath] = {}),
                  e.props ? j(this, e.props, e.propPath) : M(this, t, e);
              }
              (this.reactComponentRef = null),
                (this.reactComponent = t.getReactComponent.call(this)),
                i && i.call(this);
            },
            getInspectInfo: t.getInspectInfo,
            nodeScopeDidInitialize: t.nodeScopeDidInitialize,
            dynamicports: c,
            inputs: {
              cssClassName: {
                index: 1e5,
                displayName: "CSS Class",
                group: "Advanced Style",
                type: "string",
                default: "",
                set(t) {
                  (this.props.className = t), this.forceUpdate();
                },
              },
              styleCss: {
                index: 100001,
                displayName: "CSS Style",
                group: "Advanced Style",
                type: { name: "string", codeeditor: "text", allowEditOnly: !0 },
                default: "/* background-color: red; */",
                set(t) {
                  this.updateAdvancedStyle({ content: t });
                },
              },
            },
            outputs: {
              childIndex: {
                displayName: "Child Index",
                type: "number",
                get() {
                  return this.childIndex;
                },
              },
              this: {
                displayName: "This",
                type: "reference",
                get() {
                  return this;
                },
              },
              screenPositionX: {
                group: "Bounding Box",
                displayName: "Screen Position X",
                type: "number",
                get() {
                  return this.clientBoundingRect.x;
                },
                onFirstConnectionAdded() {
                  this.boundingBoxObserver.addObserver();
                },
                onLastConnectionRemoved() {
                  this.boundingBoxObserver.removeObserver();
                },
              },
              screenPositionY: {
                group: "Bounding Box",
                displayName: "Screen Position Y",
                type: "number",
                get() {
                  return this.clientBoundingRect.y;
                },
                onFirstConnectionAdded() {
                  this.boundingBoxObserver.addObserver();
                },
                onLastConnectionRemoved() {
                  this.boundingBoxObserver.removeObserver();
                },
              },
              boundingWidth: {
                group: "Bounding Box",
                displayName: "Width",
                type: "number",
                get() {
                  return this.clientBoundingRect.width;
                },
                onFirstConnectionAdded() {
                  this.boundingBoxObserver.addObserver();
                },
                onLastConnectionRemoved() {
                  this.boundingBoxObserver.removeObserver();
                },
              },
              boundingHeight: {
                group: "Bounding Box",
                displayName: "Height",
                type: "number",
                get() {
                  return this.clientBoundingRect.height;
                },
                onFirstConnectionAdded() {
                  this.boundingBoxObserver.addObserver();
                },
                onLastConnectionRemoved() {
                  this.boundingBoxObserver.removeObserver();
                },
              },
              didMount: {
                group: "Mounted",
                displayName: "Did Mount",
                type: "signal",
              },
              willUnmount: {
                group: "Mounted",
                displayName: "Will Unmount",
                type: "signal",
              },
            },
            methods: {
              updateAdvancedStyle(t) {
                let e;
                this.customCssStyles &&
                  (this.removeStyle(Object.keys(this.customCssStyles)),
                  (this.customCssStyles = void 0));
                let n = "",
                  i = (t.content || "").replace("\n", ""),
                  o = "";
                for (; i.length; ) {
                  let t = i.indexOf("/*");
                  if (
                    (-1 === t && (t = i.length),
                    (o += i.substring(0, t)),
                    (i = i.substring(t)),
                    i.length)
                  ) {
                    let t = i.indexOf("*/");
                    -1 === t && (t = i.length), (i = i.substring(t + 2));
                  }
                }
                function r(t) {
                  return t.replace(/^\s+|\s+$/gm, "");
                }
                const s = o
                  .split(";")
                  .map(r)
                  .filter((t) => t.length);
                e = {};
                for (const t of s) {
                  const i = t.split(":").map(r);
                  if (-1 !== t.indexOf("\n"))
                    n += "Missing semicolon: " + t.split("\n")[0];
                  else if (2 !== i.length) n += "Syntax error: " + t;
                  else {
                    const t = i[0].split("-");
                    for (let e = 1; e < t.length; e++)
                      t[e] = t[e][0].toUpperCase() + t[e].substring(1);
                    e[t.join("")] = i[1];
                  }
                }
                n
                  ? this.context.editorConnection.sendWarning(
                      this.nodeScope.componentOwner.name,
                      this.id,
                      "css-parse-waring",
                      { message: "Error in CSS Style<br>" + n }
                    )
                  : (this.context.editorConnection.clearWarning(
                      this.nodeScope.componentOwner.name,
                      this.id,
                      "css-parse-waring"
                    ),
                    e && this.setStyle(e),
                    (this.customCssStyles = e));
              },
              setChildIndex(t) {
                (this.childIndex = t), this.flagOutputDirty("childIndex");
              },
              updateChildIndices() {
                let t = 0;
                for (let e = 0; e < this.children.length; e++) {
                  const n = this.children[e];
                  ("For Each" !== n.name && "Component Children" !== n.name) ||
                    t--,
                    n.setChildIndex && n.setChildIndex(e + t);
                }
              },
              addChild(t, e) {
                void 0 === e && (e = this.children.length),
                  (t.parent = this),
                  this.children.splice(e, 0, t),
                  (this.cachedChildren = void 0),
                  this.scheduleUpdateChildIndices(),
                  this.forceUpdate();
              },
              removeChild(t) {
                const e = this.children.indexOf(t);
                -1 !== e &&
                  (this.children.splice(e, 1),
                  (t.parent = void 0),
                  (this.cachedChildren = void 0),
                  this.scheduleUpdateChildIndices(),
                  this.forceUpdate());
              },
              contains(t) {
                return (
                  -1 !== this.children.indexOf(t) ||
                  this.children.some((e) => e.contains && e.contains(t))
                );
              },
              scheduleUpdateChildIndices() {
                this.updateChildIndiciesScheduled ||
                  ((this.updateChildIndiciesScheduled = !0),
                  this.scheduleAfterInputsHaveUpdated(() => {
                    this.updateChildIndices(),
                      (this.updateChildIndiciesScheduled = !1);
                  }));
              },
              getChildren() {
                return this.children;
              },
              isChild(t) {
                return -1 !== this.children.indexOf(t);
              },
              getChildRoot() {
                return this;
              },
              forceUpdate() {
                !0 !== this.forceUpdateScheduled &&
                  ((this.forceUpdateScheduled = !0),
                  this.context.eventEmitter.once("frameEnd", () => {
                    (this.forceUpdateScheduled = !1),
                      this.renderedAtFrame !== this.context.frameNumber &&
                        this.reactComponentRef &&
                        this.reactComponentRef.setState({});
                  }),
                  this.context.scheduleUpdate());
              },
              _resetReactVirtualDOM() {
                (this.reactKey = "key" + B), B++;
                const t = this.getVisualParentNode();
                t && ((t.cachedChildren = void 0), t.forceUpdate());
              },
              render() {
                if (this.wantsToBeMounted)
                  return e().createElement(L, {
                    key: this.reactKey,
                    noodlNode: this,
                    ref: (t) => {
                      (this.reactComponentRef = t),
                        this.boundingBoxObserver.setTarget(o().findDOMNode(t));
                    },
                  });
              },
              renderChildren() {
                if (!this.cachedChildren) {
                  let t = [];
                  V(
                    t,
                    this.children.map((t) => t.render())
                  ),
                    0 === t.length ? (t = null) : 1 === t.length && (t = t[0]),
                    (this.cachedChildren = t);
                }
                return this.cachedChildren;
              },
              setStyle(t, e) {
                const n = e ? this.props.styles[e] : this.style;
                for (const e in t) n[e] = t[e];
                const i = this.getDOMElement();
                if (!i) return;
                let o = !1;
                if (!e) {
                  if (
                    (t.hasOwnProperty("opacity") &&
                      (o =
                        t.hasOwnProperty("opacity") &&
                        (("0" === i.style.opacity && t.opacity > 0) ||
                          ("0" !== i.style.opacity && 0 === t.opacity))),
                    t.transform)
                  ) {
                    let e = t.transform;
                    const n = this.getVisualParentNode();
                    ("absolute" !== this.style.position &&
                      n &&
                      n.style.flexDirection) ||
                      ("center" !== this.props.alignX ||
                        (i.style.marginLeft && i.style.marginRight) ||
                        (e = "translateX(-50%) " + e),
                      "center" !== this.props.alignY ||
                        (i.style.marginTop && i.style.marginBottom) ||
                        (e = "translateY(-50%) " + e)),
                      (t.transform = e);
                  }
                  const e =
                    t.hasOwnProperty("marginLeft") ||
                    t.hasOwnProperty("marginRight") ||
                    t.hasOwnProperty("marginTop") ||
                    t.hasOwnProperty("marginBottom");
                  ((this.props.width &&
                    "%" === this.props.width[this.props.width.length - 1]) ||
                    (this.props.height &&
                      "%" ===
                        this.props.height[this.props.height.length - 1])) &&
                    e &&
                    (o = !0),
                    (t.position || t.flexDirection || t.clip) && (o = !0);
                }
                o ? this.forceUpdate() : U(i, t, e);
              },
              removeStyle(t, e) {
                const n = e ? this.props.styles[e] : this.style;
                for (const e of t) delete n[e];
                const i = this.getDOMElement();
                let o = !1;
                if (!e && i) {
                  const e = {
                    marginTop: !0,
                    marginBottom: !0,
                    marginLeft: !0,
                    marginRight: !0,
                  };
                  for (const n of t) e[n] && (o = !0);
                }
                if (i) {
                  const n = {};
                  for (const e of t) n[e] = "";
                  U(i, n, e);
                }
                o && this.forceUpdate();
              },
              getStyle(t) {
                return this.style[t];
              },
              getRef() {
                return this.reactComponentRef;
              },
              getDOMElement() {
                const t = this.getRef();
                if (t) return o().findDOMNode(t);
              },
              getVisualParentNode() {
                if (this.parent) return this.parent;
                let t = this.nodeScope.componentOwner;
                for (; !t.parent && t.parentNodeScope; )
                  t = t.parentNodeScope.componentOwner;
                return t ? t.parent : void 0;
              },
              setVariant(t) {
                this._stopStateTransitions(), (this.variant = t);
                const e = {};
                t && D(e, t.parameters),
                  D(e, this.model.parameters),
                  this.currentVisualStates &&
                    D(e, this.getParametersForStates(this.currentVisualStates));
                const n = Object.keys(e).filter(
                  (t) => !this._hasInputBeenSetFromAConnection(t)
                );
                for (const t of n)
                  this.registerInputIfNeeded(t),
                    this.hasInput(t) && this.queueInput(t, e[t]);
              },
              getParameter(t) {
                return this.model.parameters.hasOwnProperty(t)
                  ? this.model.parameters[t]
                  : this.variant && this.variant.parameters.hasOwnProperty(t)
                  ? this.variant.parameters[t]
                  : this.context.getDefaultValueForInput(this.model.type, t);
              },
              getParametersForStates(t) {
                const e = {};
                if (this.variant)
                  for (const n of t)
                    this.variant.stateParameters &&
                      this.variant.stateParameters.hasOwnProperty(n) &&
                      D(e, this.variant.stateParameters[n]);
                for (const t in e)
                  this.model.parameters.hasOwnProperty(t) &&
                    ((n = e[t]) && "object" == typeof n && !Array.isArray(n)
                      ? D(e[t], this.model.parameters[t])
                      : (e[t] = this.model.parameters[t]));
                var n;
                if (this.model.stateParameters)
                  for (const n of t)
                    this.model.stateParameters.hasOwnProperty(n) &&
                      D(e, this.model.stateParameters[n]);
                return e;
              },
              _getNewState(t, e) {
                const n = e.filter((e) => !(t || []).includes(e)),
                  i = n.length ? n[0] : "neutral";
                return "" === i ? "neutral" : i;
              },
              _getDefaultTransition(t) {
                return this.model.defaultStateTransitions &&
                  this.model.defaultStateTransitions[t] &&
                  this.model.defaultStateTransitions[t].curve
                  ? this.model.defaultStateTransitions[t]
                  : this.variant &&
                    this.variant.defaultStateTransitions &&
                    this.variant.defaultStateTransitions[t] &&
                    this.variant.defaultStateTransitions[t].curve
                  ? this.variant.defaultStateTransitions[t]
                  : void 0;
              },
              _getStateTransition(t) {
                let e = {};
                return (
                  this.model.stateTransitions &&
                    this.model.stateTransitions[t] &&
                    Object.assign(e, this.model.stateTransitions[t]),
                  this.variant &&
                    this.variant.stateTransitions &&
                    this.variant.stateTransitions[t] &&
                    Object.assign(e, this.variant.stateTransitions[t]),
                  e
                );
              },
              setVisualStates(t) {
                if (!this.model) return;
                if (
                  this.currentVisualStates &&
                  t.length === this.currentVisualStates.length &&
                  t.every((t, e) => t === this.currentVisualStates[e])
                )
                  return;
                const e = this.currentVisualStates
                    ? this.getParametersForStates(this.currentVisualStates)
                    : {},
                  n = this.getParametersForStates(t),
                  i = this._getNewState(this.currentVisualStates, t);
                this.currentVisualStates = t;
                const o = {};
                for (const t in e)
                  n.hasOwnProperty(t) ||
                    this._hasInputBeenSetFromAConnection(t) ||
                    (o[t] = this.getParameter(t));
                for (const t in n)
                  this._hasInputBeenSetFromAConnection(t) || (o[t] = n[t]);
                const r = this._getDefaultTransition(i),
                  s = this._getStateTransition(i);
                for (const t in o)
                  s[t] && s[t].curve
                    ? I(this, t, o[t], s[t])
                    : !s[t] && r
                    ? I(this, t, o[t], r)
                    : (this._transitions &&
                        this._transitions[t] &&
                        (this._transitions[t].stop(),
                        delete this._transitions[t]),
                      this.queueInput(t, o[t]));
              },
              _getVisualStates() {
                return this.currentVisualStates || [];
              },
              _stopStateTransitions() {
                if (this._transitions)
                  for (const t in this._transitions)
                    this._transitions[t].stop(), delete this._transitions[t];
              },
            },
          };
        y &&
          (b.inputs.variant = {
            displayName: "Variant",
            group: "General",
            type: { name: "string", allowConnectionsOnly: !0 },
            set(t) {
              if (this.variant && this.variant.name === t) return;
              const e = this.context.variants.getVariant(this.model.type, t);
              e && this.setVariant(e);
            },
          }),
          !1 !== t.mountedInput &&
            (b.inputs.mounted = {
              displayName: "Mounted",
              index: 9999,
              type: "boolean",
              group: "General",
              default: !0,
              set(t) {
                if (((t = !!t), this.wantsToBeMounted !== t)) {
                  this.wantsToBeMounted = t;
                  const e = this.getVisualParentNode();
                  e && ((e.cachedChildren = void 0), e.forceUpdate());
                }
              },
            });
        for (const t in s) b.inputs[t] = s[t];
        for (const e in a) {
          const n = a[e];
          "node" === n.type
            ? ((n.type = "reference"),
              (n.set = function (t) {
                const i = n.propPath ? this.props[n.propPath] : this.props;
                void 0 !== t ? (i[e] = t.render()) : delete i[e],
                  this.forceUpdate();
              }))
            : "signal" === n.type
            ? console.error(
                `Error: Signals not supported as a react prop. node: '${t.name}' input: '${e}'`
              )
            : F(n, e),
            (b.inputs[e] = n);
        }
        for (const t in l) {
          const e = l[t],
            n = e.targetStyleProperty || t;
          e.type.units
            ? (e.set = function (t) {
                "object" != typeof t &&
                  e.type.defaultUnit &&
                  (t = { value: t, unit: e.type.defaultUnit }),
                  "object" == typeof t && void 0 !== t.value
                    ? this.setStyle({ [n]: t.value + t.unit }, e.styleTag)
                    : void 0 !== t
                    ? this.setStyle({ [n]: t }, e.styleTag)
                    : this.removeStyle([n], e.styleTag),
                  e.onChange && e.onChange.call(this, t);
              })
            : (e.set = function (t) {
                void 0 !== t
                  ? this.setStyle({ [n]: t }, e.styleTag)
                  : this.removeStyle([n], e.styleTag),
                  e.onChange && e.onChange.call(this, t);
              }),
            (b.inputs[t] = e);
        }
        for (const t in u) b.outputs[t] = u[t];
        for (const t in p) {
          const e = p[t];
          "signal" !== e.type &&
            (e.get = function () {
              return this.outputPropValues[t];
            }),
            (b.outputs[t] = e);
        }
        for (const t in h) b.methods[t] = h[t];
        return { node: b, setup: t.setup };
      }
      class z {
        constructor({ onInspect: t, onHighlight: e, onDisableHighlight: n }) {
          (this.onMouseMove = (t) => {
            n();
            const i = this.findNoodlNode(t.target);
            i && e(i.id), this.blockMouseEvents && t.stopPropagation();
          }),
            (this.onClick = (e) => {
              n();
              const i = this.findNoodlNode(e.target);
              i && (t(i.id), e.stopPropagation());
            }),
            (this.blockEvent = (t) => {
              t.stopPropagation();
            }),
            (this.onDisableHighlight = n);
        }
        setComponent(t) {
          this.component = t;
        }
        enable(t) {
          (t = t || {}),
            (this.blockMouseEvents = t.blockMouseEvents || !1),
            this.blockMouseEvents &&
              (document.addEventListener("mousedown", this.blockEvent, !0),
              document.addEventListener("mouseup", this.blockEvent, !0)),
            document.addEventListener("mousemove", this.onMouseMove, !0),
            document.addEventListener("click", this.onClick, !0);
        }
        disable() {
          this.blockMouseEvents &&
            (document.removeEventListener("mousedown", this.blockEvent, !0),
            document.removeEventListener("mouseup", this.blockEvent, !0)),
            document.removeEventListener("mousemove", this.onMouseMove, !0),
            document.removeEventListener("click", this.onClick, !0),
            this.onDisableHighlight();
        }
        findNoodlNode(t) {
          let e;
          for (; !e && t; )
            (e =
              t[
                Object.keys(t).find((t) =>
                  t.startsWith("__reactInternalInstance$")
                )
              ]),
              e || (t = t.parentElement);
          if (!e) return;
          const n = (t) => {
            let e = t.return;
            for (; e && "string" == typeof e.type; ) e = e.return;
            return e;
          };
          let i = n(e);
          for (
            ;
            i &&
            (!i.stateNode ||
              !i.stateNode.props ||
              !i.stateNode.props.noodlNode);

          )
            i = n(i);
          const o = i ? i.stateNode.props.noodlNode : void 0;
          if (o) {
            if (this.component) {
              let t = o;
              for (; t; )
                if (t.parentNodeScope) {
                  if (
                    t.parentNodeScope.componentOwner.name ===
                    this.component.name
                  )
                    return t;
                  t = t.parentNodeScope.componentOwner;
                } else {
                  if (t.nodeScope.componentOwner.name === this.component.name)
                    return t;
                  t = t.nodeScope.componentOwner;
                }
              return t;
            }
            return o;
          }
        }
      }
      const H = [
        {
          key: "ScrollBehaviourToScrollEnabled",
          message: "Scroll properties have changed and been upgraded",
          notifyUser: !0,
          askPermission: !1,
          patches: [
            {
              condition: function (t) {
                return (
                  "Group" === t.type &&
                  t.parameters.hasOwnProperty("scrollBehavior")
                );
              },
              generatePatch: function (t) {
                const e = { scrollBehavior: null, scrollDirection: null };
                switch (t.parameters.scrollBehavior) {
                  case "native":
                    (e.scrollEnabled = !0), (e.nativeScroll = !0);
                    break;
                  case "noodl":
                    e.scrollEnabled = !0;
                }
                return { nodeId: t.id, params: e };
              },
            },
          ],
        },
        {
          key: "TextAlignmentAlignXNoodl20",
          message:
            "Text nodes now support vertical alignment. Your project has been upgraded",
          notifyUser: !0,
          askPermission: !1,
          patches: [
            {
              condition: function (t) {
                return (
                  "Text" === t.type && t.parameters.hasOwnProperty("textAlign")
                );
              },
              generatePatch: function (t) {
                const e = {
                  textAlign: null,
                  textAlignX: t.parameters.textAlign,
                };
                return { nodeId: t.id, params: e };
              },
            },
          ],
        },
        {
          key: "TextAlignment",
          notifyUser: !1,
          askPermission: !1,
          patches: [
            {
              condition: function (t) {
                return (
                  "Text" === t.type &&
                  (t.parameters.hasOwnProperty("justifyContent") ||
                    t.parameters.hasOwnProperty("alignItems"))
                );
              },
              generatePatch: function (t) {
                const e = { justifyContent: null, alignItems: null };
                switch (t.parameters.justifyContent) {
                  case "flex-start":
                    e.textAlignX = "left";
                    break;
                  case "center":
                    e.textAlignX = "center";
                    break;
                  case "flex-end":
                    e.textAlignX = "right";
                }
                switch (t.parameters.alignItems) {
                  case "flex-start":
                    e.textAlignY = "top";
                    break;
                  case "center":
                    e.textAlignY = "center";
                    break;
                  case "flex-end":
                    e.textAlignY = "bottom";
                }
                return { nodeId: t.id, params: e };
              },
            },
          ],
        },
      ];
      class q {
        constructor({ graphModel: t, nodeRegister: e, getNodeScope: n }) {
          (this.getNodeScope = n),
            (this.graphModel = t),
            (this.nodeRegister = e),
            this.setStyles(t.getMetaData("styles") || {}),
            t.on("metadataChanged.styles", (t) => this.setStyles(t));
        }
        setStyles(t) {
          this.styles = t;
          const e = t.text || {};
          Object.values(e)
            .filter((t) => t.fontFamily)
            .forEach((t) => {
              let e = t.fontFamily;
              e.split(".").length > 1 &&
                (l().instance.loadFont(e),
                (e = e.replace(/\.[^/.]+$/, "")),
                (e = e.split("/").pop()),
                (t.fontFamily = e));
            });
          for (const t in e) {
            const n = e[t];
            for (const t in n) {
              const e = n[t];
              "object" == typeof e && (n[t] = e.value + e.unit);
            }
          }
          for (const t in e) {
            const n = e[t];
            n.hasOwnProperty("color") && !n.color && delete n.color;
          }
          const n = this.getNodeScope && this.getNodeScope();
          if (!n) return;
          const i = this.graphModel.getVariants();
          for (const t of i)
            this._variantHasInputsWithTypes(t, ["color", "textStyle"]) &&
              n
                .getAllNodesWithVariantRecursive(t)
                .forEach((e) => e.setVariant(t));
          ["color", "textStyle"].forEach((t) => {
            (function (t, e) {
              const n = [];
              return (
                t.getAllNodesRecursive().forEach((t) => {
                  const i = [];
                  for (const n in t._inputs)
                    t._inputs[n].type === e && i.push(n);
                  i.length && n.push({ node: t, inputs: i });
                }),
                n
              );
            })(n, t).forEach(({ node: t, inputs: e }) => {
              e.forEach((e) => {
                t.getInputValue(e) && t.setInputValue(e, t.getInputValue(e));
              });
            });
          });
        }
        resolveColor(t) {
          if (!this.styles.colors) return t;
          return this.styles.colors[t] || t;
        }
        getTextStyle(t) {
          return (this.styles.text && this.styles.text[t]) || {};
        }
        _variantHasInputsWithTypes(t, e) {
          if (!this.nodeRegister.hasNode(t.typename)) return;
          const n = this.nodeRegister.getNodeMetadata(t.typename),
            i = new Set(Object.keys(t.parameters));
          for (const e in t.stateParameters)
            Object.keys(t.stateParameters[e]).forEach((t) => i.add(t));
          for (const t of Array.from(i)) {
            const i = n.inputs[t] && n.inputs[t].type;
            if (e.includes(i)) return !0;
          }
          return !1;
        }
      }
      var $ = n(5876),
        Y = n.n($);
      const X = [
          "onClick",
          "onMouseDown",
          "onMouseMove",
          "onMouseUp",
          "onMouseEnter",
          "onMouseLeave",
          "onMouseOver",
          "onMouseOut",
          "onTouchStart",
          "onTouchMove",
          "onTouchEnd",
          "onTouchCancel",
          "onPointerDown",
          "onPointerMove",
          "onPointerUp",
          "onPointerCancel",
        ],
        G = new Set(["onMouseLeave", "onMouseOut"]);
      function J(t) {
        const e = {};
        for (const n of X)
          t.blockTouch && !G.has(n)
            ? t.pointer && t.pointer[n]
              ? (e[n] = (e) => {
                  t.pointer[n](e), e.stopPropagation();
                })
              : t[n]
              ? (e[n] = (e) => {
                  t[n](e), e.stopPropagation();
                })
              : (e[n] = (t) => {
                  t.stopPropagation();
                })
            : t[n]
            ? (e[n] = t[n])
            : t.pointer && (e[n] = t.pointer[n]);
        if (t.noodlNode)
          for (const n in e) {
            const i = e[n];
            i &&
              (e[n] = (e) => {
                i.call(this, e), t.noodlNode.context.updateDirtyNodes();
              });
          }
        return e;
      }
      const Q = [
        "row",
        "row-reverse",
        "column",
        "column-reverse",
        "inherit",
        "initial",
        "revert",
        "unset",
      ];
      var K = function (t, e) {
        return (K =
          Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array &&
            function (t, e) {
              t.__proto__ = e;
            }) ||
          function (t, e) {
            for (var n in e) e.hasOwnProperty(n) && (t[n] = e[n]);
          })(t, e);
      };
      function Z(t, e) {
        function n() {
          this.constructor = t;
        }
        K(t, e),
          (t.prototype =
            null === e
              ? Object.create(e)
              : ((n.prototype = e.prototype), new n()));
      }
      var tt = function () {
        return (tt =
          Object.assign ||
          function (t) {
            for (var e, n = 1, i = arguments.length; n < i; n++)
              for (var o in (e = arguments[n]))
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
            return t;
          }).apply(this, arguments);
      };
      function et(t) {
        console.error("[BScroll warn]: " + t);
      }
      var nt = "undefined" != typeof window,
        it = nt && navigator.userAgent.toLowerCase(),
        ot = it && /wechatdevtools/.test(it),
        rt = it && it.indexOf("android") > 0;
      function st() {
        return window.performance &&
          window.performance.now &&
          window.performance.timing
          ? window.performance.now() + window.performance.timing.navigationStart
          : +new Date();
      }
      function at(t) {
        for (var e = [], n = 1; n < arguments.length; n++)
          e[n - 1] = arguments[n];
        for (var i = 0; i < e.length; i++) {
          var o = e[i];
          for (var r in o) t[r] = o[r];
        }
        return t;
      }
      function lt(t) {
        return null == t;
      }
      var ut = nt && document.createElement("div").style,
        pt = (function () {
          if (!nt) return !1;
          var t = {
            webkit: "webkitTransform",
            Moz: "MozTransform",
            O: "OTransform",
            ms: "msTransform",
            standard: "transform",
          };
          for (var e in t) if (void 0 !== ut[t[e]]) return e;
          return !1;
        })();
      function ct(t) {
        return !1 === pt
          ? t
          : "standard" === pt
          ? "transitionEnd" === t
            ? "transitionend"
            : t
          : pt + t.charAt(0).toUpperCase() + t.substr(1);
      }
      function dt(t) {
        return "string" == typeof t ? document.querySelector(t) : t;
      }
      function ht(t, e, n, i) {
        t.addEventListener(e, n, { passive: !1, capture: !!i });
      }
      function ft(t, e, n, i) {
        t.removeEventListener(e, n, { capture: !!i });
      }
      function gt(t) {
        for (var e = 0, n = 0; t; )
          (e -= t.offsetLeft), (n -= t.offsetTop), (t = t.offsetParent);
        return { left: e, top: n };
      }
      pt && "standard" !== pt && pt.toLowerCase();
      var mt = ct("transform"),
        yt = ct("transition"),
        vt = nt && ct("perspective") in ut,
        bt = nt && ("ontouchstart" in window || ot),
        St = nt && yt in ut,
        wt = {
          transform: mt,
          transition: yt,
          transitionTimingFunction: ct("transitionTimingFunction"),
          transitionDuration: ct("transitionDuration"),
          transitionDelay: ct("transitionDelay"),
          transformOrigin: ct("transformOrigin"),
          transitionEnd: ct("transitionEnd"),
        },
        Ot = {
          touchstart: 1,
          touchmove: 1,
          touchend: 1,
          mousedown: 2,
          mousemove: 2,
          mouseup: 2,
        };
      function _t(t) {
        if (t instanceof window.SVGElement) {
          var e = t.getBoundingClientRect();
          return { top: e.top, left: e.left, width: e.width, height: e.height };
        }
        return {
          top: t.offsetTop,
          left: t.offsetLeft,
          width: t.offsetWidth,
          height: t.offsetHeight,
        };
      }
      function Nt(t, e) {
        for (var n in e) if (e[n].test(t[n])) return !0;
        return !1;
      }
      var Ct = Nt;
      function It(t, e) {
        var n;
        void 0 === e && (e = "click"),
          "mouseup" === t.type
            ? (n = t)
            : ("touchend" !== t.type && "touchcancel" !== t.type) ||
              (n = t.changedTouches[0]);
        var i,
          o = {};
        if (
          (n &&
            ((o.screenX = n.screenX || 0),
            (o.screenY = n.screenY || 0),
            (o.clientX = n.clientX || 0),
            (o.clientY = n.clientY || 0)),
          "undefined" != typeof MouseEvent)
        )
          try {
            i = new MouseEvent(e, at({ bubbles: !0, cancelable: !0 }, o));
          } catch (t) {
            r();
          }
        else r();
        function r() {
          (i = document.createEvent("Event")).initEvent(e, !0, !0), at(i, o);
        }
        (i.forwardedTouchEvent = !0),
          (i._constructed = !0),
          t.target.dispatchEvent(i);
      }
      var xt = {
          swipe: {
            style: "cubic-bezier(0.23, 1, 0.32, 1)",
            fn: function (t) {
              return 1 + --t * t * t * t * t;
            },
          },
          swipeBounce: {
            style: "cubic-bezier(0.25, 0.46, 0.45, 0.94)",
            fn: function (t) {
              return t * (2 - t);
            },
          },
          bounce: {
            style: "cubic-bezier(0.165, 0.84, 0.44, 1)",
            fn: function (t) {
              return 1 - --t * t * t * t;
            },
          },
        },
        Pt = nt && window;
      function Et() {}
      var Tt,
        Dt,
        kt,
        Rt,
        At = nt
          ? Pt.requestAnimationFrame ||
            Pt.webkitRequestAnimationFrame ||
            Pt.mozRequestAnimationFrame ||
            Pt.oRequestAnimationFrame ||
            function (t) {
              return window.setTimeout(
                t,
                (t.interval || 1.6666666666666667) / 2
              );
            }
          : Et,
        jt = nt
          ? Pt.cancelAnimationFrame ||
            Pt.webkitCancelAnimationFrame ||
            Pt.mozCancelAnimationFrame ||
            Pt.oCancelAnimationFrame ||
            function (t) {
              window.clearTimeout(t);
            }
          : Et,
        Mt = function (t) {},
        Ft = { enumerable: !0, configurable: !0, get: Mt, set: Mt },
        Vt = (function () {
          function t(t) {
            (this.events = {}), (this.eventTypes = {}), this.registerType(t);
          }
          return (
            (t.prototype.on = function (t, e, n) {
              return (
                void 0 === n && (n = this),
                this.hasType(t),
                this.events[t] || (this.events[t] = []),
                this.events[t].push([e, n]),
                this
              );
            }),
            (t.prototype.once = function (t, e, n) {
              var i = this;
              void 0 === n && (n = this), this.hasType(t);
              var o = function () {
                for (var r = [], s = 0; s < arguments.length; s++)
                  r[s] = arguments[s];
                i.off(t, o), e.apply(n, r);
              };
              return (o.fn = e), this.on(t, o), this;
            }),
            (t.prototype.off = function (t, e) {
              if (!t && !e) return (this.events = {}), this;
              if (t) {
                if ((this.hasType(t), !e)) return (this.events[t] = []), this;
                var n = this.events[t];
                if (!n) return this;
                for (var i = n.length; i--; )
                  (n[i][0] === e || (n[i][0] && n[i][0].fn === e)) &&
                    n.splice(i, 1);
                return this;
              }
            }),
            (t.prototype.trigger = function (t) {
              for (var e = [], n = 1; n < arguments.length; n++)
                e[n - 1] = arguments[n];
              this.hasType(t);
              var i = this.events[t];
              if (i)
                for (var o, r = i.length, s = i.slice(), a = 0; a < r; a++) {
                  var l = s[a],
                    u = l[0],
                    p = l[1];
                  if (u && !0 === (o = u.apply(p, e))) return o;
                }
            }),
            (t.prototype.registerType = function (t) {
              var e = this;
              t.forEach(function (t) {
                e.eventTypes[t] = t;
              });
            }),
            (t.prototype.destroy = function () {
              (this.events = {}), (this.eventTypes = {});
            }),
            (t.prototype.hasType = function (t) {
              var e = this.eventTypes;
              e[t] === t ||
                et(
                  'EventEmitter has used unknown event type: "' +
                    t +
                    '", should be oneof [' +
                    Object.keys(e).map(function (t) {
                      return JSON.stringify(t);
                    }) +
                    "]"
                );
            }),
            t
          );
        })(),
        Lt = (function () {
          function t(t, e) {
            (this.wrapper = t), (this.events = e), this.addDOMEvents();
          }
          return (
            (t.prototype.destroy = function () {
              this.removeDOMEvents(), (this.events = []);
            }),
            (t.prototype.addDOMEvents = function () {
              this.handleDOMEvents(ht);
            }),
            (t.prototype.removeDOMEvents = function () {
              this.handleDOMEvents(ft);
            }),
            (t.prototype.handleDOMEvents = function (t) {
              var e = this,
                n = this.wrapper;
              this.events.forEach(function (i) {
                t(n, i.name, e, !!i.capture);
              });
            }),
            (t.prototype.handleEvent = function (t) {
              var e = t.type;
              this.events.some(function (n) {
                return n.name === e && (n.handler(t), !0);
              });
            }),
            t
          );
        })(),
        Ut = (function () {
          function t() {
            (this.startX = 0),
              (this.startY = 0),
              (this.scrollX = !1),
              (this.scrollY = !0),
              (this.freeScroll = !1),
              (this.directionLockThreshold = 5),
              (this.eventPassthrough = ""),
              (this.click = !1),
              (this.dblclick = !1),
              (this.tap = ""),
              (this.bounce = { top: !0, bottom: !0, left: !0, right: !0 }),
              (this.bounceTime = 800),
              (this.momentum = !0),
              (this.momentumLimitTime = 300),
              (this.momentumLimitDistance = 15),
              (this.swipeTime = 2500),
              (this.swipeBounceTime = 500),
              (this.deceleration = 0.0015),
              (this.flickLimitTime = 200),
              (this.flickLimitDistance = 100),
              (this.resizePolling = 60),
              (this.probeType = 0),
              (this.stopPropagation = !1),
              (this.preventDefault = !0),
              (this.preventDefaultException = {
                tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT|AUDIO)$/,
              }),
              (this.tagException = { tagName: /^TEXTAREA$/ }),
              (this.HWCompositing = !0),
              (this.useTransition = !0),
              (this.bindToWrapper = !1),
              (this.disableMouse = bt),
              (this.disableTouch = !bt),
              (this.autoBlur = !0);
          }
          return (
            (t.prototype.merge = function (t) {
              if (!t) return this;
              for (var e in t) this[e] = t[e];
              return this;
            }),
            (t.prototype.process = function () {
              return (
                (this.translateZ =
                  this.HWCompositing && vt ? " translateZ(0)" : ""),
                (this.useTransition = this.useTransition && St),
                (this.preventDefault =
                  !this.eventPassthrough && this.preventDefault),
                this.resolveBounce(),
                (this.scrollX =
                  "horizontal" !== this.eventPassthrough && this.scrollX),
                (this.scrollY =
                  "vertical" !== this.eventPassthrough && this.scrollY),
                (this.freeScroll = this.freeScroll && !this.eventPassthrough),
                (this.scrollX = !!this.freeScroll || this.scrollX),
                (this.scrollY = !!this.freeScroll || this.scrollY),
                (this.directionLockThreshold = this.eventPassthrough
                  ? 0
                  : this.directionLockThreshold),
                this
              );
            }),
            (t.prototype.resolveBounce = function () {
              var t = this.bounce;
              (!1 !== t && !0 !== t) ||
                (this.bounce = (function (t, e) {
                  void 0 === e && (e = !0);
                  var n = {};
                  return (
                    ["top", "right", "bottom", "left"].forEach(function (t) {
                      n[t] = e;
                    }),
                    n
                  );
                })(0, t));
            }),
            t
          );
        })(),
        Bt = (function () {
          function t(t, e) {
            (this.wrapper = t),
              (this.options = e),
              (this.hooks = new Vt([
                "beforeStart",
                "start",
                "move",
                "end",
                "click",
              ])),
              this.handleDOMEvents();
          }
          return (
            (t.prototype.handleDOMEvents = function () {
              var t = this.options,
                e = t.bindToWrapper,
                n = t.disableMouse,
                i = t.disableTouch,
                o = t.click,
                r = this.wrapper,
                s = e ? r : window,
                a = [],
                l = [],
                u = bt && !i,
                p = !n;
              o &&
                a.push({
                  name: "click",
                  handler: this.click.bind(this),
                  capture: !0,
                }),
                u &&
                  (a.push({
                    name: "touchstart",
                    handler: this.start.bind(this),
                  }),
                  l.push(
                    { name: "touchmove", handler: this.move.bind(this) },
                    { name: "touchend", handler: this.end.bind(this) },
                    { name: "touchcancel", handler: this.end.bind(this) }
                  )),
                p &&
                  (a.push({
                    name: "mousedown",
                    handler: this.start.bind(this),
                  }),
                  l.push(
                    { name: "mousemove", handler: this.move.bind(this) },
                    { name: "mouseup", handler: this.end.bind(this) }
                  )),
                (this.wrapperEventRegister = new Lt(r, a)),
                (this.targetEventRegister = new Lt(s, l));
            }),
            (t.prototype.beforeHandler = function (t, e) {
              var n = this.options,
                i = n.preventDefault,
                o = n.stopPropagation,
                r = n.preventDefaultException;
              ({
                start: function () {
                  return i && !Nt(t.target, r);
                },
                end: function () {
                  return i && !Nt(t.target, r);
                },
                move: function () {
                  return i;
                },
              }[e]() && t.preventDefault(),
                o && t.stopPropagation());
            }),
            (t.prototype.setInitiated = function (t) {
              void 0 === t && (t = 0), (this.initiated = t);
            }),
            (t.prototype.start = function (t) {
              var e = Ot[t.type];
              if (!this.initiated || this.initiated === e)
                if (
                  (this.setInitiated(e),
                  Ct(t.target, this.options.tagException))
                )
                  this.setInitiated();
                else if (
                  (2 !== e || 0 === t.button) &&
                  !this.hooks.trigger(this.hooks.eventTypes.beforeStart, t)
                ) {
                  this.beforeHandler(t, "start");
                  var n = t.touches ? t.touches[0] : t;
                  (this.pointX = n.pageX),
                    (this.pointY = n.pageY),
                    this.hooks.trigger(this.hooks.eventTypes.start, t);
                }
            }),
            (t.prototype.move = function (t) {
              if (Ot[t.type] === this.initiated) {
                this.beforeHandler(t, "move");
                var e = t.touches ? t.touches[0] : t,
                  n = e.pageX - this.pointX,
                  i = e.pageY - this.pointY;
                if (
                  ((this.pointX = e.pageX),
                  (this.pointY = e.pageY),
                  !this.hooks.trigger(this.hooks.eventTypes.move, {
                    deltaX: n,
                    deltaY: i,
                    e: t,
                  }))
                ) {
                  var o =
                      document.documentElement.scrollLeft ||
                      window.pageXOffset ||
                      document.body.scrollLeft,
                    r =
                      document.documentElement.scrollTop ||
                      window.pageYOffset ||
                      document.body.scrollTop,
                    s = this.pointX - o,
                    a = this.pointY - r;
                  (s >
                    document.documentElement.clientWidth -
                      this.options.momentumLimitDistance ||
                    s < this.options.momentumLimitDistance ||
                    a < this.options.momentumLimitDistance ||
                    a >
                      document.documentElement.clientHeight -
                        this.options.momentumLimitDistance) &&
                    this.end(t);
                }
              }
            }),
            (t.prototype.end = function (t) {
              Ot[t.type] === this.initiated &&
                (this.setInitiated(),
                this.beforeHandler(t, "end"),
                this.hooks.trigger(this.hooks.eventTypes.end, t));
            }),
            (t.prototype.click = function (t) {
              this.hooks.trigger(this.hooks.eventTypes.click, t);
            }),
            (t.prototype.destroy = function () {
              this.wrapperEventRegister.destroy(),
                this.targetEventRegister.destroy(),
                this.hooks.destroy();
            }),
            t
          );
        })(),
        Wt = { x: ["translateX", "px"], y: ["translateY", "px"] },
        zt = (function () {
          function t(t) {
            (this.content = t),
              (this.style = t.style),
              (this.hooks = new Vt(["beforeTranslate", "translate"]));
          }
          return (
            (t.prototype.getComputedPosition = function () {
              var t = window
                .getComputedStyle(this.content, null)
                [wt.transform].split(")")[0]
                .split(", ");
              return { x: +(t[12] || t[4]), y: +(t[13] || t[5]) };
            }),
            (t.prototype.translate = function (t) {
              var e = [];
              Object.keys(t).forEach(function (n) {
                if (Wt[n]) {
                  var i = Wt[n][0];
                  if (i) {
                    var o = Wt[n][1],
                      r = t[n];
                    e.push(i + "(" + r + o + ")");
                  }
                }
              }),
                this.hooks.trigger(this.hooks.eventTypes.beforeTranslate, e, t),
                (this.style[wt.transform] = e.join(" ")),
                this.hooks.trigger(this.hooks.eventTypes.translate, t);
            }),
            (t.prototype.destroy = function () {
              this.hooks.destroy();
            }),
            t
          );
        })(),
        Ht = (function () {
          function t(t, e, n) {
            (this.content = t),
              (this.translater = e),
              (this.options = n),
              (this.hooks = new Vt([
                "move",
                "end",
                "beforeForceStop",
                "forceStop",
                "time",
                "timeFunction",
              ])),
              (this.style = t.style);
          }
          return (
            (t.prototype.translate = function (t) {
              this.translater.translate(t);
            }),
            (t.prototype.setPending = function (t) {
              this.pending = t;
            }),
            (t.prototype.setForceStopped = function (t) {
              this.forceStopped = t;
            }),
            (t.prototype.destroy = function () {
              this.hooks.destroy(), jt(this.timer);
            }),
            t
          );
        })(),
        qt = (function (t) {
          function e() {
            return (null !== t && t.apply(this, arguments)) || this;
          }
          return (
            Z(e, t),
            (e.prototype.startProbe = function () {
              var t = this,
                e = function () {
                  var n = t.translater.getComputedPosition();
                  t.hooks.trigger(t.hooks.eventTypes.move, n),
                    t.pending
                      ? (t.timer = At(e))
                      : t.hooks.trigger(t.hooks.eventTypes.end, n);
                };
              jt(this.timer), (this.timer = At(e));
            }),
            (e.prototype.transitionTime = function (t) {
              void 0 === t && (t = 0),
                (this.style[wt.transitionDuration] = t + "ms"),
                this.hooks.trigger(this.hooks.eventTypes.time, t);
            }),
            (e.prototype.transitionTimingFunction = function (t) {
              (this.style[wt.transitionTimingFunction] = t),
                this.hooks.trigger(this.hooks.eventTypes.timeFunction, t);
            }),
            (e.prototype.move = function (t, e, n, i, o) {
              this.setPending(n > 0 && (t.x !== e.x || t.y !== e.y)),
                this.transitionTimingFunction(i),
                this.transitionTime(n),
                this.translate(e),
                n && 3 === this.options.probeType && this.startProbe(),
                n || (this._reflow = this.content.offsetHeight),
                n ||
                  o ||
                  (this.hooks.trigger(this.hooks.eventTypes.move, e),
                  this.hooks.trigger(this.hooks.eventTypes.end, e));
            }),
            (e.prototype.stop = function () {
              if (this.pending) {
                this.setPending(!1), jt(this.timer);
                var t = this.translater.getComputedPosition(),
                  e = t.x,
                  n = t.y;
                if (
                  (this.transitionTime(),
                  this.translate({ x: e, y: n }),
                  this.setForceStopped(!0),
                  this.hooks.trigger(this.hooks.eventTypes.beforeForceStop, {
                    x: e,
                    y: n,
                  }))
                )
                  return;
                this.hooks.trigger(this.hooks.eventTypes.forceStop, {
                  x: e,
                  y: n,
                });
              }
            }),
            e
          );
        })(Ht),
        $t = (function (t) {
          function e() {
            return (null !== t && t.apply(this, arguments)) || this;
          }
          return (
            Z(e, t),
            (e.prototype.move = function (t, e, n, i, o) {
              if (!n) {
                if (
                  (this.translate(e),
                  (this._reflow = this.content.offsetHeight),
                  o)
                )
                  return;
                return (
                  this.hooks.trigger(this.hooks.eventTypes.move, e),
                  void this.hooks.trigger(this.hooks.eventTypes.end, e)
                );
              }
              this.animate(t, e, n, i);
            }),
            (e.prototype.animate = function (t, e, n, i) {
              var o = this,
                r = st(),
                s = r + n,
                a = function () {
                  var l = st();
                  if (l >= s)
                    return (
                      o.translate(e),
                      o.hooks.trigger(o.hooks.eventTypes.move, e),
                      void o.hooks.trigger(o.hooks.eventTypes.end, e)
                    );
                  var u = i((l = (l - r) / n)),
                    p = {};
                  Object.keys(e).forEach(function (n) {
                    var i = t[n],
                      o = e[n];
                    p[n] = (o - i) * u + i;
                  }),
                    o.translate(p),
                    o.pending && (o.timer = At(a)),
                    3 === o.options.probeType &&
                      o.hooks.trigger(o.hooks.eventTypes.move, p);
                };
              this.setPending(!0), jt(this.timer), a();
            }),
            (e.prototype.stop = function () {
              if (this.pending) {
                this.setPending(!1), jt(this.timer);
                var t = this.translater.getComputedPosition();
                if (
                  (this.setForceStopped(!0),
                  this.hooks.trigger(this.hooks.eventTypes.beforeForceStop, t))
                )
                  return;
                this.hooks.trigger(this.hooks.eventTypes.forceStop, t);
              }
            }),
            e
          );
        })(Ht),
        Yt = (function () {
          function t(t, e) {
            (this.wrapper = t),
              (this.options = e),
              (this.hooks = new Vt(["momentum", "end"])),
              (this.content = this.wrapper.children[0]),
              (this.currentPos = 0),
              (this.startPos = 0);
          }
          return (
            (t.prototype.start = function () {
              (this.direction = 0), (this.movingDirection = 0), (this.dist = 0);
            }),
            (t.prototype.move = function (t) {
              (t = this.hasScroll ? t : 0),
                (this.movingDirection = t > 0 ? -1 : t < 0 ? 1 : 0);
              var e = this.currentPos + t;
              return (
                (e > this.minScrollPos || e < this.maxScrollPos) &&
                  (e =
                    (e > this.minScrollPos && this.options.bounces[0]) ||
                    (e < this.maxScrollPos && this.options.bounces[1])
                      ? this.currentPos + t / 3
                      : e > this.minScrollPos
                      ? this.minScrollPos
                      : this.maxScrollPos),
                e
              );
            }),
            (t.prototype.end = function (t) {
              var e = { duration: 0 },
                n = Math.abs(this.currentPos - this.startPos);
              if (
                this.options.momentum &&
                t < this.options.momentumLimitTime &&
                n > this.options.momentumLimitDistance
              ) {
                var i =
                  (-1 === this.direction && this.options.bounces[0]) ||
                  (1 === this.direction && this.options.bounces[1])
                    ? this.wrapperSize
                    : 0;
                e = this.hasScroll
                  ? this.momentum(
                      this.currentPos,
                      this.startPos,
                      t,
                      this.maxScrollPos,
                      this.minScrollPos,
                      i,
                      this.options
                    )
                  : { destination: this.currentPos, duration: 0 };
              } else this.hooks.trigger(this.hooks.eventTypes.end, e);
              return e;
            }),
            (t.prototype.momentum = function (t, e, n, i, o, r, s) {
              void 0 === s && (s = this.options);
              var a = t - e,
                l = Math.abs(a) / n,
                u = s.deceleration,
                p = s.swipeBounceTime,
                c = {
                  destination: t + (l / u) * (a < 0 ? -1 : 1),
                  duration: s.swipeTime,
                  rate: 15,
                };
              return (
                this.hooks.trigger(this.hooks.eventTypes.momentum, c, a),
                c.destination < i
                  ? ((c.destination = r
                      ? Math.max(i - r / 4, i - (r / c.rate) * l)
                      : i),
                    (c.duration = p))
                  : c.destination > o &&
                    ((c.destination = r
                      ? Math.min(o + r / 4, o + (r / c.rate) * l)
                      : o),
                    (c.duration = p)),
                (c.destination = Math.round(c.destination)),
                c
              );
            }),
            (t.prototype.updateDirection = function () {
              var t = Math.round(this.currentPos) - this.absStartPos;
              this.direction = t > 0 ? -1 : t < 0 ? 1 : 0;
            }),
            (t.prototype.refresh = function () {
              var t = this.options.rect,
                e = t.size,
                n = t.position,
                i =
                  "static" ===
                  window.getComputedStyle(this.wrapper, null).position,
                o = _t(this.wrapper);
              this.wrapperSize = o[e];
              var r = _t(this.content);
              (this.contentSize = r[e]),
                (this.relativeOffset = r[n]),
                i && (this.relativeOffset -= o[n]),
                (this.minScrollPos = 0),
                (this.maxScrollPos = this.wrapperSize - this.contentSize),
                this.maxScrollPos < 0 &&
                  ((this.maxScrollPos -= this.relativeOffset),
                  (this.minScrollPos = -this.relativeOffset)),
                (this.hasScroll =
                  this.options.scrollable &&
                  this.maxScrollPos < this.minScrollPos),
                this.hasScroll ||
                  ((this.maxScrollPos = this.minScrollPos),
                  (this.contentSize = this.wrapperSize)),
                (this.direction = 0);
            }),
            (t.prototype.updatePosition = function (t) {
              this.currentPos = t;
            }),
            (t.prototype.getCurrentPos = function () {
              return Math.round(this.currentPos);
            }),
            (t.prototype.checkInBoundary = function () {
              var t = this.adjustPosition(this.currentPos);
              return { position: t, inBoundary: t === this.getCurrentPos() };
            }),
            (t.prototype.adjustPosition = function (t) {
              var e = Math.round(t);
              return (
                !this.hasScroll || e > this.minScrollPos
                  ? (e = this.minScrollPos)
                  : e < this.maxScrollPos && (e = this.maxScrollPos),
                e
              );
            }),
            (t.prototype.updateStartPos = function () {
              this.startPos = this.currentPos;
            }),
            (t.prototype.updateAbsStartPos = function () {
              this.absStartPos = this.currentPos;
            }),
            (t.prototype.resetStartPos = function () {
              this.updateStartPos(), this.updateAbsStartPos();
            }),
            (t.prototype.getAbsDist = function (t) {
              return (this.dist += t), Math.abs(this.dist);
            }),
            (t.prototype.destroy = function () {
              this.hooks.destroy();
            }),
            t
          );
        })(),
        Xt =
          (((Tt = {}).yes = function (t) {
            return !0;
          }),
          (Tt.no = function (t) {
            return t.preventDefault(), !1;
          }),
          Tt),
        Gt =
          (((Dt = {}).horizontal =
            (((kt = {}).yes = "horizontal"), (kt.no = "vertical"), kt)),
          (Dt.vertical =
            (((Rt = {}).yes = "vertical"), (Rt.no = "horizontal"), Rt)),
          Dt),
        Jt = (function () {
          function t(t, e, n) {
            (this.directionLockThreshold = t),
              (this.freeScroll = e),
              (this.eventPassthrough = n),
              this.reset();
          }
          return (
            (t.prototype.reset = function () {
              this.directionLocked = "";
            }),
            (t.prototype.checkMovingDirection = function (t, e, n) {
              return (
                this.computeDirectionLock(t, e), this.handleEventPassthrough(n)
              );
            }),
            (t.prototype.adjustDelta = function (t, e) {
              return (
                "horizontal" === this.directionLocked
                  ? (e = 0)
                  : "vertical" === this.directionLocked && (t = 0),
                { deltaX: t, deltaY: e }
              );
            }),
            (t.prototype.computeDirectionLock = function (t, e) {
              "" !== this.directionLocked ||
                this.freeScroll ||
                (t > e + this.directionLockThreshold
                  ? (this.directionLocked = "horizontal")
                  : e >= t + this.directionLockThreshold
                  ? (this.directionLocked = "vertical")
                  : (this.directionLocked = "none"));
            }),
            (t.prototype.handleEventPassthrough = function (t) {
              var e = Gt[this.directionLocked];
              if (e) {
                if (this.eventPassthrough === e.yes) return Xt.yes(t);
                if (this.eventPassthrough === e.no) return Xt.no(t);
              }
              return !1;
            }),
            t
          );
        })(),
        Qt = (function () {
          function t(t, e, n, i, o) {
            (this.hooks = new Vt([
              "start",
              "beforeMove",
              "scrollStart",
              "scroll",
              "beforeEnd",
              "end",
              "scrollEnd",
            ])),
              (this.scrollBehaviorX = t),
              (this.scrollBehaviorY = e),
              (this.actionsHandler = n),
              (this.animater = i),
              (this.options = o),
              (this.directionLockAction = new Jt(
                o.directionLockThreshold,
                o.freeScroll,
                o.eventPassthrough
              )),
              (this.enabled = !0),
              this.bindActionsHandler();
          }
          return (
            (t.prototype.bindActionsHandler = function () {
              var t = this;
              this.actionsHandler.hooks.on(
                this.actionsHandler.hooks.eventTypes.start,
                function (e) {
                  return !t.enabled || t.handleStart(e);
                }
              ),
                this.actionsHandler.hooks.on(
                  this.actionsHandler.hooks.eventTypes.move,
                  function (e) {
                    var n = e.deltaX,
                      i = e.deltaY,
                      o = e.e;
                    return !t.enabled || t.handleMove(n, i, o);
                  }
                ),
                this.actionsHandler.hooks.on(
                  this.actionsHandler.hooks.eventTypes.end,
                  function (e) {
                    return !t.enabled || t.handleEnd(e);
                  }
                ),
                this.actionsHandler.hooks.on(
                  this.actionsHandler.hooks.eventTypes.click,
                  function (e) {
                    t.enabled && !e._constructed && t.handleClick(e);
                  }
                );
            }),
            (t.prototype.handleStart = function (t) {
              var e = st();
              (this.moved = !1),
                (this.startTime = e),
                this.directionLockAction.reset(),
                this.scrollBehaviorX.start(),
                this.scrollBehaviorY.start(),
                this.animater.stop(),
                this.scrollBehaviorX.resetStartPos(),
                this.scrollBehaviorY.resetStartPos(),
                this.hooks.trigger(this.hooks.eventTypes.start, t);
            }),
            (t.prototype.handleMove = function (t, e, n) {
              if (!this.hooks.trigger(this.hooks.eventTypes.beforeMove, n)) {
                var i = this.scrollBehaviorX.getAbsDist(t),
                  o = this.scrollBehaviorY.getAbsDist(e),
                  r = st();
                if (this.checkMomentum(i, o, r)) return !0;
                if (this.directionLockAction.checkMovingDirection(i, o, n))
                  return this.actionsHandler.setInitiated(), !0;
                var s = this.directionLockAction.adjustDelta(t, e),
                  a = this.scrollBehaviorX.move(s.deltaX),
                  l = this.scrollBehaviorY.move(s.deltaY);
                this.moved ||
                  ((this.moved = !0),
                  this.hooks.trigger(this.hooks.eventTypes.scrollStart)),
                  this.animater.translate({ x: a, y: l }),
                  this.dispatchScroll(r);
              }
            }),
            (t.prototype.dispatchScroll = function (t) {
              t - this.startTime > this.options.momentumLimitTime &&
                ((this.startTime = t),
                this.scrollBehaviorX.updateStartPos(),
                this.scrollBehaviorY.updateStartPos(),
                1 === this.options.probeType &&
                  this.hooks.trigger(
                    this.hooks.eventTypes.scroll,
                    this.getCurrentPos()
                  )),
                this.options.probeType > 1 &&
                  this.hooks.trigger(
                    this.hooks.eventTypes.scroll,
                    this.getCurrentPos()
                  );
            }),
            (t.prototype.checkMomentum = function (t, e, n) {
              return (
                n - this.endTime > this.options.momentumLimitTime &&
                e < this.options.momentumLimitDistance &&
                t < this.options.momentumLimitDistance
              );
            }),
            (t.prototype.handleEnd = function (t) {
              if (!this.hooks.trigger(this.hooks.eventTypes.beforeEnd, t)) {
                var e = this.getCurrentPos();
                if (
                  (this.scrollBehaviorX.updateDirection(),
                  this.scrollBehaviorY.updateDirection(),
                  this.hooks.trigger(this.hooks.eventTypes.end, t, e))
                )
                  return !0;
                this.animater.translate(e), (this.endTime = st());
                var n = this.endTime - this.startTime;
                this.hooks.trigger(this.hooks.eventTypes.scrollEnd, e, n);
              }
            }),
            (t.prototype.handleClick = function (t) {
              Nt(t.target, this.options.preventDefaultException) ||
                (t.preventDefault(), t.stopPropagation());
            }),
            (t.prototype.getCurrentPos = function () {
              return {
                x: this.scrollBehaviorX.getCurrentPos(),
                y: this.scrollBehaviorY.getCurrentPos(),
              };
            }),
            (t.prototype.refresh = function () {
              this.endTime = 0;
            }),
            (t.prototype.destroy = function () {
              this.hooks.destroy();
            }),
            t
          );
        })();
      function Kt(t, e, n, i) {
        var o = [
          "momentum",
          "momentumLimitTime",
          "momentumLimitDistance",
          "deceleration",
          "swipeBounceTime",
          "swipeTime",
        ].reduce(function (e, n) {
          return (e[n] = t[n]), e;
        }, {});
        return (o.scrollable = t[e]), (o.bounces = n), (o.rect = i), o;
      }
      function Zt(t, e, n) {
        n.forEach(function (n) {
          var i, o;
          "string" == typeof n ? (i = o = n) : ((i = n.source), (o = n.target)),
            t.on(i, function () {
              for (var t = [], n = 0; n < arguments.length; n++)
                t[n] = arguments[n];
              return e.trigger.apply(e, [o].concat(t));
            });
        });
      }
      var te = (function () {
          function t(t, e) {
            (this.hooks = new Vt([
              "beforeStart",
              "beforeMove",
              "beforeScrollStart",
              "scrollStart",
              "scroll",
              "beforeEnd",
              "scrollEnd",
              "refresh",
              "touchEnd",
              "end",
              "flick",
              "scrollCancel",
              "momentum",
              "scrollTo",
              "ignoreDisMoveForSamePos",
              "scrollToElement",
              "resize",
            ])),
              (this.wrapper = t),
              (this.content = t.children[0]),
              (this.options = e);
            var n,
              i = this.options.bounce,
              o = i.left,
              r = void 0 === o || o,
              s = i.right,
              a = void 0 === s || s,
              l = i.top,
              u = void 0 === l || l,
              p = i.bottom,
              c = void 0 === p || p;
            (this.scrollBehaviorX = new Yt(
              t,
              Kt(e, "scrollX", [r, a], { size: "width", position: "left" })
            )),
              (this.scrollBehaviorY = new Yt(
                t,
                Kt(e, "scrollY", [u, c], { size: "height", position: "top" })
              )),
              (this.translater = new zt(this.content)),
              (this.animater = (function (t, e, n) {
                var i = n.useTransition,
                  o = {};
                return (
                  Object.defineProperty(o, "probeType", {
                    enumerable: !0,
                    configurable: !1,
                    get: function () {
                      return n.probeType;
                    },
                  }),
                  i ? new qt(t, e, o) : new $t(t, e, o)
                );
              })(this.content, this.translater, this.options)),
              (this.actionsHandler = new Bt(
                t,
                ((n = this.options),
                [
                  "click",
                  "bindToWrapper",
                  "disableMouse",
                  "disableTouch",
                  "preventDefault",
                  "stopPropagation",
                  "tagException",
                  "preventDefaultException",
                ].reduce(function (t, e) {
                  return (t[e] = n[e]), t;
                }, {}))
              )),
              (this.actions = new Qt(
                this.scrollBehaviorX,
                this.scrollBehaviorY,
                this.actionsHandler,
                this.animater,
                this.options
              ));
            var d = this.resize.bind(this);
            (this.resizeRegister = new Lt(window, [
              { name: "orientationchange", handler: d },
              { name: "resize", handler: d },
            ])),
              (this.transitionEndRegister = new Lt(this.content, [
                {
                  name: wt.transitionEnd,
                  handler: this.transitionEnd.bind(this),
                },
              ])),
              this.init();
          }
          return (
            (t.prototype.init = function () {
              var t = this;
              this.bindTranslater(),
                this.bindAnimater(),
                this.bindActions(),
                this.hooks.on(this.hooks.eventTypes.scrollEnd, function () {
                  t.togglePointerEvents(!0);
                });
            }),
            (t.prototype.bindTranslater = function () {
              var t = this,
                e = this.translater.hooks;
              e.on(e.eventTypes.beforeTranslate, function (e) {
                t.options.translateZ && e.push(t.options.translateZ);
              }),
                e.on(e.eventTypes.translate, function (e) {
                  t.updatePositions(e), t.togglePointerEvents(!1);
                });
            }),
            (t.prototype.bindAnimater = function () {
              var t = this;
              this.animater.hooks.on(
                this.animater.hooks.eventTypes.end,
                function (e) {
                  t.resetPosition(t.options.bounceTime) ||
                    (t.animater.setPending(!1),
                    t.hooks.trigger(t.hooks.eventTypes.scrollEnd, e));
                }
              ),
                Zt(this.animater.hooks, this.hooks, [
                  {
                    source: this.animater.hooks.eventTypes.move,
                    target: this.hooks.eventTypes.scroll,
                  },
                  {
                    source: this.animater.hooks.eventTypes.forceStop,
                    target: this.hooks.eventTypes.scrollEnd,
                  },
                ]);
            }),
            (t.prototype.bindActions = function () {
              var t = this,
                e = this.actions;
              Zt(e.hooks, this.hooks, [
                {
                  source: e.hooks.eventTypes.start,
                  target: this.hooks.eventTypes.beforeStart,
                },
                {
                  source: e.hooks.eventTypes.start,
                  target: this.hooks.eventTypes.beforeScrollStart,
                },
                {
                  source: e.hooks.eventTypes.beforeMove,
                  target: this.hooks.eventTypes.beforeMove,
                },
                {
                  source: e.hooks.eventTypes.scrollStart,
                  target: this.hooks.eventTypes.scrollStart,
                },
                {
                  source: e.hooks.eventTypes.scroll,
                  target: this.hooks.eventTypes.scroll,
                },
                {
                  source: e.hooks.eventTypes.beforeEnd,
                  target: this.hooks.eventTypes.beforeEnd,
                },
              ]),
                e.hooks.on(e.hooks.eventTypes.end, function (n, i) {
                  return (
                    t.hooks.trigger(t.hooks.eventTypes.touchEnd, i),
                    !!t.hooks.trigger(t.hooks.eventTypes.end, i) ||
                      (!e.moved && t.checkClick(n)
                        ? (t.animater.setForceStopped(!1),
                          t.hooks.trigger(t.hooks.eventTypes.scrollCancel),
                          !0)
                        : (t.animater.setForceStopped(!1),
                          !!t.resetPosition(t.options.bounceTime, xt.bounce) ||
                            void 0))
                  );
                }),
                e.hooks.on(e.hooks.eventTypes.scrollEnd, function (e, n) {
                  var i = Math.abs(e.x - t.scrollBehaviorX.startPos),
                    o = Math.abs(e.y - t.scrollBehaviorY.startPos);
                  t.checkFlick(n, i, o)
                    ? t.hooks.trigger(t.hooks.eventTypes.flick)
                    : t.momentum(e, n) ||
                      t.hooks.trigger(t.hooks.eventTypes.scrollEnd, e);
                });
            }),
            (t.prototype.checkFlick = function (t, e, n) {
              if (
                this.hooks.events.flick.length > 1 &&
                t < this.options.flickLimitTime &&
                e < this.options.flickLimitDistance &&
                n < this.options.flickLimitDistance
              )
                return !0;
            }),
            (t.prototype.momentum = function (t, e) {
              var n = { time: 0, easing: xt.swiper, newX: t.x, newY: t.y },
                i = this.scrollBehaviorX.end(e),
                o = this.scrollBehaviorY.end(e);
              if (
                ((n.newX = lt(i.destination) ? n.newX : i.destination),
                (n.newY = lt(o.destination) ? n.newY : o.destination),
                (n.time = Math.max(i.duration, o.duration)),
                this.hooks.trigger(this.hooks.eventTypes.momentum, n, this),
                n.newX !== t.x || n.newY !== t.y)
              )
                return (
                  (n.newX > this.scrollBehaviorX.minScrollPos ||
                    n.newX < this.scrollBehaviorX.maxScrollPos ||
                    n.newY > this.scrollBehaviorY.minScrollPos ||
                    n.newY < this.scrollBehaviorY.maxScrollPos) &&
                    (n.easing = xt.swipeBounce),
                  this.scrollTo(n.newX, n.newY, n.time, n.easing),
                  !0
                );
            }),
            (t.prototype.checkClick = function (t) {
              var e = this.animater.forceStopped;
              if (this.hooks.trigger(this.hooks.eventTypes.checkClick))
                return !0;
              if (!e) {
                var n = this.options.dblclick,
                  i = !1;
                if (n && this.lastClickTime) {
                  var o = n.delay,
                    r = void 0 === o ? 300 : o;
                  st() - this.lastClickTime < r &&
                    ((i = !0),
                    (function (t) {
                      It(t, "dblclick");
                    })(t));
                }
                return (
                  this.options.tap &&
                    (function (t, e) {
                      var n = document.createEvent("Event");
                      n.initEvent(e, !0, !0),
                        (n.pageX = t.pageX),
                        (n.pageY = t.pageY),
                        t.target.dispatchEvent(n);
                    })(t, this.options.tap),
                  this.options.click &&
                    !Nt(t.target, this.options.preventDefaultException) &&
                    It(t),
                  (this.lastClickTime = i ? null : st()),
                  !0
                );
              }
              return !1;
            }),
            (t.prototype.resize = function () {
              var t = this;
              this.actions.enabled &&
                (rt && (this.wrapper.scrollTop = 0),
                this.hooks.trigger(this.hooks.eventTypes.resize) ||
                  (clearTimeout(this.resizeTimeout),
                  (this.resizeTimeout = window.setTimeout(function () {
                    t.refresh();
                  }, this.options.resizePolling))));
            }),
            (t.prototype.transitionEnd = function (t) {
              t.target === this.content &&
                this.animater.pending &&
                (this.animater.transitionTime(),
                this.resetPosition(this.options.bounceTime, xt.bounce) ||
                  (this.animater.setPending(!1),
                  3 !== this.options.probeType &&
                    this.hooks.trigger(
                      this.hooks.eventTypes.scrollEnd,
                      this.getCurrentPos()
                    )));
            }),
            (t.prototype.togglePointerEvents = function (t) {
              void 0 === t && (t = !0);
              for (
                var e = this.content.children.length
                    ? this.content.children
                    : [this.content],
                  n = t ? "auto" : "none",
                  i = 0;
                i < e.length;
                i++
              ) {
                var o = e[i];
                o.isBScrollContainer || (o.style.pointerEvents = n);
              }
            }),
            (t.prototype.refresh = function () {
              this.scrollBehaviorX.refresh(),
                this.scrollBehaviorY.refresh(),
                this.actions.refresh(),
                (this.wrapperOffset = gt(this.wrapper));
            }),
            (t.prototype.scrollBy = function (t, e, n, i) {
              void 0 === n && (n = 0);
              var o = this.getCurrentPos(),
                r = o.x,
                s = o.y;
              (i = i || xt.bounce),
                (t += r),
                (e += s),
                this.scrollTo(t, e, n, i);
            }),
            (t.prototype.scrollTo = function (t, e, n, i, o, r) {
              void 0 === n && (n = 0),
                void 0 === o && (o = { start: {}, end: {} }),
                (i = i || xt.bounce);
              var s = this.options.useTransition ? i.style : i.fn,
                a = this.getCurrentPos(),
                l = tt({ x: a.x, y: a.y }, o.start),
                u = tt({ x: t, y: e }, o.end);
              this.hooks.trigger(this.hooks.eventTypes.scrollTo, u),
                (this.hooks.trigger(
                  this.hooks.eventTypes.ignoreDisMoveForSamePos
                ) ||
                  l.x !== u.x ||
                  l.y !== u.y) &&
                  this.animater.move(l, u, n, s, r);
            }),
            (t.prototype.scrollToElement = function (t, e, n, i, o) {
              var r = dt(t),
                s = gt(r),
                a = function (t, e, n) {
                  return "number" == typeof t
                    ? t
                    : t
                    ? Math.round(e / 2 - n / 2)
                    : 0;
                };
              (n = a(n, r.offsetWidth, this.wrapper.offsetWidth)),
                (i = a(i, r.offsetHeight, this.wrapper.offsetHeight));
              var l = function (t, e, n, i) {
                return (t -= e), i.adjustPosition(t - n);
              };
              (s.left = l(
                s.left,
                this.wrapperOffset.left,
                n,
                this.scrollBehaviorX
              )),
                (s.top = l(
                  s.top,
                  this.wrapperOffset.top,
                  i,
                  this.scrollBehaviorY
                )),
                this.hooks.trigger(
                  this.hooks.eventTypes.scrollToElement,
                  r,
                  s
                ) || this.scrollTo(s.left, s.top, e, o);
            }),
            (t.prototype.resetPosition = function (t, e) {
              void 0 === t && (t = 0), (e = e || xt.bounce);
              var n = this.scrollBehaviorX.checkInBoundary(),
                i = n.position,
                o = n.inBoundary,
                r = this.scrollBehaviorY.checkInBoundary(),
                s = r.position,
                a = r.inBoundary;
              return !((o && a) || (this.scrollTo(i, s, t, e), 0));
            }),
            (t.prototype.updatePositions = function (t) {
              this.scrollBehaviorX.updatePosition(t.x),
                this.scrollBehaviorY.updatePosition(t.y);
            }),
            (t.prototype.getCurrentPos = function () {
              return this.actions.getCurrentPos();
            }),
            (t.prototype.enable = function () {
              this.actions.enabled = !0;
            }),
            (t.prototype.disable = function () {
              jt(this.animater.timer), (this.actions.enabled = !1);
            }),
            (t.prototype.destroy = function () {
              var t = this;
              [
                "resizeRegister",
                "transitionEndRegister",
                "actionsHandler",
                "actions",
                "hooks",
                "animater",
                "translater",
                "scrollBehaviorX",
                "scrollBehaviorY",
              ].forEach(function (e) {
                return t[e].destroy();
              });
            }),
            t
          );
        })(),
        ee = [
          { sourceKey: "scroller.scrollBehaviorX.currentPos", key: "x" },
          { sourceKey: "scroller.scrollBehaviorY.currentPos", key: "y" },
          {
            sourceKey: "scroller.scrollBehaviorX.hasScroll",
            key: "hasHorizontalScroll",
          },
          {
            sourceKey: "scroller.scrollBehaviorY.hasScroll",
            key: "hasVerticalScroll",
          },
          {
            sourceKey: "scroller.scrollBehaviorX.contentSize",
            key: "scrollerWidth",
          },
          {
            sourceKey: "scroller.scrollBehaviorY.contentSize",
            key: "scrollerHeight",
          },
          {
            sourceKey: "scroller.scrollBehaviorX.maxScrollPos",
            key: "maxScrollX",
          },
          {
            sourceKey: "scroller.scrollBehaviorY.maxScrollPos",
            key: "maxScrollY",
          },
          {
            sourceKey: "scroller.scrollBehaviorX.minScrollPos",
            key: "minScrollX",
          },
          {
            sourceKey: "scroller.scrollBehaviorY.minScrollPos",
            key: "minScrollY",
          },
          {
            sourceKey: "scroller.scrollBehaviorX.movingDirection",
            key: "movingDirectionX",
          },
          {
            sourceKey: "scroller.scrollBehaviorY.movingDirection",
            key: "movingDirectionY",
          },
          {
            sourceKey: "scroller.scrollBehaviorX.direction",
            key: "directionX",
          },
          {
            sourceKey: "scroller.scrollBehaviorY.direction",
            key: "directionY",
          },
          { sourceKey: "scroller.actions.enabled", key: "enabled" },
          { sourceKey: "scroller.animater.pending", key: "pending" },
          { sourceKey: "scroller.animater.stop", key: "stop" },
          { sourceKey: "scroller.scrollTo", key: "scrollTo" },
          { sourceKey: "scroller.scrollBy", key: "scrollBy" },
          { sourceKey: "scroller.scrollToElement", key: "scrollToElement" },
          { sourceKey: "scroller.resetPosition", key: "resetPosition" },
        ];
      const ne = (function (t) {
        function e(e, n) {
          var i =
              t.call(this, [
                "refresh",
                "enable",
                "disable",
                "beforeScrollStart",
                "scrollStart",
                "scroll",
                "scrollEnd",
                "scrollCancel",
                "touchEnd",
                "flick",
                "destroy",
              ]) || this,
            o = dt(e);
          return o
            ? o.children[0]
              ? ((i.plugins = {}),
                (i.options = new Ut().merge(n).process()),
                (i.hooks = new Vt([
                  "init",
                  "refresh",
                  "enable",
                  "disable",
                  "destroy",
                ])),
                i.init(o),
                i)
              : (et(
                  "The wrapper need at least one child element to be scroller."
                ),
                i)
            : (et("Can not resolve the wrapper DOM."), i);
        }
        return (
          Z(e, t),
          (e.use = function (t) {
            var e = t.pluginName;
            return this.plugins.some(function (e) {
              return t === e.ctor;
            })
              ? this
              : lt(e)
              ? (et(
                  "Plugin Class must specify plugin's name in static property by 'pluginName' field."
                ),
                this)
              : this.pluginsMap[e]
              ? (et(
                  "This plugin has been registered, maybe you need change plugin's name"
                ),
                this)
              : ((this.pluginsMap[e] = !0),
                this.plugins.push({
                  name: e,
                  applyOrder: t.applyOrder,
                  ctor: t,
                }),
                this);
          }),
          (e.prototype.init = function (t) {
            (this.wrapper = t),
              (t.isBScrollContainer = !0),
              (this.scroller = new te(t, this.options)),
              this.eventBubbling(),
              this.handleAutoBlur(),
              this.innerRefresh(),
              this.scroller.scrollTo(this.options.startX, this.options.startY),
              this.enable(),
              this.proxy(ee),
              this.applyPlugins();
          }),
          (e.prototype.applyPlugins = function () {
            var t = this,
              e = this.options;
            this.constructor.plugins
              .sort(function (t, e) {
                var n,
                  i = (((n = {}).pre = -1), (n.post = 1), n);
                return (
                  (t.applyOrder ? i[t.applyOrder] : 0) -
                  (e.applyOrder ? i[e.applyOrder] : 0)
                );
              })
              .forEach(function (n) {
                var i = n.ctor;
                e[n.name] &&
                  "function" == typeof i &&
                  (t.plugins[n.name] = new i(t));
              });
          }),
          (e.prototype.handleAutoBlur = function () {
            this.options.autoBlur &&
              this.on(this.eventTypes.beforeScrollStart, function () {
                var t = document.activeElement;
                !t ||
                  ("INPUT" !== t.tagName && "TEXTAREA" !== t.tagName) ||
                  t.blur();
              });
          }),
          (e.prototype.eventBubbling = function () {
            Zt(this.scroller.hooks, this, [
              "beforeScrollStart",
              "scrollStart",
              "scroll",
              "scrollEnd",
              "scrollCancel",
              "touchEnd",
              "flick",
            ]);
          }),
          (e.prototype.innerRefresh = function () {
            this.scroller.refresh(),
              this.hooks.trigger(this.hooks.eventTypes.refresh),
              this.trigger(this.eventTypes.refresh);
          }),
          (e.prototype.proxy = function (t) {
            var e = this;
            t.forEach(function (t) {
              var n = t.key,
                i = t.sourceKey;
              !(function (t, e, n) {
                (Ft.get = function () {
                  return (function (t, e) {
                    for (var n = e.split("."), i = 0; i < n.length - 1; i++)
                      if ("object" != typeof (t = t[n[i]]) || !t) return;
                    var o = n.pop();
                    return "function" == typeof t[o]
                      ? function () {
                          return t[o].apply(t, arguments);
                        }
                      : t[o];
                  })(this, e);
                }),
                  (Ft.set = function (t) {
                    !(function (t, e, n) {
                      for (
                        var i, o = e.split("."), r = 0;
                        r < o.length - 1;
                        r++
                      )
                        t[(i = o[r])] || (t[i] = {}), (t = t[i]);
                      t[o.pop()] = n;
                    })(this, e, t);
                  }),
                  Object.defineProperty(t, n, Ft);
              })(e, i, n);
            });
          }),
          (e.prototype.refresh = function () {
            this.innerRefresh(), this.scroller.resetPosition();
          }),
          (e.prototype.enable = function () {
            this.scroller.enable(),
              this.hooks.trigger(this.hooks.eventTypes.enable),
              this.trigger(this.eventTypes.enable);
          }),
          (e.prototype.disable = function () {
            this.scroller.disable(),
              this.hooks.trigger(this.hooks.eventTypes.disable),
              this.trigger(this.eventTypes.disable);
          }),
          (e.prototype.destroy = function () {
            this.hooks.trigger(this.hooks.eventTypes.destroy),
              this.trigger(this.eventTypes.destroy),
              this.scroller.destroy();
          }),
          (e.prototype.eventRegister = function (t) {
            this.registerType(t);
          }),
          (e.plugins = []),
          (e.pluginsMap = {}),
          e
        );
      })(Vt);
      var ie = "undefined" != typeof window,
        oe = ie && navigator.userAgent.toLowerCase(),
        re =
          (oe && /wechatdevtools/.test(oe),
          oe && oe.indexOf("android"),
          ie && document.createElement("div").style),
        se = (function () {
          if (!ie) return !1;
          var t = {
            webkit: "webkitTransform",
            Moz: "MozTransform",
            O: "OTransform",
            ms: "msTransform",
            standard: "transform",
          };
          for (var e in t) if (void 0 !== re[t[e]]) return e;
          return !1;
        })();
      function ae(t) {
        return !1 === se
          ? t
          : "standard" === se
          ? "transitionEnd" === t
            ? "transitionend"
            : t
          : se + t.charAt(0).toUpperCase() + t.substr(1);
      }
      function le(t, e, n, i) {
        t.addEventListener(e, n, { passive: !1, capture: !!i });
      }
      function ue(t, e, n, i) {
        t.removeEventListener(e, n, { capture: !!i });
      }
      se && "standard" !== se && se.toLowerCase();
      var pe = ae("transform"),
        ce = (ae("transition"), ie && ae("perspective"), pe),
        de = ae("transitionTimingFunction"),
        he = ae("transitionDuration"),
        fe =
          (ae("transitionDelay"),
          ae("transformOrigin"),
          ae("transitionEnd"),
          ie && window);
      ie &&
        (fe.requestAnimationFrame ||
          fe.webkitRequestAnimationFrame ||
          fe.mozRequestAnimationFrame ||
          fe.oRequestAnimationFrame),
        ie &&
          (fe.cancelAnimationFrame ||
            fe.webkitCancelAnimationFrame ||
            fe.mozCancelAnimationFrame ||
            fe.oCancelAnimationFrame);
      var ge = (function () {
          function t(t) {
            (this.events = {}), (this.eventTypes = {}), this.registerType(t);
          }
          return (
            (t.prototype.on = function (t, e, n) {
              return (
                void 0 === n && (n = this),
                this.hasType(t),
                this.events[t] || (this.events[t] = []),
                this.events[t].push([e, n]),
                this
              );
            }),
            (t.prototype.once = function (t, e, n) {
              var i = this;
              void 0 === n && (n = this), this.hasType(t);
              var o = function () {
                for (var r = [], s = 0; s < arguments.length; s++)
                  r[s] = arguments[s];
                i.off(t, o), e.apply(n, r);
              };
              return (o.fn = e), this.on(t, o), this;
            }),
            (t.prototype.off = function (t, e) {
              if (!t && !e) return (this.events = {}), this;
              if (t) {
                if ((this.hasType(t), !e)) return (this.events[t] = []), this;
                var n = this.events[t];
                if (!n) return this;
                for (var i = n.length; i--; )
                  (n[i][0] === e || (n[i][0] && n[i][0].fn === e)) &&
                    n.splice(i, 1);
                return this;
              }
            }),
            (t.prototype.trigger = function (t) {
              for (var e = [], n = 1; n < arguments.length; n++)
                e[n - 1] = arguments[n];
              this.hasType(t);
              var i = this.events[t];
              if (i)
                for (var o, r = i.length, s = i.slice(), a = 0; a < r; a++) {
                  var l = s[a],
                    u = l[0],
                    p = l[1];
                  if (u && !0 === (o = u.apply(p, e))) return o;
                }
            }),
            (t.prototype.registerType = function (t) {
              var e = this;
              t.forEach(function (t) {
                e.eventTypes[t] = t;
              });
            }),
            (t.prototype.destroy = function () {
              (this.events = {}), (this.eventTypes = {});
            }),
            (t.prototype.hasType = function (t) {
              var e,
                n = this.eventTypes;
              n[t] === t ||
                ((e =
                  'EventEmitter has used unknown event type: "' +
                  t +
                  '", should be oneof [' +
                  Object.keys(n).map(function (t) {
                    return JSON.stringify(t);
                  }) +
                  "]"),
                console.error("[BScroll warn]: " + e));
            }),
            t
          );
        })(),
        me = (function () {
          function t(t, e) {
            (this.wrapper = t), (this.events = e), this.addDOMEvents();
          }
          return (
            (t.prototype.destroy = function () {
              this.removeDOMEvents(), (this.events = []);
            }),
            (t.prototype.addDOMEvents = function () {
              this.handleDOMEvents(le);
            }),
            (t.prototype.removeDOMEvents = function () {
              this.handleDOMEvents(ue);
            }),
            (t.prototype.handleDOMEvents = function (t) {
              var e = this,
                n = this.wrapper;
              this.events.forEach(function (i) {
                t(n, i.name, e, !!i.capture);
              });
            }),
            (t.prototype.handleEvent = function (t) {
              var e = t.type;
              this.events.some(function (n) {
                return n.name === e && (n.handler(t), !0);
              });
            }),
            t
          );
        })(),
        ye = (function () {
          function t(t, e) {
            (this.indicator = t),
              (this.options = e),
              (this.bscroll = t.bscroll),
              (this.startEventRegister = new me(this.indicator.el, [
                {
                  name: e.disableMouse ? "touchstart" : "mousedown",
                  handler: this._start.bind(this),
                },
              ])),
              (this.endEventRegister = new me(window, [
                {
                  name: e.disableMouse ? "touchend" : "mouseup",
                  handler: this._end.bind(this),
                },
              ])),
              (this.hooks = new ge(["touchStart", "touchMove", "touchEnd"]));
          }
          return (
            (t.prototype._start = function (t) {
              var e = t.touches ? t.touches[0] : t;
              t.preventDefault(),
                t.stopPropagation(),
                (this.initiated = !0),
                (this.moved = !1),
                (this.lastPoint = e[this.indicator.keysMap.pointPos]);
              var n = this.bscroll.options.disableMouse;
              (this.moveEventRegister = new me(window, [
                {
                  name: n ? "touchmove" : "mousemove",
                  handler: this._move.bind(this),
                },
              ])),
                this.hooks.trigger("touchStart");
            }),
            (t.prototype._move = function (t) {
              var e = (t.touches ? t.touches[0] : t)[
                this.indicator.keysMap.pointPos
              ];
              t.preventDefault(), t.stopPropagation();
              var n = e - this.lastPoint;
              if (((this.lastPoint = e), !this.moved))
                return (
                  this.hooks.trigger("touchMove", this.moved, n),
                  void (this.moved = !0)
                );
              this.hooks.trigger("touchMove", this.moved, n);
            }),
            (t.prototype._end = function (t) {
              this.initiated &&
                ((this.initiated = !1),
                t.preventDefault(),
                t.stopPropagation(),
                this.moveEventRegister.destroy(),
                this.hooks.trigger("touchEnd", this.moved));
            }),
            (t.prototype.destroy = function () {
              this.startEventRegister.destroy(),
                this.moveEventRegister && this.moveEventRegister.destroy(),
                this.endEventRegister.destroy();
            }),
            t
          );
        })(),
        ve = (function () {
          function t(t, e) {
            (this.bscroll = t),
              (this.options = e),
              (this.keyVals = { sizeRatio: 1, maxPos: 0, initialSize: 0 }),
              (this.curPos = 0),
              (this.hooksHandlers = []),
              (this.wrapper = e.wrapper),
              (this.wrapperStyle = this.wrapper.style),
              (this.el = this.wrapper.children[0]),
              (this.elStyle = this.el.style),
              (this.bscroll = t),
              (this.direction = e.direction),
              (this.keysMap = this._getKeysMap()),
              e.fade
                ? ((this.visible = 0), (this.wrapperStyle.opacity = "0"))
                : (this.visible = 1),
              this._listenHooks(e.fade, e.interactive),
              this.refresh();
          }
          return (
            (t.prototype._listenHooks = function (t, e) {
              var n = this,
                i = this.bscroll,
                o = i,
                r = i.scroller.translater.hooks,
                s = i.scroller.animater.hooks;
              if (
                (this._listen(o, "refresh", this.refresh),
                this._listen(r, "translate", this.updatePosAndSize),
                this._listen(s, "time", function (t) {
                  n.setTransitionTime(t);
                }),
                this._listen(s, "timeFunction", function (t) {
                  n.setTransitionTimingFunction(t);
                }),
                t &&
                  (this._listen(o, "scrollEnd", function () {
                    n.fade();
                  }),
                  this._listen(o, "scrollStart", function () {
                    n.fade(!0);
                  }),
                  i.eventTypes.mousewheelStart &&
                    i.eventTypes.mousewheelEnd &&
                    (this._listen(o, "mousewheelStart", function () {
                      n.fade(!0);
                    }),
                    this._listen(o, "mousewheelEnd", function () {
                      n.fade();
                    }))),
                e)
              ) {
                var a = this.bscroll.options.disableMouse;
                this.eventHandler = new ye(this, { disableMouse: a });
                var l = this.eventHandler.hooks;
                this._listen(l, "touchStart", this.startHandler),
                  this._listen(l, "touchMove", this.moveHandler),
                  this._listen(l, "touchEnd", this.endHandler);
              }
            }),
            (t.prototype._getKeysMap = function () {
              return "vertical" === this.direction
                ? {
                    hasScroll: "hasVerticalScroll",
                    size: "height",
                    wrapperSize: "clientHeight",
                    scrollerSize: "scrollerHeight",
                    maxScroll: "maxScrollY",
                    pos: "y",
                    pointPos: "pageY",
                    translate: "translateY",
                  }
                : {
                    hasScroll: "hasHorizontalScroll",
                    size: "width",
                    wrapperSize: "clientWidth",
                    scrollerSize: "scrollerWidth",
                    maxScroll: "maxScrollX",
                    pos: "x",
                    pointPos: "pageX",
                    translate: "translateX",
                  };
            }),
            (t.prototype.fade = function (t) {
              var e = t ? 250 : 500;
              (this.wrapperStyle[he] = e + "ms"),
                (this.wrapperStyle.opacity = t ? "1" : "0"),
                (this.visible = t ? 1 : 0);
            }),
            (t.prototype.refresh = function () {
              var t = this.keysMap.hasScroll;
              if (this._setShowBy(this.bscroll[t])) {
                var e = this.keysMap,
                  n = e.wrapperSize,
                  i = e.scrollerSize,
                  o = e.maxScroll;
                (this.keyVals = this._refreshKeyValues(
                  this.wrapper[n],
                  this.bscroll[i],
                  this.bscroll[o]
                )),
                  this.updatePosAndSize({
                    x: this.bscroll.x,
                    y: this.bscroll.y,
                  });
              }
            }),
            (t.prototype._setShowBy = function (t) {
              return t
                ? ((this.wrapper.style.display = ""), !0)
                : ((this.wrapper.style.display = "none"), !1);
            }),
            (t.prototype._refreshKeyValues = function (t, e, n) {
              var i = Math.max(Math.round((t * t) / (e || t || 1)), 8),
                o = t - i;
              return { initialSize: i, maxPos: o, sizeRatio: o / n };
            }),
            (t.prototype.updatePosAndSize = function (t) {
              var e = this._refreshPosAndSizeValue(t, this.keyVals),
                n = e.pos,
                i = e.size;
              (this.curPos = n), this._refreshPosAndSizeStyle(i, n);
            }),
            (t.prototype._refreshPosAndSizeValue = function (t, e) {
              var n,
                i = this.keysMap.pos,
                o = e.sizeRatio,
                r = e.initialSize,
                s = e.maxPos,
                a = Math.round(o * t[i]);
              return (
                a < 0
                  ? ((n = Math.max(r + 3 * a, 8)), (a = 0))
                  : a > s
                  ? (a = s + r - (n = Math.max(r - 3 * (a - s), 8)))
                  : (n = r),
                { pos: a, size: n }
              );
            }),
            (t.prototype._refreshPosAndSizeStyle = function (t, e) {
              var n = this.keysMap,
                i = n.translate,
                o = n.size;
              (this.elStyle[o] = t + "px"),
                (this.elStyle[ce] =
                  i + "(" + e + "px)" + this.bscroll.options.translateZ);
            }),
            (t.prototype.setTransitionTime = function (t) {
              void 0 === t && (t = 0), (this.elStyle[he] = t + "ms");
            }),
            (t.prototype.setTransitionTimingFunction = function (t) {
              this.elStyle[de] = t;
            }),
            (t.prototype.startHandler = function () {
              this.setTransitionTime(),
                this.bscroll.trigger("beforeScrollStart");
            }),
            (t.prototype.moveHandler = function (t, e) {
              t || this.bscroll.trigger("scrollStart");
              var n = this._calScrollDesPos(this.curPos, e, this.keyVals);
              "vertical" === this.direction
                ? this.bscroll.scrollTo(this.bscroll.x, n)
                : this.bscroll.scrollTo(n, this.bscroll.y),
                this.bscroll.trigger("scroll", {
                  x: this.bscroll.x,
                  y: this.bscroll.y,
                });
            }),
            (t.prototype._calScrollDesPos = function (t, e, n) {
              var i = n.maxPos,
                o = n.sizeRatio,
                r = t + e;
              return r < 0 ? (r = 0) : r > i && (r = i), Math.round(r / o);
            }),
            (t.prototype.endHandler = function (t) {
              t &&
                this.bscroll.trigger("scrollEnd", {
                  x: this.bscroll.x,
                  y: this.bscroll.y,
                });
            }),
            (t.prototype.destroy = function () {
              this.options.interactive && this.eventHandler.destroy(),
                this.wrapper.parentNode.removeChild(this.wrapper),
                this.hooksHandlers.forEach(function (t) {
                  var e = t[0],
                    n = t[1],
                    i = t[2];
                  e.off(n, i);
                }),
                (this.hooksHandlers.length = 0);
            }),
            (t.prototype._listen = function (t, e, n) {
              t.on(e, n, this), this.hooksHandlers.push([t, e, n]);
            }),
            t
          );
        })();
      const be = (function () {
        function t(t) {
          (this.indicators = []),
            t.options.scrollbar &&
              ((this.indicators = this._initIndicators(t)),
              t.on("destroy", this.destroy, this));
        }
        return (
          (t.prototype._initIndicators = function (t) {
            var e,
              n = this,
              i = t.options.scrollbar,
              o = i.fade,
              r = void 0 === o || o,
              s = i.interactive,
              a = void 0 !== s && s,
              l = { scrollX: "horizontal", scrollY: "vertical" },
              u = [];
            return (
              Object.keys(l).forEach(function (i) {
                var o = l[i];
                t.options[i] &&
                  ((e = {
                    wrapper: n._createIndicatorElement(o),
                    direction: o,
                    fade: r,
                    interactive: a,
                  }),
                  t.wrapper.appendChild(e.wrapper),
                  u.push(new ve(t, e)));
              }),
              u
            );
          }),
          (t.prototype._createIndicatorElement = function (t) {
            var e = document.createElement("div"),
              n = document.createElement("div");
            return (
              (e.style.cssText =
                "position:absolute;z-index:9999;pointerEvents:none"),
              (n.style.cssText =
                "box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px;"),
              (n.className = "bscroll-indicator"),
              "horizontal" === t
                ? ((e.style.cssText +=
                    ";height:7px;left:2px;right:2px;bottom:0"),
                  (n.style.height = "100%"),
                  (e.className = "bscroll-horizontal-scrollbar"))
                : ((e.style.cssText +=
                    ";width:7px;bottom:2px;top:2px;right:1px"),
                  (n.style.width = "100%"),
                  (e.className = "bscroll-vertical-scrollbar")),
              (e.style.cssText += ";overflow:hidden"),
              e.appendChild(n),
              e
            );
          }),
          (t.prototype.destroy = function () {
            for (var t = 0, e = this.indicators; t < e.length; t++)
              e[t].destroy();
          }),
          (t.pluginName = "scrollbar"),
          t
        );
      })();
      var Se = {
        duplicateClick: function (t) {
          var e = t[0],
            n = t[1];
          e.options.click && n.options.click && (n.options.click = !1);
        },
        nestedScroll: function (t) {
          var e = t[0],
            n = t[1],
            i = e.options.scrollX,
            o = e.options.scrollY,
            r = n.options.scrollX,
            s = n.options.scrollY;
          (i !== r && o !== s) ||
            (t.forEach(function (e, n) {
              var i = t[(n + 1) % 2];
              e.on("scrollStart", function () {
                i.pending && (i.stop(), i.resetPosition()),
                  (function (t) {
                    var e = Oe(t),
                      n = e.hasHorizontalScroll,
                      i = e.hasVerticalScroll,
                      o = t.scroller,
                      r = o.actions,
                      s = o.scrollBehaviorX,
                      a = o.scrollBehaviorY;
                    (r.startTime = +new Date()),
                      i
                        ? (a.startPos = a.currentPos)
                        : n && (s.startPos = s.currentPos);
                  })(i),
                  i.disable();
              }),
                e.on("touchEnd", function () {
                  i.enable();
                });
            }),
            n.on("scrollStart", function () {
              (function (t) {
                var e = Oe(t),
                  n = e.hasHorizontalScroll,
                  i = e.hasVerticalScroll,
                  o = t.scroller,
                  r = o.scrollBehaviorX,
                  s = o.scrollBehaviorY,
                  a = t.x >= t.minScrollX && -1 === r.movingDirection,
                  l = t.x <= t.maxScrollX && 1 === r.movingDirection,
                  u = t.y >= t.minScrollY && -1 === s.movingDirection,
                  p = t.y <= t.maxScrollY && 1 === s.movingDirection;
                return i ? u || p : !!n && (a || l);
              })(n) && (n.disable(), e.enable());
            }));
        },
      };
      function we(t, e) {
        for (var n = 0, i = t.parentNode; i && i !== e; )
          n++, (i = i.parentNode);
        return n;
      }
      function Oe(t) {
        return {
          hasHorizontalScroll: t.scroller.scrollBehaviorX.hasScroll,
          hasVerticalScroll: t.scroller.scrollBehaviorY.hasScroll,
        };
      }
      const _e = (function () {
        function t(e) {
          var n = t.nestedScroll;
          return (
            n instanceof t || ((n = t.nestedScroll = this).stores = []),
            n.setup(e),
            n.addHooks(e),
            n
          );
        }
        return (
          (t.prototype.setup = function (t) {
            this.appendBScroll(t),
              this.handleContainRelationship(),
              this.handleCompatible();
          }),
          (t.prototype.addHooks = function (t) {
            var e = this;
            t.on("destroy", function () {
              e.teardown(t);
            });
          }),
          (t.prototype.teardown = function (t) {
            this.removeBScroll(t),
              this.handleContainRelationship(),
              this.handleCompatible();
          }),
          (t.prototype.appendBScroll = function (t) {
            this.stores.push(t);
          }),
          (t.prototype.removeBScroll = function (t) {
            var e = this.stores.indexOf(t);
            -1 !== e &&
              ((t.wrapper.isBScrollContainer = void 0),
              this.stores.splice(e, 1));
          }),
          (t.prototype.handleContainRelationship = function () {
            var t = this.stores;
            if (t.length <= 1)
              t[0] && t[0].__parentInfo && (t[0].__parentInfo = void 0);
            else
              for (var e, n, i, o, r = 0; r < t.length; r++) {
                n = (e = t[r]).wrapper;
                for (var s = 0; s < t.length; s++)
                  if (((o = (i = t[s]).wrapper), e !== i && o.contains(n)))
                    if (e.__parentInfo) {
                      var a = we(n, o);
                      e.__parentInfo.depth > a &&
                        (e.__parentInfo = { parent: i, depth: a });
                    } else e.__parentInfo = { parent: i, depth: we(n, o) };
              }
          }),
          (t.prototype.handleCompatible = function () {
            var t = this.availableBScrolls(),
              e = ["duplicateClick", "nestedScroll"];
            t.forEach(function (t) {
              e.forEach(function (e) {
                Se[e](t);
              });
            });
          }),
          (t.prototype.availableBScrolls = function () {
            return this.stores
              .filter(function (t) {
                return !!t.__parentInfo;
              })
              .map(function (t) {
                return [t.__parentInfo.parent, t];
              });
          }),
          (t.pluginName = "nestedScroll"),
          t
        );
      })();
      var Ne = "undefined" != typeof window,
        Ce = Ne && navigator.userAgent.toLowerCase();
      function Ie(t, e, n) {
        return t < e ? e : t > n ? n : t;
      }
      Ce && /wechatdevtools/.test(Ce), Ce && Ce.indexOf("android");
      var xe = Ne && document.createElement("div").style,
        Pe = (function () {
          if (!Ne) return !1;
          var t = {
            webkit: "webkitTransform",
            Moz: "MozTransform",
            O: "OTransform",
            ms: "msTransform",
            standard: "transform",
          };
          for (var e in t) if (void 0 !== xe[t[e]]) return e;
          return !1;
        })();
      function Ee(t) {
        return !1 === Pe
          ? t
          : "standard" === Pe
          ? "transitionEnd" === t
            ? "transitionend"
            : t
          : Pe + t.charAt(0).toUpperCase() + t.substr(1);
      }
      function Te(t, e, n, i) {
        t.addEventListener(e, n, { passive: !1, capture: !!i });
      }
      function De(t, e, n, i) {
        t.removeEventListener(e, n, { capture: !!i });
      }
      Pe && "standard" !== Pe && Pe.toLowerCase(),
        Ee("transform"),
        Ee("transition"),
        Ne && Ee("perspective"),
        Ee("transitionTimingFunction"),
        Ee("transitionDuration"),
        Ee("transitionDelay"),
        Ee("transformOrigin"),
        Ee("transitionEnd");
      var ke = Ne && window;
      Ne &&
        (ke.requestAnimationFrame ||
          ke.webkitRequestAnimationFrame ||
          ke.mozRequestAnimationFrame ||
          ke.oRequestAnimationFrame),
        Ne &&
          (ke.cancelAnimationFrame ||
            ke.webkitCancelAnimationFrame ||
            ke.mozCancelAnimationFrame ||
            ke.oCancelAnimationFrame);
      var Re = (function () {
        function t(t, e) {
          (this.wrapper = t), (this.events = e), this.addDOMEvents();
        }
        return (
          (t.prototype.destroy = function () {
            this.removeDOMEvents(), (this.events = []);
          }),
          (t.prototype.addDOMEvents = function () {
            this.handleDOMEvents(Te);
          }),
          (t.prototype.removeDOMEvents = function () {
            this.handleDOMEvents(De);
          }),
          (t.prototype.handleDOMEvents = function (t) {
            var e = this,
              n = this.wrapper;
            this.events.forEach(function (i) {
              t(n, i.name, e, !!i.capture);
            });
          }),
          (t.prototype.handleEvent = function (t) {
            var e = t.type;
            this.events.some(function (n) {
              return n.name === e && (n.handler(t), !0);
            });
          }),
          t
        );
      })();
      const Ae = (function () {
        function t(t) {
          (this.scroll = t),
            (this.wheelStart = !1),
            t.registerType([
              "mousewheelMove",
              "mousewheelStart",
              "mousewheelEnd",
            ]),
            (this.mouseWheelOpt = t.options.mouseWheel),
            (this.deltaCache = []),
            this.registorEvent(),
            (this.hooksFn = []),
            this.registorHooks(t.hooks, "destroy", this.destroy);
        }
        return (
          (t.prototype.destroy = function () {
            this.eventRegistor.destroy(),
              window.clearTimeout(this.wheelEndTimer),
              window.clearTimeout(this.wheelMoveTimer),
              this.hooksFn.forEach(function (t) {
                var e = t[0],
                  n = t[1],
                  i = t[2];
                e.off(n, i);
              });
          }),
          (t.prototype.registorEvent = function () {
            this.eventRegistor = new Re(this.scroll.scroller.wrapper, [
              { name: "wheel", handler: this.wheelHandler.bind(this) },
              { name: "mousewheel", handler: this.wheelHandler.bind(this) },
              { name: "DOMMouseScroll", handler: this.wheelHandler.bind(this) },
            ]);
          }),
          (t.prototype.wheelHandler = function (t) {
            this.beforeHandler(t),
              this.wheelStart ||
                (this.wheelStartHandler(t), (this.wheelStart = !0));
            var e = this.getWheelDelta(t);
            this.wheelMove(e), this.wheelStopDetactor(t, e);
          }),
          (t.prototype.wheelStartHandler = function (t) {
            (this.deltaCache = []),
              this.scroll.trigger(this.scroll.eventTypes.mousewheelStart);
          }),
          (t.prototype.wheelStopDetactor = function (t, e) {
            var n = this;
            window.clearTimeout(this.wheelEndTimer);
            var i = this.mouseWheelOpt.throttle || 400;
            this.wheelEndTimer = window.setTimeout(function () {
              (n.wheelStart = !1),
                window.clearTimeout(n.wheelMoveTimer),
                (n.wheelMoveTimer = 0),
                n.scroll.trigger(n.scroll.eventTypes.mousewheelEnd, e);
            }, i);
          }),
          (t.prototype.getWheelDelta = function (t) {
            var e = this.mouseWheelOpt,
              n = e.speed,
              i = void 0 === n ? 20 : n,
              o = e.invert,
              r = 0,
              s = 0,
              a = void 0 !== o && o ? -1 : 1;
            switch (!0) {
              case "deltaX" in t:
                1 === t.deltaMode
                  ? ((r = -t.deltaX * i), (s = -t.deltaY * i))
                  : ((r = -t.deltaX), (s = -t.deltaY));
                break;
              case "wheelDeltaX" in t:
                (r = (t.wheelDeltaX / 120) * i),
                  (s = (t.wheelDeltaY / 120) * i);
                break;
              case "wheelDelta" in t:
                r = s = (t.wheelDelta / 120) * i;
                break;
              case "detail" in t:
                r = s = (-t.detail / 3) * i;
            }
            return (
              (r *= a),
              (s *= a),
              this.scroll.scroller.scrollBehaviorY.hasScroll ||
                ((r = s), (s = 0)),
              this.scroll.scroller.scrollBehaviorX.hasScroll || (r = 0),
              {
                x: r,
                y: s,
                directionX: r > 0 ? -1 : r < 0 ? 1 : 0,
                directionY: s > 0 ? -1 : s < 0 ? 1 : 0,
              }
            );
          }),
          (t.prototype.beforeHandler = function (t) {
            var e = this.scroll.options,
              n = e.preventDefault,
              i = e.stopPropagation,
              o = e.preventDefaultException;
            n &&
              !(function (t, e) {
                for (var n in e) if (e[n].test(t[n])) return !0;
                return !1;
              })(t.target, o) &&
              t.preventDefault(),
              i && t.stopPropagation();
          }),
          (t.prototype.wheelMove = function (t) {
            var e = this;
            if (this.mouseWheelOpt.debounce && this.wheelMoveTimer)
              this.deltaCache.push(t);
            else {
              var n = this.deltaCache.reduce(
                function (t, e) {
                  return { x: t.x + e.x, y: t.y + e.y };
                },
                { x: 0, y: 0 }
              );
              this.deltaCache = [];
              var i = this.scroll.x + Math.round(t.x) + n.x,
                o = this.scroll.y + Math.round(t.y) + n.y,
                r = this.scroll.scroller.scrollBehaviorX,
                s = this.scroll.scroller.scrollBehaviorY;
              if (
                ((i = Ie(i, r.maxScrollPos, r.minScrollPos)),
                (o = Ie(o, s.maxScrollPos, s.minScrollPos)),
                !this.scroll.trigger(this.scroll.eventTypes.mousewheelMove, {
                  x: i,
                  y: o,
                }))
              ) {
                var a = this.getEaseTime();
                (i === this.scroll.x && o === this.scroll.y) ||
                  this.scroll.scrollTo(i, o, a);
              }
              this.mouseWheelOpt.debounce &&
                (this.wheelMoveTimer = window.setTimeout(function () {
                  e.wheelMoveTimer = 0;
                }, this.mouseWheelOpt.debounce));
            }
          }),
          (t.prototype.registorHooks = function (t, e, n) {
            t.on(e, n, this), this.hooksFn.push([t, e, n]);
          }),
          (t.prototype.getEaseTime = function () {
            var t = this.mouseWheelOpt.easeTime || 300;
            return (
              t < 100 &&
                ("easeTime should be greater than 100.\n      If mouseWheel easeTime is too small, scrollEnd will be triggered many times.",
                console.error(
                  "[BScroll warn]: easeTime should be greater than 100.\n      If mouseWheel easeTime is too small, scrollEnd will be triggered many times."
                )),
              t
            );
          }),
          (t.pluginName = "mouseWheel"),
          (t.applyOrder = "pre"),
          t
        );
      })();
      var je = "undefined" != typeof window,
        Me = je && navigator.userAgent.toLowerCase();
      function Fe(t, e, n) {
        return t < e ? e : t > n ? n : t;
      }
      Me && /wechatdevtools/.test(Me), Me && Me.indexOf("android");
      var Ve = je && document.createElement("div").style,
        Le = (function () {
          if (!je) return !1;
          var t = {
            webkit: "webkitTransform",
            Moz: "MozTransform",
            O: "OTransform",
            ms: "msTransform",
            standard: "transform",
          };
          for (var e in t) if (void 0 !== Ve[t[e]]) return e;
          return !1;
        })();
      function Ue(t) {
        return !1 === Le
          ? t
          : "standard" === Le
          ? "transitionEnd" === t
            ? "transitionend"
            : t
          : Le + t.charAt(0).toUpperCase() + t.substr(1);
      }
      function Be(t) {
        if (t instanceof window.SVGElement) {
          var e = t.getBoundingClientRect();
          return { top: e.top, left: e.left, width: e.width, height: e.height };
        }
        return {
          top: t.offsetTop,
          left: t.offsetLeft,
          width: t.offsetWidth,
          height: t.offsetHeight,
        };
      }
      function We(t, e) {
        t.removeChild(e);
      }
      Le && "standard" !== Le && Le.toLowerCase(),
        Ue("transform"),
        Ue("transition"),
        je && Ue("perspective"),
        Ue("transitionTimingFunction"),
        Ue("transitionDuration"),
        Ue("transitionDelay"),
        Ue("transformOrigin"),
        Ue("transitionEnd");
      var ze = {
          swipe: {
            style: "cubic-bezier(0.23, 1, 0.32, 1)",
            fn: function (t) {
              return 1 + --t * t * t * t * t;
            },
          },
          swipeBounce: {
            style: "cubic-bezier(0.25, 0.46, 0.45, 0.94)",
            fn: function (t) {
              return t * (2 - t);
            },
          },
          bounce: {
            style: "cubic-bezier(0.165, 0.84, 0.44, 1)",
            fn: function (t) {
              return 1 - --t * t * t * t;
            },
          },
        },
        He = je && window;
      je &&
        (He.requestAnimationFrame ||
          He.webkitRequestAnimationFrame ||
          He.mozRequestAnimationFrame ||
          He.oRequestAnimationFrame),
        je &&
          (He.cancelAnimationFrame ||
            He.webkitCancelAnimationFrame ||
            He.mozCancelAnimationFrame ||
            He.oCancelAnimationFrame);
      var qe = (function () {
          function t(t, e) {
            (this.scroll = t),
              (this.slideOpt = e),
              (this.slideEl = null),
              this.init();
          }
          return (
            (t.prototype.init = function () {
              var t = this.scroll.scroller,
                e = t.scrollBehaviorX,
                n = t.scrollBehaviorY,
                i = Be(t.wrapper),
                o = Be(t.content);
              (this.wrapperWidth = i.width),
                (this.wrapperHeight = i.height),
                (this.scrollerHeight = n.hasScroll ? o.height : i.height),
                (this.scrollerWidth = e.hasScroll ? o.width : i.width);
              var r = this.slideOpt.stepX || this.wrapperWidth,
                s = this.slideOpt.stepY || this.wrapperHeight,
                a = t.content,
                l = this.slideOpt.el;
              "string" == typeof l && (this.slideEl = a.querySelectorAll(l)),
                (this.pages = this.slideEl
                  ? this.computePagePosInfoByEl(this.slideEl)
                  : this.computePagePosInfo(r, s)),
                (this.xLen = this.pages ? this.pages.length : 0),
                (this.yLen =
                  this.pages && this.pages[0] ? this.pages[0].length : 0);
            }),
            (t.prototype.hasInfo = function () {
              return !(!this.pages || !this.pages.length);
            }),
            (t.prototype.getPos = function (t, e) {
              return this.pages[t] ? this.pages[t][e] : null;
            }),
            (t.prototype.getNearestPage = function (t, e) {
              if (this.hasInfo()) {
                for (
                  var n = 0, i = 0, o = this.pages.length;
                  n < o - 1 && !(t >= this.pages[n][0].cx);
                  n++
                );
                for (
                  o = this.pages[n].length;
                  i < o - 1 && !(e >= this.pages[0][i].cy);
                  i++
                );
                return { pageX: n, pageY: i };
              }
            }),
            (t.prototype.computePagePosInfo = function (t, e) {
              var n,
                i,
                o,
                r,
                s = [],
                a = 0,
                l = 0,
                u = this.scroll.scroller.scrollBehaviorX.maxScrollPos,
                p = this.scroll.scroller.scrollBehaviorY.maxScrollPos;
              for (
                i = Math.round(t / 2), o = Math.round(e / 2);
                a > -this.scrollerWidth;

              ) {
                for (s[l] = [], r = 0, n = 0; n > -this.scrollerHeight; )
                  (s[l][r] = {
                    x: Math.max(a, u),
                    y: Math.max(n, p),
                    width: t,
                    height: e,
                    cx: a - i,
                    cy: n - o,
                  }),
                    (n -= e),
                    r++;
                (a -= t), l++;
              }
              return s;
            }),
            (t.prototype.computePagePosInfoByEl = function (t) {
              for (
                var e,
                  n,
                  i,
                  o = [],
                  r = 0,
                  s = 0,
                  a = 0,
                  l = t.length,
                  u = 0,
                  p = -1,
                  c = this.scroll.scroller.scrollBehaviorX.maxScrollPos,
                  d = this.scroll.scroller.scrollBehaviorY.maxScrollPos;
                a < l;
                a++
              )
                (i = Be(t[a])),
                  (0 === a || i.left <= Be(t[a - 1]).left) && ((u = 0), p++),
                  o[u] || (o[u] = []),
                  (r = Math.max(-i.left, c)),
                  (s = Math.max(-i.top, d)),
                  (e = r - Math.round(i.width / 2)),
                  (n = s - Math.round(i.height / 2)),
                  (o[u][p] = {
                    x: r,
                    y: s,
                    width: i.width,
                    height: i.height,
                    cx: e,
                    cy: n,
                  }),
                  r > c && u++;
              return o;
            }),
            t
          );
        })(),
        $e = (function () {
          function t(t, e) {
            (this.scroll = t), (this.slideOpt = e);
          }
          return (
            (t.prototype.init = function () {
              (this.currentPage = { x: 0, y: 0, pageX: 0, pageY: 0 }),
                (this.pagesPos = new qe(this.scroll, this.slideOpt)),
                this.checkSlideLoop();
            }),
            (t.prototype.changeCurrentPage = function (t) {
              this.currentPage = t;
            }),
            (t.prototype.change2safePage = function (t, e) {
              if (this.pagesPos.hasInfo()) {
                t >= this.pagesPos.xLen
                  ? (t = this.pagesPos.xLen - 1)
                  : t < 0 && (t = 0),
                  e >= this.pagesPos.yLen
                    ? (e = this.pagesPos.yLen - 1)
                    : e < 0 && (e = 0);
                var n = this.pagesPos.getPos(t, e);
                return { pageX: t, pageY: e, x: n ? n.x : 0, y: n ? n.y : 0 };
              }
            }),
            (t.prototype.getInitPage = function () {
              return { pageX: this.loopX ? 1 : 0, pageY: this.loopY ? 1 : 0 };
            }),
            (t.prototype.getRealPage = function (t) {
              var e = function (t, e) {
                  for (var n = [], i = 0; i < e; i++) n.push(i);
                  return n.unshift(e - 1), n.push(0), n[t];
                },
                n = (function (t) {
                  for (var e = [], n = 1; n < arguments.length; n++)
                    e[n - 1] = arguments[n];
                  for (var i = 0; i < e.length; i++) {
                    var o = e[i];
                    for (var r in o) t[r] = o[r];
                  }
                  return t;
                })({}, t || this.currentPage);
              return (
                this.loopX && (n.pageX = e(n.pageX, this.pagesPos.xLen - 2)),
                this.loopY && (n.pageY = e(n.pageY, this.pagesPos.yLen - 2)),
                { pageX: n.pageX, pageY: n.pageY }
              );
            }),
            (t.prototype.getPageSize = function () {
              return this.pagesPos.getPos(
                this.currentPage.pageX,
                this.currentPage.pageY
              );
            }),
            (t.prototype.realPage2Page = function (t, e) {
              if (this.pagesPos.hasInfo()) {
                var n = this.pagesPos.xLen - 1,
                  i = this.pagesPos.yLen - 1,
                  o = 0,
                  r = 0;
                return (
                  this.loopX && ((t += 1), (o += 1), (n -= 1)),
                  this.loopY && ((e += 1), (r += 1), (i -= 1)),
                  { realX: (t = Fe(t, o, n)), realY: (e = Fe(e, r, i)) }
                );
              }
            }),
            (t.prototype.nextPage = function () {
              return this.changedPageNum("positive");
            }),
            (t.prototype.prevPage = function () {
              return this.changedPageNum("negative");
            }),
            (t.prototype.nearestPage = function (t, e, n, i) {
              var o = this.pagesPos.getNearestPage(t, e);
              if (!o) return { x: 0, y: 0, pageX: 0, pageY: 0 };
              var r = o.pageX,
                s = o.pageY;
              return (
                r === this.currentPage.pageX &&
                  (r = Fe((r += n), 0, this.pagesPos.xLen - 1)),
                s === this.currentPage.pageY &&
                  ((s += i), (s = Fe(o.pageY, 0, this.pagesPos.yLen - 1))),
                {
                  x: this.pagesPos.getPos(r, 0).x,
                  y: this.pagesPos.getPos(0, s).y,
                  pageX: r,
                  pageY: s,
                }
              );
            }),
            (t.prototype.getLoopStage = function () {
              if (!this.needLoop) return "middle";
              if (this.loopX) {
                if (0 === this.currentPage.pageX) return "head";
                if (this.currentPage.pageX === this.pagesPos.xLen - 1)
                  return "tail";
              }
              if (this.loopY) {
                if (0 === this.currentPage.pageY) return "head";
                if (this.currentPage.pageY === this.pagesPos.yLen - 1)
                  return "tail";
              }
              return "middle";
            }),
            (t.prototype.resetLoopPage = function () {
              if (this.loopX) {
                if (0 === this.currentPage.pageX)
                  return {
                    pageX: this.pagesPos.xLen - 2,
                    pageY: this.currentPage.pageY,
                  };
                if (this.currentPage.pageX === this.pagesPos.xLen - 1)
                  return { pageX: 1, pageY: this.currentPage.pageY };
              }
              if (this.loopY) {
                if (0 === this.currentPage.pageY)
                  return {
                    pageX: this.currentPage.pageX,
                    pageY: this.pagesPos.yLen - 2,
                  };
                if (this.currentPage.pageY === this.pagesPos.yLen - 1)
                  return { pageX: this.currentPage.pageX, pageY: 1 };
              }
            }),
            (t.prototype.isSameWithCurrent = function (t) {
              return (
                t.pageX === this.currentPage.pageX &&
                t.pageY === this.currentPage.pageY
              );
            }),
            (t.prototype.changedPageNum = function (t) {
              var e = this.currentPage.pageX,
                n = this.currentPage.pageY;
              return (
                this.slideX && (e = "negative" === t ? e - 1 : e + 1),
                this.slideY && (n = "negative" === t ? n - 1 : n + 1),
                { pageX: e, pageY: n }
              );
            }),
            (t.prototype.checkSlideLoop = function () {
              (this.needLoop = this.slideOpt.loop),
                this.pagesPos.xLen > 1 && (this.slideX = !0),
                this.pagesPos.pages[0] &&
                  this.pagesPos.yLen > 1 &&
                  (this.slideY = !0),
                (this.loopX = this.needLoop && this.slideX),
                (this.loopY = this.needLoop && this.slideY),
                this.slideX &&
                  this.slideY &&
                  ("slide does not support two direction at the same time.",
                  console.error(
                    "[BScroll warn]: slide does not support two direction at the same time."
                  ));
            }),
            t
          );
        })(),
        Ye = [
          { key: "next", name: "next" },
          { key: "prev", name: "prev" },
          { key: "goToPage", name: "goToPage" },
          { key: "getCurrentPage", name: "getCurrentPage" },
        ].map(function (t) {
          return { key: t.key, sourceKey: "plugins.slide." + t.name };
        });
      const Xe = (function () {
        function t(t) {
          (this.scroll = t),
            (this.resetLooping = !1),
            (this.isTouching = !1),
            this.scroll.proxy(Ye),
            this.scroll.registerType(["slideWillChange"]),
            (this.slideOpt = this.scroll.options.slide),
            (this.page = new $e(t, this.slideOpt)),
            (this.hooksFn = []),
            (this.willChangeToPage = { pageX: 0, pageY: 0 }),
            this.init();
        }
        return (
          (t.prototype.init = function () {
            var t = this,
              e = this.slideOpt,
              n = this.scroll.scroller.content,
              i = !1;
            e.loop &&
              (n.children.length > 1
                ? (this.cloneSlideEleForLoop(n), (i = !0))
                : (e.loop = !1));
            var o = this.setSlideWidth(n),
              r = this.setSlideHeight(this.scroll.scroller.wrapper, n),
              s = o || r,
              a = this.scroll.hooks,
              l = this.scroll.scroller.hooks;
            this.registorHooks(a, "refresh", this.initSlideState),
              this.registorHooks(a, "destroy", this.destroy),
              this.registorHooks(l, "momentum", this.modifyScrollMetaHandler),
              this.registorHooks(
                this.scroll,
                "scrollEnd",
                this.amendCurrentPage
              ),
              this.registorHooks(l, "beforeStart", this.setTouchFlag),
              this.registorHooks(l, "scroll", this.scrollMoving),
              this.registorHooks(l, "resize", this.resize),
              this.scroll.eventTypes.mousewheelMove &&
                this.scroll.eventTypes.mousewheelEnd &&
                (this.registorHooks(this.scroll, "mousewheelMove", function () {
                  return !0;
                }),
                this.registorHooks(this.scroll, "mousewheelEnd", function (e) {
                  (1 !== e.directionX && 1 !== e.directionY) || t.next(),
                    (-1 !== e.directionX && -1 !== e.directionY) || t.prev();
                })),
              !1 !== e.listenFlick &&
                this.registorHooks(l, "flick", this.flickHandler),
              i || s ? this.scroll.refresh() : this.initSlideState();
          }),
          (t.prototype.resize = function () {
            var t = this,
              e = this.scroll.scroller.content,
              n = this.scroll.scroller.wrapper;
            return (
              clearTimeout(this.resizeTimeout),
              (this.resizeTimeout = window.setTimeout(function () {
                t.clearSlideWidth(e),
                  t.clearSlideHeight(e),
                  t.setSlideWidth(e),
                  t.setSlideHeight(n, e),
                  t.scroll.refresh();
              }, this.scroll.options.resizePolling)),
              !0
            );
          }),
          (t.prototype.next = function (t, e) {
            var n = this.page.nextPage(),
              i = n.pageX,
              o = n.pageY;
            this.goTo(i, o, t, e);
          }),
          (t.prototype.prev = function (t, e) {
            var n = this.page.prevPage(),
              i = n.pageX,
              o = n.pageY;
            this.goTo(i, o, t, e);
          }),
          (t.prototype.goToPage = function (t, e, n, i) {
            var o = this.page.realPage2Page(t, e);
            o && this.goTo(o.realX, o.realY, n, i);
          }),
          (t.prototype.getCurrentPage = function () {
            return this.page.getRealPage();
          }),
          (t.prototype.nearestPage = function (t, e) {
            var n = this.scroll.scroller.scrollBehaviorX,
              i = this.scroll.scroller.scrollBehaviorY,
              o = !0;
            return (
              Math.abs(t - n.absStartPos) <= this.thresholdX &&
                Math.abs(e - i.absStartPos) <= this.thresholdY &&
                (o = !1),
              o
                ? this.page.nearestPage(
                    Fe(t, n.maxScrollPos, n.minScrollPos),
                    Fe(e, i.maxScrollPos, i.minScrollPos),
                    n.direction,
                    i.direction
                  )
                : this.page.currentPage
            );
          }),
          (t.prototype.destroy = function () {
            var t = this.scroll.scroller.content;
            if (this.slideOpt.loop) {
              var e = t.children;
              e.length > 2 && (We(t, e[e.length - 1]), We(t, e[0]));
            }
            this.hooksFn.forEach(function (t) {
              var e = t[0],
                n = t[1],
                i = t[2];
              e.eventTypes[n] && e.off(n, i);
            }),
              (this.hooksFn.length = 0);
          }),
          (t.prototype.initSlideState = function () {
            const t = this.page.currentPage;
            if ((this.page.init(), t)) this.page.currentPage = t;
            else {
              var e = this.page.getInitPage();
              this.goTo(e.pageX, e.pageY, 0);
            }
            this.initThreshold();
          }),
          (t.prototype.initThreshold = function () {
            var t = this.slideOpt.threshold || 0.1;
            if (t % 1 == 0) (this.thresholdX = t), (this.thresholdY = t);
            else {
              var e = this.page.getPageSize();
              e &&
                ((this.thresholdX = Math.round(e.width * t)),
                (this.thresholdY = Math.round(e.height * t)));
            }
          }),
          (t.prototype.cloneSlideEleForLoop = function (t) {
            var e,
              n,
              i,
              o = t.children;
            (e = o[o.length - 1].cloneNode(!0)),
              (i = (n = t).firstChild)
                ? (function (t, e) {
                    e.parentNode.insertBefore(t, e);
                  })(e, i)
                : n.appendChild(e),
              t.appendChild(o[1].cloneNode(!0));
          }),
          (t.prototype.amendCurrentPage = function () {
            if (((this.isTouching = !1), this.slideOpt.loop))
              if (this.resetLooping) this.resetLooping = !1;
              else {
                var t = !1;
                if (
                  (!this.page.loopX ||
                    (this.scroll.x !==
                      this.scroll.scroller.scrollBehaviorX.minScrollPos &&
                      this.scroll.x !==
                        this.scroll.scroller.scrollBehaviorX.maxScrollPos) ||
                    (t = !0),
                  !this.page.loopY ||
                    (this.scroll.y !==
                      this.scroll.scroller.scrollBehaviorY.minScrollPos &&
                      this.scroll.y !==
                        this.scroll.scroller.scrollBehaviorY.maxScrollPos) ||
                    (t = !0),
                  t)
                ) {
                  var e = this.scroll.scroller.scrollBehaviorX,
                    n = this.scroll.scroller.scrollBehaviorY,
                    i = this.page.nearestPage(
                      Fe(this.scroll.x, e.maxScrollPos, e.minScrollPos),
                      Fe(this.scroll.y, n.maxScrollPos, n.minScrollPos),
                      0,
                      0
                    ),
                    o = { x: i.x, y: i.y, pageX: i.pageX, pageY: i.pageY };
                  this.page.isSameWithCurrent(o) ||
                    this.page.changeCurrentPage(o);
                }
                var r = this.page.resetLoopPage();
                if (r)
                  return (
                    (this.resetLooping = !0), this.goTo(r.pageX, r.pageY, 0), !0
                  );
                this.pageWillChangeTo(this.page.currentPage);
              }
          }),
          (t.prototype.shouldSetWidthHeight = function (t) {
            var e = {
              width: ["scrollX", "disableSetWidth"],
              height: ["scrollY", "disableSetHeight"],
            }[t];
            return !!this.scroll.options[e[0]] && !this.slideOpt[e[1]];
          }),
          (t.prototype.clearSlideWidth = function (t) {
            if (this.shouldSetWidthHeight("width")) {
              for (var e = t.children, n = 0; n < e.length; n++)
                e[n].removeAttribute("style");
              t.removeAttribute("style");
            }
          }),
          (t.prototype.setSlideWidth = function (t) {
            if (!this.shouldSetWidthHeight("width")) return !1;
            for (
              var e = t.children, n = e[0].clientWidth, i = 0;
              i < e.length;
              i++
            )
              e[i].style.width = n + "px";
            return (t.style.width = n * e.length + "px"), !0;
          }),
          (t.prototype.clearSlideHeight = function (t) {
            if (this.shouldSetWidthHeight("height")) {
              for (var e = t.children, n = 0; n < e.length; n++)
                e[n].removeAttribute("style");
              t.removeAttribute("style");
            }
          }),
          (t.prototype.setSlideHeight = function (t, e) {
            if (!this.shouldSetWidthHeight("height")) return !1;
            for (
              var n = t.clientHeight, i = e.children, o = 0;
              o < i.length;
              o++
            )
              i[o].style.height = n + "px";
            return (e.style.height = n * i.length + "px"), !0;
          }),
          (t.prototype.goTo = function (t, e, n, i) {
            void 0 === e && (e = 0);
            var o = this.page.change2safePage(t, e);
            if (o) {
              var r = i || this.slideOpt.easing || ze.bounce,
                s = o.x,
                a = o.y,
                l = s - this.scroll.scroller.scrollBehaviorX.currentPos,
                u = a - this.scroll.scroller.scrollBehaviorY.currentPos;
              (l || u) &&
                ((n = void 0 === n ? this.getAnimateTime(l, u) : n),
                this.page.changeCurrentPage({
                  x: s,
                  y: a,
                  pageX: o.pageX,
                  pageY: o.pageY,
                }),
                this.pageWillChangeTo(this.page.currentPage),
                this.scroll.scroller.scrollTo(s, a, n, r));
            }
          }),
          (t.prototype.flickHandler = function () {
            var t = this.scroll.scroller.scrollBehaviorX,
              e = this.scroll.scroller.scrollBehaviorY,
              n = t.currentPos - t.startPos,
              i = e.currentPos - e.startPos,
              o = this.getAnimateTime(n, i);
            this.goTo(
              this.page.currentPage.pageX + t.direction,
              this.page.currentPage.pageY + e.direction,
              o
            );
          }),
          (t.prototype.getAnimateTime = function (t, e) {
            return this.slideOpt.speed
              ? this.slideOpt.speed
              : Math.max(
                  Math.max(
                    Math.min(Math.abs(t), 1e3),
                    Math.min(Math.abs(e), 1e3)
                  ),
                  300
                );
          }),
          (t.prototype.modifyScrollMetaHandler = function (t) {
            var e = this.nearestPage(t.newX, t.newY);
            (t.time = this.getAnimateTime(t.newX - e.x, t.newY - e.y)),
              (t.newX = e.x),
              (t.newY = e.y),
              (t.easing = this.slideOpt.easing || ze.bounce),
              this.page.changeCurrentPage({
                x: t.newX,
                y: t.newY,
                pageX: e.pageX,
                pageY: e.pageY,
              }),
              this.pageWillChangeTo(this.page.currentPage);
          }),
          (t.prototype.scrollMoving = function (t) {
            if (this.isTouching) {
              var e = this.nearestPage(t.x, t.y);
              this.pageWillChangeTo(e);
            }
          }),
          (t.prototype.pageWillChangeTo = function (t) {
            var e = this.page.getRealPage(t);
            (e.pageX === this.willChangeToPage.pageX &&
              e.pageY === this.willChangeToPage.pageY) ||
              ((this.willChangeToPage = e),
              this.scroll.trigger("slideWillChange", this.willChangeToPage));
          }),
          (t.prototype.setTouchFlag = function () {
            this.isTouching = !0;
          }),
          (t.prototype.registorHooks = function (t, e, n) {
            t.on(e, n, this), this.hooksFn.push([t, e, n]);
          }),
          (t.pluginName = "slide"),
          t
        );
      })();
      function Ge() {
        return (Ge =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function Je(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function Qe(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      ne.use(be), ne.use(_e), ne.use(Ae), ne.use(Xe);
      const Ke = n(6930);
      class Ze extends e().Component {
        constructor(t) {
          super(t),
            (this.scrollNeedsToInit = !1),
            (this.scrollRef = e().createRef());
        }
        componentDidMount() {
          this.props.scrollEnabled &&
            !0 !== this.props.nativeScroll &&
            this.setupIScroll(),
            (this.scrollRef.current.noodlNode = this.props.noodlNode);
        }
        componentWillUnmount() {
          this.iScroll && (this.iScroll.destroy(), (this.iScroll = void 0)),
            this.props.noodlNode.context.setNodeFocused(
              this.props.noodlNode,
              !1
            );
        }
        componentDidUpdate() {
          this.scrollNeedsToInit &&
            (this.setupIScroll(), (this.scrollNeedsToInit = !1)),
            this.iScroll &&
              setTimeout(() => {
                this.iScroll && this.iScroll.refresh();
              }, 0);
        }
        scrollToIndex(t, e) {
          if (this.iScroll) {
            const n = this.scrollRef.current.children[0].children[t];
            n && this.iScroll.scrollToElement(n, e);
          } else {
            const e = this.scrollRef.current.children[t];
            e && e.scrollIntoView({ behavior: "smooth" });
          }
        }
        scrollToElement(t, e) {
          if (!t) return;
          const n = o().findDOMNode(t.getRef());
          n &&
            (this.iScroll
              ? this.iScroll.scrollToElement(n, e)
              : n.scrollIntoView({ behavior: "smooth" }));
        }
        setupIScroll() {
          const { scrollSnapEnabled: t } = this.props,
            e = this.getScrollDirection(),
            n = { disableSetWidth: !0, disableSetHeight: !0 },
            i = this.scrollRef.current;
          this.iScroll = new ne(i, {
            bounceTime: 500,
            swipeBounceTime: 300,
            scrollbar: this.props.showScrollbar,
            momentum: !t || !this.props.scrollSnapToEveryItem,
            bounce: this.props.scrollBounceEnabled && !(t && n.loop),
            scrollX: "x" === e || "both" === e,
            scrollY: "y" === e || "both" === e,
            slide: t ? n : void 0,
            probeType: this.props.onScrollPositionChanged ? 3 : 1,
            click: !0,
            nestedScroll: !0,
            useTransition: !1,
          });
          const o = this.iScroll.scroller;
          o.scrollBehaviorX &&
            (o.scrollBehaviorX.momentum = Ke.bind(o.scrollBehaviorX)),
            o.scrollBehaviorY &&
              (o.scrollBehaviorY.momentum = Ke.bind(o.scrollBehaviorY)),
            this.iScroll.on("beforeScrollStart", () => {
              this.iScroll.refresh();
            }),
            this.iScroll.on("scrollStart", () => {
              this.props.onScrollStart && this.props.onScrollStart();
            }),
            this.iScroll.on("scrollEnd", () => {
              this.props.onScrollEnd && this.props.onScrollEnd();
            }),
            this.props.onScrollPositionChanged &&
              this.iScroll.on("scroll", () => {
                this.props.onScrollPositionChanged(
                  "x" === e ? -this.iScroll.x : -this.iScroll.y
                );
              });
        }
        componentWillReceiveProps(t) {
          (this.props.scrollSnapEnabled !== t.scrollSnapEnabled ||
            this.props.onScrollPositionChanged !== t.onScrollPositionChanged ||
            this.props.onScrollStart !== t.onScrollStart ||
            this.props.onScrollEnd !== t.onScrollEnd ||
            this.props.showScrollbar !== t.showScrollbar ||
            this.props.scrollEnabled !== t.scrollEnabled ||
            this.props.nativeScroll !== t.nativeScroll ||
            this.props.scrollSnapToEveryItem !== t.scrollSnapToEveryItem ||
            this.props.layout !== t.layout ||
            this.props.flexWrap !== t.flexWrap ||
            this.props.scrollBounceEnabled !== t.scrollBounceEnabled) &&
            (this.iScroll && (this.iScroll.destroy(), (this.iScroll = void 0)),
            (this.scrollNeedsToInit = t.scrollEnabled && !t.nativeScroll));
        }
        renderIScroll() {
          const { flexDirection: t, flexWrap: n } = this.props.style,
            i = {
              display: "inline-flex",
              flexShrink: 0,
              flexDirection: t,
              flexWrap: n,
              touchAction: "none",
            };
          return (
            "row" === t
              ? "wrap" === n
                ? (i.width = "100%")
                : (i.height = "100%")
              : "wrap" === n
              ? (i.height = "100%")
              : (i.width = "100%"),
            e().createElement(
              "div",
              { className: "scroll-wrapper-internal", style: i },
              this.props.children
            )
          );
        }
        getScrollDirection() {
          return "wrap" === this.props.flexWrap ||
            "wrap-reverse" === this.props.flexWrap
            ? "row" === this.props.layout
              ? "y"
              : "x"
            : "row" === this.props.layout
            ? "x"
            : "y";
        }
        render() {
          const t = this.props,
            n =
              t.scrollEnabled && !t.nativeScroll
                ? this.renderIScroll()
                : t.children,
            i = (function (t) {
              for (var e = 1; e < arguments.length; e++) {
                var n = null != arguments[e] ? arguments[e] : {};
                e % 2
                  ? Je(Object(n), !0).forEach(function (e) {
                      Qe(t, e, n[e]);
                    })
                  : Object.getOwnPropertyDescriptors
                  ? Object.defineProperties(
                      t,
                      Object.getOwnPropertyDescriptors(n)
                    )
                  : Je(Object(n)).forEach(function (e) {
                      Object.defineProperty(
                        t,
                        e,
                        Object.getOwnPropertyDescriptor(n, e)
                      );
                    });
              }
              return t;
            })({}, t.style);
          if (
            (O.size(i, t),
            O.align(i, t),
            t.clip && ((i.overflowX = "hidden"), (i.overflowY = "hidden")),
            t.scrollEnabled && t.nativeScroll)
          ) {
            const t = this.getScrollDirection();
            "y" === t
              ? (i.overflowY = "auto")
              : "x" === t
              ? (i.overflowX = "auto")
              : "both" === t &&
                ((i.overflowX = "auto"), (i.overflowY = "auto"));
          }
          return (
            0 === i.opacity && (i.pointerEvents = "none"),
            e().createElement(
              "div",
              Ge({ className: t.className }, t.dom, J(t), {
                style: i,
                ref: this.scrollRef,
              }),
              n
            )
          );
        }
      }
      const tn = {
        name: "Group",
        docs: "https://docs.noodl.net/nodes/basic-elements/group",
        connectionPanel: {
          groupPriority: [
            "General",
            "Style",
            "Events",
            "Mounted",
            "Hover Events",
            "Pointer Events",
            "Focus",
            "Scroll",
          ],
        },
        initialize() {
          (this._internal = {
            scrollElementDuration: 500,
            scrollIndexDuration: 500,
            scrollIndex: 0,
          }),
            (this.props.layout = "column");
        },
        getReactComponent: () => Ze,
        noodlNodeAsProp: !0,
        visualStates: [
          { name: "neutral", label: "Neutral" },
          { name: "hover", label: "Hover" },
        ],
        defaultCss: {
          display: "flex",
          position: "relative",
          flexDirection: "column",
        },
        inputs: {
          flexDirection: {
            index: 12,
            displayName: "Layout",
            group: "Layout",
            type: {
              name: "enum",
              enums: [
                { label: "None", value: "none" },
                { label: "Vertical", value: "column" },
                { label: "Horizontal", value: "row" },
              ],
            },
            default: "column",
            set(t) {
              (this.props.layout = t),
                "none" !== t
                  ? this.setStyle({ flexDirection: t })
                  : this.removeStyle(["flexDirection"]),
                this.context.editorConnection &&
                  ("none" === t || Q.includes(t)
                    ? this.context.editorConnection.clearWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "layout-warning"
                      )
                    : this.context.editorConnection.sendWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "layout-warning",
                        {
                          message:
                            "Invalid Layout value has to be a valid flex-direction value.",
                        }
                      )),
                this.forceUpdate();
            },
          },
          "scrollToIndex.do": {
            displayName: "Scroll To Index - Do",
            group: "Scroll To Index",
            type: "signal",
            index: 505,
            valueChangedToTrue() {
              this.scheduleAfterInputsHaveUpdated(() => {
                if (!this.innerReactComponentRef) return;
                const t = this._internal.scrollIndex,
                  e = this._internal.scrollIndexDuration;
                this.innerReactComponentRef.scrollToIndex(t, e);
              });
            },
          },
          "scrollToElement.do": {
            displayName: "Scroll To Element - Do",
            group: "Scroll To Element",
            type: "signal",
            index: 500,
            valueChangedToTrue() {
              this.innerReactComponentRef &&
                this.scheduleAfterInputsHaveUpdated(() => {
                  const t = this._internal.scrollElement,
                    e = this._internal.scrollElementDuration;
                  this.innerReactComponentRef.scrollToElement(t, e);
                });
            },
          },
          "scrollToElement.element": {
            displayName: "Scroll To Element - Element",
            group: "Scroll To Element",
            type: "reference",
            index: 501,
            set(t) {
              this._internal.scrollElement = t;
            },
          },
          "scrollToElement.duration": {
            displayName: "Scroll To Element - Duration",
            group: "Scroll To Element",
            type: "number",
            default: 500,
            index: 502,
            set(t) {
              this._internal.scrollElementDuration = t;
            },
          },
          "scrollToIndex.index": {
            displayName: "Scroll To Index - Index",
            group: "Scroll To Index",
            type: "number",
            default: 0,
            index: 506,
            set(t) {
              this._internal.scrollIndex = t;
            },
          },
          "scrollToIndex.duration": {
            displayName: "Scroll To Index - Duration",
            group: "Scroll To Index",
            type: "number",
            default: 500,
            index: 507,
            set(t) {
              this._internal.scrollIndexDuration = t;
            },
          },
          focus: {
            displayName: "Focus",
            type: "signal",
            group: "Focus",
            valueChangedToTrue() {
              this.context.setNodeFocused(this, !0);
            },
          },
        },
        inputProps: {
          clip: {
            index: 17,
            displayName: "Clip Content",
            type: "boolean",
            group: "Layout",
            default: !1,
          },
          scrollEnabled: {
            index: 54,
            group: "Scroll",
            displayName: "Enable Scroll",
            type: "boolean",
            default: !1,
          },
          scrollSnapEnabled: {
            index: 55,
            displayName: "Snap",
            group: "Scroll",
            type: "boolean",
            default: !1,
          },
          scrollSnapToEveryItem: {
            index: 56,
            displayName: "Snap To Every Item",
            group: "Scroll",
            type: "boolean",
            default: !1,
          },
          showScrollbar: {
            index: 57,
            displayName: "Show Scrollbar",
            group: "Scroll",
            type: "boolean",
            default: !1,
          },
          scrollBounceEnabled: {
            index: 58,
            displayName: "Bounce at boundaries",
            group: "Scroll",
            type: "boolean",
            default: !0,
          },
          nativeScroll: {
            index: 60,
            group: "Scroll",
            displayName: "Native platform scroll",
            type: "boolean",
            default: !0,
          },
        },
        inputCss: {
          alignItems: {
            index: 13,
            group: "Align and justify content",
            displayName: "Align Items",
            type: {
              name: "enum",
              enums: [
                { label: "Start", value: "flex-start" },
                { label: "End", value: "flex-end" },
                { label: "Center", value: "center" },
              ],
              alignComp: "align-items",
            },
            default: "flex-start",
          },
          justifyContent: {
            index: 14,
            group: "Align and justify content",
            displayName: "Justify Content",
            type: {
              name: "enum",
              enums: [
                { label: "Start", value: "flex-start" },
                { label: "End", value: "flex-end" },
                { label: "Center", value: "center" },
                { label: "Space Between", value: "space-between" },
                { label: "Space Around", value: "space-around" },
                { label: "Space Evenly", value: "space-evenly" },
              ],
              alignComp: "justify-content",
            },
            default: "flex-start",
            applyDefault: !1,
          },
          flexWrap: {
            index: 15,
            displayName: "Multi Line Wrap",
            group: "Layout",
            type: {
              name: "enum",
              enums: [
                { label: "Off", value: "nowrap" },
                { label: "On", value: "wrap" },
                { label: "On Reverse", value: "wrap-reverse" },
              ],
            },
            default: "nowrap",
            onChange(t) {
              (this.props.flexWrap = t), this.forceUpdate();
            },
            applyDefault: !1,
          },
          alignContent: {
            index: 16,
            group: "Layout",
            displayName: "Align Content",
            type: {
              name: "enum",
              enums: [
                { label: "Start", value: "flex-start" },
                { label: "End", value: "flex-end" },
                { label: "Center", value: "center" },
                { label: "Space Between", value: "space-between" },
                { label: "Space Around", value: "space-around" },
                { label: "Space Evenly", value: "space-evenly" },
              ],
              alignComp: "align-content",
            },
          },
          backgroundColor: {
            index: 201,
            displayName: "Background Color",
            group: "Style",
            type: "color",
            default: "transparent",
            applyDefault: !1,
            allowVisualStates: !0,
          },
        },
        outputProps: {
          onScrollPositionChanged: {
            displayName: "Scroll Position",
            type: "number",
            group: "Scroll",
          },
          onScrollStart: {
            displayName: "Scroll Start",
            type: "signal",
            group: "Scroll",
          },
          onScrollEnd: {
            displayName: "Scroll End",
            type: "signal",
            group: "Scroll",
          },
        },
        outputs: {
          focused: { displayName: "Focused", type: "signal", group: "Focus" },
          focusLost: {
            displayName: "Focus Lost",
            type: "signal",
            group: "Focus",
          },
        },
        dynamicports: [
          { condition: "flexDirection != none", inputs: ["scrollEnabled"] },
          {
            condition: "flexDirection != none AND scrollEnabled = true",
            inputs: ["nativeScroll"],
          },
          {
            condition:
              "flexDirection != none AND scrollEnabled = true AND nativeScroll = false",
            inputs: [
              "scrollBounceEnabled",
              "scrollSnapEnabled",
              "showScrollbar",
              "scrollToElement.do",
              "scrollToElement.element",
              "scrollToElement.duration",
              "scrollToIndex.do",
              "scrollToIndex.index",
              "scrollToIndex.duration",
            ],
          },
          {
            condition:
              "flexDirection != none AND scrollEnabled = true AND scrollSnapEnabled = true",
            inputs: ["scrollSnapToEveryItem"],
          },
          { condition: "flexDirection != none", inputs: ["flexWrap"] },
          {
            condition: "flexWrap = wrap OR flexWrap = wrap-reverse",
            inputs: ["alignContent"],
          },
        ],
        methods: {
          _focus() {
            this.sendSignalOnOutput("focused");
          },
          _blur() {
            this.sendSignalOnOutput("focusLost");
          },
        },
      };
      var en;
      v.addDimensions(tn),
        v.addTransformInputs(tn),
        v.addSharedVisualInputs(tn),
        v.addPaddingInputs(tn),
        v.addMarginInputs(tn),
        v.addAlignInputs(tn),
        v.addPointerEventOutputs(tn),
        v.addBorderInputs(tn),
        v.addShadowInputs(tn),
        Noodl.runDeployed ||
          (((en = tn).inputProps.clip.tooltip = s({
            title: "Clip content",
            body: "Controls if elements that are too big to fit will be clipped",
            images: [
              { src: "clip-enabled.svg", label: "Enabled" },
              { src: "clip-disabled.svg", label: "Disabled" },
            ],
          })),
          (en.inputCss.flexWrap.tooltip = s({
            title: "Multiline wrap",
            body: "Elements will wrap to the next line when there's not enough space",
            images: [
              { src: "multiline-h.svg", body: "Using a horizontal layout" },
              { src: "multiline-v.svg", body: "Using a vertical layout" },
            ],
          })));
      const nn = W(tn);
      function on() {
        return (on =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function rn(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function sn(t) {
        for (var e = 1; e < arguments.length; e++) {
          var n = null != arguments[e] ? arguments[e] : {};
          e % 2
            ? rn(Object(n), !0).forEach(function (e) {
                an(t, e, n[e]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
            : rn(Object(n)).forEach(function (e) {
                Object.defineProperty(
                  t,
                  e,
                  Object.getOwnPropertyDescriptor(n, e)
                );
              });
        }
        return t;
      }
      function an(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      const ln = (t) => {
          const n = sn(sn({}, t.textStyle), t.style);
          return (
            O.size(n, t),
            O.align(n, t),
            "contentSize" === t.sizeMode || "contentWidth" === t.sizeMode
              ? (n.whiteSpace = "pre")
              : (n.whiteSpace = "pre-wrap"),
            0 === n.opacity && (n.pointerEvents = "none"),
            e().createElement(
              "div",
              on({ className: t.className }, t.dom, J(t), { style: n }),
              String(t.text)
            )
          );
        },
        un = {
          name: "Text",
          docs: "https://docs.noodl.net/nodes/basic-elements/text",
          visualStates: [
            { name: "neutral", label: "Neutral" },
            { name: "hover", label: "Hover" },
          ],
          allowChildren: !1,
          noodlNodeAsProp: !0,
          connectionPanel: {
            groupPriority: [
              "General",
              "Text",
              "Text Style",
              "Style",
              "Events",
              "Mounted",
              "Hover Events",
              "Pointer Events",
            ],
          },
          getReactComponent: () => ln,
          getInspectInfo() {
            return this.props.text;
          },
          defaultCss: { position: "relative", display: "flex" },
          inputProps: {
            text: {
              index: 19,
              group: "Text",
              displayName: "Text",
              default: "Text",
              type: { name: "string", multiline: !0 },
            },
          },
          inputCss: {
            wordBreak: {
              index: 27,
              group: "Text",
              displayName: "Word Break",
              applyDefault: !1,
              type: {
                name: "enum",
                enums: [
                  { label: "Normal", value: "normal" },
                  { label: "Break All", value: "break-all" },
                ],
              },
              default: "normal",
            },
          },
          inputs: {
            textAlignX: {
              group: "Text Alignment",
              index: 13,
              displayName: "Text Horizontal Align",
              type: {
                name: "enum",
                enums: [
                  { label: "left", value: "left" },
                  { label: "center", value: "center" },
                  { label: "right", value: "right" },
                ],
                alignComp: "justify",
              },
              default: "left",
              set(t) {
                switch (t) {
                  case "left":
                    this.setStyle({
                      textAlign: "left",
                      justifyContent: "flex-start",
                    });
                    break;
                  case "center":
                    this.setStyle({
                      textAlign: "center",
                      justifyContent: "center",
                    });
                    break;
                  case "right":
                    this.setStyle({
                      textAlign: "right",
                      justifyContent: "flex-end",
                    });
                }
              },
            },
            textAlignY: {
              group: "Text Alignment",
              index: 14,
              displayName: "Text Vertical Align",
              type: {
                name: "enum",
                enums: [
                  { label: "Top", value: "top" },
                  { label: "Center", value: "center" },
                  { label: "Bottom", value: "bottom" },
                ],
                alignComp: "vertical",
              },
              default: "top",
              set(t) {
                switch (t) {
                  case "top":
                    this.setStyle({ alignItems: "flex-start" });
                    break;
                  case "center":
                    this.setStyle({ alignItems: "center" });
                    break;
                  case "bottom":
                    this.setStyle({ alignItems: "flex-end" });
                }
              },
            },
          },
        };
      v.addDimensions(un, {
        defaultSizeMode: "contentHeight",
        contentLabel: "Text",
      }),
        v.addTextStyleInputs(un),
        v.addAlignInputs(un),
        v.addTransformInputs(un),
        v.addMarginInputs(un),
        v.addSharedVisualInputs(un),
        v.addPointerEventOutputs(un),
        Noodl.runDeployed ||
          (function (t) {
            t.inputCss.wordBreak.tooltip = s({
              title: "Word break",
              body: [
                "Control where line breaks are allowed",
                "- Normal: Break on spaces and other whitespace characters",
                "- Break All: Allow line breaks between any two characters, including inside words",
              ],
            });
          })(un);
      const pn = W(un);
      function cn() {
        return (cn =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function dn(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function hn(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function fn(t) {
        const n = (function (t) {
          for (var e = 1; e < arguments.length; e++) {
            var n = null != arguments[e] ? arguments[e] : {};
            e % 2
              ? dn(Object(n), !0).forEach(function (e) {
                  hn(t, e, n[e]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
              : dn(Object(n)).forEach(function (e) {
                  Object.defineProperty(
                    t,
                    e,
                    Object.getOwnPropertyDescriptor(n, e)
                  );
                });
          }
          return t;
        })({}, t.style);
        return (
          O.size(n, t),
          O.align(n, t),
          0 === n.opacity && (n.pointerEvents = "none"),
          e().createElement(
            "img",
            cn({ className: t.className }, t.dom, J(t), { style: n })
          )
        );
      }
      const gn = {
        name: "Image",
        docs: "https://docs.noodl.net/nodes/basic-elements/image",
        noodlNodeAsProp: !0,
        visualStates: [
          { name: "neutral", label: "Neutral" },
          { name: "hover", label: "Hover" },
        ],
        connectionPanel: {
          groupPriority: [
            "General",
            "Image",
            "Style",
            "Actions",
            "Events",
            "Mounted",
            "Pointer Events",
            "Hover Events",
            "Dimensions",
            "Margin and padding",
          ],
        },
        getReactComponent: () => fn,
        getInspectInfo() {
          if (this.props.dom.srcSet) return this.props.dom.srcSet;
          if (this.props.dom.src) {
            const t = this.props.dom.src.toString();
            return [
              { type: "text", value: t },
              { type: "image", value: t },
            ];
          }
        },
        allowChildren: !1,
        defaultCss: { display: "block", flexShrink: 0 },
        inputCss: {
          objectFit: {
            displayName: "Image Fit",
            group: "Dimensions",
            type: {
              name: "enum",
              enums: [
                { label: "Fill", value: "fill" },
                { label: "Contain", value: "contain" },
                { label: "Cover", value: "cover" },
                { label: "None", value: "none" },
                { label: "Scale Down", value: "scale-down" },
              ],
            },
            default: "contain",
            allowVisualStates: !0,
          },
        },
        dynamicports: [
          { condition: "sizeMode = explicit", inputs: ["objectFit"] },
        ],
        inputs: {
          src: {
            displayName: "Source",
            group: "Image",
            propPath: "dom",
            type: { name: "image" },
            index: 30,
            allowVisualStates: !0,
            set(t) {
              (this.props.dom.src = (0, u.getAbsoluteUrl)(t)),
                this.forceUpdate();
            },
          },
        },
        inputProps: {
          srcSet: {
            displayName: "Source Set",
            group: "Image",
            propPath: "dom",
            type: { name: "string" },
            index: 31,
            allowVisualStates: !0,
          },
          alt: {
            displayName: "Alternate text",
            tooltip:
              "The alt text is used by screen readers, or if the image can't be downloaded or displayed",
            type: "string",
            propPath: "dom",
            index: 1e3,
          },
        },
        outputProps: {
          onLoad: {
            displayName: "On Load",
            propPath: "dom",
            type: "signal",
            group: "Events",
          },
        },
      };
      v.addDimensions(gn, {
        defaultSizeMode: "contentSize",
        contentLabel: "Image",
      }),
        v.addTransformInputs(gn),
        v.addMarginInputs(gn),
        v.addSharedVisualInputs(gn),
        v.addAlignInputs(gn),
        v.addPointerEventOutputs(gn),
        v.addBorderInputs(gn),
        v.addShadowInputs(gn);
      const mn = W(gn);
      function yn() {
        return (yn =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function vn(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function bn(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function Sn(t, e, n, i) {
        const o = ((i - 90) * Math.PI) / 180;
        return { x: t + n * Math.cos(o), y: e + n * Math.sin(o) };
      }
      function wn(t, e, n, i, o) {
        o % 360 == i % 360 && (o -= 1e-4);
        const r = Sn(t, e, n, o),
          s = Sn(t, e, n, i),
          a = o - i <= 180 ? "0" : "1";
        return [
          "M",
          r.x,
          r.y,
          "A",
          n,
          n,
          0,
          a,
          0,
          s.x,
          s.y,
          "L",
          t,
          e,
          "L",
          r.x,
          r.y,
        ].join(" ");
      }
      class On extends e().Component {
        constructor(t) {
          super(t);
        }
        render() {
          let t, n;
          const i = this.props.size / 2,
            { startAngle: o, endAngle: r } = this.props;
          if (this.props.fillEnabled) {
            const n = this.props.size / 2;
            t = e().createElement("path", {
              d: wn(n, n, n, o, r),
              fill: this.props.fillColor,
            });
          }
          if (this.props.strokeEnabled) {
            const {
                strokeColor: t,
                strokeWidth: s,
                strokeLineCap: a,
              } = this.props,
              l = (function (t, e, n, i, o) {
                o % 360 == i % 360 && (o -= 1e-4);
                const r = Sn(t, e, n, o),
                  s = Sn(t, e, n, i),
                  a = o - i <= 180 ? "0" : "1";
                return ["M", r.x, r.y, "A", n, n, 0, a, 0, s.x, s.y].join(" ");
              })(i, i, i - this.props.strokeWidth / 2, o, r);
            n = e().createElement("path", {
              d: l,
              stroke: t,
              strokeWidth: s,
              fill: "transparent",
              strokeLinecap: a,
            });
          }
          const s = (function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = null != arguments[e] ? arguments[e] : {};
              e % 2
                ? vn(Object(n), !0).forEach(function (e) {
                    bn(t, e, n[e]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    t,
                    Object.getOwnPropertyDescriptors(n)
                  )
                : vn(Object(n)).forEach(function (e) {
                    Object.defineProperty(
                      t,
                      e,
                      Object.getOwnPropertyDescriptor(n, e)
                    );
                  });
            }
            return t;
          })({}, this.props.style);
          return (
            O.size(s, this.props),
            O.align(s, this.props),
            0 === s.opacity && (s.pointerEvents = "none"),
            e().createElement(
              "div",
              yn(
                { className: this.props.className },
                this.props.dom,
                J(this.props),
                { style: s }
              ),
              e().createElement(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  width: this.props.size,
                  height: this.props.size,
                },
                t,
                n
              )
            )
          );
        }
      }
      const _n = {
        name: "Circle",
        docs: "https://docs.noodl.net/nodes/basic-elements/circle",
        connectionPanel: {
          groupPriority: [
            "General",
            "Fill",
            "Stroke",
            "Dimensions",
            "Style",
            "Actions",
            "Events",
            "Mounted",
            "Margin and padding",
            "Pointer Events",
            "Hover Events",
          ],
        },
        getReactComponent: () => On,
        noodlNodeAsProp: !0,
        allowChildren: !1,
        defaultCss: { flexShrink: 0, position: "relative", display: "flex" },
        inputProps: {
          size: {
            displayName: "Size",
            default: "100",
            group: "Dimension",
            type: { name: "number" },
            index: 10,
            allowVisualStates: !0,
          },
          fillEnabled: {
            group: "Fill",
            displayName: "Fill",
            default: !0,
            type: "boolean",
            index: 20,
            allowVisualStates: !0,
          },
          fillColor: {
            group: "Fill",
            displayName: "Fill Color",
            default: "red",
            type: "color",
            index: 21,
            allowVisualStates: !0,
          },
          strokeEnabled: {
            index: 23,
            group: "Stroke",
            default: !1,
            displayName: "Stroke",
            type: "boolean",
            allowVisualStates: !0,
          },
          strokeWidth: {
            index: 24,
            group: "Stroke",
            displayName: "Stroke Width",
            default: 10,
            type: { name: "number" },
            allowVisualStates: !0,
          },
          strokeColor: {
            index: 25,
            group: "Stroke",
            displayName: "Stroke Color",
            type: "color",
            default: "black",
            allowVisualStates: !0,
          },
          strokeLineCap: {
            index: 26,
            group: "Stroke",
            displayName: "Line Cap",
            type: {
              name: "enum",
              enums: [
                { label: "Butt", value: "butt" },
                { label: "Round", value: "round" },
              ],
            },
            default: "butt",
            allowVisualStates: !0,
          },
          startAngle: {
            displayName: "Start Angle",
            type: "number",
            default: 0,
            group: "Style",
            index: 198,
            allowVisualStates: !0,
          },
          endAngle: {
            displayName: "End Angle",
            type: "number",
            default: 360,
            group: "Style",
            index: 199,
            allowVisualStates: !0,
          },
        },
      };
      v.addTransformInputs(_n),
        v.addMarginInputs(_n),
        v.addSharedVisualInputs(_n),
        v.addAlignInputs(_n),
        v.addPointerEventOutputs(_n);
      const Nn = W(_n);
      function Cn(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function In(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function xn() {
        return (xn =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      class Pn extends e().PureComponent {
        shouldComponentUpdate(t, e, n) {
          return (
            this.video &&
              ((this.video.muted = t.muted),
              (this.video.loop = t.loop),
              (this.video.volume = t.volume),
              (this.video.autoplay = t.autoplay)),
            !0
          );
        }
        render() {
          let t = this.props.src ? this.props.src.toString() : void 0;
          return (
            t && -1 === t.indexOf("#t=") && (t += "#t=0.01"),
            e().createElement(
              "video",
              xn({}, this.props, { playsInline: !0, src: t }, J(this.props), {
                ref: (t) => {
                  (this.video = t), this.props.innerRef(t);
                },
              })
            )
          );
        }
      }
      class En extends e().Component {
        constructor(t) {
          super(t), (this.wantToPlay = !1), (this.canPlay = !1);
        }
        componentWillUnmount() {
          this.canPlay = !1;
        }
        setSourceObject(t) {
          this.video.srcObject !== t &&
            ((this.video.srcObject = t), (this.canPlay = !1));
        }
        play() {
          (this.wantToPlay = !0), this.canPlay && this.video.play();
        }
        restart() {
          (this.wantToPlay = !0),
            this.canPlay && ((this.video.currentTime = 0), this.video.play());
        }
        pause() {
          (this.wantToPlay = !1), this.video && this.video.pause();
        }
        reset() {
          (this.wantToPlay = !1),
            this.video && ((this.video.currentTime = 0), this.video.pause());
        }
        render() {
          const t = this.props,
            n = (function (t) {
              for (var e = 1; e < arguments.length; e++) {
                var n = null != arguments[e] ? arguments[e] : {};
                e % 2
                  ? Cn(Object(n), !0).forEach(function (e) {
                      In(t, e, n[e]);
                    })
                  : Object.getOwnPropertyDescriptors
                  ? Object.defineProperties(
                      t,
                      Object.getOwnPropertyDescriptors(n)
                    )
                  : Cn(Object(n)).forEach(function (e) {
                      Object.defineProperty(
                        t,
                        e,
                        Object.getOwnPropertyDescriptor(n, e)
                      );
                    });
              }
              return t;
            })({}, t.style);
          return (
            O.size(n, t),
            O.align(n, t),
            0 === n.opacity && (n.pointerEvents = "none"),
            (n.objectPosition = `${t.objectPositionX} ${t.objectPositionY}`),
            e().createElement(
              Pn,
              xn({}, t.dom, {
                className: t.className,
                style: n,
                innerRef: (t) => {
                  (this.video = t),
                    this.props.onVideoElementCreated &&
                      this.props.onVideoElementCreated(t);
                },
                onCanPlay: () => {
                  (this.canPlay = !0),
                    this.wantToPlay && this.video.play(),
                    this.props.onCanPlay && this.props.onCanPlay(),
                    this.props.videoWidth &&
                      this.props.videoWidth(this.video.videoWidth),
                    this.props.videoHeight &&
                      this.props.videoHeight(this.video.videoHeight);
                },
              })
            )
          );
        }
      }
      const Tn = {
        name: "Video",
        docs: "https://docs.noodl.net/nodes/basic-elements/video",
        connectionPanel: {
          groupPriority: [
            "General",
            "Video",
            "Video Actions",
            "Style",
            "Actions",
            "Events",
            "Mounted",
            "Playback",
            "Pointer Events",
            "Hover Events",
            "Dimensions",
            "Margin and padding",
          ],
        },
        getReactComponent: () => En,
        allowChildren: !1,
        noodlNodeAsProp: !0,
        defaultCss: { display: "block" },
        inputs: {
          srcObject: {
            displayName: "Source Object",
            group: "Video",
            type: "mediastream",
            default: null,
            set(t) {
              this.innerReactComponentRef &&
                this.innerReactComponentRef.setSourceObject(t);
            },
          },
          play: {
            type: "signal",
            group: "Video Actions",
            displayName: "Play",
            tooltip: { standard: "Play the video" },
            valueChangedToTrue() {
              this.innerReactComponentRef && this.innerReactComponentRef.play();
            },
          },
          restart: {
            type: "signal",
            group: "Video Actions",
            displayName: "Restart",
            tooltip: { standard: "Restart the video from the beginning" },
            valueChangedToTrue() {
              this.innerReactComponentRef &&
                this.innerReactComponentRef.restart();
            },
          },
          pause: {
            type: "boolean",
            group: "Video Actions",
            displayName: "Pause",
            valueChangedToTrue() {
              this.innerReactComponentRef &&
                this.innerReactComponentRef.pause();
            },
          },
          reset: {
            type: "boolean",
            group: "Video Actions",
            displayName: "Reset",
            valueChangedToTrue() {
              this.innerReactComponentRef &&
                this.innerReactComponentRef.reset();
            },
          },
          src: {
            displayName: "Source",
            group: "Video",
            type: "string",
            set(t) {
              this.props.dom.src = (0, u.getAbsoluteUrl)(t);
            },
          },
          poster: {
            displayName: "Poster",
            group: "Video",
            type: "image",
            set(t) {
              this.props.dom.poster = (0, u.getAbsoluteUrl)(t);
            },
          },
        },
        inputProps: {
          autoplay: {
            displayName: "Autoplay",
            propPath: "dom",
            group: "Video",
            type: "boolean",
          },
          volume: {
            displayName: "Volume",
            propPath: "dom",
            group: "Video",
            type: "number",
            default: 1,
          },
          muted: {
            displayName: "Muted",
            propPath: "dom",
            group: "Video",
            type: "boolean",
          },
          loop: {
            displayName: "Loop",
            propPath: "dom",
            group: "Video",
            type: "boolean",
          },
          objectPositionX: {
            displayName: "Video Position X",
            group: "Video Layout",
            type: { name: "number", units: ["%", "px"], defaultUnit: "%" },
            default: 50,
          },
          objectPositionY: {
            displayName: "Video Position Y",
            group: "Video Layout",
            type: { name: "number", units: ["%", "px"], defaultUnit: "%" },
            default: 50,
          },
        },
        inputCss: {
          objectFit: {
            displayName: "Object Fit",
            group: "Video Layout",
            type: {
              name: "enum",
              enums: [
                { label: "Contain", value: "contain" },
                { label: "Cover", value: "cover" },
                { label: "Fill", value: "fill" },
                { label: "None", value: "none" },
              ],
            },
            default: "contain",
          },
        },
        outputProps: {
          onCanPlay: {
            type: "signal",
            group: "Events",
            displayName: "On Can Play",
          },
          onTimeUpdate: {
            group: "Playback",
            displayName: "Playback Position",
            type: "number",
            propPath: "dom",
            getValue: (t) => t.target.currentTime,
          },
          onPlay: {
            group: "Events",
            displayName: "On Play",
            type: "signal",
            propPath: "dom",
          },
          onPause: {
            group: "Events",
            displayName: "On Pause",
            type: "signal",
            propPath: "dom",
          },
          onVideoElementCreated: {
            type: "domelement",
            displayName: "DOM Element",
          },
          videoWidth: {
            group: "Playback",
            type: "number",
            displayName: "Video Width",
          },
          videoHeight: {
            group: "Playback",
            type: "number",
            displayName: "Video Height",
          },
        },
      };
      v.addDimensions(Tn, {
        defaultSizeMode: "contentSize",
        contentLabel: "Video",
      }),
        v.addTransformInputs(Tn),
        v.addMarginInputs(Tn),
        v.addSharedVisualInputs(Tn),
        v.addAlignInputs(Tn),
        v.addPointerEventOutputs(Tn),
        v.addBorderInputs(Tn);
      const Dn = W(Tn);
      function kn(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function Rn(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function An(t) {
        let e = (function (t) {
          for (var e = 1; e < arguments.length; e++) {
            var n = null != arguments[e] ? arguments[e] : {};
            e % 2
              ? kn(Object(n), !0).forEach(function (e) {
                  Rn(t, e, n[e]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
              : kn(Object(n)).forEach(function (e) {
                  Object.defineProperty(
                    t,
                    e,
                    Object.getOwnPropertyDescriptor(n, e)
                  );
                });
          }
          return t;
        })({}, t.style);
        O.size(e, t), O.align(e, t);
        let n = "ndl-visual-icon";
        return (
          t.className && (n = n + " " + t.className),
          React.createElement(
            "div",
            { className: n, style: e },
            (function () {
              const e = {};
              return "image" === t.iconSourceType &&
                void 0 !== t.iconImageSource
                ? ((e.width = t.iconSize),
                  (e.height = t.iconSize),
                  React.createElement("img", {
                    src: t.iconImageSource,
                    style: e,
                  }))
                : "icon" === t.iconSourceType && void 0 !== t.iconIconSource
                ? ((e.fontSize = t.iconSize),
                  (e.color = t.iconColor),
                  (e.lineHeight = 1),
                  React.createElement(
                    "div",
                    { style: { lineHeight: 0 } },
                    React.createElement(
                      "span",
                      { className: t.iconIconSource.class, style: e },
                      t.iconIconSource.code
                    )
                  ))
                : null;
            })()
          )
        );
      }
      const jn = {
        name: "net.noodl.visual.icon",
        displayName: "Icon",
        docs: "https://docs.noodl.net/nodes/basic-elements/icon",
        allowChildren: !1,
        noodlNodeAsProp: !0,
        connectionPanel: {
          groupPriority: [
            "General",
            "Style",
            "Actions",
            "Events",
            "States",
            "Mounted",
            "Hover Events",
            "Pointer Events",
            "Focus Events",
          ],
        },
        getReactComponent: () => An,
      };
      v.addAlignInputs(jn),
        v.addTransformInputs(jn),
        v.addPaddingInputs(jn, {
          defaults: {
            paddingTop: 5,
            paddingRight: 5,
            paddingBottom: 5,
            paddingLeft: 5,
          },
        }),
        v.addMarginInputs(jn),
        v.addIconInputs(jn, {
          hideEnableIconInput: !0,
          defaults: { useIcon: !0 },
        }),
        v.addSharedVisualInputs(jn);
      const Mn = W(jn);
      class Fn {
        constructor() {
          (this.queue = []), (this.pendingPromise = !1);
        }
        enqueue(t) {
          return new Promise((e, n) => {
            this.queue.push({ promise: t, resolve: e, reject: n }),
              this.dequeue();
          });
        }
        dequeue() {
          if (this.workingOnPromise) return !1;
          const t = this.queue.shift();
          if (!t) return !1;
          try {
            (this.workingOnPromise = !0),
              t
                .promise()
                .then((e) => {
                  (this.workingOnPromise = !1), t.resolve(e), this.dequeue();
                })
                .catch((e) => {
                  (this.workingOnPromise = !1), t.reject(e), this.dequeue();
                });
          } catch (e) {
            (this.workingOnPromise = !1), t.reject(e), this.dequeue();
          }
          return !0;
        }
      }
      const { useEffect: Vn } = n(3804),
        Ln = n(5821),
        Un = n(2338),
        Bn = n(5855),
        Wn = n(9039);
      function zn(t) {
        const { didMount: e, willUnmount: n, style: i, children: o } = t;
        return (
          Vn(
            () => (
              e(),
              () => {
                n();
              }
            ),
            []
          ),
          React.createElement("div", { style: i }, o)
        );
      }
      const Hn = W({
          name: "Page Stack",
          displayNodeName: "Component Stack",
          category: "Visuals",
          docs: "https://docs.noodl.net/nodes/component-stack/component-stack-node",
          useVariants: !1,
          initialize() {
            (this._internal.stack = []),
              (this._internal.topPageName = ""),
              (this._internal.stackDepth = 0),
              (this._internal.pageInfo = {}),
              (this._internal.asyncQueue = new Fn()),
              (this.onScheduleReset = () => {
                this.scheduleReset();
              }),
              (this.props.didMount = () => {
                (this._internal.isMounted = !0),
                  window.history && window.history.pushState
                    ? window.addEventListener("popstate", this.onScheduleReset)
                    : window.addEventListener(
                        "hashchange",
                        this.onScheduleReset
                      ),
                  this._registerPageStack();
              }),
              (this.props.willUnmount = () => {
                (this._internal.isMounted = !1),
                  window.removeEventListener("popstate", this.onScheduleReset),
                  window.removeEventListener(
                    "hashchange",
                    this.onScheduleReset
                  ),
                  this._deregisterPageStack();
              });
          },
          getInspectInfo() {
            return 0 === this._internal.stack.length
              ? "No active page"
              : [{ type: "text", value: "Active Components:" }].concat(
                  this._internal.stack.map((t, e) => ({
                    type: "text",
                    value:
                      "- " +
                      this._internal.pages.find((e) => e.id === t.pageId).label,
                  }))
                );
          },
          defaultCss: {
            width: "100%",
            flex: "1 1 100%",
            position: "relative",
            display: "flex",
            flexDirection: "column",
          },
          getReactComponent: () => zn,
          inputs: {
            name: {
              type: { name: "string", identifierOf: "PackStack" },
              displayName: "Name",
              group: "General",
              default: "Main",
              set: function (t) {
                this._deregisterPageStack(),
                  (this._internal.name = t),
                  this._internal.isMounted && this._registerPageStack();
              },
            },
            useRoutes: {
              type: "boolean",
              displayName: "Use Routes",
              group: "General",
              default: !1,
              set: function (t) {
                this._internal.useRoutes = !!t;
              },
            },
            clip: {
              displayName: "Clip Content",
              type: "boolean",
              group: "Layout",
              default: !0,
              set(t) {
                t
                  ? this.setStyle({ overflow: "hidden" })
                  : this.removeStyle(["overflow"]);
              },
            },
            pages: {
              type: "proplist",
              displayName: "Components",
              group: "Components",
              set: function (t) {
                (this._internal.pages = t),
                  this._internal.isMounted && this.scheduleReset();
              },
            },
            reset: {
              type: "signal",
              displayName: "Reset",
              group: "Actions",
              valueChangedToTrue: function () {
                this.scheduleReset();
              },
            },
          },
          inputCss: {
            backgroundColor: {
              type: "color",
              displayName: "Background Color",
              group: "Style",
              default: "transparent",
              applyDefault: !1,
            },
          },
          outputs: {
            topPageName: {
              type: "string",
              displayName: "Top Component Name",
              get() {
                return this._internal.topPageName;
              },
            },
            stackDepth: {
              type: "number",
              displayName: "Stack Depth",
              get() {
                return this._internal.stackDepth;
              },
            },
          },
          methods: {
            _registerPageStack() {
              Un.instance.registerPageStack(this._internal.name, this);
            },
            _deregisterPageStack() {
              Un.instance.deregisterPageStack(this._internal.name, this);
            },
            _pageNameForId(t) {
              if (void 0 === this._internal.pages) return;
              const e = this._internal.pages.find((e) => e.id === t);
              return void 0 !== e ? e.label : void 0;
            },
            setPageOutputs(t) {
              for (const e in t)
                (this._internal[e] = t[e]), this.flagOutputDirty(e);
            },
            scheduleReset() {
              var t = this._internal;
              t.hasScheduledReset ||
                ((t.hasScheduledReset = !0),
                this.scheduleAfterInputsHaveUpdated(() => {
                  (t.hasScheduledReset = !1), this.reset();
                }));
            },
            createPageContainer() {
              const t = this.nodeScope.createPrimitiveNode("Group");
              return t.setStyle({ flex: "1 0 100%" }), t;
            },
            reset() {
              this._internal.asyncQueue.enqueue(this.resetAsync.bind(this));
            },
            async resetAsync() {
              var t = this.getChildren();
              for (var e in t) {
                var n = t[e];
                this.removeChild(n), this.nodeScope.deleteNode(n);
              }
              if (
                void 0 === this._internal.pages ||
                0 === this._internal.pages.length
              )
                return;
              var i,
                o = {},
                r = this.matchPageFromUrl();
              void 0 !== r
                ? ((i = r.pageId), (o = Object.assign({}, r.query, r.params)))
                : void 0 === (i = this._internal.startPageId) &&
                  (i = this._internal.pages[0].id);
              var s = this._internal.pageInfo[i];
              if (void 0 === s || void 0 === s.component) return;
              var a = await this.nodeScope.createNode(s.component, Ln());
              for (var l in o) a.setInputValue(l, o[l]);
              const u = this.createPageContainer();
              u.addChild(a),
                this.addChild(u),
                (this._internal.stack = [
                  {
                    from: null,
                    page: u,
                    pageId: i,
                    pageInfo: s,
                    params: o,
                    componentName: this._internal.startPage,
                  },
                ]),
                this.setPageOutputs({
                  topPageName: this._pageNameForId(i),
                  stackDepth: this._internal.stack.length,
                });
            },
            getRelativeURL() {
              var t = this._internal.stack[this._internal.stack.length - 1];
              if (void 0 !== t) {
                var e = t.pageInfo.path;
                if (void 0 === e) {
                  var n = this._internal.pages.find((e) => e.id == t.pageId);
                  if (void 0 === n) return;
                  e = n.label.replace(/\s+/g, "-").toLowerCase();
                }
                var i = e.match(/{([^}]+)}/g),
                  o = Object.assign({}, t.params);
                if (i)
                  for (var r of i) {
                    var s = r.replace(/[{}]/g, "");
                    void 0 !== t.params[s] &&
                      ((e = e.replace(r, encodeURIComponent(o[s]))),
                      delete o[s]);
                  }
                var a = [];
                for (var s in o) a.push({ name: s, value: o[s] });
                return (
                  e.startsWith("/") && (e = e.substring(1)),
                  { path: e, query: a }
                );
              }
            },
            getNavigationAbsoluteURL() {
              for (
                var t = this.parent;
                void 0 !== t && "function" != typeof t.getNavigationAbsoluteURL;

              )
                t = t.getVisualParentNode();
              if (void 0 === t) var e = { path: "", query: [] };
              else e = t.getNavigationAbsoluteURL();
              var n = this.getRelativeURL();
              return void 0 === n
                ? e
                : {
                    path: e.path + (e.path.endsWith("/") ? "" : "/") + n.path,
                    query: e.query.concat(n.query),
                  };
            },
            _getLocationPath: function () {
              var t = Bn.instance.getProjectSettings().navigationPathType;
              if (void 0 === t || "hash" === t) {
                var e = location.hash;
                return (
                  e &&
                    ("#" === e[0] && (e = e.substring(1)),
                    "/" === e[0] && (e = e.substring(1))),
                  e
                );
              }
              var n = location.pathname;
              return n && "/" === n[0] && (n = n.substring(1)), n;
            },
            _getSearchParams: function () {
              for (
                var t,
                  e = /\+/g,
                  n = /([^&=]+)=?([^&]*)/g,
                  i = function (t) {
                    return decodeURIComponent(t.replace(e, " "));
                  },
                  o = window.location.search.substring(1),
                  r = {};
                (t = n.exec(o));

              )
                r[i(t[1])] = i(t[2]);
              return r;
            },
            getNavigationRemainingPath() {
              return this._internal.remainingNavigationPath;
            },
            matchPageFromUrl(t) {
              if (
                this._internal.useRoutes &&
                void 0 !== this._internal.pages &&
                0 !== this._internal.pages.length
              ) {
                for (
                  var e = this.parent;
                  void 0 !== e &&
                  "function" != typeof e.getNavigationRemainingPath;

                )
                  e = e.getVisualParentNode();
                if (void 0 === e) {
                  var n = this._getLocationPath();
                  "/" === n[0] && (n = n.substring(1));
                  var i = n.split("/");
                } else i = e.getNavigationRemainingPath();
                if (void 0 !== i) {
                  var o = this._getSearchParams();
                  for (var r of this._internal.pages) {
                    var s = this._internal.pageInfo[r.id];
                    if (void 0 === s) continue;
                    var a = s.path;
                    void 0 === a &&
                      (a = r.label.replace(/\s+/g, "-").toLowerCase()),
                      "/" === a[0] && (a = a.substring(1));
                    let t = l(i, a.split("/"));
                    if (t)
                      return (
                        (this._internal.remainingNavigationPath =
                          t.remainingPathParts),
                        { pageId: r.id, params: t.params, query: o }
                      );
                  }
                }
              }
              function l(t, e) {
                for (var n = {}, i = 0; i < e.length; i++) {
                  if (void 0 === t[i]) return;
                  var o = e[i];
                  if ("{" === o[0] && "}" === o[o.length - 1])
                    n[o.substring(1, o.length - 1)] = decodeURIComponent(t[i]);
                  else if (o !== t[i]) return;
                }
                return { params: n, remainingPathParts: t.splice(e.length) };
              }
            },
            _updateUrlWithTopPage() {
              if (this._internal.useRoutes && void 0 !== window.history) {
                var t,
                  e,
                  n = this.getNavigationAbsoluteURL(),
                  i = Bn.instance.getProjectSettings().navigationPathType;
                void 0 === i || "hash" === i ? (e = n.path) : (t = n.path);
                var o = n.query.map((t) => t.name + "=" + t.value),
                  r =
                    (void 0 !== t ? t : "") +
                    (o.length >= 1 ? "?" + o.join("&") : "") +
                    (void 0 !== e ? "#" + e : "");
                (this._internal.remainingNavigationPath = void 0),
                  window.history.pushState({}, "", r);
              }
            },
            replace(t) {
              this._internal.asyncQueue.enqueue(
                this.replaceAsync.bind(this, t)
              );
            },
            async replaceAsync(t) {
              if (
                void 0 === this._internal.pages ||
                0 === this._internal.pages.length
              )
                return;
              if (this._internal.isTransitioning) return;
              var e = t.target || this._internal.pages[0].id,
                n = this._internal.pageInfo[e];
              if (void 0 === n || void 0 === n.component) return;
              var i = this.getChildren();
              for (var o in i) {
                var r = i[o];
                this.removeChild(r), this.nodeScope.deleteNode(r);
              }
              const s = this.createPageContainer(),
                a = await this.nodeScope.createNode(n.component, Ln());
              for (var l in t.params) a.setInputValue(l, t.params[l]);
              s.addChild(a),
                this.addChild(s),
                (this._internal.stack = [
                  {
                    from: null,
                    page: s,
                    pageId: e,
                    pageInfo: n,
                    params: t.params,
                    componentName: t.target,
                  },
                ]),
                this.setPageOutputs({
                  topPageName: this._pageNameForId(e),
                  stackDepth: this._internal.stack.length,
                }),
                this._updateUrlWithTopPage(),
                t.hasNavigated && t.hasNavigated();
            },
            navigate(t) {
              this._internal.asyncQueue.enqueue(
                this.navigateAsync.bind(this, t)
              );
            },
            async navigateAsync(t) {
              if (
                void 0 === this._internal.pages ||
                0 === this._internal.pages.length
              )
                return;
              if (this._internal.isTransitioning) return;
              var e = t.target || this._internal.pages[0].id,
                n = this._internal.pageInfo[e];
              if (void 0 === n || void 0 === n.component) return;
              const i = this.createPageContainer();
              i.setInputValue("position", "absolute");
              const o = await this.nodeScope.createNode(n.component, Ln());
              for (var r in t.params) o.setInputValue(r, t.params[r]);
              i.addChild(o);
              var s = o.nodeScope.getNodesWithType("PageStackNavigateBack");
              if (s && s.length > 0)
                for (var a = 0; a < s.length; a++)
                  s[a]._setBackCallback(this.back.bind(this));
              var l = this._internal.stack[this._internal.stack.length - 1],
                u = {
                  from: l.page,
                  page: i,
                  pageInfo: n,
                  pageId: e,
                  params: t.params,
                  transition: new Wn[t.transition.type || "Push"](
                    l.page,
                    i,
                    t.transition
                  ),
                  backCallback: t.backCallback,
                  componentName: t.target,
                };
              this._internal.stack.push(u),
                this.setPageOutputs({
                  topPageName: this._pageNameForId(t.target),
                  stackDepth: this._internal.stack.length,
                }),
                this._updateUrlWithTopPage(),
                u.transition.forward(0),
                (this._internal.isTransitioning = !0),
                u.transition.start({
                  end: () => {
                    (this._internal.isTransitioning = !1),
                      this.removeChild(l.page),
                      i.setInputValue("position", "relative");
                  },
                }),
                this.addChild(i),
                t.hasNavigated && t.hasNavigated();
            },
            back(t) {
              if (
                !(
                  this._internal.stack.length <= 1 ||
                  this._internal.isTransitioning
                )
              ) {
                var e = this._internal.stack[this._internal.stack.length - 1];
                e.page.setInputValue("position", "absolute"),
                  this.addChild(e.from, 0),
                  e.backCallback && e.backCallback(t.backAction, t.results),
                  this.setPageOutputs({
                    topPageName: this._pageNameForId(
                      this._internal.stack[this._internal.stack.length - 2]
                        .pageId
                    ),
                    stackDepth: this._internal.stack.length - 1,
                  }),
                  (this._internal.isTransitioning = !0),
                  e.transition.start({
                    end: () => {
                      (this._internal.isTransitioning = !1),
                        e.page.setInputValue("position", "relative"),
                        this.removeChild(e.page),
                        this.nodeScope.deleteNode(e.page),
                        this._internal.stack.pop(),
                        this._updateUrlWithTopPage();
                    },
                    back: !0,
                  });
              }
            },
            setPageComponent(t, e) {
              var n = this._internal;
              n.pageInfo[t] || (n.pageInfo[t] = {}),
                (n.pageInfo[t].component = e);
            },
            setPagePath(t, e) {
              var n = this._internal;
              n.pageInfo[t] || (n.pageInfo[t] = {}), (n.pageInfo[t].path = e);
            },
            setStartPage(t) {
              this._internal.startPageId = t;
            },
            registerInputIfNeeded: function (t) {
              if (!this.hasInput(t))
                return t.startsWith("pageComp-")
                  ? this.registerInput(t, {
                      set: this.setPageComponent.bind(
                        this,
                        t.substring("pageComp-".length)
                      ),
                    })
                  : t.startsWith("pagePath-")
                  ? this.registerInput(t, {
                      set: this.setPagePath.bind(
                        this,
                        t.substring("pagePath-".length)
                      ),
                    })
                  : "startPage" === t
                  ? this.registerInput(t, { set: this.setStartPage.bind(this) })
                  : void 0;
            },
          },
          setup(t, e) {
            function n(e) {
              function n() {
                var n = [];
                void 0 !== e.parameters.pages &&
                  e.parameters.pages.length > 0 &&
                  (e.parameters.pages.forEach((t) => {
                    n.push({
                      name: "pageComp-" + t.id,
                      displayName: "Component",
                      editorName: t.label + " | Component",
                      plug: "input",
                      type: "component",
                      parent: "pages",
                      parentItemId: t.id,
                    }),
                      !0 === e.parameters.useRoutes &&
                        n.push({
                          name: "pagePath-" + t.id,
                          displayName: "Path",
                          editorName: t.label + " | Path",
                          plug: "input",
                          type: "string",
                          default: t.label.replace(/\s+/g, "-").toLowerCase(),
                          parent: "pages",
                          parentItemId: t.id,
                        });
                  }),
                  n.push({
                    plug: "input",
                    type: {
                      name: "enum",
                      enums: e.parameters.pages.map((t) => ({
                        label: t.label,
                        value: t.id,
                      })),
                      allowEditOnly: !0,
                    },
                    group: "General",
                    displayName: "Start Page",
                    name: "startPage",
                    default: e.parameters.pages[0].id,
                  })),
                  t.editorConnection.sendDynamicPorts(e.id, n);
              }
              n(),
                e.on("parameterUpdated", function (t) {
                  ("pages" !== t.name && "useRoutes" !== t.name) || n();
                });
            }
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.Page Stack", function (t) {
                  n(t);
                });
                for (const t of e.getNodesWithType("Page Stack")) n(t);
              });
          },
        }),
        { useEffect: qn } = n(3804);
      function $n(t) {
        const { style: e, children: n } = t;
        return (
          O.size(e, t),
          O.align(e, t),
          React.createElement("div", { style: e, className: t.className }, n)
        );
      }
      const Yn = {
        name: "Page",
        displayNodeName: "Page",
        category: "Visuals",
        docs: "https://docs.noodl.net/nodes/navigation/page",
        useVariants: !1,
        mountedInput: !1,
        allowAsExportRoot: !1,
        singleton: !0,
        connectionPanel: { groupPriority: ["General", "Mounted"] },
        initialize: function () {
          this.props.layout = "column";
        },
        defaultCss: {
          display: "flex",
          flexDirection: "column",
          position: "relative",
          alignItems: "flex-start",
          flex: "1 1",
          alignSelf: "stretch",
        },
        getReactComponent: () => $n,
        outputs: {},
        methods: {
          getUrlPath: function () {
            return this._internal.urlPath;
          },
          getTitle: function () {
            return this._internal.title;
          },
          setTitle: function (t) {
            this._internal.title = t;
          },
          setUrlPath: function (t) {
            this._internal.urlPath = t;
          },
          registerInputIfNeeded: function (t) {
            if (!this.hasInput(t))
              return "title" === t
                ? this.registerInput(t, { set: this.setTitle.bind(this) })
                : "urlPath" === t
                ? this.registerInput(t, { set: this.setUrlPath.bind(this) })
                : void 0;
          },
        },
        setup(t, e) {
          function n(e) {
            function n() {
              var n = [];
              const i = e.component.name.split("/");
              n.push({
                name: "title",
                displayName: "Title",
                type: "string",
                group: "General",
                plug: "input",
                default: i[i.length - 1],
              });
              const o = (e.parameters.title || i[i.length - 1])
                .replace(/\s+/g, "-")
                .toLowerCase();
              n.push({
                name: "urlPath",
                displayName: "Url Path",
                type: "string",
                group: "General",
                plug: "input",
                default: o,
              }),
                t.editorConnection.sendDynamicPorts(e.id, n);
            }
            n(),
              e.on("parameterUpdated", function (t) {
                "title" === t.name && n();
              });
          }
          t.editorConnection &&
            t.editorConnection.isRunningLocally() &&
            e.on("editorImportComplete", () => {
              e.on("nodeAdded.Page", function (t) {
                n(t);
              });
              for (const t of e.getNodesWithType("Page")) n(t);
            });
        },
      };
      v.addPaddingInputs(Yn);
      const Xn = W(Yn),
        { useEffect: Gn } = n(3804),
        Jn = n(5821),
        Qn = n(5855),
        Kn = n(8777);
      function Zn(t) {
        const { didMount: e, willUnmount: n, children: i, style: o } = t;
        return (
          Gn(
            () => (
              e(),
              () => {
                n();
              }
            ),
            []
          ),
          React.createElement("div", { className: t.className, style: o }, i)
        );
      }
      function ti(t) {
        return (
          "/" === t[0] && (t = t.substring(1)),
          "/" === t[t.length - 1] && (t = t.substring(0, t.length - 1)),
          t
        );
      }
      const ei = W({
          name: "Router",
          displayNodeName: "Page Router",
          category: "Visuals",
          docs: "https://docs.noodl.net/nodes/navigation/page-router",
          useVariants: !1,
          connectionPanel: {
            groupPriority: ["General", "Actions", "Events", "Mounted"],
          },
          initialize: function () {
            (this._internal.asyncQueue = new Fn()),
              (this.onScheduleReset = () => {
                this.scheduleReset();
              }),
              (this.props.didMount = () => {
                (this._internal.isMounted = !0),
                  window.history && window.history.pushState
                    ? window.addEventListener("popstate", this.onScheduleReset)
                    : window.addEventListener(
                        "hashchange",
                        this.onScheduleReset
                      ),
                  this._registerRouter();
              }),
              (this.props.willUnmount = () => {
                (this._internal.isMounted = !1),
                  window.removeEventListener("popstate", this.onScheduleReset),
                  window.removeEventListener(
                    "hashchange",
                    this.onScheduleReset
                  ),
                  this._deregisterRouter();
              }),
              (this.props.layout = "column");
          },
          getInspectInfo() {
            return this._internal.currentUrl;
          },
          defaultCss: {
            flex: "1 1",
            alignSelf: "stretch",
            position: "relative",
            display: "flex",
            flexDirection: "column",
          },
          getReactComponent: () => Zn,
          inputs: {
            name: {
              type: "string",
              displayName: "Name",
              group: "General",
              set: function (t) {
                this._deregisterRouter(),
                  (this._internal.name = t),
                  this._internal.isMounted && this._registerRouter();
              },
            },
            pages: {
              type: { name: "pages", allowEditOnly: !0 },
              displayName: "Pages",
              group: "Pages",
              set: function (t) {
                (this._internal.pages = t), this.scheduleReset();
              },
            },
            urlPath: {
              type: "string",
              displayName: "Url path",
              group: "General",
              set: function (t) {
                this._internal.urlPath = t;
              },
            },
            clip: {
              displayName: "Clip Behavior",
              type: {
                name: "enum",
                enums: [
                  { value: "contentHeight", label: "Expand to content size" },
                  { value: "scroll", label: "Scroll" },
                  { value: "clip", label: "Clip content" },
                ],
              },
              group: "Layout",
              default: "contentHeight",
              set(t) {
                switch (t) {
                  case "scroll":
                    this.setStyle({ overflow: "auto" });
                    break;
                  case "clip":
                    this.setStyle({ overflow: "hidden" });
                    break;
                  default:
                    this.removeStyle(["overflow"]);
                }
              },
            },
            reset: {
              type: "signal",
              displayName: "Reset",
              group: "Actions",
              valueChangedToTrue: function () {
                this.scheduleReset();
              },
            },
          },
          inputCss: {
            backgroundColor: {
              type: "color",
              displayName: "Background Color",
              group: "Style",
              default: "transparent",
              applyDefault: !1,
            },
          },
          outputs: {
            currentPageTitle: {
              type: "string",
              group: "General",
              displayName: "Current Page Title",
              getter: function () {
                return void 0 !== this._internal.currentPage
                  ? this._internal.currentPage.title
                  : void 0;
              },
            },
          },
          methods: {
            _registerRouter() {
              Kn.instance.registerRouter(this._internal.name, this);
            },
            _deregisterRouter() {
              Kn.instance.deregisterRouter(this._internal.name, this);
            },
            setPageOutputs(t) {
              for (const e in t)
                (this._internal[e] = t[e]), this.flagOutputDirty(e);
            },
            scheduleReset() {
              var t = this._internal;
              t.hasScheduledReset ||
                ((t.hasScheduledReset = !0),
                this.scheduleAfterInputsHaveUpdated(() => {
                  (t.hasScheduledReset = !1), this.reset();
                }));
            },
            createPageContainer() {
              const t = this.nodeScope.createPrimitiveNode("Group");
              return t.setStyle({ flex: "1 0 100%" }), t;
            },
            reset() {
              this._internal.asyncQueue.enqueue(this.resetAsync.bind(this));
            },
            scrollToTop() {
              const t = this.getDOMElement();
              t &&
                ((t.scrollTop = 0),
                Qn.instance.getProjectSettings().bodyScroll &&
                  t.scrollIntoView());
            },
            async resetAsync() {
              this.scrollToTop();
              var t,
                e = this.getChildren();
              for (var n in e) {
                var i = e[n];
                this.removeChild(i), this.nodeScope.deleteNode(i);
              }
              var o = {},
                r = this.matchPageFromUrl();
              if (
                (void 0 === r
                  ? (t =
                      void 0 !== this._internal.pages
                        ? this._internal.pages.startPage
                        : void 0)
                  : ((t = r.page.component),
                    (o = Object.assign({}, r.params, r.query))),
                void 0 === t)
              )
                return;
              var s = await this.nodeScope.createNode(t, Jn()),
                a = s.nodeScope.getNodesWithType("Page");
              if (void 0 === a || 1 !== a.length) return;
              (this._internal.currentPage =
                Kn.instance.getPageInfoForComponent(t)),
                (this._internal.currentParams = o),
                this.flagOutputDirty("currentPageTitle"),
                (document.title = this._internal.currentPage.title);
              var l = s.nodeScope.getNodesWithType("PageInputs");
              void 0 !== l &&
                l.length > 0 &&
                l.forEach((t) => {
                  t._setPageParams(o);
                });
              const u = this.createPageContainer();
              u.addChild(s), this.addChild(u);
            },
            getRelativeURL() {
              if (void 0 === this._internal.currentPage) return;
              var t = this._internal.currentPage.path;
              if (void 0 === t) return;
              var e = t.match(/{([^}]+)}/g);
              const n = this._internal.currentParams;
              var i = Object.assign({}, n);
              if (e)
                for (var o of e)
                  void 0 !== n[(s = o.replace(/[{}]/g, ""))] &&
                    ((t = t.replace(o, encodeURIComponent(i[s]))), delete i[s]);
              var r = [];
              for (var s in i)
                r.push({ name: s, value: encodeURIComponent(i[s]) });
              return (
                (t = ti(t)),
                void 0 !== this._internal.urlPath &&
                  (t = ti(this._internal.urlPath) + "/" + t),
                { path: t, query: r }
              );
            },
            getNavigationAbsoluteURL() {
              for (
                var t = this.parent;
                void 0 !== t && "function" != typeof t.getNavigationAbsoluteURL;

              )
                t = t.getVisualParentNode();
              if (void 0 === t) var e = { path: "", query: [] };
              else e = t.getNavigationAbsoluteURL();
              var n = this.getRelativeURL();
              return void 0 === n
                ? e
                : {
                    path: e.path + (e.path.endsWith("/") ? "" : "/") + n.path,
                    query: e.query.concat(n.query),
                  };
            },
            _getLocationPath: function () {
              var t = Qn.instance.getProjectSettings().navigationPathType;
              if (void 0 === t || "hash" === t) {
                var e = location.hash;
                return (
                  e &&
                    ("#" === e[0] && (e = e.substring(1)),
                    "/" === e[0] && (e = e.substring(1))),
                  e
                );
              }
              var n = location.pathname;
              return n && "/" === n[0] && (n = n.substring(1)), n;
            },
            _getSearchParams: function () {
              for (
                var t,
                  e = /\+/g,
                  n = /([^&=]+)=?([^&]*)/g,
                  i = function (t) {
                    return decodeURIComponent(t.replace(e, " "));
                  },
                  o = window.location.search.substring(1),
                  r = {};
                (t = n.exec(o));

              )
                r[i(t[1])] = i(t[2]);
              return r;
            },
            getNavigationRemainingPath() {
              return this._internal.remainingNavigationPath;
            },
            matchPageFromUrl() {
              for (
                var t = this.parent;
                void 0 !== t &&
                "function" != typeof t.getNavigationRemainingPath;

              )
                t = t.getVisualParentNode();
              if (void 0 === t) {
                var e = this._getLocationPath();
                "/" === e[0] && (e = e.substring(1));
                var n = e.split("/");
              } else n = t.getNavigationRemainingPath();
              if (void 0 === n) return;
              var i = this._getSearchParams();
              function o(t, e) {
                for (var n = {}, i = 0; i < e.length; i++) {
                  if (void 0 === t[i]) return;
                  var o = e[i];
                  if ("{" === o[0] && "}" === o[o.length - 1])
                    n[o.substring(1, o.length - 1)] = decodeURIComponent(t[i]);
                  else if (o !== t[i]) return;
                }
                return { params: n, remainingPathParts: t.splice(e.length) };
              }
              const r = Kn.instance.getPagesForRouter(this._internal.name);
              if (void 0 === r || 0 === r.length) return;
              let s,
                a = 0;
              for (var l of r) {
                var u = l.path;
                if (void 0 === u) continue;
                (u = ti(u)),
                  void 0 !== this._internal.urlPath &&
                    (u = ti(this._internal.urlPath) + "/" + u);
                const t = u.split("/");
                let e = o(n, t);
                e &&
                  a <= t.length &&
                  ((s = { match: e, pageInfo: l }), (a = t.length));
              }
              return s
                ? ((this._internal.remainingNavigationPath =
                    s.match.remainingPathParts),
                  { page: s.pageInfo, params: s.match.params, query: i })
                : void 0;
            },
            _updateUrlWithTopPage() {
              if (void 0 !== window.history) {
                var t,
                  e,
                  n = this.getNavigationAbsoluteURL(),
                  i = Qn.instance.getProjectSettings().navigationPathType;
                void 0 === i || "hash" === i ? (e = n.path) : (t = n.path);
                var o = n.query.map((t) => t.name + "=" + t.value),
                  r =
                    (void 0 !== t ? t : "") +
                    (o.length >= 1 ? "?" + o.join("&") : "") +
                    (void 0 !== e ? "#" + e : "");
                (this._internal.remainingNavigationPath = void 0),
                  window.history.pushState({}, "", r);
              }
            },
            navigate(t) {
              this._internal.asyncQueue.enqueue(
                this.navigateAsync.bind(this, t)
              );
            },
            async navigateAsync(t) {
              if (void 0 === t.target) return;
              const e = Kn.instance.getPageInfoForComponent(t.target);
              if (!e) return;
              this.scrollToTop();
              var n = this.getChildren();
              for (var i in n) {
                var o = n[i];
                this.removeChild(o), this.nodeScope.deleteNode(o);
              }
              const r = this.createPageContainer(),
                s = await this.nodeScope.createNode(t.target, Jn());
              (this._internal.currentPage = e),
                (this._internal.currentParams = t.params),
                this.flagOutputDirty("currentPageTitle"),
                (document.title = this._internal.currentPage.title);
              var a = s.nodeScope.getNodesWithType("PageInputs");
              void 0 !== a &&
                a.length > 0 &&
                a.forEach((e) => {
                  e._setPageParams(t.params);
                }),
                r.addChild(s),
                this.addChild(r),
                this._updateUrlWithTopPage(),
                t.hasNavigated && t.hasNavigated();
            },
            registerInputIfNeeded: function (t) {
              this.hasInput(t);
            },
          },
          setup(t, e) {
            t.editorConnection &&
              t.editorConnection.isRunningLocally() &&
              e.on("editorImportComplete", () => {
                e.on("nodeAdded.Router", function (t) {});
                for (const t of e.getNodesWithType("Router"));
              });
          },
        }),
        ni = {
          node: {
            name: "net.noodl.externallink",
            displayNodeName: "External Link",
            docs: "https://docs.noodl.net/nodes/navigation/external-link",
            category: "Navigation",
            inputs: {
              link: { type: "string", displayName: "Link" },
              openInNewTab: {
                type: "boolean",
                displayName: "Open In New Tab",
                default: !0,
              },
              do: {
                type: "signal",
                displayName: "Do",
                valueChangedToTrue() {
                  const t = this.getInputValue("openInNewTab"),
                    e = t ? "noopener,noreferrer" : "",
                    n = !0 === t || void 0 === t ? "_blank" : "_self";
                  window.open(this.getInputValue("link"), n, e);
                },
              },
            },
          },
        },
        ii = {};
      function oi(t, e, n) {
        t[e] || (t[e] = {});
        for (const i in n) t[e][i] = n[i];
      }
      const ri = function (t, e, n) {
          if (ii[t])
            (function (t, e) {
              for (var n in t)
                if (t.hasOwnProperty(n) && t[n] !== e[n]) return !1;
              for (var n in e)
                if (e.hasOwnProperty(n) && t[n] !== e[n]) return !1;
              return !0;
            })(e, ii[t].props) ||
              ((ii[t].style.innerHTML = n(t, e)),
              (ii[t].props = Object.assign({}, e)));
          else {
            var i = document.createElement("style");
            (i.innerHTML = n(t, e)),
              document.head.appendChild(i),
              (ii[t] = { style: i, props: Object.assign({}, e) });
          }
        },
        si = function (t, e) {
          (e = e || {}),
            (t.visualStates = [
              { name: "neutral", label: "Neutral" },
              { name: "hover", label: "Hover" },
              { name: "pressed", label: "Pressed" },
              { name: "focused", label: "Focused" },
              { name: "disabled", label: "Disabled" },
            ]),
            e.checked &&
              t.visualStates.splice(3, 0, {
                name: "checked",
                label: "Checked",
              }),
            (function (t, e) {
              oi(t, "inputs", {
                enabled: {
                  type: "boolean",
                  displayName: "Enabled",
                  group: "General",
                  default: !0,
                  set: function (t) {
                    const e = (t = !!t) !== this._internal.enabled;
                    (this.props.enabled = this._internal.enabled = t),
                      e &&
                        (this._updateVisualState(),
                        this.forceUpdate(),
                        this.flagOutputDirty("enabled"));
                  },
                },
              });
            })(t),
            (function (t, e) {
              oi(t, "inputProps", {
                blockTouch: {
                  index: 450,
                  displayName: "Block Pointer Events",
                  type: "boolean",
                  group: "Pointer Events",
                },
              });
            })(t),
            (t.methods._updateVisualState = function () {
              const t = [];
              this.outputPropValues.hoverState && t.push("hover"),
                this.outputPropValues.pressedState && t.push("pressed"),
                this.outputPropValues.focusState && t.push("focused"),
                e.checked && this._internal.checked && t.push("checked"),
                this._internal.enabled || t.push("disabled"),
                this.setVisualStates(t);
            }),
            (function (t, e) {
              oi(t, "outputProps", {
                focusState: {
                  displayName: "Focused",
                  group: "States",
                  type: "boolean",
                  props: {
                    onFocus() {
                      (this.outputPropValues.focusState = !0),
                        this.flagOutputDirty("focusState"),
                        this._updateVisualState();
                    },
                    onBlur() {
                      (this.outputPropValues.focusState = !1),
                        this.flagOutputDirty("focusState"),
                        this._updateVisualState();
                    },
                  },
                },
                onFocus: {
                  displayName: "Focused",
                  group: "Focus Events",
                  type: "signal",
                  props: {
                    onFocus() {
                      this.sendSignalOnOutput("onFocus");
                    },
                  },
                },
                onBlur: {
                  displayName: "Blurred",
                  group: "Focus Events",
                  type: "signal",
                  props: {
                    onBlur() {
                      this.sendSignalOnOutput("onBlur");
                    },
                  },
                },
                hoverState: {
                  displayName: "Hover",
                  group: "States",
                  type: "boolean",
                  props: {
                    onMouseOver() {
                      (this.outputPropValues.hoverState = !0),
                        this.flagOutputDirty("hoverState"),
                        this._updateVisualState();
                    },
                    onMouseLeave() {
                      (this.outputPropValues.hoverState = !1),
                        this.flagOutputDirty("hoverState"),
                        this._updateVisualState();
                    },
                  },
                },
                hoverStart: {
                  displayName: "Hover Start",
                  group: "Pointer Events",
                  type: "signal",
                  props: {
                    onMouseOver() {
                      this.sendSignalOnOutput("hoverStart");
                    },
                  },
                },
                hoverEnd: {
                  displayName: "Hover End",
                  group: "Pointer Events",
                  type: "signal",
                  props: {
                    onMouseLeave() {
                      this.sendSignalOnOutput("hoverEnd");
                    },
                  },
                },
                pressedState: {
                  displayName: "Pressed",
                  group: "States",
                  type: "boolean",
                  props: {
                    onMouseDown() {
                      (this.outputPropValues.pressedState = !0),
                        this.flagOutputDirty("pressedState"),
                        this._updateVisualState();
                    },
                    onTouchStart() {
                      (this.outputPropValues.pressedState = !0),
                        this.flagOutputDirty("pressedState"),
                        this._updateVisualState();
                    },
                    onMouseUp() {
                      (this.outputPropValues.pressedState = !1),
                        this.flagOutputDirty("pressedState"),
                        this._updateVisualState();
                    },
                    onTouchEnd() {
                      (this.outputPropValues.pressedState = !1),
                        this.flagOutputDirty("pressedState"),
                        this._updateVisualState();
                    },
                    onTouchCancel() {
                      (this.outputPropValues.pressedState = !1),
                        this.flagOutputDirty("pressedState"),
                        this._updateVisualState();
                    },
                    onMouseLeave() {
                      (this.outputPropValues.pressedState = !1),
                        this.flagOutputDirty("pressedState"),
                        this._updateVisualState();
                    },
                  },
                },
                pointerDown: {
                  displayName: "Pointer Down",
                  group: "Pointer Events",
                  type: "signal",
                  props: {
                    onMouseDown() {
                      this.sendSignalOnOutput("pointerDown");
                    },
                    onTouchStart() {
                      this.sendSignalOnOutput("pointerDown");
                    },
                  },
                },
                pointerUp: {
                  displayName: "Pointer Up",
                  group: "Pointer Events",
                  type: "signal",
                  props: {
                    onMouseUp() {
                      this.sendSignalOnOutput("pointerUp");
                    },
                    onTouchEnd() {
                      this.sendSignalOnOutput("pointerUp");
                    },
                    onTouchCancel() {
                      this.sendSignalOnOutput("pointerUp");
                    },
                  },
                },
              });
            })(t),
            (function (t, e) {
              oi(t, "outputs", {
                enabled: {
                  type: "boolean",
                  displayName: "Enabled",
                  group: "States",
                  getter: function () {
                    return this._internal.enabled;
                  },
                },
              });
            })(t);
          const n = t.initialize;
          t.initialize = function () {
            n && n.call(this),
              (this.props.enabled = this._internal.enabled = !0),
              (this.outputPropValues.hoverState =
                this.outputPropValues.focusState =
                this.outputPropValues.pressedState =
                  !1);
          };
        },
        ai = function (t) {
          return Object.assign(
            {},
            { onFocus: t.onFocus, onBlur: t.onBlur },
            J(t)
          );
        };
      function li() {
        return (li =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function ui(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function pi(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function ci(t) {
        let e = (function (t) {
          for (var e = 1; e < arguments.length; e++) {
            var n = null != arguments[e] ? arguments[e] : {};
            e % 2
              ? ui(Object(n), !0).forEach(function (e) {
                  pi(t, e, n[e]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
              : ui(Object(n)).forEach(function (e) {
                  Object.defineProperty(
                    t,
                    e,
                    Object.getOwnPropertyDescriptor(n, e)
                  );
                });
          }
          return t;
        })({}, t.style);
        function n() {
          const e = {};
          return (
            t.useLabel &&
              ("left" === t.iconPlacement || void 0 === t.iconPlacement
                ? (e.marginRight = t.iconSpacing)
                : (e.marginLeft = t.iconSpacing)),
            "image" === t.iconSourceType && void 0 !== t.iconImageSource
              ? ((e.width = t.iconSize),
                (e.height = t.iconSize),
                React.createElement("img", {
                  src: t.iconImageSource,
                  style: e,
                }))
              : "icon" === t.iconSourceType && void 0 !== t.iconIconSource
              ? ((e.fontSize = t.iconSize),
                (e.color = t.iconColor),
                React.createElement(
                  "span",
                  { className: t.iconIconSource.class, style: e },
                  t.iconIconSource.code
                ))
              : null
          );
        }
        O.size(e, t),
          O.align(e, t),
          void 0 !== t.textStyle && (e = Object.assign({}, t.textStyle, e));
        let i = "ndl-controls-button";
        t.className && (i = i + " " + t.className);
        let o = null;
        return (
          t.useLabel && t.useIcon
            ? (o = React.createElement(
                React.Fragment,
                null,
                "left" === t.iconPlacement ? n() : null,
                t.label,
                "right" === t.iconPlacement ? n() : null
              ))
            : t.useLabel
            ? (o = t.label)
            : t.useIcon && (o = n()),
          React.createElement(
            "button",
            li({ className: i, disabled: !t.enabled }, ai(t), {
              type: t.buttonType,
              style: e,
              onClick: t.onClick,
            }),
            o,
            t.children
          )
        );
      }
      const di = {
        name: "net.noodl.controls.button",
        displayName: "Button",
        docs: "https://docs.noodl.net/nodes/ui-controls/button",
        allowChildren: !0,
        noodlNodeAsProp: !0,
        connectionPanel: {
          groupPriority: [
            "General",
            "Style",
            "Actions",
            "Events",
            "States",
            "Mounted",
            "Label",
            "Label Text Style",
            "Hover Events",
            "Pointer Events",
            "Focus Events",
          ],
        },
        initialize() {
          this.props.layout = "row";
        },
        getReactComponent: () => ci,
        inputCss: {
          backgroundColor: {
            index: 100,
            displayName: "Background Color",
            group: "Style",
            type: "color",
            default: "#000000",
            allowVisualStates: !0,
          },
        },
        outputProps: {
          onClick: { displayName: "Click", group: "Events", type: "signal" },
        },
      };
      v.addDimensions(di, {
        defaultSizeMode: "contentSize",
        contentLabel: "Content",
      }),
        v.addTextStyleInputs(di),
        v.addAlignInputs(di),
        v.addTransformInputs(di),
        v.addPaddingInputs(di, {
          defaults: {
            paddingTop: 5,
            paddingRight: 20,
            paddingBottom: 5,
            paddingLeft: 20,
          },
        }),
        v.addMarginInputs(di),
        v.addLabelInputs(di, { defaults: { useLabel: !0 } }),
        v.addIconInputs(di, {
          enableIconPlacement: !0,
          defaults: { useIcon: !1 },
        }),
        v.addSharedVisualInputs(di),
        v.addBorderInputs(di),
        v.addShadowInputs(di),
        si(di);
      const hi = W(di);
      var fi = n(5821),
        gi = n.n(fi);
      function mi() {
        return (mi =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function yi(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function vi(t) {
        for (var e = 1; e < arguments.length; e++) {
          var n = null != arguments[e] ? arguments[e] : {};
          e % 2
            ? yi(Object(n), !0).forEach(function (e) {
                bi(t, e, n[e]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
            : yi(Object(n)).forEach(function (e) {
                Object.defineProperty(
                  t,
                  e,
                  Object.getOwnPropertyDescriptor(n, e)
                );
              });
        }
        return t;
      }
      function bi(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function Si(e) {
        const [n, i] = (0, t.useState)(e.checked);
        (0, t.useEffect)(() => {
          i(!!e.checked);
        }, []),
          (0, t.useEffect)(() => {
            i(!!e.checked);
          }, [e.checked]);
        let o = vi({}, e.style);
        "none" === e.parentLayout && (o.position = "absolute"), O.align(o, e);
        const r = {
            id: e.id,
            className: e.className,
            disabled: !e.enabled,
            className: "ndl-controls-checkbox-2",
            style: {
              width: e.styles.checkbox.width,
              height: e.styles.checkbox.height,
            },
          },
          s = vi(
            {
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              flexShrink: 0,
              position: "relative",
            },
            e.styles.checkbox
          );
        e.useLabel || (Object.assign(r, ai(e)), Object.assign(s, o));
        const a = React.createElement(
          "div",
          {
            className: "ndl-controls-pointer",
            style: s,
            "noodl-style-tag": "checkbox",
          },
          e.useIcon
            ? (function () {
                if (
                  "image" === e.iconSourceType &&
                  void 0 !== e.iconImageSource
                )
                  return React.createElement("img", {
                    src: e.iconImageSource,
                    style: {
                      width: e.iconSize,
                      height: e.iconSize,
                      position: "absolute",
                    },
                  });
                if (
                  "icon" === e.iconSourceType &&
                  void 0 !== e.iconIconSource
                ) {
                  const t = {
                    fontSize: e.iconSize,
                    color: e.iconColor,
                    position: "absolute",
                  };
                  return React.createElement(
                    "span",
                    { className: e.iconIconSource.class, style: t },
                    e.iconIconSource.code
                  );
                }
                return null;
              })()
            : null,
          React.createElement(
            "input",
            mi({ type: "checkbox" }, r, {
              checked: n,
              onChange: (t) => {
                i(t.target.checked),
                  e.checkedChanged && e.checkedChanged(t.target.checked);
              },
            })
          )
        );
        if (e.useLabel) {
          const t = vi(
            vi({ marginLeft: e.labelSpacing }, e.labeltextStyle),
            e.styles.label
          );
          return React.createElement(
            "div",
            mi(
              { style: vi({ display: "flex", alignItems: "center" }, o) },
              ai(e)
            ),
            a,
            React.createElement(
              "label",
              {
                className: "ndl-controls-pointer",
                style: t,
                for: e.id,
                "noodl-style-tag": "label",
              },
              e.label
            )
          );
        }
        return a;
      }
      const wi = {
        name: "net.noodl.controls.checkbox",
        displayName: "Checkbox",
        docs: "https://docs.noodl.net/nodes/ui-controls/checkbox",
        allowChildren: !1,
        noodlNodeAsProp: !0,
        connectionPanel: {
          groupPriority: [
            "General",
            "Style",
            "Actions",
            "Events",
            "States",
            "Mounted",
            "Label",
            "Label Text Style",
            "Hover Events",
            "Pointer Events",
            "Focus Events",
          ],
        },
        initialize() {
          (this.props.sizeMode = "explicit"),
            (this.props.id = "input-" + gi()()),
            (this.props.checked = this._internal.checked = !1),
            (this.props.checkedChanged = (t) => {
              const e = this._internal.checked !== t;
              (this._internal.checked = t),
                e &&
                  (this.flagOutputDirty("checked"),
                  this.sendSignalOnOutput("onChange"),
                  this._updateVisualState());
            });
        },
        getReactComponent: () => Si,
        inputs: {
          checked: {
            type: "boolean",
            displayName: "Checked",
            group: "General",
            default: !1,
            index: 100,
            set: function (t) {
              const e = (t = !!t) !== this._internal.checked;
              (this.props.checked = this._internal.checked = t),
                e &&
                  (this.forceUpdate(),
                  this.flagOutputDirty("checked"),
                  this._updateVisualState());
            },
          },
        },
        inputCss: {
          backgroundColor: {
            index: 201,
            displayName: "Background Color",
            group: "Style",
            type: "color",
            default: "transparent",
            applyDefault: !1,
            allowVisualStates: !0,
            styleTag: "checkbox",
          },
          width: {
            index: 11,
            group: "Dimensions",
            displayName: "Width",
            type: {
              name: "number",
              units: ["px", "vw", "vh"],
              defaultUnit: "px",
            },
            default: 32,
            allowVisualStates: !0,
            styleTag: "checkbox",
          },
          height: {
            index: 12,
            group: "Dimensions",
            displayName: "Height",
            type: {
              name: "number",
              units: ["px", "vw", "vh"],
              defaultUnit: "px",
            },
            default: 32,
            allowVisualStates: !0,
            styleTag: "checkbox",
          },
        },
        outputs: {
          checked: {
            type: "boolean",
            displayName: "Checked",
            group: "States",
            getter: function () {
              return this._internal.checked;
            },
          },
          onChange: { displayName: "Changed", group: "Events", type: "signal" },
        },
      };
      v.addAlignInputs(wi),
        v.addTransformInputs(wi),
        v.addMarginInputs(wi),
        v.addPaddingInputs(wi),
        v.addIconInputs(wi),
        v.addLabelInputs(wi, { enableSpacing: !0, styleTag: "label" }),
        v.addSharedVisualInputs(wi),
        v.addBorderInputs(wi, {
          defaults: {
            borderStyle: "solid",
            borderWidth: 2,
            borderColor: "#000000",
            borderRadius: 3,
          },
          styleTag: "checkbox",
        }),
        v.addShadowInputs(wi, { styleTag: "checkbox" }),
        si(wi, { checked: !0 });
      const Oi = W(wi),
        _i = e().createContext();
      function Ni(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function Ci(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function Ii(e) {
        const [n, i] = (0, t.useState)(e.value),
          o = {
            selected: n,
            name: e.name,
            checkedChanged: (t) => {
              i(t), e.valueChanged && e.valueChanged(t);
            },
          };
        (0, t.useEffect)(() => {
          i(e.value);
        }, [e.value]);
        var r = (function (t) {
          for (var e = 1; e < arguments.length; e++) {
            var n = null != arguments[e] ? arguments[e] : {};
            e % 2
              ? Ni(Object(n), !0).forEach(function (e) {
                  Ci(t, e, n[e]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
              : Ni(Object(n)).forEach(function (e) {
                  Object.defineProperty(
                    t,
                    e,
                    Object.getOwnPropertyDescriptor(n, e)
                  );
                });
          }
          return t;
        })({}, e.style);
        O.size(r, e), O.align(r, e);
        let s = "ndl-controls-radiobuttongroup";
        return (
          e.className && (s = s + " " + e.className),
          React.createElement(
            _i.Provider,
            { value: o },
            React.createElement("div", { className: s, style: r }, e.children)
          )
        );
      }
      var xi = {
        name: "Radio Button Group",
        displayName: "Radio Button Group",
        docs: "https://docs.noodl.net/nodes/ui-controls/radio-button-group",
        allowChildren: !0,
        noodlNodeAsProp: !0,
        useVariants: !1,
        connectionPanel: {
          groupPriority: [
            "General",
            "Style",
            "Actions",
            "Events",
            "Mounted",
            "States",
          ],
        },
        initialize() {
          (this.props.name = "radio-" + gi()()),
            (this.props.valueChanged = (t) => {
              const e = this._internal.value !== t;
              (this._internal.value = t),
                e &&
                  (this.flagOutputDirty("value"),
                  this.sendSignalOnOutput("onChange"));
            });
        },
        getReactComponent: () => Ii,
        defaultCss: {
          display: "flex",
          position: "relative",
          flexDirection: "column",
        },
        inputs: {
          flexDirection: {
            index: 11,
            displayName: "Layout",
            group: "Layout",
            type: {
              name: "enum",
              enums: [
                { label: "Vertical", value: "column" },
                { label: "Horizontal", value: "row" },
              ],
            },
            default: "column",
            set(t) {
              (this.props.layout = t),
                "none" !== t
                  ? this.setStyle({ flexDirection: t })
                  : this.removeStyle(["flexDirection"]),
                this.context.editorConnection &&
                  ("none" === t || Q.includes(t)
                    ? this.context.editorConnection.clearWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "layout-warning"
                      )
                    : this.context.editorConnection.sendWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "layout-warning",
                        {
                          message:
                            "Invalid Layout value has to be a valid flex-direction value.",
                        }
                      )),
                this.forceUpdate();
            },
          },
          value: {
            index: 20,
            type: "string",
            displayName: "Value",
            group: "General",
            set: function (t) {
              if (
                ("string" != typeof t &&
                  void 0 !== t.toString &&
                  (t = t.toString()),
                "string" != typeof t)
              )
                return;
              const e = t !== this._internal.value;
              (this.props.value = this._internal.value = t),
                e && (this.forceUpdate(), this.flagOutputDirty("value"));
            },
          },
        },
        outputs: {
          value: {
            type: "string",
            displayName: "Value",
            group: "States",
            getter: function () {
              return this._internal.value;
            },
          },
          onChange: { type: "signal", displayName: "Changed", group: "Events" },
        },
        inputProps: {},
        outputProps: {},
      };
      v.addDimensions(xi, {
        defaultSizeMode: "contentSize",
        contentLabel: "Content",
      }),
        v.addAlignInputs(xi),
        v.addTransformInputs(xi),
        v.addMarginInputs(xi),
        v.addPaddingInputs(xi),
        v.addSharedVisualInputs(xi);
      const Pi = (xi = W(xi));
      function Ei() {
        return (Ei =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function Ti(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function Di(t) {
        for (var e = 1; e < arguments.length; e++) {
          var n = null != arguments[e] ? arguments[e] : {};
          e % 2
            ? Ti(Object(n), !0).forEach(function (e) {
                ki(t, e, n[e]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
            : Ti(Object(n)).forEach(function (e) {
                Object.defineProperty(
                  t,
                  e,
                  Object.getOwnPropertyDescriptor(n, e)
                );
              });
        }
        return t;
      }
      function ki(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function Ri(e) {
        const n = (0, t.useContext)(_i);
        let i = Di({}, e.style);
        "none" === e.parentLayout && (i.position = "absolute"),
          O.align(i, e),
          e.checkedChanged && e.checkedChanged(!!n && n.selected === e.value);
        const o = {
            id: e.id,
            className: e.className,
            disabled: !e.enabled,
            className: "ndl-controls-radio-2",
            style: {
              width: e.styles.radio.width,
              height: e.styles.radio.height,
            },
          },
          r = Di(
            {
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              position: "relative",
            },
            e.styles.radio
          );
        e.useLabel || (Object.assign(o, ai(e)), Object.assign(r, i));
        const s = {
            left: e.fillSpacing,
            right: e.fillSpacing,
            top: e.fillSpacing,
            bottom: e.fillSpacing,
            backgroundColor: e.styles.fill.backgroundColor,
            borderRadius: "inherit",
            position: "absolute",
          },
          a = React.createElement(
            "div",
            {
              className: "ndl-controls-pointer",
              style: r,
              "noodl-style-tag": "radio",
            },
            React.createElement("div", { style: s, "noodl-style-tag": "fill" }),
            e.useIcon
              ? (function () {
                  if (
                    "image" === e.iconSourceType &&
                    void 0 !== e.iconImageSource
                  )
                    return React.createElement("img", {
                      src: e.iconImageSource,
                      style: { width: e.iconSize, height: e.iconSize },
                    });
                  if (
                    "icon" === e.iconSourceType &&
                    void 0 !== e.iconIconSource
                  ) {
                    const t = { fontSize: e.iconSize, color: e.iconColor };
                    return React.createElement(
                      "span",
                      {
                        className: `ndl-controls-abs-center ${e.iconIconSource.class}`,
                        style: t,
                      },
                      e.iconIconSource.code
                    );
                  }
                  return null;
                })()
              : null,
            React.createElement(
              "input",
              Ei({ type: "radio", name: n ? n.name : void 0 }, o, {
                checked: !!n && n.selected === e.value,
                onChange: (t) => {
                  n && n.checkedChanged && n.checkedChanged(e.value);
                },
              })
            )
          );
        if (e.useLabel) {
          const t = Di(
            Di({ marginLeft: e.labelSpacing }, e.labeltextStyle),
            e.styles.label
          );
          return React.createElement(
            "div",
            Ei(
              { style: Di({ display: "flex", alignItems: "center" }, i) },
              ai(e)
            ),
            a,
            React.createElement(
              "label",
              {
                className: "ndl-controls-pointer",
                style: t,
                for: e.id,
                "noodl-style-tag": "label",
              },
              e.label
            )
          );
        }
        return a;
      }
      const Ai = {
        name: "net.noodl.controls.radiobutton",
        displayName: "Radio Button",
        docs: "https://docs.noodl.net/nodes/ui-controls/radio-button",
        allowChildren: !1,
        noodlNodeAsProp: !0,
        connectionPanel: {
          groupPriority: [
            "General",
            "Style",
            "Fill Style",
            "Actions",
            "Events",
            "States",
            "Mounted",
            "Label",
            "Label Text Style",
            "Hover Events",
            "Pointer Events",
            "Focus Events",
          ],
        },
        initialize() {
          (this.props.sizeMode = "explicit"),
            (this.props.id = "input-" + gi()()),
            (this._internal.checked = !1),
            (this.props.checkedChanged = (t) => {
              const e = this._internal.checked !== t;
              (this._internal.checked = t),
                e &&
                  (this.flagOutputDirty("checked"), this._updateVisualState());
            }),
            (this.props.styles.fill = {});
        },
        getReactComponent: () => Ri,
        inputs: {
          fillColor: {
            index: 19,
            displayName: "Fill Color",
            group: "Fill Style",
            type: "color",
            allowVisualStates: !0,
            styleTag: "fill",
            set(t) {
              this.setStyle({ backgroundColor: t }, "fill");
            },
          },
        },
        inputProps: {
          value: {
            type: "string",
            displayName: "Value",
            group: "General",
            index: 100,
          },
          fillSpacing: {
            displayName: "Fill Spacing",
            group: "Fill Style",
            type: {
              name: "number",
              units: ["px", "vw", "vh"],
              defaultUnit: "px",
            },
            allowVisualStates: !0,
            default: 2,
          },
        },
        inputCss: {
          width: {
            index: 11,
            group: "Dimensions",
            displayName: "Width",
            type: {
              name: "number",
              units: ["px", "vw", "vh"],
              defaultUnit: "px",
            },
            default: 32,
            allowVisualStates: !0,
            styleTag: "radio",
          },
          height: {
            index: 12,
            group: "Dimensions",
            displayName: "Height",
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            default: 32,
            allowVisualStates: !0,
            styleTag: "radio",
          },
          backgroundColor: {
            index: 201,
            displayName: "Background Color",
            group: "Style",
            type: "color",
            allowVisualStates: !0,
            styleTag: "radio",
            default: "transparent",
            applyDefault: !1,
          },
        },
        outputs: {
          checked: {
            type: "boolean",
            displayName: "Checked",
            group: "States",
            get() {
              return this._internal.checked;
            },
          },
        },
      };
      v.addAlignInputs(Ai),
        v.addTransformInputs(Ai),
        v.addMarginInputs(Ai),
        v.addPaddingInputs(Ai),
        v.addIconInputs(Ai),
        v.addLabelInputs(Ai, { enableSpacing: !0, styleTag: "label" }),
        v.addSharedVisualInputs(Ai),
        v.addBorderInputs(Ai, {
          defaults: { borderStyle: "solid", borderWidth: 2, borderRadius: 16 },
          styleTag: "radio",
        }),
        v.addShadowInputs(Ai, { styleTag: "radio" }),
        si(Ai, { checked: !0 });
      const ji = W(Ai);
      function Mi() {
        return (Mi =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function Fi(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function Vi(t) {
        for (var e = 1; e < arguments.length; e++) {
          var n = null != arguments[e] ? arguments[e] : {};
          e % 2
            ? Fi(Object(n), !0).forEach(function (e) {
                Li(t, e, n[e]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
            : Fi(Object(n)).forEach(function (e) {
                Object.defineProperty(
                  t,
                  e,
                  Object.getOwnPropertyDescriptor(n, e)
                );
              });
        }
        return t;
      }
      function Li(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function Ui(e) {
        const [n, i] = (0, t.useState)(e.value);
        (0, t.useEffect)(() => {
          i(e.value);
        }, []),
          (0, t.useEffect)(() => {
            i(e.value);
          }, [e.value]);
        var o = Vi({}, e.style);
        O.size(o, e),
          O.align(o, e),
          void 0 !== e.textStyle && (o = Object.assign({}, e.textStyle, o));
        const r =
            void 0 === n || "" === n || void 0 === e.items
              ? -1
              : e.items.findIndex((t) => t.Value === n),
          { height: s } = o,
          a = (function (t, e) {
            if (null == t) return {};
            var n,
              i,
              o = (function (t, e) {
                if (null == t) return {};
                var n,
                  i,
                  o = {},
                  r = Object.keys(t);
                for (i = 0; i < r.length; i++)
                  (n = r[i]), e.indexOf(n) >= 0 || (o[n] = t[n]);
                return o;
              })(t, e);
            if (Object.getOwnPropertySymbols) {
              var r = Object.getOwnPropertySymbols(t);
              for (i = 0; i < r.length; i++)
                (n = r[i]),
                  e.indexOf(n) >= 0 ||
                    (Object.prototype.propertyIsEnumerable.call(t, n) &&
                      (o[n] = t[n]));
            }
            return o;
          })(o, ["height"]);
        function l() {
          if ("image" === e.iconSourceType && void 0 !== e.iconImageSource)
            return React.createElement("img", {
              src: e.iconImageSource,
              style: { width: e.iconSize, height: e.iconSize },
            });
          if ("icon" === e.iconSourceType && void 0 !== e.iconIconSource) {
            const t = { fontSize: e.iconSize, color: e.iconColor };
            return (
              "left" === e.iconPlacement || void 0 === e.iconPlacement
                ? (t.marginRight = e.iconSpacing)
                : (t.marginLeft = e.iconSpacing),
              React.createElement(
                "span",
                { className: e.iconIconSource.class, style: t },
                e.iconIconSource.code
              )
            );
          }
          return null;
        }
        const u = {
            id: e.id,
            className: e.className,
            style: {
              width: "100%",
              height: "100%",
              opacity: 0,
              position: "absolute",
              textTransform: "inherit",
            },
            onClick: e.onClick,
          },
          p = Vi(
            { display: "flex", alignItems: "center" },
            e.styles.inputWrapper
          ),
          c = s && "%" === s[s.length - 1];
        e.useLabel
          ? c
            ? (p.flexGrow = 1)
            : (p.height = s)
          : (Object.assign(p, a), (p.height = s));
        let d = [];
        e.items &&
          (d = e.items.map((t) =>
            React.createElement(
              "option",
              {
                value: t.Value,
                disabled: "true" === t.Disabled || !0 === t.Disabled || void 0,
                selected: t.Value === n,
              },
              t.Label
            )
          ));
        let h = null;
        r >= 0 && r < e.items.items.length
          ? (h = React.createElement("span", null, e.items.items[r].Label))
          : e.placeholder &&
            (h = React.createElement(
              "span",
              { style: { opacity: e.placeholderOpacity } },
              e.placeholder
            ));
        const f = React.createElement(
          "div",
          {
            className: "ndl-controls-pointer",
            style: p,
            "noodl-style-tag": "inputWrapper",
          },
          e.useIcon && "left" === e.iconPlacement ? l() : null,
          React.createElement(
            "div",
            {
              style: {
                width: "100%",
                height: "100%",
                alignItems: "center",
                display: "flex",
              },
            },
            h
          ),
          e.useIcon && "right" === e.iconPlacement ? l() : null,
          React.createElement(
            "select",
            Mi(
              {
                ref: (t) => {
                  t && (t.selectedIndex = r);
                },
              },
              u,
              { disabled: !e.enabled, value: n },
              ai(e),
              {
                onChange: (t) => {
                  i(t.target.value),
                    e.valueChanged && e.valueChanged(t.target.value);
                },
              }
            ),
            d
          )
        );
        if (e.useLabel) {
          const t = Vi(
            Vi({}, a),
            {},
            { display: "flex", flexDirection: "column" }
          );
          return (
            c && (t.height = s),
            React.createElement(
              "div",
              { style: t },
              React.createElement(
                "label",
                {
                  for: e.id,
                  style: Vi(
                    Vi(Vi({}, e.labeltextStyle), e.styles.label),
                    {},
                    { marginBottom: e.labelSpacing }
                  ),
                  "noodl-style-tag": "label",
                },
                e.label
              ),
              f
            )
          );
        }
        return f;
      }
      const Bi = {
        name: "net.noodl.controls.options",
        displayName: "Dropdown",
        docs: "https://docs.noodl.net/nodes/ui-controls/dropdown",
        allowChildren: !1,
        noodlNodeAsProp: !0,
        connectionPanel: {
          groupPriority: [
            "General",
            "Style",
            "Actions",
            "Events",
            "States",
            "Mounted",
            "Text Style",
            "Label",
            "Label Text Style",
            "Hover Events",
            "Pointer Events",
            "Focus Events",
          ],
        },
        initialize: function () {
          (this._itemsChanged = () => {
            this.forceUpdate();
          }),
            (this.props.id = "input-" + gi()()),
            (this.props.valueChanged = (t) => {
              const e = this._internal.value !== t;
              (this._internal.value = t),
                e &&
                  (this.flagOutputDirty("value"),
                  this.sendSignalOnOutput("onChange"));
            });
        },
        getReactComponent: () => Ui,
        inputs: {
          items: {
            type: "array",
            displayName: "Items",
            group: "General",
            set: function (t) {
              this._internal.items !== t &&
                void 0 !== this._internal.items &&
                this._internal.items.off("change", this._itemsChanged),
                (this._internal.items = t),
                this._internal.items.on("change", this._itemsChanged),
                (this.props.items = this._internal.items);
            },
          },
          value: {
            type: "string",
            displayName: "Value",
            group: "General",
            set: function (t) {
              if (void 0 !== t && "string" != typeof t) {
                if (void 0 === t.toString) return;
                t = t.toString();
              }
              const e = t !== this._internal.value;
              (this.props.value = this._internal.value = t),
                e && (this.forceUpdate(), this.flagOutputDirty("value"));
            },
          },
        },
        inputProps: {
          placeholder: {
            displayName: "Placeholder",
            type: "string",
            group: "Placeholder",
          },
          placeholderOpacity: {
            group: "Placeholder",
            displayName: "Placeholder opacity",
            type: "number",
            default: 0.5,
          },
        },
        outputs: {
          value: {
            type: "string",
            displayName: "Value",
            group: "States",
            getter: function () {
              return this._internal.value;
            },
          },
          onChange: { type: "signal", displayName: "Changed", group: "Events" },
        },
        inputCss: {
          backgroundColor: {
            index: 100,
            displayName: "Background Color",
            group: "Style",
            type: "color",
            default: "transparent",
            styleTag: "inputWrapper",
          },
        },
      };
      v.addDimensions(Bi, {
        defaultSizeMode: "contentSize",
        contentLabel: "Content",
      }),
        v.addAlignInputs(Bi),
        v.addTextStyleInputs(Bi),
        v.addTransformInputs(Bi),
        v.addPaddingInputs(Bi, { styleTag: "inputWrapper" }),
        v.addMarginInputs(Bi),
        v.addIconInputs(Bi, {
          enableIconPlacement: !0,
          defaults: { useIcon: !1, iconColor: "#000000" },
        }),
        v.addLabelInputs(Bi, { enableSpacing: !0, styleTag: "label" }),
        v.addSharedVisualInputs(Bi),
        v.addBorderInputs(Bi, {
          defaults: {
            borderStyle: "solid",
            borderWidth: 2,
            borderColor: "#000000",
            borderRadius: 5,
          },
          styleTag: "inputWrapper",
        }),
        v.addShadowInputs(Bi, { styleTag: "inputWrapper" }),
        si(Bi);
      const Wi = W(Bi);
      function zi() {
        return (zi =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function Hi(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function qi(t) {
        for (var e = 1; e < arguments.length; e++) {
          var n = null != arguments[e] ? arguments[e] : {};
          e % 2
            ? Hi(Object(n), !0).forEach(function (e) {
                $i(t, e, n[e]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
            : Hi(Object(n)).forEach(function (e) {
                Object.defineProperty(
                  t,
                  e,
                  Object.getOwnPropertyDescriptor(n, e)
                );
              });
        }
        return t;
      }
      function $i(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function Yi(t, e) {
        return `\n    .${t}::-webkit-slider-thumb {\n        width: ${e.thumbWidth};\n    }\n    `;
      }
      function Xi(t, e, n) {
        function i(t, i) {
          const o = `${e}Border${i}Color`,
            r = `${e}Border${i}Style`,
            s = n[`${e}Border${i}Width`] || n[`${e}BorderWidth`];
          void 0 !== s && (t[`border${i}Width`] = s);
          const a = (t[o] = n[o] || n[`${e}BorderColor`]);
          void 0 !== a && (t[`border${i}Color`] = a);
          const l = n[r] || n[`${e}BorderStyle`];
          void 0 !== l && (t[`border${i}Style`] = l);
        }
        i(t, "Top"), i(t, "Right"), i(t, "Bottom"), i(t, "Left");
      }
      function Gi(t, e, n) {
        const i = n[`${e}BorderRadius`],
          o = n[`${e}BorderTopLeftRadius`] || i,
          r = n[`${e}BorderTopRightRadius`] || i,
          s = n[`${e}BorderBottomRightRadius`] || i,
          a = n[`${e}BorderBottomLeftRadius`] || i;
        t.borderRadius = `${o} ${r} ${s} ${a}`;
      }
      function Ji(t, e, n) {
        if (!n[`${e}BoxShadowEnabled`]) return;
        const i = n[`${e}BoxShadowInset`],
          o = n[`${e}BoxShadowOffsetX`],
          r = n[`${e}BoxShadowOffsetY`],
          s = n[`${e}BoxShadowBlurRadius`],
          a = n[`${e}BoxShadowSpreadRadius`],
          l = n[`${e}BoxShadowColor`];
        t.boxShadow = `${i ? "inset " : ""}${o} ${r} ${s} ${a} ${l}`;
      }
      function Qi(t) {
        return t && "x" === t[t.length - 1];
      }
      function Ki(e) {
        const [n, i] = (0, t.useState)(e.value);
        function o(t) {
          i(t), e.valueChanged(t);
        }
        (0, t.useEffect)(() => {
          o(e.value);
        }, [e.value]);
        var r = qi({}, e.style);
        O.size(r, e), O.align(r, e);
        const s = "ndl-controls-range-" + e._nodeId;
        ri(s, e, Yi);
        const a = `ndl-controls-range2 ${s} ${e.className ? e.className : ""}`,
          l = {
            id: e.id,
            style: { width: "100%", opacity: 0, position: "absolute" },
            onClick: e.onClick,
            min: e.min,
            max: e.max,
          };
        if ((e.step && (l.step = e.step), Qi(e.thumbHeight)))
          if (Qi(e.trackHeight)) {
            const t = Number(e.thumbHeight.slice(0, -2)),
              n = Number(e.trackHeight.slice(0, -2));
            l.style.height = Math.max(t, n) + "px";
          } else l.style.height = e.thumbHeight;
        else l.style.height = e.trackHeight;
        const u = qi({ display: "flex", alignItems: "center" }, r),
          p = (n - e.min) / (e.max - e.min),
          c = {
            position: "absolute",
            width: "100%",
            height: e.trackHeight,
            background: `linear-gradient(to right, ${e.trackActiveColor} 0%, ${
              e.trackActiveColor
            } ${100 * p}%, ${e.trackColor} ${100 * p}%, ${e.trackColor} 100%)`,
          };
        Xi(c, "track", e), Gi(c, "track", e), Ji(c, "track", e);
        const d = {
          position: "absolute",
          left: "calc((100% - " + e.thumbWidth + ") * " + p + ")",
          width: e.thumbWidth,
          height: e.thumbHeight,
          backgroundColor: e.thumbColor,
        };
        return (
          Xi(d, "thumb", e),
          Gi(d, "thumb", e),
          Ji(d, "thumb", e),
          React.createElement(
            "div",
            { style: u },
            React.createElement("div", { style: c }),
            React.createElement("div", { style: d }),
            React.createElement(
              "input",
              zi({ className: a }, ai(e), { type: "range" }, l, {
                value: n,
                disabled: !e.enabled,
                onChange: (t) => o(Number(t.target.value)),
              })
            )
          )
        );
      }
      const Zi = { group: "thumb-styles", label: "Thumb Styles" },
        to = { group: "track-styles", label: "Track Styles" },
        eo = {
          name: "net.noodl.controls.range",
          displayNodeName: "Slider",
          docs: "https://docs.noodl.net/nodes/ui-controls/slider",
          allowChildren: !1,
          noodlNodeAsProp: !0,
          connectionPanel: {
            groupPriority: [
              "General",
              "Style",
              "Actions",
              "Events",
              "States",
              "Mounted",
              "Hover Events",
              "Pointer Events",
              "Focus Events",
            ],
          },
          initialize() {
            (this.props.sizeMode = "contentHeight"),
              (this.props.id = "input-" + gi()()),
              (this.props.value = this.props.min),
              (this.props._nodeId = this.id),
              (this.props.valueChanged = (t) => {
                (t = "string" == typeof t ? parseFloat(t) : t),
                  this.props.value !== t &&
                    ((this.props.value = t),
                    this.flagOutputDirty("value"),
                    this.sendSignalOnOutput("onChange"),
                    this._updateValuePercent(t));
              }),
              this.props.valueChanged(this.props.value);
          },
          getReactComponent: () => Ki,
          inputs: {
            value: {
              type: "string",
              displayName: "Value",
              group: "General",
              index: 100,
              set(t) {
                t !== this.props.value &&
                  ((this.props.value = t), this.forceUpdate());
              },
            },
          },
          outputs: {
            value: {
              type: "number",
              displayName: "Value",
              group: "States",
              get() {
                return this.props.value;
              },
            },
            valuePercent: {
              type: "number",
              displayName: "Value Percent",
              group: "States",
              get() {
                return this._internal.valuePercent;
              },
            },
            onChange: {
              type: "signal",
              displayName: "Changed",
              group: "Events",
            },
          },
          inputProps: {
            min: {
              type: "number",
              displayName: "Min",
              group: "General",
              default: 0,
              index: 100,
            },
            max: {
              type: "number",
              displayName: "Max",
              group: "General",
              default: 100,
              index: 100,
            },
            step: {
              type: "number",
              displayName: "Step",
              group: "General",
              default: 1,
              index: 100,
            },
            width: {
              index: 11,
              group: "Dimensions",
              displayName: "Width",
              type: {
                name: "number",
                units: ["%", "px", "vw"],
                defaultUnit: "%",
              },
              default: 100,
              allowVisualStates: !0,
            },
            thumbWidth: {
              group: "Thumb Style",
              displayName: "Width",
              type: {
                name: "number",
                units: ["px", "vw", "%"],
                defaultUnit: "px",
                allowEditOnly: !0,
              },
              default: 16,
              popout: Zi,
              allowVisualStates: !0,
            },
            thumbHeight: {
              group: "Thumb Style",
              displayName: "Height",
              type: {
                name: "number",
                units: ["px", "vh", "%"],
                defaultUnit: "px",
                allowEditOnly: !0,
              },
              default: 16,
              popout: Zi,
              allowVisualStates: !0,
            },
            thumbColor: {
              group: "Thumb Style",
              displayName: "Color",
              type: { name: "color", allowEditOnly: !0 },
              default: "#000000",
              popout: Zi,
              allowVisualStates: !0,
            },
            trackHeight: {
              group: "Track Style",
              displayName: "Height",
              type: {
                name: "number",
                units: ["px", "vh", "%"],
                defaultUnit: "px",
                allowEditOnly: !0,
              },
              default: 6,
              popout: to,
              allowVisualStates: !0,
            },
            trackColor: {
              group: "Track Style",
              displayName: "Inactive Color",
              type: { name: "color", allowEditOnly: !0 },
              default: "#f0f0f0",
              popout: to,
              allowVisualStates: !0,
            },
            trackActiveColor: {
              group: "Track Style",
              displayName: "Active Color",
              type: { name: "color", allowEditOnly: !0 },
              default: "#f0f0f0",
              popout: to,
              allowVisualStates: !0,
            },
          },
          methods: {
            _updateValuePercent(t) {
              const e = this.props.min,
                n = this.props.max,
                i = Math.floor(((t - e) / (n - e)) * 100),
                o = this._internal.valuePercentChanged !== i;
              (this._internal.valuePercent = i),
                o && this.flagOutputDirty("valuePercent");
            },
          },
        };
      function no(t, e) {
        const n = (e = e || {}).defaults || {},
          i = e.popout;
        (n.borderStyle = "none"),
          (n.borderWidth = 0),
          (n.borderColor = "#000000");
        const o = e.propPrefix[0].toUpperCase() + e.propPrefix.slice(1);
        function r(t, r, s, a) {
          const l = e.propPrefix + `Border${r}Style`,
            u = e.propPrefix + `Border${r}Width`,
            p = e.propPrefix + `Border${r}Color`;
          let c = "none" !== n.borderStyle ? "OR borderStyle NOT SET" : "";
          r
            ? (n[l] && "none" !== n[l] && (c += `OR ${l} NOT SET`),
              v.addDynamicInputPorts(
                t,
                `${l} = solid OR ${l} = dashed OR ${l} = dotted OR borderStyle = solid OR borderStyle = dashed OR borderStyle = dotted ${c}`,
                [`${u}`, `${p}`]
              ))
            : v.addDynamicInputPorts(
                t,
                `${l} = solid OR ${l} = dashed OR ${l} = dotted ${c}`,
                [`${u}`, `${p}`]
              );
          const d = {
              group: e.propPrefix + "-border-styles",
              tab: s,
              label: r,
            },
            h = (t) => `${o} ${t} ${r ? "(" + r + ")" : ""}`,
            f = 202 + 4 * a,
            g = o + " Border Style";
          v.addInputProps(t, {
            [l]: {
              index: f + 1,
              displayName: "Border Style",
              editorName: h("Border Style"),
              group: g,
              type: {
                name: "enum",
                enums: [
                  { label: "None", value: "none" },
                  { label: "Solid", value: "solid" },
                  { label: "Dotted", value: "dotted" },
                  { label: "Dashed", value: "dashed" },
                ],
              },
              default: n[`border${r}Style`],
              tab: d,
              popout: i,
              allowVisualStates: !0,
            },
            [u]: {
              index: f + 2,
              displayName: "Border Width",
              editorName: h("Border Width"),
              group: g,
              type: { name: "number", units: ["px"], defaultUnit: "px" },
              default: n[`border${r}Width`],
              tab: d,
              popout: i,
              allowVisualStates: !0,
            },
            [p]: {
              index: f + 3,
              displayName: "Border Color",
              editorName: h("Border Color"),
              group: g,
              type: "color",
              default: n[`border${r}Color`],
              tab: d,
              popout: i,
              allowVisualStates: !0,
            },
          });
        }
        r(t, "", "borders-all", 0),
          r(t, "Left", "borders-left", 1),
          r(t, "Top", "borders-top", 2),
          r(t, "Right", "borders-right", 3),
          r(t, "Bottom", "borders-bottom", 4);
      }
      function io(t, e) {
        const n = (e = e || {}).defaults || {},
          i = e.popout;
        n.borderRadius || (n.borderRadius = 0);
        const o = e.propPrefix[0].toUpperCase() + e.propPrefix.slice(1);
        function r(t, r, s, a) {
          const l = { group: e.propPrefix + "-corners", tab: s, label: r },
            u = `Border${r}Radius`;
          v.addInputProps(t, {
            [e.propPrefix + u]: {
              index: 240 + a,
              displayName: "Corner Radius",
              editorName:
                ("Corner Radius",
                `${o} Corner Radius ${r ? "(" + r + ")" : ""}`),
              group: o + " Corner Radius",
              type: { name: "number", units: ["px", "%"], defaultUnit: "px" },
              default: n[`border${r}Radius`],
              tab: l,
              popout: i,
            },
          });
        }
        r(t, "", "corners-all", 0),
          r(t, "TopLeft", "corners-top-left", 1),
          r(t, "TopRight", "corners-top-right", 2),
          r(t, "BottomRight", "corners-bottom-right", 3),
          r(t, "BottomLeft", "corners-bottom-left", 4);
      }
      function oo(t, e) {
        const n = (e = e || {}).popout,
          i = e.propPrefix;
        v.addDynamicInputPorts(t, `${i}BoxShadowEnabled = true`, [
          `${i}BoxShadowOffsetX`,
          `${i}BoxShadowOffsetY`,
          `${i}BoxShadowInset`,
          `${i}BoxShadowBlurRadius`,
          `${i}BoxShadowSpreadRadius`,
          `${i}BoxShadowColor`,
        ]);
        const o = e.propPrefix[0].toUpperCase() + e.propPrefix.slice(1),
          r = (t) => `${o} ${t}`;
        v.addInputProps(t, {
          [`${i}BoxShadowEnabled`]: {
            index: 250,
            group: e.group || "Box Shadow",
            displayName: "Shadow Enabled",
            editorName: r("Shadow Enabled"),
            type: "boolean",
            allowVisualStates: !0,
            popout: n,
          },
          [`${i}BoxShadowOffsetX`]: {
            index: 251,
            group: e.group || "Box Shadow",
            displayName: "Offset X",
            editorName: r("Offset X"),
            default: 0,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            allowVisualStates: !0,
            popout: n,
          },
          [`${i}BoxShadowOffsetY`]: {
            index: 252,
            group: e.group || "Box Shadow",
            displayName: "Offset Y",
            editorName: r("Offset Y"),
            default: 0,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            allowVisualStates: !0,
            popout: n,
          },
          [`${i}BoxShadowBlurRadius`]: {
            index: 253,
            group: e.group || "Box Shadow",
            displayName: "Blur Radius",
            editorName: r("Blur Radius"),
            default: 5,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            allowVisualStates: !0,
            popout: n,
          },
          [`${i}BoxShadowSpreadRadius`]: {
            index: 254,
            group: e.group || "Box Shadow",
            displayName: "Spread Radius",
            editorName: r("Spread Radius"),
            default: 2,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            allowVisualStates: !0,
            popout: n,
          },
          [`${i}BoxShadowInset`]: {
            index: 255,
            group: e.group || "Box Shadow",
            displayName: "Inset",
            editorName: r("Inset"),
            type: "boolean",
            default: !1,
            allowVisualStates: !0,
            popout: n,
          },
          [`${i}BoxShadowColor`]: {
            index: 256,
            group: e.group || "Box Shadow",
            displayName: "Shadow Color",
            editorName: r("Shadow Color"),
            type: "color",
            default: "#00000033",
            allowVisualStates: !0,
            popout: n,
          },
        });
      }
      v.addAlignInputs(eo),
        v.addTransformInputs(eo),
        v.addMarginInputs(eo),
        v.addPaddingInputs(eo),
        v.addSharedVisualInputs(eo),
        no(eo, { propPrefix: "track", popout: to }),
        io(eo, { propPrefix: "track", popout: to }),
        oo(eo, { propPrefix: "track", popout: to, group: "Track Box Shadow" }),
        no(eo, { propPrefix: "thumb", popout: Zi }),
        io(eo, { propPrefix: "thumb", popout: Zi }),
        oo(eo, { propPrefix: "thumb", popout: Zi, group: "Thumb Box Shadow" }),
        si(eo);
      const ro = W(eo);
      function so() {
        return (so =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function ao(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function lo(t) {
        for (var e = 1; e < arguments.length; e++) {
          var n = null != arguments[e] ? arguments[e] : {};
          e % 2
            ? ao(Object(n), !0).forEach(function (e) {
                uo(t, e, n[e]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
            : ao(Object(n)).forEach(function (e) {
                Object.defineProperty(
                  t,
                  e,
                  Object.getOwnPropertyDescriptor(n, e)
                );
              });
        }
        return t;
      }
      function uo(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function po(t) {
        t.stopPropagation(), window.removeEventListener("click", po, !0);
      }
      function co(t, e) {
        return `\n    .${t}::placeholder {\n        opacity: ${e.placeholderOpacity};\n    }\n    `;
      }
      class ho extends e().Component {
        constructor(t) {
          super(t),
            (this.state = { value: t.startValue }),
            (this.ref = e().createRef());
        }
        setText(t) {
          this.setState({ value: t }),
            this.props.onTextChanged && this.props.onTextChanged(t);
        }
        componentDidMount() {
          (this.ref.current.noodlNode = this.props.noodlNode),
            this.setText(this.props.startValue);
        }
        render() {
          const t = lo({}, this.props.style);
          O.size(t, this.props),
            O.align(t, this.props),
            0 === t.opacity && (t.pointerEvents = "none");
          const { height: n } = t,
            i = (function (t, e) {
              if (null == t) return {};
              var n,
                i,
                o = (function (t, e) {
                  if (null == t) return {};
                  var n,
                    i,
                    o = {},
                    r = Object.keys(t);
                  for (i = 0; i < r.length; i++)
                    (n = r[i]), e.indexOf(n) >= 0 || (o[n] = t[n]);
                  return o;
                })(t, e);
              if (Object.getOwnPropertySymbols) {
                var r = Object.getOwnPropertySymbols(t);
                for (i = 0; i < r.length; i++)
                  (n = r[i]),
                    e.indexOf(n) >= 0 ||
                      (Object.prototype.propertyIsEnumerable.call(t, n) &&
                        (o[n] = t[n]));
              }
              return o;
            })(t, ["height"]),
            o = this.props;
          function r() {
            if ("image" === o.iconSourceType && void 0 !== o.iconImageSource)
              return e().createElement("img", {
                src: o.iconSource,
                style: { width: o.iconSize, height: o.iconSize },
              });
            if ("icon" === o.iconSourceType && void 0 !== o.iconIconSource) {
              const t = { fontSize: o.iconSize, color: o.iconColor };
              return (
                "left" === o.iconPlacement || void 0 === o.iconPlacement
                  ? (t.marginRight = o.iconSpacing)
                  : (t.marginLeft = o.iconSpacing),
                e().createElement(
                  "span",
                  { className: o.iconIconSource.class, style: t },
                  o.iconIconSource.code
                )
              );
            }
            return null;
          }
          let s,
            a = "ndl-controls-textinput " + o.id;
          o.className && (a = a + " " + o.className);
          const l = lo(
              lo(lo({}, o.textStyle), o.styles.input),
              {},
              { width: "100%", height: "100%" }
            ),
            u = lo(
              lo({ id: o.id, value: this.state.value }, ai(o)),
              {},
              {
                disabled: !o.enabled,
                style: l,
                className: a,
                placeholder: o.placeholder,
                onChange: (t) => this.onChange(t),
              }
            );
          "textArea" !== o.type
            ? (s = e().createElement(
                "input",
                so({ ref: this.ref, type: this.props.type }, u, {
                  onKeyDown: (t) => this.onKeyDown(t),
                  onMouseDown: () => window.addEventListener("click", po, !0),
                  "noodl-style-tag": "input",
                })
              ))
            : ((u.style.resize = "none"),
              (s = e().createElement(
                "textarea",
                so({ ref: this.ref }, u, {
                  onKeyDown: (t) => this.onKeyDown(t),
                  "noodl-style-tag": "input",
                })
              )));
          const p = lo(
              { display: "flex", alignItems: "center" },
              o.styles.inputWrapper
            ),
            c = n && "%" === n[n.length - 1];
          o.useLabel
            ? c
              ? (p.flexGrow = 1)
              : (p.height = n)
            : (Object.assign(p, i), (p.height = n)),
            "textArea" !== o.type && (p.alignItems = "center");
          const d = e().createElement(
            "div",
            { style: p, "noodl-style-tag": "inputWrapper" },
            o.useIcon && "left" === o.iconPlacement ? r() : null,
            s,
            o.useIcon && "right" === o.iconPlacement ? r() : null
          );
          return o.useLabel
            ? ((i.display = "flex"),
              (i.flexDirection = "column"),
              c && (i.height = n),
              e().createElement(
                "div",
                { style: i },
                e().createElement(
                  "label",
                  {
                    for: o.id,
                    style: lo(
                      lo(lo({}, o.labeltextStyle), o.styles.label),
                      {},
                      { marginBottom: o.labelSpacing }
                    ),
                    "noodl-style-tag": "label",
                  },
                  o.label
                ),
                d
              ))
            : d;
        }
        onKeyDown(t) {
          ("Enter" !== t.key && 13 !== t.which) ||
            (this.props.onEnter && this.props.onEnter());
        }
        onChange(t) {
          const e = t.target.value;
          this.setText(e);
        }
        focus() {
          this.ref.current && this.ref.current.focus();
        }
        blur() {
          this.ref.current && this.ref.current.blur();
        }
        hasFocus() {
          return document.activeElement === this.ref.current;
        }
      }
      const fo = {
        name: "net.noodl.controls.textinput",
        displayName: "Text Input",
        docs: "https://docs.noodl.net/nodes/ui-controls/text-input",
        allowChildren: !1,
        noodlNodeAsProp: !0,
        connectionPanel: {
          groupPriority: [
            "General",
            "Text",
            "Style",
            "Actions",
            "Events",
            "States",
            "Mounted",
            "Text Style",
            "Label",
            "Label Text Style",
            "Hover Events",
            "Pointer Events",
            "Focus Events",
          ],
        },
        getReactComponent: () => ho,
        initialize() {
          (this.props.startValue = ""),
            (this.props.id = this._internal.controlId = "input-" + gi()());
        },
        inputProps: {
          type: {
            displayName: "Type",
            group: "Text",
            index: 19,
            type: {
              name: "enum",
              enums: [
                { label: "Text", value: "text" },
                { label: "Text Area", value: "textArea" },
                { label: "Email", value: "email" },
                { label: "Number", value: "number" },
                { label: "Password", value: "password" },
                { label: "URL", value: "url" },
              ],
            },
            default: "text",
          },
          placeholder: {
            index: 22,
            group: "Text",
            displayName: "Placeholder",
            default: "Type here...",
            type: { name: "string" },
          },
        },
        inputs: {
          placeHolderOpacity: {
            index: 23,
            group: "Text",
            displayName: "Placeholder opacity",
            type: "number",
            default: 0.5,
            set(t) {
              const e = this._internal.controlId;
              ri(e, { placeholderOpacity: t }, co);
            },
          },
          set: {
            group: "Actions",
            displayName: "Set",
            type: "signal",
            valueChangedToTrue() {
              this.scheduleAfterInputsHaveUpdated(() => {
                this.setText(this._internal.text);
              });
            },
          },
          startValue: {
            index: 18,
            displayName: "Text",
            type: "string",
            group: "Text",
            set(t) {
              this._internal.text !== t &&
                ((this._internal.text = t),
                !1 === this.isInputConnected("set") && this.setText(t));
            },
          },
          clear: {
            type: "signal",
            group: "Actions",
            displayName: "Clear",
            valueChangedToTrue() {
              this.clear();
            },
          },
          focus: {
            type: "signal",
            group: "Actions",
            displayName: "Focus",
            valueChangedToTrue() {
              this.context.setNodeFocused(this, !0);
            },
          },
          blur: {
            type: "signal",
            group: "Actions",
            displayName: "Blur",
            valueChangedToTrue() {
              this.context.setNodeFocused(this, !1);
            },
          },
        },
        inputCss: {
          backgroundColor: {
            index: 100,
            displayName: "Background Color",
            group: "Style",
            type: "color",
            default: "transparent",
            allowVisualStates: !0,
            styleTag: "inputWrapper",
          },
        },
        outputProps: {
          onTextChanged: {
            group: "General",
            displayName: "Text",
            type: "string",
            index: 1,
            onChange() {
              this.sendSignalOnOutput("textChanged");
            },
          },
          onEnter: { group: "Events", displayName: "On Enter", type: "signal" },
        },
        outputs: {
          textChanged: {
            displayName: "Text Changed",
            type: "signal",
            group: "General",
            index: 2,
          },
        },
        methods: {
          _focus() {
            this.innerReactComponentRef && this.innerReactComponentRef.focus();
          },
          _blur() {
            this.innerReactComponentRef && this.innerReactComponentRef.blur();
          },
          clear() {
            (this.props.startValue = ""),
              this.innerReactComponentRef &&
                this.innerReactComponentRef.setText("");
          },
          setText(t) {
            (this.props.startValue = t),
              this.innerReactComponentRef
                ? !1 === this.innerReactComponentRef.hasFocus() &&
                  this.innerReactComponentRef.setText(t)
                : this.outputPropValues.onTextChanged !== t &&
                  ((this.outputPropValues.onTextChanged = t),
                  this.flagOutputDirty("onTextChanged"));
          },
        },
      };
      v.addDimensions(fo, {
        defaultSizeMode: "contentSize",
        contentLabel: "Text",
      }),
        v.addIconInputs(fo, {
          enableIconPlacement: !0,
          defaults: { useIcon: !1, iconColor: "#000000" },
        }),
        v.addLabelInputs(fo, { enableSpacing: !0, styleTag: "label" }),
        v.addTextStyleInputs(fo, {
          styleTag: "input",
          portPrefix: "",
          portIndex: 18,
          popout: {
            group: "input-text-style",
            label: "Text Style",
            parentGroup: "Text",
          },
        }),
        v.addAlignInputs(fo),
        v.addTransformInputs(fo),
        v.addPaddingInputs(fo, { styleTag: "inputWrapper" }),
        v.addMarginInputs(fo),
        v.addSharedVisualInputs(fo),
        v.addBorderInputs(fo, { styleTag: "inputWrapper" }),
        v.addShadowInputs(fo, { styleTag: "inputWrapper" }),
        si(fo);
      const go = W(fo);
      var mo = n(3379),
        yo = n.n(mo),
        vo = n(2254);
      yo()(vo.Z, { insert: "head", singleton: !1 }), vo.Z.locals;
      const bo = {};
      function So(t, e, n) {
        t[e] || (t[e] = {});
        for (const i in n) t[e][i] = n[i];
      }
      const wo = function (t, e, n) {
          if (bo[t])
            (function (t, e) {
              for (var n in t)
                if (t.hasOwnProperty(n) && t[n] !== e[n]) return !1;
              for (var n in e)
                if (e.hasOwnProperty(n) && t[n] !== e[n]) return !1;
              return !0;
            })(e, bo[t].props) ||
              ((bo[t].style.innerHTML = n(t, e)),
              (bo[t].props = Object.assign({}, e)));
          else {
            var i = document.createElement("style");
            (i.innerHTML = n(t, e)),
              document.head.appendChild(i),
              (bo[t] = { style: i, props: Object.assign({}, e) });
          }
        },
        Oo = function (t) {
          !(function (t, e) {
            So(t, "inputProps", {
              blockTouch: {
                index: 450,
                displayName: "Block Pointer Events",
                type: "boolean",
              },
            });
          })(t),
            (function (t, e) {
              So(t, "outputProps", {
                focusState: {
                  displayName: "Focused",
                  group: "States",
                  type: "boolean",
                  props: {
                    onFocus() {
                      (this.outputPropValues.focusState = !0),
                        this.flagOutputDirty("focusState"),
                        this.hasOutput("onFocus") &&
                          this.sendSignalOnOutput("onFocus");
                    },
                    onBlur() {
                      (this.outputPropValues.focusState = !1),
                        this.flagOutputDirty("focusState"),
                        this.hasOutput("onBlur") &&
                          this.sendSignalOnOutput("onBlur");
                    },
                  },
                },
                onFocus: {
                  displayName: "Focused",
                  group: "Events",
                  type: "signal",
                  props: {
                    onFocus() {
                      (this.outputPropValues.focusState = !0),
                        this.flagOutputDirty("focusState"),
                        this.sendSignalOnOutput("onFocus");
                    },
                  },
                },
                onBlur: {
                  displayName: "Blurred",
                  group: "Events",
                  type: "signal",
                  props: {
                    onBlur() {
                      (this.outputPropValues.focusState = !1),
                        this.flagOutputDirty("focusState"),
                        this.sendSignalOnOutput("onBlur");
                    },
                  },
                },
                hoverState: {
                  displayName: "Hover",
                  group: "States",
                  type: "boolean",
                  props: {
                    onMouseOver() {
                      (this.outputPropValues.hoverState = !0),
                        this.flagOutputDirty("hoverState"),
                        this.hasOutput("hoverStart") &&
                          this.sendSignalOnOutput("hoverStart");
                    },
                    onMouseLeave() {
                      (this.outputPropValues.hoverState = !1),
                        this.flagOutputDirty("hoverState"),
                        this.hasOutput("hoverEnd") &&
                          this.sendSignalOnOutput("hoverEnd");
                    },
                  },
                },
                hoverStart: {
                  displayName: "Hover Start",
                  group: "Events",
                  type: "signal",
                  props: {
                    onMouseOver() {
                      (this.outputPropValues.hoverState = !0),
                        this.flagOutputDirty("hoverState"),
                        this.sendSignalOnOutput("hoverStart");
                    },
                  },
                },
                hoverEnd: {
                  displayName: "Hover End",
                  group: "Events",
                  type: "signal",
                  props: {
                    onMouseLeave() {
                      (this.outputPropValues.hoverState = !1),
                        this.flagOutputDirty("hoverState"),
                        this.sendSignalOnOutput("hoverEnd");
                    },
                  },
                },
                pressedState: {
                  displayName: "Pressed",
                  group: "States",
                  type: "boolean",
                  props: {
                    onMouseDown() {
                      (this.outputPropValues.pressedState = !0),
                        this.flagOutputDirty("pressedState"),
                        this.hasOutput("pointerDown") &&
                          this.sendSignalOnOutput("pointerDown");
                    },
                    onTouchStart() {
                      (this.outputPropValues.pressedState = !0),
                        this.flagOutputDirty("pressedState"),
                        this.hasOutput("pointerDown") &&
                          this.sendSignalOnOutput("pointerDown");
                    },
                    onMouseUp() {
                      (this.outputPropValues.pressedState = !1),
                        this.flagOutputDirty("pressedState"),
                        this.hasOutput("pointerUp") &&
                          this.sendSignalOnOutput("pointerUp");
                    },
                    onTouchEnd() {
                      (this.outputPropValues.pressedState = !1),
                        this.flagOutputDirty("pressedState"),
                        this.hasOutput("pointerUp") &&
                          this.sendSignalOnOutput("pointerUp");
                    },
                    onTouchCancel() {
                      (this.outputPropValues.pressedState = !1),
                        this.flagOutputDirty("pressedState"),
                        this.hasOutput("pointerUp") &&
                          this.sendSignalOnOutput("pointerUp");
                    },
                  },
                },
                pointerDown: {
                  displayName: "Pointer Down",
                  group: "Events",
                  type: "signal",
                  props: {
                    onMouseDown() {
                      (this.outputPropValues.pressedState = !0),
                        this.flagOutputDirty("pressedState"),
                        this.sendSignalOnOutput("pointerDown");
                    },
                    onTouchStart() {
                      (this.outputPropValues.pressedState = !0),
                        this.flagOutputDirty("pressedState"),
                        this.sendSignalOnOutput("pointerDown");
                    },
                  },
                },
                pointerUp: {
                  displayName: "Pointer Up",
                  group: "Events",
                  type: "signal",
                  props: {
                    onMouseUp() {
                      (this.outputPropValues.pressedState = !1),
                        this.flagOutputDirty("pressedState"),
                        this.sendSignalOnOutput("pointerUp");
                    },
                    onTouchEnd() {
                      (this.outputPropValues.pressedState = !1),
                        this.flagOutputDirty("pressedState"),
                        this.sendSignalOnOutput("pointerUp");
                    },
                    onTouchCancel() {
                      (this.outputPropValues.pressedState = !1),
                        this.flagOutputDirty("pressedState"),
                        this.sendSignalOnOutput("pointerUp");
                    },
                  },
                },
              });
            })(t);
        },
        _o = function (t) {
          return Object.assign(
            {},
            { onFocus: t.onFocus, onBlur: t.onBlur },
            J(t)
          );
        };
      function No() {
        return (No =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function Co(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function Io(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function xo(e) {
        (0, t.useEffect)(() => {
          e.focusChanged && e.focusChanged(!1),
            e.hoverChanged && e.hoverChanged(!1),
            e.pressedChanged && e.pressedChanged(!1);
        }, []);
        var n = (function (t) {
          for (var e = 1; e < arguments.length; e++) {
            var n = null != arguments[e] ? arguments[e] : {};
            e % 2
              ? Co(Object(n), !0).forEach(function (e) {
                  Io(t, e, n[e]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
              : Co(Object(n)).forEach(function (e) {
                  Object.defineProperty(
                    t,
                    e,
                    Object.getOwnPropertyDescriptor(n, e)
                  );
                });
          }
          return t;
        })({}, e.style);
        O.size(n, e),
          O.align(n, e),
          void 0 !== e.textStyle && (n = Object.assign({}, e.textStyle, n)),
          e.boxShadowEnabled &&
            (n.boxShadow = `${e.boxShadowInset ? "inset " : ""}${
              e.boxShadowOffsetX
            } ${e.boxShadowOffsetY} ${e.boxShadowBlurRadius} ${
              e.boxShadowSpreadRadius
            } ${e.boxShadowColor}`);
        let i = "ndl-controls-button";
        return (
          e.className && (i = i + " " + e.className),
          React.createElement(
            "button",
            No({ className: i, disabled: !e.enabled }, _o(e), {
              type: e.buttonType,
              style: n,
              onClick: e.onClick,
            }),
            e.label,
            e.children
          )
        );
      }
      var Po = {
        name: "Button",
        docs: "https://docs.noodl.net/#/nodes/visual/button",
        allowChildren: !0,
        noodlNodeAsProp: !0,
        initialize() {
          (this.outputPropValues.hoverState =
            this.outputPropValues.focusState =
            this.outputPropValues.pressedState =
              !1),
            (this.props.id = this._internal.controlId = "input-" + gi()()),
            (this.props.enabled = this._internal.enabled = !0);
        },
        getReactComponent: () => xo,
        inputs: {
          enabled: {
            type: "boolean",
            displayName: "Enabled",
            group: "General",
            default: !0,
            set: function (t) {
              const e = (t = !!t) !== this._internal.enabled;
              (this.props.enabled = this._internal.enabled = t),
                e && (this.forceUpdate(), this.flagOutputDirty("enabled"));
            },
          },
          textStyle: {
            index: 20,
            type: "textStyle",
            group: "Text",
            displayName: "Text Style",
            default: "None",
            set(t) {
              (this.props.textStyle = this.context.styles.getTextStyle(t)),
                this.forceUpdate();
            },
          },
          fontFamily: {
            index: 21,
            type: "font",
            group: "Text",
            displayName: "Font Family",
            set(t) {
              if (t) {
                let e = t;
                e.split(".").length > 1 &&
                  ((e = e.replace(/\.[^/.]+$/, "")), (e = e.split("/").pop())),
                  this.setStyle({ fontFamily: e });
              } else this.removeStyle(["fontFamily"]);
              this.props.textStyle && this.forceUpdate();
            },
          },
        },
        outputs: {
          controlId: {
            type: "string",
            displayName: "Control Id",
            group: "General",
            getter: function () {
              return this._internal.controlId;
            },
          },
          enabled: {
            type: "boolean",
            displayName: "Enabled",
            group: "States",
            getter: function () {
              return this._internal.enabled;
            },
          },
        },
        inputCss: {
          fontSize: {
            index: 21,
            group: "Text",
            displayName: "Font Size",
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            onChange() {
              this.props.textStyle && this.forceUpdate();
            },
          },
          color: {
            index: 24,
            group: "Text",
            displayName: "Color",
            type: "color",
            default: "#FFFFFF",
          },
          backgroundColor: {
            index: 100,
            displayName: "Background Color",
            group: "Style",
            type: "color",
            default: "#000000",
          },
          paddingLeft: {
            index: 64,
            group: "Margin and padding",
            default: 20,
            applyDefault: !1,
            displayName: "Pad Left",
            type: {
              name: "number",
              units: ["px"],
              defaultUnit: "px",
              marginPaddingComp: "padding-left",
            },
          },
          paddingRight: {
            index: 65,
            group: "Margin and padding",
            default: 20,
            applyDefault: !1,
            displayName: "Pad Right",
            type: {
              name: "number",
              units: ["px"],
              defaultUnit: "px",
              marginPaddingComp: "padding-right",
            },
          },
          paddingTop: {
            index: 66,
            group: "Margin and padding",
            displayName: "Pad Top",
            default: 5,
            applyDefault: !1,
            type: {
              name: "number",
              units: ["px"],
              defaultUnit: "px",
              marginPaddingComp: "padding-top",
            },
          },
          paddingBottom: {
            index: 67,
            group: "Margin and padding",
            displayName: "Pad Bottom",
            default: 5,
            applyDefault: !1,
            type: {
              name: "number",
              units: ["px"],
              defaultUnit: "px",
              marginPaddingComp: "padding-bottom",
            },
          },
          borderRadius: {
            index: 202,
            displayName: "Border Radius",
            group: "Style",
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            default: 0,
            applyDefault: !1,
          },
          borderStyle: {
            index: 203,
            displayName: "Border Style",
            group: "Style",
            type: {
              name: "enum",
              enums: [
                { label: "None", value: "none" },
                { label: "Solid", value: "solid" },
                { label: "Dotted", value: "dotted" },
                { label: "Dashed", value: "dashed" },
              ],
            },
            default: "none",
            applyDefault: !1,
          },
          borderWidth: {
            index: 204,
            displayName: "Border Width",
            group: "Style",
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            default: 0,
            applyDefault: !1,
          },
          borderColor: {
            index: 205,
            displayName: "Border Color",
            group: "Style",
            type: "color",
            default: "#000000",
          },
        },
        inputProps: {
          label: {
            type: "string",
            displayName: "Label",
            group: "General",
            default: "Label",
          },
          buttonType: {
            type: {
              name: "enum",
              enums: [
                { label: "Button", value: "button" },
                { label: "Submit", value: "submit" },
              ],
            },
            displayName: "Type",
            default: "button",
            group: "General",
          },
          boxShadowEnabled: {
            index: 250,
            group: "Box Shadow",
            displayName: "Shadow Enabled",
            type: "boolean",
            default: !1,
          },
          boxShadowOffsetX: {
            index: 251,
            group: "Box Shadow",
            displayName: "Offset X",
            default: 0,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowOffsetY: {
            index: 252,
            group: "Box Shadow",
            displayName: "Offset Y",
            default: 0,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowBlurRadius: {
            index: 253,
            group: "Box Shadow",
            displayName: "Blur Radius",
            default: 5,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowSpreadRadius: {
            index: 254,
            group: "Box Shadow",
            displayName: "Spread Radius",
            default: 2,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowInset: {
            index: 255,
            group: "Box Shadow",
            displayName: "Inset",
            type: "boolean",
            default: !1,
          },
          boxShadowColor: {
            index: 256,
            group: "Box Shadow",
            displayName: "Shadow Color",
            type: "color",
            default: "rgba(0,0,0,0.2)",
          },
        },
        outputProps: {
          onClick: { displayName: "Click", group: "Events", type: "signal" },
        },
        dynamicports: [
          {
            condition: "boxShadowEnabled = true",
            inputs: [
              "boxShadowOffsetX",
              "boxShadowOffsetY",
              "boxShadowInset",
              "boxShadowBlurRadius",
              "boxShadowSpreadRadius",
              "boxShadowColor",
            ],
          },
        ],
        methods: {},
      };
      v.addDimensions(Po, {
        defaultSizeMode: "contentSize",
        contentLabel: "Content",
        useDimensionConstraints: !1,
      }),
        v.addAlignInputs(Po),
        v.addTransformInputs(Po),
        v.addMarginInputs(Po),
        v.addSharedVisualInputs(Po),
        Oo(Po),
        ((Po = W(Po)).setup = function (t, e) {
          e.on("nodeAdded.Button", function (t) {
            t.parameters.fontFamily &&
              t.parameters.fontFamily.split(".").length > 1 &&
              l().instance.loadFont(t.parameters.fontFamily),
              t.on("parameterUpdated", function (t) {
                "fontFamily" === t.name &&
                  t.value &&
                  t.value.split(".").length > 1 &&
                  l().instance.loadFont(t.value);
              });
          });
        });
      const Eo = Po;
      function To() {
        return (To =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function Do(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function ko(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function Ro(t, e) {
        return `\n    .${t}:checked {\n        background-color: ${e.checkedBackgroundColor};\n    }  \n    `;
      }
      function Ao(e) {
        const [n, i] = (0, t.useState)(e.checked);
        (0, t.useEffect)(() => {
          i(!!e.checked);
        }, []),
          (0, t.useEffect)(() => {
            i(!!e.checked);
          }, [e.checked]);
        var o = (function (t) {
          for (var e = 1; e < arguments.length; e++) {
            var n = null != arguments[e] ? arguments[e] : {};
            e % 2
              ? Do(Object(n), !0).forEach(function (e) {
                  ko(t, e, n[e]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
              : Do(Object(n)).forEach(function (e) {
                  Object.defineProperty(
                    t,
                    e,
                    Object.getOwnPropertyDescriptor(n, e)
                  );
                });
          }
          return t;
        })({}, e.style);
        O.size(o, e),
          O.align(o, e),
          e.boxShadowEnabled &&
            (o.boxShadow = `${e.boxShadowInset ? "inset " : ""}${
              e.boxShadowOffsetX
            } ${e.boxShadowOffsetY} ${e.boxShadowBlurRadius} ${
              e.boxShadowSpreadRadius
            } ${e.boxShadowColor}`);
        const r = { id: e.id, style: o };
        wo(
          "ndl-controls-checkbox-" + e._nodeId,
          { checkedBackgroundColor: e.checkedBackgroundColor },
          Ro
        );
        let s = "ndl-controls-checkbox-" + e._nodeId + " ndl-controls-checkbox";
        return (
          e.className && (s = s + " " + e.className),
          React.createElement(
            "input",
            To({ className: s, type: "checkbox" }, r, _o(e), {
              checked: n,
              disabled: !e.enabled,
              onChange: (t) => {
                i(t.target.checked),
                  e.checkedChanged && e.checkedChanged(t.target.checked);
              },
            })
          )
        );
      }
      var jo = {
        name: "Checkbox",
        displayName: "Checkbox",
        docs: "https://docs.noodl.net/#/nodes/visual/checkbox",
        allowChildren: !1,
        noodlNodeAsProp: !0,
        initialize() {
          (this.props.sizeMode = "explicit"),
            (this.props.id = this._internal.controlId = "input-" + gi()()),
            (this.props.enabled = this._internal.enabled = !0),
            (this.props.checked = this._internal.checked = !1),
            (this.props._nodeId = this.id),
            (this.outputPropValues.hoverState =
              this.outputPropValues.focusState =
              this.outputPropValues.pressedState =
                !1),
            (this.props.checkedChanged = (t) => {
              const e = this._internal.checked !== t;
              (this._internal.checked = t),
                e &&
                  (this.flagOutputDirty("checked"),
                  this.sendSignalOnOutput("onChange"));
            });
        },
        getReactComponent: () => Ao,
        inputs: {
          enabled: {
            type: "boolean",
            displayName: "Enabled",
            group: "General",
            default: !0,
            set: function (t) {
              const e = (t = !!t) !== this._internal.enabled;
              (this.props.enabled = this._internal.enabled = t),
                e && (this.forceUpdate(), this.flagOutputDirty("enabled"));
            },
          },
          checked: {
            type: "boolean",
            displayName: "Checked",
            group: "General",
            default: !1,
            set: function (t) {
              const e = (t = !!t) !== this._internal.checked;
              (this.props.checked = this._internal.checked = t),
                e && (this.forceUpdate(), this.flagOutputDirty("checked"));
            },
          },
        },
        outputs: {
          controlId: {
            type: "string",
            displayName: "Control Id",
            group: "General",
            getter: function () {
              return this._internal.controlId;
            },
          },
          enabled: {
            type: "boolean",
            displayName: "Enabled",
            group: "States",
            getter: function () {
              return this._internal.enabled;
            },
          },
          checked: {
            type: "boolean",
            displayName: "Checked",
            group: "States",
            getter: function () {
              return this._internal.checked;
            },
          },
          onChange: { displayName: "Changed", group: "Events", type: "signal" },
        },
        inputProps: {
          width: {
            index: 11,
            group: "Dimensions",
            displayName: "Width",
            type: {
              name: "number",
              units: ["%", "px", "vw"],
              defaultUnit: "px",
            },
            default: 32,
          },
          height: {
            index: 12,
            group: "Dimensions",
            displayName: "Height",
            type: {
              name: "number",
              units: ["%", "px", "vh"],
              defaultUnit: "px",
            },
            default: 32,
          },
          checkedBackgroundColor: {
            displayName: "Background color",
            group: "Checked Style",
            type: { name: "color", allowEditOnly: !0 },
            default: "#000000",
          },
          boxShadowEnabled: {
            index: 250,
            group: "Box Shadow",
            displayName: "Shadow Enabled",
            type: "boolean",
            default: !1,
          },
          boxShadowOffsetX: {
            index: 251,
            group: "Box Shadow",
            displayName: "Offset X",
            default: 0,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowOffsetY: {
            index: 252,
            group: "Box Shadow",
            displayName: "Offset Y",
            default: 0,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowBlurRadius: {
            index: 253,
            group: "Box Shadow",
            displayName: "Blur Radius",
            default: 5,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowSpreadRadius: {
            index: 254,
            group: "Box Shadow",
            displayName: "Spread Radius",
            default: 2,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowInset: {
            index: 255,
            group: "Box Shadow",
            displayName: "Inset",
            type: "boolean",
            default: !1,
          },
          boxShadowColor: {
            index: 256,
            group: "Box Shadow",
            displayName: "Shadow Color",
            type: "color",
            default: "rgba(0,0,0,0.2)",
          },
        },
        inputCss: {
          backgroundColor: {
            index: 201,
            displayName: "Background Color",
            group: "Style",
            type: "color",
          },
          borderRadius: {
            index: 202,
            displayName: "Border Radius",
            group: "Style",
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            default: 2,
            applyDefault: !1,
          },
          borderStyle: {
            index: 203,
            displayName: "Border Style",
            group: "Style",
            type: {
              name: "enum",
              enums: [
                { label: "None", value: "none" },
                { label: "Solid", value: "solid" },
                { label: "Dotted", value: "dotted" },
                { label: "Dashed", value: "dashed" },
              ],
            },
            default: "solid",
            applyDefault: !1,
          },
          borderWidth: {
            index: 204,
            displayName: "Border Width",
            group: "Style",
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            default: 1,
            applyDefault: !1,
          },
          borderColor: {
            index: 205,
            displayName: "Border Color",
            group: "Style",
            type: "color",
            default: "#000000",
          },
        },
        outputProps: {},
        methods: {},
      };
      v.addAlignInputs(jo),
        v.addTransformInputs(jo),
        v.addMarginInputs(jo),
        v.addSharedVisualInputs(jo),
        Oo(jo);
      const Mo = (jo = W(jo));
      function Fo() {
        return (Fo =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function Vo(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function Lo(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function Uo(t, e) {
        return `\n    .${t}:checked {\n        background-color: ${e.checkedBackgroundColor};\n    }  \n    `;
      }
      function Bo(e) {
        const n = (0, t.useContext)(_i);
        var i = (function (t) {
          for (var e = 1; e < arguments.length; e++) {
            var n = null != arguments[e] ? arguments[e] : {};
            e % 2
              ? Vo(Object(n), !0).forEach(function (e) {
                  Lo(t, e, n[e]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
              : Vo(Object(n)).forEach(function (e) {
                  Object.defineProperty(
                    t,
                    e,
                    Object.getOwnPropertyDescriptor(n, e)
                  );
                });
          }
          return t;
        })({}, e.style);
        O.size(i, e),
          O.align(i, e),
          e.boxShadowEnabled &&
            (i.boxShadow = `${e.boxShadowInset ? "inset " : ""}${
              e.boxShadowOffsetX
            } ${e.boxShadowOffsetY} ${e.boxShadowBlurRadius} ${
              e.boxShadowSpreadRadius
            } ${e.boxShadowColor}`);
        const o = { id: e.id, style: i };
        e.checkedChanged && e.checkedChanged(!!n && n.selected === e.value),
          wo(
            "ndl-controls-radiobutton-" + e._nodeId,
            { checkedBackgroundColor: e.checkedBackgroundColor },
            Uo
          );
        let r =
          "ndl-controls-radiobutton-" + e._nodeId + " ndl-controls-radiobutton";
        return (
          e.className && (r = r + " " + e.className),
          React.createElement(
            "input",
            Fo(
              { className: r },
              _o(e),
              { type: "radio", name: n ? n.name : void 0 },
              o,
              {
                disabled: !e.enabled,
                checked: !!n && n.selected === e.value,
                onChange: (t) => {
                  n && n.checkedChanged && n.checkedChanged(e.value);
                },
              }
            )
          )
        );
      }
      var Wo = {
        name: "Radio Button",
        displayName: "Radio Button",
        docs: "https://docs.noodl.net/#/nodes/visual/radiobutton",
        allowChildren: !1,
        noodlNodeAsProp: !0,
        initialize() {
          (this.props.sizeMode = "explicit"),
            (this.props.id = this._internal.controlId = "input-" + gi()()),
            (this.props.enabled = this._internal.enabled = !0),
            (this.props._nodeId = this.id),
            (this._internal.checked = !1),
            (this.outputPropValues.hoverState =
              this.outputPropValues.focusState =
              this.outputPropValues.pressedState =
                !1),
            (this.props.checkedChanged = (t) => {
              const e = this._internal.checked !== t;
              (this._internal.checked = t),
                e && this.flagOutputDirty("checked");
            });
        },
        getReactComponent: () => Bo,
        inputs: {
          enabled: {
            type: "boolean",
            displayName: "Enabled",
            group: "General",
            default: !0,
            set: function (t) {
              const e = (t = !!t) !== this._internal.enabled;
              (this.props.enabled = this._internal.enabled = t),
                e && (this.forceUpdate(), this.flagOutputDirty("enabled"));
            },
          },
        },
        outputs: {
          controlId: {
            type: "string",
            displayName: "Control Id",
            group: "General",
            getter: function () {
              return this._internal.controlId;
            },
          },
          enabled: {
            type: "boolean",
            displayName: "Enabled",
            group: "States",
            getter: function () {
              return this._internal.enabled;
            },
          },
          checked: {
            type: "boolean",
            displayName: "Checked",
            group: "States",
            getter: function () {
              return this._internal.checked;
            },
          },
        },
        inputProps: {
          value: { type: "string", displayName: "Value", group: "General" },
          width: {
            index: 11,
            group: "Dimensions",
            displayName: "Width",
            type: {
              name: "number",
              units: ["%", "px", "vw"],
              defaultUnit: "px",
            },
            default: 32,
          },
          height: {
            index: 12,
            group: "Dimensions",
            displayName: "Height",
            type: {
              name: "number",
              units: ["%", "px", "vh"],
              defaultUnit: "px",
            },
            default: 32,
          },
          checkedBackgroundColor: {
            displayName: "Background color",
            group: "Checked Style",
            type: { name: "color", allowEditOnly: !0 },
            default: "#000000",
          },
          boxShadowEnabled: {
            index: 250,
            group: "Box Shadow",
            displayName: "Shadow Enabled",
            type: "boolean",
            default: !1,
          },
          boxShadowOffsetX: {
            index: 251,
            group: "Box Shadow",
            displayName: "Offset X",
            default: 0,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowOffsetY: {
            index: 252,
            group: "Box Shadow",
            displayName: "Offset Y",
            default: 0,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowBlurRadius: {
            index: 253,
            group: "Box Shadow",
            displayName: "Blur Radius",
            default: 5,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowSpreadRadius: {
            index: 254,
            group: "Box Shadow",
            displayName: "Spread Radius",
            default: 2,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowInset: {
            index: 255,
            group: "Box Shadow",
            displayName: "Inset",
            type: "boolean",
            default: !1,
          },
          boxShadowColor: {
            index: 256,
            group: "Box Shadow",
            displayName: "Shadow Color",
            type: "color",
            default: "rgba(0,0,0,0.2)",
          },
        },
        inputCss: {
          backgroundColor: {
            index: 201,
            displayName: "Background Color",
            group: "Style",
            type: "color",
          },
          borderRadius: {
            index: 202,
            displayName: "Border Radius",
            group: "Style",
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            default: 16,
            applyDefault: !1,
          },
          borderStyle: {
            index: 203,
            displayName: "Border Style",
            group: "Style",
            type: {
              name: "enum",
              enums: [
                { label: "None", value: "none" },
                { label: "Solid", value: "solid" },
                { label: "Dotted", value: "dotted" },
                { label: "Dashed", value: "dashed" },
              ],
            },
            default: "solid",
            applyDefault: !1,
          },
          borderWidth: {
            index: 204,
            displayName: "Border Width",
            group: "Style",
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            default: 1,
            applyDefault: !1,
          },
          borderColor: {
            index: 205,
            displayName: "Border Color",
            group: "Style",
            type: "color",
            default: "#000000",
          },
        },
        outputProps: {},
        methods: {},
      };
      v.addAlignInputs(Wo),
        v.addTransformInputs(Wo),
        v.addMarginInputs(Wo),
        v.addSharedVisualInputs(Wo),
        Oo(Wo);
      const zo = (Wo = W(Wo));
      function Ho() {
        return (Ho =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function qo(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function $o(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function Yo(e) {
        const [n, i] = (0, t.useState)(e.value);
        (0, t.useEffect)(() => {
          i(e.value);
        }, []),
          (0, t.useEffect)(() => {
            i(e.value);
          }, [e.value]);
        var o = (function (t) {
          for (var e = 1; e < arguments.length; e++) {
            var n = null != arguments[e] ? arguments[e] : {};
            e % 2
              ? qo(Object(n), !0).forEach(function (e) {
                  $o(t, e, n[e]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
              : qo(Object(n)).forEach(function (e) {
                  Object.defineProperty(
                    t,
                    e,
                    Object.getOwnPropertyDescriptor(n, e)
                  );
                });
          }
          return t;
        })({}, e.style);
        O.size(o, e),
          O.align(o, e),
          void 0 !== e.textStyle && (o = Object.assign({}, e.textStyle, o)),
          e.boxShadowEnabled &&
            (o.boxShadow = `${e.boxShadowInset ? "inset " : ""}${
              e.boxShadowOffsetX
            } ${e.boxShadowOffsetY} ${e.boxShadowBlurRadius} ${
              e.boxShadowSpreadRadius
            } ${e.boxShadowColor}`);
        const r =
            void 0 === n || "" === n || void 0 === e.items
              ? -1
              : e.items.findIndex((t) => t.Value === n),
          s = { id: e.id, style: o, onClick: e.onClick };
        let a = "ndl-controls-select";
        return (
          e.className && (a = a + " " + e.className),
          React.createElement(
            "select",
            Ho(
              {
                className: a,
                ref: (t) => {
                  t && (t.selectedIndex = r);
                },
              },
              s,
              { disabled: !e.enabled, value: n },
              _o(e),
              {
                onChange: (t) => {
                  i(t.target.value),
                    e.valueChanged && e.valueChanged(t.target.value);
                },
              }
            ),
            void 0 !== e.items
              ? e.items.map((t) =>
                  React.createElement(
                    "option",
                    {
                      value: t.Value,
                      disabled:
                        "true" === t.Disabled || !0 === t.Disabled || void 0,
                      selected: t.Value === n,
                    },
                    t.Label
                  )
                )
              : null
          )
        );
      }
      var Xo = {
        name: "Options",
        displayName: "Options",
        docs: "https://docs.noodl.net/#/nodes/visual/options",
        allowChildren: !1,
        noodlNodeAsProp: !0,
        initialize: function () {
          (this._itemsChanged = () => {
            this.forceUpdate();
          }),
            (this.props.id = this._internal.controlId = "input-" + gi()()),
            (this.props.enabled = this._internal.enabled = !0),
            (this.outputPropValues.hoverState =
              this.outputPropValues.focusState =
              this.outputPropValues.pressedState =
                !1),
            (this.props.valueChanged = (t) => {
              const e = this._internal.value !== t;
              (this._internal.value = t),
                e &&
                  (this.flagOutputDirty("value"),
                  this.sendSignalOnOutput("onChange"));
            });
        },
        getReactComponent: () => Yo,
        inputs: {
          enabled: {
            type: "boolean",
            displayName: "Enabled",
            group: "General",
            default: !0,
            set: function (t) {
              const e = (t = !!t) !== this._internal.enabled;
              (this.props.enabled = this._internal.enabled = t),
                e && (this.forceUpdate(), this.flagOutputDirty("enabled"));
            },
          },
          items: {
            type: "array",
            displayName: "Items",
            group: "General",
            set: function (t) {
              this._internal.items !== t &&
                void 0 !== this._internal.items &&
                this._internal.items.off("change", this._itemsChanged),
                (this._internal.items = t),
                this._internal.items.on("change", this._itemsChanged),
                (this.props.items = this._internal.items);
            },
          },
          value: {
            type: "*",
            displayName: "Value",
            group: "General",
            set: function (t) {
              if (void 0 !== t && "string" != typeof t) {
                if (void 0 === t.toString) return;
                t = t.toString();
              }
              const e = t !== this._internal.value;
              (this.props.value = this._internal.value = t),
                e && (this.forceUpdate(), this.flagOutputDirty("value"));
            },
          },
          textStyle: {
            index: 20,
            type: "textStyle",
            group: "Text",
            displayName: "Text Style",
            default: "None",
            set(t) {
              (this.props.textStyle = this.context.styles.getTextStyle(t)),
                this.forceUpdate();
            },
          },
          fontFamily: {
            index: 21,
            type: "font",
            group: "Text",
            displayName: "Font Family",
            set(t) {
              if (t) {
                let e = t;
                e.split(".").length > 1 &&
                  ((e = e.replace(/\.[^/.]+$/, "")), (e = e.split("/").pop())),
                  this.setStyle({ fontFamily: e });
              } else this.removeStyle(["fontFamily"]);
              this.props.textStyle && this.forceUpdate();
            },
          },
        },
        outputs: {
          controlId: {
            type: "string",
            displayName: "Control Id",
            group: "General",
            getter: function () {
              return this._internal.controlId;
            },
          },
          enabled: {
            type: "boolean",
            displayName: "Enabled",
            group: "States",
            getter: function () {
              return this._internal.enabled;
            },
          },
          value: {
            type: "string",
            displayName: "Value",
            group: "States",
            getter: function () {
              return this._internal.value;
            },
          },
          onChange: { type: "signal", displayName: "Changed", group: "Events" },
        },
        inputCss: {
          fontSize: {
            index: 21,
            group: "Text",
            displayName: "Font Size",
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            onChange() {
              this.props.textStyle && this.forceUpdate();
            },
          },
          color: {
            index: 24,
            group: "Text",
            displayName: "Color",
            type: "color",
          },
          backgroundColor: {
            index: 100,
            displayName: "Background Color",
            group: "Style",
            type: "color",
            default: "transparent",
          },
          borderRadius: {
            index: 202,
            displayName: "Border Radius",
            group: "Style",
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            default: 0,
            applyDefault: !1,
          },
          borderStyle: {
            index: 203,
            displayName: "Border Style",
            group: "Style",
            type: {
              name: "enum",
              enums: [
                { label: "None", value: "none" },
                { label: "Solid", value: "solid" },
                { label: "Dotted", value: "dotted" },
                { label: "Dashed", value: "dashed" },
              ],
            },
            default: "solid",
            applyDefault: !1,
          },
          borderWidth: {
            index: 204,
            displayName: "Border Width",
            group: "Style",
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            default: 1,
            applyDefault: !1,
          },
          borderColor: {
            index: 205,
            displayName: "Border Color",
            group: "Style",
            type: "color",
            default: "#000000",
          },
        },
        inputProps: {
          boxShadowEnabled: {
            index: 250,
            group: "Box Shadow",
            displayName: "Shadow Enabled",
            type: "boolean",
            default: !1,
          },
          boxShadowOffsetX: {
            index: 251,
            group: "Box Shadow",
            displayName: "Offset X",
            default: 0,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowOffsetY: {
            index: 252,
            group: "Box Shadow",
            displayName: "Offset Y",
            default: 0,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowBlurRadius: {
            index: 253,
            group: "Box Shadow",
            displayName: "Blur Radius",
            default: 5,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowSpreadRadius: {
            index: 254,
            group: "Box Shadow",
            displayName: "Spread Radius",
            default: 2,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowInset: {
            index: 255,
            group: "Box Shadow",
            displayName: "Inset",
            type: "boolean",
            default: !1,
          },
          boxShadowColor: {
            index: 256,
            group: "Box Shadow",
            displayName: "Shadow Color",
            type: "color",
            default: "rgba(0,0,0,0.2)",
          },
        },
        outputProps: {},
        dynamicports: [
          {
            condition: "boxShadowEnabled = true",
            inputs: [
              "boxShadowOffsetX",
              "boxShadowOffsetY",
              "boxShadowInset",
              "boxShadowBlurRadius",
              "boxShadowSpreadRadius",
              "boxShadowColor",
            ],
          },
        ],
        methods: {},
      };
      v.addDimensions(Xo, {
        defaultSizeMode: "contentSize",
        contentLabel: "Content",
      }),
        v.addAlignInputs(Xo),
        v.addTransformInputs(Xo),
        v.addPaddingInputs(Xo),
        v.addMarginInputs(Xo),
        v.addSharedVisualInputs(Xo),
        Oo(Xo),
        ((Xo = W(Xo)).setup = function (t, e) {
          e.on("nodeAdded.Options", function (t) {
            t.parameters.fontFamily &&
              t.parameters.fontFamily.split(".").length > 1 &&
              l().instance.loadFont(t.parameters.fontFamily),
              t.on("parameterUpdated", function (t) {
                "fontFamily" === t.name &&
                  t.value &&
                  t.value.split(".").length > 1 &&
                  l().instance.loadFont(t.value);
              });
          });
        });
      const Go = Xo;
      function Jo() {
        return (Jo =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function Qo(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function Ko(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function Zo(t, e) {
        return `\n    .${t}::-webkit-slider-thumb {\n        width: ${e.thumbWidth};\n        height: ${e.thumbHeight};\n        background: ${e.thumbColor};\n        border: 0;\n        border-radius: ${e.thumbRadius};\n        cursor: pointer;\n        -webkit-appearance: none;\n        margin-top:calc(${e.trackHeight}/2 - ${e.thumbHeight}/2);\n    }\n    \n    .${t}::-moz-range-thumb {\n        width: ${e.thumbWidth};\n        height: ${e.thumbHeight};\n        background: ${e.thumbColor};\n        border: none;\n        border-radius: ${e.thumbRadius};\n        cursor: pointer;\n    }\n    \n    .${t}::-ms-thumb {\n        width: ${e.thumbWidth};\n        height: ${e.thumbHeight};\n        background: ${e.thumbColor};\n        border: none;\n        border-radius: ${e.thumbRadius};\n        cursor: pointer;\n        margin-top: 0px;\n    }\n    \n    .${t}::-webkit-slider-runnable-track {\n        background: ${e.trackColor};\n        border: none;\n        width: 100%;\n        height: ${e.trackHeight};\n        cursor: pointer;\n        margin-top:0px;\n    }\n    \n    .${t}:focus::-webkit-slider-runnable-track {\n        background: ${e.trackColor};\n    }\n    \n    .${t}::-moz-range-track {\n        background: ${e.trackColor};\n        border: none;\n        width: 100%;\n        height: ${e.trackHeight};\n        cursor: pointer;\n    }\n    \n    .${t}::-ms-track {\n        background: transparent;\n        border:none;\n        color: transparent;\n        width: 100%;\n        height: ${e.trackHeight};\n        cursor: pointer;\n    }\n    \n    .${t}::-ms-fill-lower {\n        background: ${e.trackColor};\n        border: none;\n    }\n    .${t}::-ms-fill-upper {\n        background: ${e.trackColor};\n        border: none;\n    }    \n    `;
      }
      function tr(e) {
        const [n, i] = (0, t.useState)(e.value);
        (0, t.useEffect)(() => {
          i(e.value);
        }, []),
          (0, t.useEffect)(() => {
            i(e.value);
          }, [e.value]);
        var o = (function (t) {
          for (var e = 1; e < arguments.length; e++) {
            var n = null != arguments[e] ? arguments[e] : {};
            e % 2
              ? Qo(Object(n), !0).forEach(function (e) {
                  Ko(t, e, n[e]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
              : Qo(Object(n)).forEach(function (e) {
                  Object.defineProperty(
                    t,
                    e,
                    Object.getOwnPropertyDescriptor(n, e)
                  );
                });
          }
          return t;
        })({}, e.style);
        O.size(o, e), O.align(o, e);
        const r = { id: e.id, min: e.min, max: e.max, step: e.step, style: o };
        wo("ndl-controls-range-" + e._nodeId, e, Zo);
        let s = "ndl-controls-range-" + e._nodeId + " ndl-controls-range";
        return (
          e.className && (s = s + " " + e.className),
          React.createElement(
            "input",
            Jo({ className: s }, _o(e), { type: "range" }, r, {
              value: n,
              disabled: !e.enabled,
              onChange: (t) => {
                i(t.target.value),
                  e.valueChanged && e.valueChanged(t.target.value);
              },
            })
          )
        );
      }
      var er = {
        name: "Range",
        docs: "https://docs.noodl.net/#/nodes/visual/range",
        allowChildren: !1,
        noodlNodeAsProp: !0,
        initialize() {
          (this.props.sizeMode = "explicit"),
            (this.props.id = this._internal.controlId = "input-" + gi()()),
            (this.props.enabled = this._internal.enabled = !0),
            (this._internal.value = this.props.value = this.props.min),
            (this.props._nodeId = this.id),
            (this.props.valueChanged = (t) => {
              t = "string" == typeof t ? parseFloat(t) : t;
              const e = this._internal.value !== t;
              (this._internal.value = t),
                this._updateValuePercent(t),
                e &&
                  (this.flagOutputDirty("value"),
                  this.sendSignalOnOutput("onChange"));
            }),
            this.props.valueChanged(this.props.value),
            (this.outputPropValues.hoverState =
              this.outputPropValues.focusState =
              this.outputPropValues.pressedState =
                !1);
        },
        getReactComponent: () => tr,
        inputs: {
          enabled: {
            type: "boolean",
            displayName: "Enabled",
            group: "General",
            default: !0,
            set: function (t) {
              const e = (t = !!t) !== this._internal.enabled;
              (this.props.enabled = this._internal.enabled = t),
                e && (this.forceUpdate(), this.flagOutputDirty("enabled"));
            },
          },
          value: {
            type: "string",
            displayName: "Value",
            group: "General",
            set: function (t) {
              const e = t !== this._internal.value;
              (this.props.value = this._internal.value = t),
                this._updateValuePercent(t),
                e && (this.forceUpdate(), this.flagOutputDirty("value"));
            },
          },
        },
        outputs: {
          controlId: {
            type: "string",
            displayName: "Control Id",
            group: "General",
            getter: function () {
              return this._internal.controlId;
            },
          },
          enabled: {
            type: "boolean",
            displayName: "Enabled",
            group: "States",
            getter: function () {
              return this._internal.enabled;
            },
          },
          value: {
            type: "number",
            displayName: "Value",
            group: "States",
            getter: function () {
              return this._internal.value;
            },
          },
          valuePercent: {
            type: "number",
            displayName: "Value Percent",
            group: "States",
            getter: function () {
              return this._internal.valuePercent;
            },
          },
          onChange: { type: "signal", displayName: "Changed", group: "Events" },
        },
        inputProps: {
          min: {
            type: "number",
            displayName: "Min",
            group: "General",
            default: 0,
          },
          max: {
            type: "number",
            displayName: "Max",
            group: "General",
            default: 100,
          },
          step: {
            type: "number",
            displayName: "Step",
            group: "General",
            default: 1,
          },
          width: {
            index: 11,
            group: "Dimensions",
            displayName: "Width",
            type: {
              name: "number",
              units: ["%", "px", "vw"],
              defaultUnit: "%",
            },
            default: 100,
          },
          height: {
            index: 12,
            group: "Dimensions",
            displayName: "Height",
            type: {
              name: "number",
              units: ["%", "px", "vh"],
              defaultUnit: "%",
            },
            default: 100,
          },
          thumbWidth: {
            group: "Thumb Style",
            displayName: "Width",
            type: {
              name: "number",
              units: ["px", "vw", "%"],
              defaultUnit: "px",
              allowEditOnly: !0,
            },
            default: 16,
          },
          thumbHeight: {
            group: "Thumb Style",
            displayName: "Height",
            type: {
              name: "number",
              units: ["px", "vh", "%"],
              defaultUnit: "px",
              allowEditOnly: !0,
            },
            default: 16,
          },
          thumbRadius: {
            group: "Thumb Style",
            displayName: "Radius",
            type: {
              name: "number",
              units: ["px", "%"],
              defaultUnit: "px",
              allowEditOnly: !0,
            },
            default: 8,
          },
          thumbColor: {
            group: "Thumb Style",
            displayName: "Color",
            type: { name: "color", allowEditOnly: !0 },
            default: "#000000",
          },
          trackHeight: {
            group: "Track Style",
            displayName: "Height",
            type: {
              name: "number",
              units: ["px", "vh", "%"],
              defaultUnit: "px",
              allowEditOnly: !0,
            },
            default: 6,
          },
          trackColor: {
            group: "Track Style",
            displayName: "Color",
            type: { name: "color", allowEditOnly: !0 },
            default: "#f0f0f0",
          },
        },
        inputCss: {
          backgroundColor: {
            index: 201,
            displayName: "Background Color",
            group: "Style",
            type: "color",
          },
          borderRadius: {
            index: 202,
            displayName: "Border Radius",
            group: "Style",
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            default: 1,
            applyDefault: !1,
          },
          borderStyle: {
            index: 203,
            displayName: "Border Style",
            group: "Style",
            type: {
              name: "enum",
              enums: [
                { label: "None", value: "none" },
                { label: "Solid", value: "solid" },
                { label: "Dotted", value: "dotted" },
                { label: "Dashed", value: "dashed" },
              ],
            },
            default: "none",
            applyDefault: !1,
          },
          borderWidth: {
            index: 204,
            displayName: "Border Width",
            group: "Style",
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            default: 1,
            applyDefault: !1,
          },
          borderColor: {
            index: 205,
            displayName: "Border Color",
            group: "Style",
            type: "color",
            default: "#000000",
          },
        },
        outputProps: {},
        methods: {
          _updateValuePercent(t) {
            const e = this.props.min,
              n = this.props.max,
              i = Math.floor(((t - e) / (n - e)) * 100),
              o = this._internal.valuePercentChanged !== i;
            (this._internal.valuePercent = i),
              o && this.flagOutputDirty("valuePercent");
          },
        },
      };
      v.addAlignInputs(er),
        v.addTransformInputs(er),
        v.addMarginInputs(er),
        v.addSharedVisualInputs(er),
        Oo(er);
      const nr = (er = W(er));
      function ir() {
        return (ir =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function or(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function rr(t) {
        for (var e = 1; e < arguments.length; e++) {
          var n = null != arguments[e] ? arguments[e] : {};
          e % 2
            ? or(Object(n), !0).forEach(function (e) {
                sr(t, e, n[e]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
            : or(Object(n)).forEach(function (e) {
                Object.defineProperty(
                  t,
                  e,
                  Object.getOwnPropertyDescriptor(n, e)
                );
              });
        }
        return t;
      }
      function sr(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function ar(t) {
        t.stopPropagation(), window.removeEventListener("click", ar, !0);
      }
      class lr extends e().Component {
        constructor(t) {
          super(t),
            (this.state = { value: t.startValue }),
            (this.ref = e().createRef());
        }
        setText(t) {
          this.setState({ value: t }),
            this.props.onTextChanged && this.props.onTextChanged(t);
        }
        componentDidMount() {
          (this.ref.current.noodlNode = this.props.noodlNode),
            this.setText(this.props.startValue);
        }
        render() {
          const t = rr(rr({}, this.props.textStyle), this.props.style);
          O.size(t, this.props),
            O.align(t, this.props),
            0 === t.opacity && (t.pointerEvents = "none");
          const n = this.props,
            i = rr(
              rr({ id: n.id, value: this.state.value }, _o(n)),
              {},
              {
                disabled: !n.enabled,
                style: t,
                className: n.className,
                placeholder: n.placeholder,
                onChange: (t) => this.onChange(t),
              }
            );
          return "textArea" !== this.props.type
            ? e().createElement(
                "input",
                ir({ ref: this.ref, type: this.props.type }, i, {
                  onKeyDown: (t) => this.onKeyDown(t),
                  onMouseDown: () => window.addEventListener("click", ar, !0),
                })
              )
            : ((i.style.resize = "none"),
              e().createElement(
                "textarea",
                ir({ ref: this.ref }, i, {
                  onKeyDown: (t) => this.onKeyDown(t),
                })
              ));
        }
        onKeyDown(t) {
          ("Enter" !== t.key && 13 !== t.which) ||
            (this.props.onEnter && this.props.onEnter());
        }
        onChange(t) {
          const e = t.target.value;
          this.setText(e);
        }
        focus() {
          this.ref.current && this.ref.current.focus();
        }
        blur() {
          this.ref.current && this.ref.current.blur();
        }
      }
      const ur = {
        name: "Text Input",
        docs: "https://docs.noodl.net/#/nodes/visual/text-input",
        allowChildren: !1,
        noodlNodeAsProp: !0,
        getReactComponent: () => lr,
        defaultCss: { outline: "none", borderStyle: "solid", padding: 0 },
        initialize() {
          (this.props.startValue = ""),
            (this.props.id = this._internal.controlId = "input-" + gi()()),
            (this.props.enabled = this._internal.enabled = !0),
            (this.outputPropValues.hoverState =
              this.outputPropValues.focusState =
              this.outputPropValues.pressedState =
                !1);
        },
        inputProps: {
          type: {
            displayName: "Type",
            group: "Text",
            index: 19,
            type: {
              name: "enum",
              enums: [
                { label: "Text", value: "text" },
                { label: "Text Area", value: "textArea" },
                { label: "Email", value: "email" },
                { label: "Number", value: "number" },
                { label: "Password", value: "password" },
                { label: "URL", value: "url" },
              ],
            },
            default: "text",
          },
          placeholder: {
            index: 22,
            group: "Text",
            displayName: "Placeholder",
            default: "Type here...",
            type: { name: "string" },
          },
          boxShadowEnabled: {
            index: 250,
            group: "Box Shadow",
            displayName: "Shadow Enabled",
            type: "boolean",
            default: !1,
          },
          boxShadowOffsetX: {
            index: 251,
            group: "Box Shadow",
            displayName: "Offset X",
            default: 0,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowOffsetY: {
            index: 252,
            group: "Box Shadow",
            displayName: "Offset Y",
            default: 0,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowBlurRadius: {
            index: 253,
            group: "Box Shadow",
            displayName: "Blur Radius",
            default: 5,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowSpreadRadius: {
            index: 254,
            group: "Box Shadow",
            displayName: "Spread Radius",
            default: 2,
            type: { name: "number", units: ["px"], defaultUnit: "px" },
          },
          boxShadowInset: {
            index: 255,
            group: "Box Shadow",
            displayName: "Inset",
            type: "boolean",
            default: !1,
          },
          boxShadowColor: {
            index: 256,
            group: "Box Shadow",
            displayName: "Shadow Color",
            type: "color",
            default: "rgba(0,0,0,0.2)",
          },
        },
        inputs: {
          enabled: {
            type: "boolean",
            displayName: "Enabled",
            group: "General",
            default: !0,
            set: function (t) {
              const e = (t = !!t) !== this._internal.enabled;
              (this.props.enabled = this._internal.enabled = t),
                e && (this.forceUpdate(), this.flagOutputDirty("enabled"));
            },
          },
          set: {
            group: "Actions",
            displayName: "Set",
            type: "signal",
            valueChangedToTrue() {
              this.scheduleAfterInputsHaveUpdated(() => {
                this.setText(this._internal.text);
              });
            },
          },
          startValue: {
            index: 18,
            displayName: "Text",
            type: "string",
            group: "Text",
            set(t) {
              this._internal.text !== t &&
                ((this._internal.text = t),
                !1 === this.isInputConnected("set") && this.setText(t));
            },
          },
          textStyle: {
            index: 19,
            type: "textStyle",
            group: "Text",
            displayName: "Text Style",
            default: "None",
            set(t) {
              (this.props.textStyle = this.context.styles.getTextStyle(t)),
                this.forceUpdate();
            },
          },
          fontFamily: {
            index: 20,
            type: "font",
            group: "Text",
            displayName: "Font Family",
            set(t) {
              if (t) {
                let e = t;
                e.split(".").length > 1 &&
                  ((e = e.replace(/\.[^/.]+$/, "")), (e = e.split("/").pop())),
                  this.setStyle({ fontFamily: e });
              } else this.removeStyle(["fontFamily"]);
              this.props.textStyle && this.forceUpdate();
            },
          },
          clear: {
            type: "signal",
            group: "Actions",
            displayName: "Clear",
            valueChangedToTrue() {
              this.setText("");
            },
          },
          focus: {
            type: "signal",
            group: "Actions",
            displayName: "Focus",
            valueChangedToTrue() {
              this.context.setNodeFocused(this, !0);
            },
          },
          blur: {
            type: "signal",
            group: "Actions",
            displayName: "Blur",
            valueChangedToTrue() {
              this.context.setNodeFocused(this, !1);
            },
          },
        },
        inputCss: {
          fontSize: {
            index: 21,
            group: "Text",
            displayName: "Font Size",
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            onChange() {
              this.props.textStyle && this.forceUpdate();
            },
          },
          color: {
            index: 99,
            type: "color",
            displayName: "Font Color",
            group: "Style",
          },
          backgroundColor: {
            index: 100,
            displayName: "Background Color",
            group: "Style",
            type: "color",
            default: "transparent",
          },
          borderColor: {
            index: 101,
            displayName: "Border Color",
            group: "Style",
            type: "color",
            default: "black",
          },
          borderWidth: {
            index: 102,
            displayName: "Border Width",
            group: "Style",
            type: { name: "number", units: ["px"], defaultUnit: "px" },
            default: 0,
          },
        },
        outputs: {
          controlId: {
            type: "string",
            displayName: "Control Id",
            group: "General",
            getter: function () {
              return this._internal.controlId;
            },
          },
          enabled: {
            type: "boolean",
            displayName: "Enabled",
            group: "States",
            getter: function () {
              return this._internal.enabled;
            },
          },
        },
        outputProps: {
          onTextChanged: {
            group: "Value",
            displayName: "Text",
            type: "string",
          },
          onEnter: { group: "Events", displayName: "On Enter", type: "signal" },
        },
        dynamicports: [
          {
            condition: "boxShadowEnabled = true",
            inputs: [
              "boxShadowOffsetX",
              "boxShadowOffsetY",
              "boxShadowInset",
              "boxShadowBlurRadius",
              "boxShadowSpreadRadius",
              "boxShadowColor",
            ],
          },
        ],
        methods: {
          _focus() {
            this.innerReactComponentRef && this.innerReactComponentRef.focus();
          },
          _blur() {
            this.innerReactComponentRef && this.innerReactComponentRef.blur();
          },
          setText(t) {
            (this.props.startValue = t),
              this.innerReactComponentRef
                ? this.innerReactComponentRef.setText(t)
                : this.outputPropValues.onTextChanged !== t &&
                  ((this.outputPropValues.onTextChanged = t),
                  this.flagOutputDirty("onTextChanged"));
          },
        },
      };
      v.addDimensions(ur, {
        defaultSizeMode: "contentSize",
        contentLabel: "Text",
      }),
        v.addAlignInputs(ur),
        v.addTransformInputs(ur),
        v.addPaddingInputs(ur),
        v.addMarginInputs(ur),
        v.addSharedVisualInputs(ur),
        Oo(ur);
      const pr = W(ur);
      pr.setup = function (t, e) {
        e.on("nodeAdded.Text Input", function (t) {
          t.parameters.fontFamily &&
            t.parameters.fontFamily.split(".").length > 1 &&
            l().instance.loadFont(t.parameters.fontFamily),
            t.on("parameterUpdated", function (t) {
              "fontFamily" === t.name &&
                t.value &&
                t.value.split(".").length > 1 &&
                l().instance.loadFont(t.value);
            });
        });
      };
      const cr = pr;
      function dr() {
        return (dr =
          Object.assign ||
          function (t) {
            for (var e = 1; e < arguments.length; e++) {
              var n = arguments[e];
              for (var i in n)
                Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
            }
            return t;
          }).apply(this, arguments);
      }
      function hr(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function fr(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function gr(t) {
        var e = (function (t) {
          for (var e = 1; e < arguments.length; e++) {
            var n = null != arguments[e] ? arguments[e] : {};
            e % 2
              ? hr(Object(n), !0).forEach(function (e) {
                  fr(t, e, n[e]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
              : hr(Object(n)).forEach(function (e) {
                  Object.defineProperty(
                    t,
                    e,
                    Object.getOwnPropertyDescriptor(n, e)
                  );
                });
          }
          return t;
        })({}, t.style);
        O.size(e, t),
          O.align(e, t),
          void 0 !== t.textStyle && (e = Object.assign({}, t.textStyle, e));
        const n = { for: t.for, onClick: t.onClick };
        let i = "ndl-controls-label";
        return (
          t.className && (i = i + " " + t.className),
          React.createElement(
            "label",
            dr({ className: i, style: e }, n),
            t.text
          )
        );
      }
      const mr = {
        name: "Label",
        displayName: "Label",
        docs: "https://docs.noodl.net/#/nodes/visual/label",
        allowChildren: !0,
        noodlNodeAsProp: !0,
        deprecated: !0,
        getReactComponent: () => gr,
        defaultCss: { position: "relative", display: "flex" },
        inputProps: {
          for: { type: "string", displayName: "For", group: "General" },
          text: { type: "string", displayName: "Text", group: "General" },
        },
      };
      v.addDimensions(mr, {
        defaultSizeMode: "contentSize",
        contentLabel: "Content",
      }),
        v.addAlignInputs(mr),
        v.addTextStyleInputs(mr),
        v.addTransformInputs(mr),
        v.addMarginInputs(mr),
        v.addSharedVisualInputs(mr),
        v.addBorderInputs(mr);
      const yr = W(mr);
      function vr(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function br(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function Sr(t) {
        var e = (function (t) {
          for (var e = 1; e < arguments.length; e++) {
            var n = null != arguments[e] ? arguments[e] : {};
            e % 2
              ? vr(Object(n), !0).forEach(function (e) {
                  br(t, e, n[e]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
              : vr(Object(n)).forEach(function (e) {
                  Object.defineProperty(
                    t,
                    e,
                    Object.getOwnPropertyDescriptor(n, e)
                  );
                });
          }
          return t;
        })({}, t.style);
        O.size(e, t), O.align(e, t);
        let n = "ndl-controls-fieldset";
        return (
          t.className && (n = n + " " + t.className),
          React.createElement(
            "fieldset",
            { className: n, style: e },
            t.children
          )
        );
      }
      var wr = {
        name: "Field Set",
        docs: "https://docs.noodl.net/#/nodes/visual/fieldset",
        allowChildren: !0,
        noodlNodeAsProp: !0,
        deprecated: !0,
        initialize() {},
        defaultCss: {
          display: "flex",
          position: "relative",
          flexDirection: "column",
        },
        getReactComponent: () => Sr,
        inputs: {
          flexDirection: {
            index: 11,
            displayName: "Layout",
            group: "Layout",
            type: {
              name: "enum",
              enums: [
                { label: "Vertical", value: "column" },
                { label: "Horizontal", value: "row" },
              ],
            },
            default: "column",
            set(t) {
              (this.props.layout = t),
                "none" !== t
                  ? this.setStyle({ flexDirection: t })
                  : this.removeStyle(["flexDirection"]),
                this.context.editorConnection &&
                  ("none" === t || Q.includes(t)
                    ? this.context.editorConnection.clearWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "layout-warning"
                      )
                    : this.context.editorConnection.sendWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "layout-warning",
                        {
                          message:
                            "Invalid Layout value has to be a valid flex-direction value.",
                        }
                      )),
                this.forceUpdate();
            },
          },
        },
        inputProps: {},
        outputProps: {},
      };
      v.addDimensions(wr, {
        defaultSizeMode: "contentSize",
        contentLabel: "Content",
      }),
        v.addAlignInputs(wr),
        v.addTransformInputs(wr),
        v.addMarginInputs(wr),
        v.addPaddingInputs(wr),
        v.addSharedVisualInputs(wr);
      const Or = (wr = W(wr));
      function _r(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function Nr(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      function Cr(t) {
        var e = (function (t) {
          for (var e = 1; e < arguments.length; e++) {
            var n = null != arguments[e] ? arguments[e] : {};
            e % 2
              ? _r(Object(n), !0).forEach(function (e) {
                  Nr(t, e, n[e]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
              : _r(Object(n)).forEach(function (e) {
                  Object.defineProperty(
                    t,
                    e,
                    Object.getOwnPropertyDescriptor(n, e)
                  );
                });
          }
          return t;
        })({}, t.style);
        O.size(e, t), O.align(e, t);
        let n = "ndl-controls-form";
        return (
          t.className && (n = n + " " + t.className),
          React.createElement(
            "form",
            {
              className: n,
              style: e,
              onSubmit: (e) => {
                e.preventDefault(), t.onSubmit && t.onSubmit();
              },
            },
            t.children
          )
        );
      }
      var Ir = {
        name: "Form",
        docs: "https://docs.noodl.net/#/nodes/visual/form",
        allowChildren: !0,
        noodlNodeAsProp: !0,
        deprecated: !0,
        initialize() {},
        defaultCss: {
          display: "flex",
          position: "relative",
          flexDirection: "column",
        },
        getReactComponent: () => Cr,
        inputs: {
          flexDirection: {
            index: 11,
            displayName: "Layout",
            group: "Layout",
            type: {
              name: "enum",
              enums: [
                { label: "None", value: "none" },
                { label: "Vertical", value: "column" },
                { label: "Horizontal", value: "row" },
              ],
            },
            default: "column",
            set(t) {
              (this.props.layout = t),
                "none" !== t
                  ? this.setStyle({ flexDirection: t })
                  : this.removeStyle(["flexDirection"]),
                this.context.editorConnection &&
                  ("none" === t || Q.includes(t)
                    ? this.context.editorConnection.clearWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "layout-warning"
                      )
                    : this.context.editorConnection.sendWarning(
                        this.nodeScope.componentOwner.name,
                        this.id,
                        "layout-warning",
                        {
                          message:
                            "Invalid Layout value has to be a valid flex-direction value.",
                        }
                      )),
                this.forceUpdate();
            },
          },
        },
        inputProps: {},
        outputProps: {
          onSubmit: { type: "signal", displayName: "Submit", group: "Events" },
        },
      };
      v.addDimensions(Ir, {
        defaultSizeMode: "contentSize",
        contentLabel: "Content",
      }),
        v.addAlignInputs(Ir),
        v.addTransformInputs(Ir),
        v.addMarginInputs(Ir),
        v.addPaddingInputs(Ir),
        v.addSharedVisualInputs(Ir);
      const xr = (Ir = W(Ir));
      var Pr = n(5294),
        Er = n.n(Pr);
      const Tr = n(5936);
      function Dr(t, e) {
        e.positionX && e.positionX(t.x),
          e.positionY && e.positionY(t.y),
          e.deltaX && e.deltaX(t.deltaX),
          e.deltaY && e.deltaY(t.deltaY);
      }
      class kr extends e().Component {
        constructor(t) {
          super(t), (this.state = { x: 0, y: 0 });
        }
        snapToPosition({
          timerScheduler: t,
          propCallback: e,
          duration: n,
          axis: i,
          endValue: o,
        }) {
          const r = this;
          return t
            .createTimer({
              duration: void 0 === n ? 300 : n,
              startValue: this.state[i],
              endValue: o,
              ease: Tr.easeOut,
              onRunning: function (t) {
                const n = this.ease(this.startValue, this.endValue, t);
                r.setState({ [i]: n }), e && e(n);
              },
            })
            .start();
        }
        componentDidMount() {
          const t = this.props.inputPositionX ? this.props.inputPositionX : 0,
            e = this.props.inputPositionY ? this.props.inputPositionY : 0;
          this.setState({ x: t, y: e }),
            Dr({ x: t, y: e, deltaX: 0, deltaY: 0 }, this.props);
        }
        componentWillReceiveProps(t) {
          const e = this.props;
          e.inputPositionX !== t.inputPositionX &&
            (this.setState({ x: t.inputPositionX }),
            e.positionX && e.positionX(t.inputPositionX),
            e.deltaX && e.deltaX(t.inputPositionX - e.inputPositionX)),
            e.inputPositionY !== t.inputPositionY &&
              (this.setState({ y: t.inputPositionY }),
              e.positionY && e.positionY(t.inputPositionY),
              e.deltaY && e.deltaY(t.inputPositionY - e.inputPositionY));
        }
        snapToPositionX(t, e) {
          this.state.x !== t &&
            (this.snapToPositionXTimer && this.snapToPositionXTimer.stop(),
            (this.snapToPositionXTimer = this.snapToPosition({
              timerScheduler: this.props.noodlNode.context.timerScheduler,
              propCallback: this.props.positionX,
              duration: e,
              axis: "x",
              endValue: t,
            })));
        }
        snapToPositionY(t, e) {
          this.state.y !== t &&
            (this.snapToPositionYTimer && this.snapToPositionYTimer.stop(),
            (this.snapToPositionYTimer = this.snapToPosition({
              timerScheduler: this.props.noodlNode.context.timerScheduler,
              propCallback: this.props.positionY,
              duration: e,
              axis: "y",
              endValue: t,
            })));
        }
        render() {
          const t = this.props;
          let n,
            i = t.useParentBounds ? "parent" : void 0;
          return e().Children.count(t.children) > 0
            ? ((n = e().Children.toArray(t.children)[0]),
              e().createElement(
                Er(),
                {
                  axis: t.axis,
                  bounds: i,
                  disabled: !1 === t.enabled,
                  position: { x: this.state.x, y: this.state.y },
                  onStart: (e, n) => {
                    Dr(n, t),
                      t.onStart && t.onStart(),
                      this.snapToPositionXTimer &&
                        this.snapToPositionXTimer.stop(),
                      this.snapToPositionYTimer &&
                        this.snapToPositionYTimer.stop();
                  },
                  onStop: (e, n) => {
                    ("x" !== t.axis && "both" !== t.axis) ||
                      this.setState({ x: n.x }),
                      ("y" !== t.axis && "both" !== t.axis) ||
                        this.setState({ y: n.y }),
                      t.positionX && t.positionX(n.x),
                      t.positionY && t.positionY(n.y),
                      t.onStop && t.onStop();
                  },
                  onDrag: (e, n) => {
                    Dr(n, t), t.onDrag && t.onDrag();
                  },
                },
                e().cloneElement(n, { parentLayout: t.parentLayout })
              ))
            : null;
        }
      }
      const Rr = W({
        name: "Drag",
        docs: "https://docs.noodl.net/nodes/utilities/drag",
        allowChildren: !0,
        noodlNodeAsProp: !0,
        getReactComponent: () => kr,
        initialize() {
          (this._internal.snapPositionX = 0),
            (this._internal.snapPositionY = 0),
            (this._internal.snapDurationX = 300),
            (this._internal.snapDurationY = 300);
        },
        inputs: {
          "snapToPositionX.do": {
            group: "Snap To Position X",
            displayName: "Do",
            editorName: "Do|Snap To Position X",
            type: "signal",
            valueChangedToTrue() {
              this.scheduleAfterInputsHaveUpdated(() => {
                const { snapPositionX: t, snapDurationX: e } = this._internal;
                this.innerReactComponentRef &&
                  this.innerReactComponentRef.snapToPositionX(t, e);
              });
            },
          },
          "snapToPositionX.value": {
            default: 0,
            group: "Snap To Position X",
            displayName: "Value",
            editorName: "Value|Snap To Position X",
            type: "number",
            set(t) {
              this._internal.snapPositionX = t;
            },
          },
          "snapToPositionX.duration": {
            default: 300,
            group: "Snap To Position X",
            displayName: "Duration",
            editorName: "Duration|Snap To Position X",
            type: "number",
            set(t) {
              this._internal.snapDurationX = t;
            },
          },
          "snapToPositionY.do": {
            group: "Snap To Position Y",
            displayName: "Do",
            editorName: "Do|Snap To Position Y",
            type: "signal",
            valueChangedToTrue() {
              this.scheduleAfterInputsHaveUpdated(() => {
                const { snapPositionY: t, snapDurationY: e } = this._internal;
                this.innerReactComponentRef &&
                  this.innerReactComponentRef.snapToPositionY(t, e);
              });
            },
          },
          "snapToPositionY.value": {
            default: 0,
            group: "Snap To Position Y",
            displayName: "Value",
            editorName: "Value|Snap To Position Y",
            type: "number",
            set(t) {
              this._internal.snapPositionY = t;
            },
          },
          "snapToPositionY.duration": {
            default: 300,
            group: "Snap To Position Y",
            displayName: "Duration",
            editorName: "Duration|Snap To Position Y",
            type: "number",
            set(t) {
              this._internal.snapDurationY = t;
            },
          },
        },
        inputProps: {
          enabled: {
            group: "Drag",
            displayName: "Enabled",
            type: "boolean",
            default: !0,
          },
          axis: {
            group: "Drag",
            displayName: "Axis",
            type: {
              name: "enum",
              enums: [
                { label: "X", value: "x" },
                { label: "Y", value: "y" },
                { label: "Both", value: "both" },
              ],
            },
            default: "x",
          },
          useParentBounds: {
            group: "Drag",
            displayName: "Constrain to parent",
            type: "boolean",
            default: !0,
          },
          inputPositionX: {
            displayName: "Start Drag X",
            type: { name: "number" },
          },
          inputPositionY: {
            displayName: "Start Drag Y",
            type: { name: "number" },
          },
        },
        outputProps: {
          onStart: {
            group: "Signals",
            type: "signal",
            displayName: "Drag Started",
          },
          onStop: {
            group: "Signals",
            type: "signal",
            displayName: "Drag Ended",
          },
          onDrag: {
            group: "Signals",
            type: "signal",
            displayName: "Drag Moved",
          },
          positionX: { group: "Values", displayName: "Drag X", type: "number" },
          positionY: { group: "Values", displayName: "Drag Y", type: "number" },
          deltaX: { group: "Values", displayName: "Delta X", type: "number" },
          deltaY: { group: "Values", displayName: "Delta Y", type: "number" },
        },
      });
      class Ar {
        constructor(t, e) {
          (this.graphModel = t),
            (this.editorConnection = e),
            this.graphModel
              .getAllComponents()
              .forEach((t) => this._bindComponentModel(t)),
            this.graphModel.on(
              "componentAdded",
              (t) => this._bindComponentModel(t),
              this
            ),
            this.graphModel.on(
              "componentRemoved",
              (t) => t.removeListenersWithRef(this),
              this
            );
        }
        _bindComponentModel(t) {
          t.on("rootAdded", () => this._evaluateWarnings(t), this),
            t.on(
              "rootRemoved",
              (e) => {
                this.editorConnection.clearWarning(
                  t.name,
                  e,
                  "multiple-visual-roots-warning"
                ),
                  this._evaluateWarnings(t);
              },
              this
            ),
            this._evaluateWarnings(t);
        }
        _evaluateWarnings(t) {
          const e = t.getRoots();
          if (0 !== e.lenth) {
            this.editorConnection.clearWarning(
              t.name,
              e[0],
              "multiple-visual-roots-warning"
            );
            for (let n = 1; n < e.length; n++)
              this.editorConnection.sendWarning(
                t.name,
                e[n],
                "multiple-visual-roots-warning",
                {
                  message:
                    "This node is detached from the main node tree<br>and won't be rendered",
                  level: "info",
                }
              );
          }
        }
        dispose() {
          this.graphModel.getAllComponents().forEach((t) => {
            t.removeListenersWithRef(this);
          }),
            this.graphModel.removeListenersWithRef(this);
        }
      }
      const jr = {
        ports: [
          {
            name: "htmlTitle",
            displayName: "Title",
            group: "General",
            plug: "input",
            type: "string",
            default: "Noodl Viewer",
            tooltip: "The title that web browsers show",
            ignoreInExport: !0,
          },
          {
            name: "headCode",
            displayName: "Head Code",
            group: "Custom Code",
            plug: "input",
            type: { name: "string", codeeditor: "html" },
            tooltip: "Add custom code to the &lt;head&gt; tag",
            ignoreInExport: !0,
          },
          {
            name: "navigationPathType",
            displayName: "URL Path Type",
            group: "Navigation",
            plug: "input",
            type: {
              name: "enum",
              enums: [
                { label: "Hash", value: "hash" },
                { label: "Path", value: "path" },
              ],
            },
            default: "hash",
          },
          {
            name: "bodyScroll",
            displayName: "Body Scroll",
            group: "Experimental features",
            plug: "input",
            type: { name: "boolean" },
            tooltip: "Changes so the &lt;body&gt; tag will scroll by default",
          },
          {
            name: "repeaterDisabledWhenUnmounted",
            displayName: "Disable when unmounted",
            group: "Experimental features - Repeater",
            plug: "input",
            type: { name: "boolean" },
            tooltip: "Repeater will only create components when it's mounted",
          },
          {
            name: "repeaterCreateComponentsAsync",
            displayName: "Create asynchronously",
            group: "Experimental features - Repeater",
            plug: "input",
            type: { name: "boolean" },
            tooltip:
              "Repeater items will be created in chunks to keep UI responsive",
          },
        ],
      };
      function Mr(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function Fr(t) {
        for (var e = 1; e < arguments.length; e++) {
          var n = null != arguments[e] ? arguments[e] : {};
          e % 2
            ? Mr(Object(n), !0).forEach(function (e) {
                Vr(t, e, n[e]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
            : Mr(Object(n)).forEach(function (e) {
                Object.defineProperty(
                  t,
                  e,
                  Object.getOwnPropertyDescriptor(n, e)
                );
              });
        }
        return t;
      }
      function Vr(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      class Lr extends e().Component {
        constructor(t) {
          super(t), (this.state = { popups: [] });
          const { noodlRuntime: e } = t;
          if (
            ((this.runningDeployed = void 0 !== this.props.projectData),
            (this.focusedNoodlNodes = []),
            (e.context.setNodeFocused = this.setNodeFocused.bind(this)),
            e.setDebugInspectorsEnabled(
              -1 !== document.location.href.indexOf("forceDebugger=true")
            ),
            e.context.setPopupCallbacks({
              onShow: (t) => {
                const n = this.state.popups.concat([t]);
                e.getProjectSettings().bodyScroll &&
                  1 === n.length &&
                  ((document.body.style.width =
                    document.body.clientWidth + "px"),
                  (document.body.style.top = `-${window.scrollY}px`),
                  (document.body.style.position = "fixed")),
                  this.setState({ popups: n });
              },
              onClose: (t) => {
                const n = this.state.popups.filter((e) => e !== t);
                if (
                  (this.setState({ popups: n }),
                  e.getProjectSettings().bodyScroll && 0 === n.length)
                ) {
                  const t = document.body.style.top;
                  (document.body.style.position = ""),
                    (document.body.style.top = ""),
                    (document.body.style.width = "100%"),
                    window.scrollTo(0, -1 * parseInt(t || "0"));
                }
              },
            }),
            (function (t) {
              [
                n(9066),
                n(9283),
                n(2913),
                n(5784),
                n(483),
                n(1972),
                n(4212),
                n(5575),
                n(6506),
                n(8471),
                n(4388),
                n(642),
                n(6496),
                n(2426),
                n(3606),
                n(5178),
                n(3099),
                n(6256),
                n(4417),
                n(5617),
                n(4419),
                n(6534),
                n(1056),
                n(6306),
                n(6023),
                n(2863),
                n(3130),
                n(4540),
                n(9600),
                n(3711),
                n(782),
                n(7540),
                n(5146),
                n(181),
                n(4905),
                n(4614),
                n(1238),
                n(874),
                n(7826),
                n(6378),
                n(437),
                n(2814),
                n(7928),
                n(5222),
                n(705),
                n(3301),
                n(9855),
                n(7538),
                n(4195),
                n(2458),
                n(3315),
                n(8115),
                n(8070),
                n(2758),
                n(960),
                n(619),
                n(2784),
                n(4464),
                n(7180),
                n(7270),
                n(7947),
                n(8592),
                n(9809),
                n(394),
                n(461),
                n(6181),
                n(3752),
                n(8604),
                n(6709),
                n(9752),
                n(3108),
                n(8818),
                n(4296),
                n(3029),
                n(5522),
                n(1787),
                n(6436),
                n(3026),
                n(1626),
                n(7457),
                n(6136),
                n(9504),
                n(2722),
                n(3678),
                n(2715),
                n(4506),
                n(4082),
                n(7569),
                n(3728),
                n(259),
                n(6645),
              ].forEach(function (e) {
                t.registerNode(e);
              }),
                t.registerNode(Y()),
                t.registerNode(nn),
                t.registerNode(pn),
                t.registerNode(mn),
                t.registerNode(Mn),
                t.registerNode(Nn),
                t.registerNode(Dn),
                t.registerNode(Rr),
                t.registerNode(ni),
                t.registerNode(Eo),
                t.registerNode(Mo),
                t.registerNode(zo),
                t.registerNode(Go),
                t.registerNode(nr),
                t.registerNode(yr),
                t.registerNode(cr),
                t.registerNode(xr),
                t.registerNode(Or),
                t.registerNode(hi),
                t.registerNode(Oi),
                t.registerNode(Pi),
                t.registerNode(ji),
                t.registerNode(Wi),
                t.registerNode(ro),
                t.registerNode(go),
                t.registerNode(Hn),
                t.registerNode(Xn),
                t.registerNode(ei);
            })(e),
            (function (t) {
              (window.Noodl.getProjectSettings = t.getProjectSettings.bind(t)),
                (window.Noodl.getMetaData = t.getMetaData.bind(t)),
                (window.Noodl.Collection = window.Noodl.Array = n(266)),
                (window.Noodl.Model = window.Noodl.Object = n(8750)),
                (window.Noodl.Variables = window.Noodl.Object.get(
                  "--ndl--global-variables"
                )),
                (window.Noodl.Events = window.Noodl.eventEmitter =
                  t.context.eventSenderEmitter),
                (window.Noodl.Arrays = new Proxy(window.Noodl.Array, {
                  get: (t, e, n) => Noodl.Array.get(e),
                  set(t, e, n) {
                    if (!Array.isArray(n))
                      throw new Error(
                        "Cannot assign non array value to array with id " + e
                      );
                    Noodl.Array.get(e).set(n);
                  },
                })),
                (window.Noodl.Objects = new Proxy(window.Noodl.Object, {
                  get: (t, e, n) => Noodl.Object.get(e),
                  set(t, e, n) {
                    Noodl.Object.get(e).setAll(n);
                  },
                }));
            })(e),
            e.setProjectSettings(jr),
            e.setProjectPatchGenerators(H),
            this.props.noodlModules)
          )
            for (const t of this.props.noodlModules) {
              if (t.reactNodes) {
                const e = [];
                for (const n of t.reactNodes) e.push(W(n));
                const n = t.nodes || [];
                t.nodes = n.concat(e);
              }
              e.registerModule(t);
            }
          e.eventEmitter.on("rootComponentUpdated", () => {
            requestAnimationFrame(() => this.forceUpdate());
          }),
            e.graphModel.on("projectSettingsChanged", (t) => {
              t.bodyScroll
                ? document.body.classList.add("body-scroll")
                : document.body.classList.remove("body-scroll");
            }),
            (this.styles = new q({
              graphModel: e.graphModel,
              getNodeScope: () =>
                e.context.rootComponent && e.context.rootComponent.nodeScope,
              nodeRegister: e.context.nodeRegister,
            })),
            (e.context.styles = this.styles),
            (this.state.waitingForExport = !this.runningDeployed),
            this.runningDeployed
              ? (this.props.noodlRuntime.setData(this.props.projectData),
                setTimeout(() => {
                  const t = Object.keys(this.props.projectData.componentIndex);
                  this.props.noodlRuntime.prefetchBundles(t, 3);
                }, 2e3))
              : (e.graphModel.on("editorImportComplete", () => {
                  this.setState({ waitingForExport: !1 });
                }),
                this.connectToEditor()),
            (this.focusedNoodlNodes = []);
        }
        connectToEditor() {
          const { noodlRuntime: t } = this.props,
            e = (
              location.protocol +
              "//" +
              location.host +
              location.pathname +
              (location.search ? location.search : "")
            ).replace("http", "ws");
          t.connectToEditor(e),
            (this.highlightedNodes = new Map()),
            (this.isUpdatingHighlights = !1),
            (this.inspector = new z({
              onDisableHighlight: () => this.disableHighlight(),
              onHighlight: (t) => this.highlightNodesWithId(t),
              onInspect: (t) => {
                this.inspector.disable(),
                  this.props.noodlRuntime.editorConnection.sendInspectId(t);
              },
            })),
            t.editorConnection.on("hoverStart", (t) => {
              this.highlightNodesWithId(t);
            }),
            t.editorConnection.on("hoverEnd", (t) => {
              this.disableHighlight();
            }),
            t.editorConnection.on("inspectStart", () => {
              this.inspector.enable({ blockMouseEvents: !0 });
            }),
            t.editorConnection.on("inspectEnd", () => {
              this.inspector.disable();
            }),
            t.editorConnection.on("inspectEnd", () => {
              this.inspector.disable();
            }),
            t.editorConnection.on("debuggingEnabledChanged", (e) => {
              t.setDebugInspectorsEnabled(e);
            }),
            (this.graphWarnings = new Ar(t.graphModel, t.editorConnection));
        }
        setNodeFocused(t, e) {
          if (e && -1 === this.focusedNoodlNodes.indexOf(t))
            this.focusedNoodlNodes
              .filter((e) => !e.contains(t))
              .forEach((t) => {
                t._blur();
              }),
              t._focus(),
              this.focusedNoodlNodes.push(t);
          else if (!e) {
            const e = this.focusedNoodlNodes.indexOf(t);
            if (-1 !== e) return;
            t._blur(),
              this.focusedNoodlNodes
                .filter((e) => e.contains(t))
                .forEach((t) => {
                  t._blur();
                }),
              this.focusedNoodlNodes.splice(e, 1);
          }
        }
        onClickCapture(t) {
          const e = [];
          let n = t.target;
          for (; n; )
            n.noodlNode && n.noodlNode._focus && e.push(n.noodlNode),
              (n = n.parentNode);
          this.focusedNoodlNodes
            .filter((t) => -1 === e.indexOf(t))
            .forEach((t) => t._blur()),
            e
              .filter((t) => -1 === this.focusedNoodlNodes.indexOf(t))
              .forEach((t) => t._focus()),
            (this.focusedNoodlNodes = e);
        }
        render() {
          const t = this.props.noodlRuntime.rootComponent;
          if (this.state.waitingForExport) return null;
          if (!t)
            return this.runningDeployed
              ? null
              : e().createElement(
                  "div",
                  {
                    style: {
                      overflowY: "auto",
                      padding: "24px",
                      fontFamily: "Open Sans",
                      fontSize: "16px",
                      width: "100vw",
                      height: "100vh",
                      backgroundColor: "#F57569",
                    },
                  },
                  e().createElement(
                    "div",
                    {
                      style: {
                        marginBottom: "50px",
                        fontWeight: "bold",
                        display: "flex",
                        alignItems: "center",
                      },
                    },
                    e().createElement("span", null, "ERROR"),
                    e().createElement("img", {
                      src: "ndl_assets/noodl-logo-black.svg",
                      style: { marginLeft: "auto" },
                    })
                  ),
                  e().createElement(
                    "div",
                    {
                      style: {
                        margin: "0 auto",
                        alignItems: "center",
                        display: "flex",
                        flexDirection: "column",
                      },
                    },
                    e().createElement(
                      "div",
                      {
                        style: {
                          fontSize: "24px",
                          textAlign: "center",
                          marginBottom: "50px",
                        },
                      },
                      "No ",
                      e().createElement("img", {
                        src: "ndl_assets/home-icon.svg",
                        style: { marginRight: "-6px" },
                      }),
                      " ",
                      e().createElement(
                        "span",
                        { style: { fontWeight: "bold" } },
                        "HOME"
                      ),
                      " component selected"
                    ),
                    e().createElement(
                      "div",
                      { style: { textAlign: "center" } },
                      "Click ",
                      e().createElement(
                        "span",
                        { style: { fontWeight: "bold" } },
                        "Make home"
                      ),
                      " as shown below."
                    ),
                    e().createElement("img", {
                      style: { marginTop: "24px" },
                      srcSet: "ndl_assets/make-home-instructions@2x.png 2x",
                    })
                  )
                );
          if (this.props.noodlRuntime.getProjectSettings().bodyScroll) {
            const n = {
              margin: 0,
              padding: 0,
              minHeight: "100vh",
              alignSelf: "stretch",
              display: "flex",
              flexDirection: "column",
            };
            return e().createElement(
              "div",
              { style: n, onClickCapture: (t) => this.onClickCapture(t) },
              e().createElement(
                "div",
                { style: Fr(Fr({}, n), {}, { isolation: "isolate" }) },
                t.render()
              ),
              this.state.popups.length
                ? e().createElement(
                    "div",
                    { style: Fr(Fr({}, n), {}, { isolation: "isolate" }) },
                    this.state.popups.map((t) => t.render())
                  )
                : null
            );
          }
          return e().createElement(
            "div",
            {
              style: {
                margin: 0,
                padding: 0,
                overflow: "hidden",
                width: "100%",
                height: "100%",
              },
              onClickCapture: (t) => this.onClickCapture(t),
            },
            t.render(),
            this.state.popups.map((t) => t.render())
          );
        }
        updateHighlights() {
          for (const t of this.highlightedNodes.entries()) {
            const e = t[0].getRef() && o().findDOMNode(t[0].getRef());
            if (!e) {
              this.highlightedNodes.delete(t[0]),
                this.highlightRootDiv &&
                  this.highlightRootDiv.removeChild(t[1]);
              continue;
            }
            const n = e.getBoundingClientRect(),
              i = t[1];
            (i.style.transform = `translateX(${n.x}px) translateY(${n.y}px)`),
              (i.style.width = n.width + "px"),
              (i.style.height = n.height + "px");
          }
          (this.isUpdatingHighlights = this.highlightedNodes.size > 0),
            this.isUpdatingHighlights &&
              requestAnimationFrame(this.updateHighlights.bind(this));
        }
        highlightNodesWithId(t) {
          if (!this.highlightRootDiv) {
            const t = document.createElement("div");
            (t.style.width = "100vw"),
              (t.style.height = "100vh"),
              (t.style.top = "0"),
              (t.style.left = "0"),
              (t.style.overflow = "hidden"),
              (t.style.position = "fixed"),
              (t.style.zIndex = "1000000000"),
              (t.style.pointerEvents = "none"),
              document.querySelector("#root").appendChild(t),
              (this.highlightRootDiv = t);
          }
          const e = (() => {
            const { noodlRuntime: e } = this.props;
            return e.rootComponent
              ? e.rootComponent.nodeScope.getNodesWithIdRecursive(t)
              : [];
          })()
            .filter((t) => t.getRef)
            .filter((t) => !this.highlightedNodes.has(t));
          for (const t of e) {
            const e = document.createElement("div");
            (e.style.position = "absolute"),
              (e.style.top = "0"),
              (e.style.left = "0"),
              (e.style.backgroundColor = "#8BC6E9"),
              (e.style.opacity = "0.6"),
              this.highlightRootDiv.appendChild(e),
              this.highlightedNodes.set(t, e);
          }
          this.highlightedNodes.size > 0 &&
            !this.isUpdatingHighlights &&
            this.updateHighlights();
        }
        disableHighlight() {
          for (const t of this.highlightedNodes) {
            const e = t[1];
            e && this.highlightRootDiv.removeChild(e);
          }
          this.highlightedNodes.clear();
        }
      }
      var Ur = n(5855),
        Br = n.n(Ur);
      function Wr(t, e) {
        var n = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(t);
          e &&
            (i = i.filter(function (e) {
              return Object.getOwnPropertyDescriptor(t, e).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function zr(t) {
        for (var e = 1; e < arguments.length; e++) {
          var n = null != arguments[e] ? arguments[e] : {};
          e % 2
            ? Wr(Object(n), !0).forEach(function (e) {
                Hr(t, e, n[e]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n))
            : Wr(Object(n)).forEach(function (e) {
                Object.defineProperty(
                  t,
                  e,
                  Object.getOwnPropertyDescriptor(n, e)
                );
              });
        }
        return t;
      }
      function Hr(t, e, n) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = n),
          t
        );
      }
      String.prototype.matchAll ||
        (String.prototype.matchAll = function (t) {
          var e = new RegExp(t, "g"),
            n = [],
            i = this.match(e);
          for (let e in i) {
            var o = i[e];
            n[e] = o.match(new RegExp(t));
          }
          return n;
        });
      const qr = {
          platform: {
            requestUpdate: (t) => window.requestAnimationFrame(t),
            getCurrentTime: () => window.performance.now(),
            objectToString: (t) => JSON.stringify(t, null, 2),
          },
        },
        $r = {
          render(t, n) {
            const i = new (Br())(zr({}, qr));
            o().render(
              e().createElement(Lr, { noodlRuntime: i, noodlModules: n }, null),
              t
            );
          },
          renderDeployed(t, e, n) {
            o().render(this.createElement(e, n), t);
          },
          createElement(t, n) {
            const i = new (Br())(zr(zr({}, qr), {}, { runDeployed: !0 }));
            return e().createElement(
              Lr,
              { noodlRuntime: i, noodlModules: t, projectData: n },
              null
            );
          },
        },
        Yr = document.getElementById("root");
      $r.renderDeployed(Yr, __noodl_modules, window.projectData);
    })();
})();
